{
  "address": "0x03b8b53c84eB710BB7fDe2dE46BBb400085368c2",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "crpFactory",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "balancerFactory",
              "type": "address"
            },
            {
              "internalType": "contract RedeemableERC20Factory",
              "name": "redeemableERC20Factory",
              "type": "address"
            },
            {
              "internalType": "contract SeedERC20Factory",
              "name": "seedERC20Factory",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "creatorFundsReleaseTimeout",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxRaiseDuration",
              "type": "uint256"
            }
          ],
          "internalType": "struct TrustConstructionConfig",
          "name": "config_",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Implementation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "child",
          "type": "address"
        }
      ],
      "name": "NewChild",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data_",
          "type": "bytes"
        }
      ],
      "name": "createChild",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "reserve",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "reserveInit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialValuation",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "finalValuation",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minimumTradingDuration",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "minimumCreatorRaise",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "seederFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "redeemInit",
              "type": "uint256"
            }
          ],
          "internalType": "struct TrustConfig",
          "name": "trustConfig_",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                },
                {
                  "internalType": "address",
                  "name": "distributor",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "initialSupply",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ERC20Config",
              "name": "erc20Config",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "tier",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "minimumTier",
              "type": "uint256"
            }
          ],
          "internalType": "struct TrustRedeemableERC20Config",
          "name": "trustRedeemableERC20Config_",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "seeder",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "cooldownDuration",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                },
                {
                  "internalType": "address",
                  "name": "distributor",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "initialSupply",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ERC20Config",
              "name": "erc20Config",
              "type": "tuple"
            }
          ],
          "internalType": "struct TrustSeedERC20Config",
          "name": "trustSeedERC20Config_",
          "type": "tuple"
        }
      ],
      "name": "createChildTyped",
      "outputs": [
        {
          "internalType": "contract Trust",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "implementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "maybeChild_",
          "type": "address"
        }
      ],
      "name": "isChild",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2cdfd03b9402b824cdcf805bbe8680a498c352acef2e06fcde7ca758f20e0bf1",
  "receipt": {
    "to": null,
    "from": "0xbF334f8BD1420a1CbFE15407f73919424934B1B3",
    "contractAddress": "0x03b8b53c84eB710BB7fDe2dE46BBb400085368c2",
    "transactionIndex": 20,
    "gasUsed": "5804033",
    "logsBloom": "0x
    "blockHash": "0xf59cb06e8a6ab5ca319166bc1d7f8ceaf8ab8854d428616531e8c317fa8b7147",
    "transactionHash": "0x2cdfd03b9402b824cdcf805bbe8680a498c352acef2e06fcde7ca758f20e0bf1",
    "logs": [
      {
        "transactionIndex": 20,
        "blockNumber": 25749612,
        "transactionHash": "0x2cdfd03b9402b824cdcf805bbe8680a498c352acef2e06fcde7ca758f20e0bf1",
        "address": "0xEa2E8cF363561F890d5E1423Ed58BDFf48608473",
        "topics": [
          "0x3b46443002e892688873cf730dd0855e18094203835008979109e8402f3012fc"
        ],
        "data": "0x00000000000000000000000003b8b53c84eb710bb7fde2de46bbb400085368c20000000000000000000000003cf093cabedb27c4d6cb9b1749853878a00270c300000000000000000000000068d114302d9f600e7fb3bf7ac4bbb5b4f76648dc000000000000000000000000a3458fe8966280507ac613c3e4393edf1ac98cea0000000000000000000000000ff50e7ef2c80db0178b3ab7886a767239d3be750000000000000000000000004d61f1bc79e7ce3e6b25f1b858d4aa3d8e51e3da00000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000064",
        "logIndex": 52,
        "blockHash": "0xf59cb06e8a6ab5ca319166bc1d7f8ceaf8ab8854d428616531e8c317fa8b7147"
      },
      {
        "transactionIndex": 20,
        "blockNumber": 25749612,
        "transactionHash": "0x2cdfd03b9402b824cdcf805bbe8680a498c352acef2e06fcde7ca758f20e0bf1",
        "address": "0x03b8b53c84eB710BB7fDe2dE46BBb400085368c2",
        "topics": [
          "0x7fac34ecf0b1b374cd9659e3d17db602659d53f1162b1f20142e6c02694aed70"
        ],
        "data": "0x000000000000000000000000bf334f8bd1420a1cbfe15407f73919424934b1b3000000000000000000000000ea2e8cf363561f890d5e1423ed58bdff48608473",
        "logIndex": 53,
        "blockHash": "0xf59cb06e8a6ab5ca319166bc1d7f8ceaf8ab8854d428616531e8c317fa8b7147"
      },
      {
        "transactionIndex": 20,
        "blockNumber": 25749612,
        "transactionHash": "0x2cdfd03b9402b824cdcf805bbe8680a498c352acef2e06fcde7ca758f20e0bf1",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000bf334f8bd1420a1cbfe15407f73919424934b1b3",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000ce335f5e11c3ee00000000000000000000000000000000000000000000000046a4afb3a24fd43d000000000000000000000000000000000000000000000dc58f57949dcc8430a300000000000000000000000000000000000000000000000045d67c54443e104f000000000000000000000000000000000000000000000dc59025c7fd2a95f491",
        "logIndex": 54,
        "blockHash": "0xf59cb06e8a6ab5ca319166bc1d7f8ceaf8ab8854d428616531e8c317fa8b7147"
      }
    ],
    "blockNumber": 25749612,
    "cumulativeGasUsed": "9161119",
    "status": 1,
    "byzantium": true
  },
  "args": [
    {
      "crpFactory": "0x68d114302d9F600e7FB3bF7aC4BBb5B4F76648dc",
      "balancerFactory": "0x3CF093CABEDB27C4d6Cb9b1749853878a00270C3",
      "redeemableERC20Factory": "0xa3458FE8966280507Ac613c3E4393eDF1AC98CEA",
      "seedERC20Factory": "0x0ff50e7ef2c80db0178B3ab7886a767239d3bE75",
      "creatorFundsReleaseTimeout": 100,
      "maxRaiseDuration": 100
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "5f2e3cc7f2e94f1d53da50cff8116e87",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"crpFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"balancerFactory\",\"type\":\"address\"},{\"internalType\":\"contract RedeemableERC20Factory\",\"name\":\"redeemableERC20Factory\",\"type\":\"address\"},{\"internalType\":\"contract SeedERC20Factory\",\"name\":\"seedERC20Factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"creatorFundsReleaseTimeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRaiseDuration\",\"type\":\"uint256\"}],\"internalType\":\"struct TrustConstructionConfig\",\"name\":\"config_\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Implementation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"child\",\"type\":\"address\"}],\"name\":\"NewChild\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"createChild\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"reserve\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reserveInit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialValuation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finalValuation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumTradingDuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minimumCreatorRaise\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seederFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemInit\",\"type\":\"uint256\"}],\"internalType\":\"struct TrustConfig\",\"name\":\"trustConfig_\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"distributor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC20Config\",\"name\":\"erc20Config\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"tier\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minimumTier\",\"type\":\"uint256\"}],\"internalType\":\"struct TrustRedeemableERC20Config\",\"name\":\"trustRedeemableERC20Config_\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"seeder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cooldownDuration\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"distributor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC20Config\",\"name\":\"erc20Config\",\"type\":\"tuple\"}],\"internalType\":\"struct TrustSeedERC20Config\",\"name\":\"trustSeedERC20Config_\",\"type\":\"tuple\"}],\"name\":\"createChildTyped\",\"outputs\":[{\"internalType\":\"contract Trust\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maybeChild_\",\"type\":\"address\"}],\"name\":\"isChild\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Factory for creating and registering new Trust contracts.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"config_\":\"All configuration for the `TrustFactory`.\"}},\"createChild(bytes)\":{\"params\":{\"data_\":\"Encoded data to pass down to child contract constructor.\"},\"returns\":{\"_0\":\"New child contract address.\"}},\"createChildTyped((address,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256),((string,string,address,uint256),address,uint256),(address,uint256,(string,string,address,uint256)))\":{\"params\":{\"trustConfig_\":\"Trust constructor configuration.\",\"trustRedeemableERC20Config_\":\"RedeemableERC20 constructor configuration.\",\"trustSeedERC20Config_\":\"SeedERC20 constructor configuration.\"},\"returns\":{\"_0\":\"New Trust child contract address.\"}},\"isChild(address)\":{\"params\":{\"maybeChild_\":\"Address of child contract to look up.\"},\"returns\":{\"_0\":\"Returns `true` if address is a contract created by this contract factory, otherwise `false`.\"}}},\"title\":\"TrustFactory\",\"version\":1},\"userdoc\":{\"events\":{\"Implementation(address,address)\":{\"notice\":\"Factories that clone a template contract MUST emit an event any time they set the implementation being cloned. Factories that deploy new contracts without cloning do NOT need to emit this.\"},\"NewChild(address,address)\":{\"notice\":\"Whenever a new child contract is deployed, a `NewChild` event containing the new child contract address MUST be emitted.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Build the reference implementation to clone for each child.\"},\"createChild(bytes)\":{\"notice\":\"Implements `IFactory`. Calls the `_createChild` hook that inheriting contracts must override. Registers child contract address such that `isChild` is `true`. Emits `NewChild` event.\"},\"createChildTyped((address,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256),((string,string,address,uint256),address,uint256),(address,uint256,(string,string,address,uint256)))\":{\"notice\":\"Allows calling `createChild` with TrustConfig, TrustRedeemableERC20Config and TrustRedeemableERC20PoolConfig parameters. Can use original Factory `createChild` function signature if function parameters are already encoded.\"},\"implementation()\":{\"notice\":\"Template contract to clone. Deployed by the constructor.\"},\"isChild(address)\":{\"notice\":\"Implements `IFactory`. Checks if address is registered as a child contract of this factory.\"}},\"notice\":\"The `TrustFactory` contract is the only contract that the deployer uses to deploy all contracts for a single project fundraising event. It takes references to `RedeemableERC20Factory`, `RedeemableERC20PoolFactory` and `SeedERC20Factory` contracts, and builds a new `Trust` contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/trust/TrustFactory.sol\":\"TrustFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x7160017c8d2373a33a6d7e45368d60d7d582ea1695a098de8356c94dab2ec3ce\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6777f3fccb5dab95a9088ef62c41bee0198fd92e50d7c94f0e3733788af4079e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20BurnableUpgradeable is Initializable, ContextUpgradeable, ERC20Upgradeable {\\n    function __ERC20Burnable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC20Burnable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xea2c6f9d434127bf36b1e3e5ebaaf6d28a64dbaeea560508e570014e905a5ad2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x1cc0efb01cbf008b768fd7b334786a6e358809198bb7e67f1c530af4957c6a21\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xdadd41acb749920eccf40aeaa8d291adf9751399a7343561bad13e7a8d99be0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"contracts/cooldown/Cooldown.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\n/// @title Cooldown\\n/// @notice `Cooldown` is a base contract that rate limits functions on\\n/// the implementing contract per `msg.sender`.\\n///\\n/// Each time a function with the `onlyAfterCooldown` modifier is called the\\n/// `msg.sender` must wait N blocks before calling any modified function.\\n///\\n/// This does nothing to prevent sybils who can generate an arbitrary number of\\n/// `msg.sender` values in parallel to spam a contract.\\n///\\n/// `Cooldown` is intended to prevent rapid state cycling to grief a contract,\\n/// such as rapidly locking and unlocking a large amount of capital in the\\n/// `SeedERC20` contract.\\n///\\n/// Requiring a lock/deposit of significant economic stake that sybils will not\\n/// have access to AND applying a cooldown IS a sybil mitigation. The economic\\n/// stake alone is NOT sufficient if gas is cheap as sybils can cycle the same\\n/// stake between each other. The cooldown alone is NOT sufficient as many\\n/// sybils can be created, each as a new `msg.sender`.\\n///\\n/// @dev Base for anything that enforces a cooldown delay on functions.\\n/// `Cooldown` requires a minimum time in blocks to elapse between actions that\\n/// cooldown. The modifier `onlyAfterCooldown` both enforces and triggers the\\n/// cooldown. There is a single cooldown across all functions per-contract\\n/// so any function call that requires a cooldown will also trigger it for\\n/// all other functions.\\n///\\n/// Cooldown is NOT an effective sybil resistance alone, as the cooldown is\\n/// per-address only. It is always possible for many accounts to be created\\n/// to spam a contract with dust in parallel.\\n/// Cooldown is useful to stop a single account rapidly cycling contract\\n/// state in a way that can be disruptive to peers. Cooldown works best when\\n/// coupled with economic stake associated with each state change so that\\n/// peers must lock capital during the cooldown. `Cooldown` tracks the first\\n/// `msg.sender` it sees for a call stack so cooldowns are enforced across\\n/// reentrant code. Any function that enforces a cooldown also has reentrancy\\n/// protection.\\ncontract Cooldown {\\n    event CooldownInitialize(address sender, uint256 cooldownDuration);\\n    event CooldownTriggered(address caller, uint256 cooldown);\\n    /// Time in blocks to restrict access to modified functions.\\n    uint256 internal cooldownDuration = 0;\\n\\n    /// Every caller has its own cooldown, the minimum block that the caller\\n    /// call another function sharing the same cooldown state.\\n    mapping(address => uint256) private cooldowns;\\n    address private caller;\\n\\n    /// Initialize the cooldown duration.\\n    /// The cooldown duration is global to the contract.\\n    /// Cooldown duration must be greater than 0.\\n    /// Cooldown duration can only be set once.\\n    /// @param cooldownDuration_ The global cooldown duration.\\n    function initializeCooldown(uint256 cooldownDuration_) internal {\\n        require(cooldownDuration_ > 0, \\\"COOLDOWN_0\\\");\\n        // Reinitialization is a bug.\\n        assert(cooldownDuration == 0);\\n        cooldownDuration = cooldownDuration_;\\n        emit CooldownInitialize(msg.sender, cooldownDuration_);\\n    }\\n\\n    /// Modifies a function to enforce the cooldown for `msg.sender`.\\n    /// Saves the original caller so that cooldowns are enforced across\\n    /// reentrant code.\\n    modifier onlyAfterCooldown() {\\n        address caller_ = caller == address(0) ? caller = msg.sender : caller;\\n        require(cooldowns[caller_] <= block.number, \\\"COOLDOWN\\\");\\n        // Every action that requires a cooldown also triggers a cooldown.\\n        uint256 cooldown_ = block.number + cooldownDuration;\\n        cooldowns[caller_] = cooldown_;\\n        emit CooldownTriggered(caller_, cooldown_);\\n        _;\\n        // Refund as much gas as we can.\\n        delete caller;\\n    }\\n}\\n\",\"keccak256\":\"0x01c089a25306837003f30b5d7e605cf10a14e776154c877c4fc6397a626ea4f7\",\"license\":\"CAL\"},\"contracts/erc20/ERC20Config.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\n/// Constructor config for standard Open Zeppelin ERC20.\\n/// @param name Name as defined by Open Zeppelin ERC20.\\n/// @param symbol Symbol as defined by Open Zeppelin ERC20.\\n/// @param distributor Distributor address of the initial supply.\\n/// MAY be zero.\\n/// @param initialSupply Initial supply to mint.\\n/// MAY be zero.\\nstruct ERC20Config {\\n    string name;\\n    string symbol;\\n    address distributor;\\n    uint256 initialSupply;\\n}\\n\",\"keccak256\":\"0xd71c17e9354e155991a6d315fc38050377f65f4a7770b146ba0070819e99c3f0\",\"license\":\"CAL\"},\"contracts/erc20/ERC20Pull.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n// solhint-disable-next-line max-line-length\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/// Constructor config for `ERC20Pull`.\\n/// @param sender Token sender to bind to `pullERC20`.\\n/// @param token ERC20 token to bind to `pullERC20`.\\nstruct ERC20PullConfig {\\n    address sender;\\n    address token;\\n}\\n\\n/// @title ERC20Pull\\n/// @notice Enables a contract to pull (transfer to self) some `IERC20` token\\n/// from a sender. Both the sender and token must be known and trusted by the\\n/// implementing contract during initialization, and cannot be changed.\\n///\\n/// This enables the `sender` to merely approve the implementing contract then\\n/// anon can call `pullERC20` to have those tokens transferred. In some cases\\n/// (e.g. distributing the proceeds of a raise) it is safer to only approve\\n/// tokens than to transfer (e.g. if there is some bug reverting transfers).\\n///\\n/// The `sender` is singular and bound at construction to avoid the situation\\n/// where EOA accounts inadvertantly \\\"infinite approve\\\" and lose their tokens.\\n/// For this reason EOA accounts are NOT supported as the `sender`. Approvals\\n/// MUST expect the `ERC20Pull` contract to take any and all tokens up to the\\n/// allowance at any moment. EOA accounts typically are not security conscious\\n/// enough to be nominated as the `sender`.\\n///\\n/// The token is singular and bound at construction to avoid the situation\\n/// where anons can force the implementing contract to call an arbitrary\\n/// external contract.\\ncontract ERC20Pull {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n\\n    /// Emitted during initialization.\\n    /// @param sender `msg.sender` of initialize.\\n    /// @param tokenSender Address that token can be pulled from.\\n    /// @param token Token that can be pulled.\\n    event ERC20PullInitialize(\\n        address sender,\\n        address tokenSender,\\n        address token\\n    );\\n\\n    /// @dev The `sender` that this contract will attempt to pull tokens from.\\n    address private sender;\\n    /// @dev The ERC20 token that this contract will attempt to pull to itself\\n    /// from `sender`.\\n    address private token;\\n\\n    /// Initialize the sender and token.\\n    /// @param config_ `ERC20PullConfig` to initialize.\\n    function initializeERC20Pull(ERC20PullConfig memory config_) internal {\\n        // Sender and token MUST be set in the config. MAY point at a known\\n        // address that cannot approve the specified token to effectively\\n        // disable pull functionality.\\n        // Sender MUST NOT be an EOA.\\n        // See https://github.com/beehive-innovation/rain-protocol/issues/254\\n        require(config_.sender.isContract(), \\\"EOA_SENDER\\\");\\n        require(config_.token != address(0), \\\"ZERO_TOKEN\\\");\\n        // Reinitialization is a bug.\\n        // We know the token is non-zero for an initialized contract so can\\n        // just check that.\\n        assert(token == address(0));\\n        sender = config_.sender;\\n        token = config_.token;\\n        emit ERC20PullInitialize(msg.sender, config_.sender, config_.token);\\n    }\\n\\n    /// Attempts to transfer `amount_` of `token` to this contract.\\n    /// Relies on `token` having been approved for at least `amount_` by the\\n    /// `sender`. Will revert if the transfer fails due to `safeTransferFrom`.\\n    /// Also relies on `token` not being malicious.\\n    /// @param amount_ The amount to attempt to pull to the implementing\\n    /// contract.\\n    function pullERC20(uint256 amount_) external {\\n        IERC20(token).safeTransferFrom(sender, address(this), amount_);\\n    }\\n}\\n\",\"keccak256\":\"0xc258d02dd862df42c60c17c3b17893814fddf65f7f4c2d532e0418020f1e6c09\",\"license\":\"CAL\"},\"contracts/erc20/ERC20Redeem.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n// solhint-disable-next-line max-line-length\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n// solhint-disable-next-line max-line-length\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\\\";\\n\\ncontract ERC20Redeem is ERC20BurnableUpgradeable {\\n    using SafeERC20 for IERC20;\\n\\n    /// Anon has burned their tokens in exchange for some treasury assets.\\n    /// Emitted once per redeemed asset.\\n    /// @param sender `msg.sender` is burning.\\n    /// @param treasuryAsset Treasury asset being sent to redeemer.\\n    /// @param redeemAmount Amount of token being burned.\\n    /// @param assetAmount Amount of treasury asset being sent.\\n    event Redeem(\\n        address sender,\\n        address treasuryAsset,\\n        uint256 redeemAmount,\\n        uint256 assetAmount\\n    );\\n\\n    /// Anon can notify the world that they are adding treasury assets to the\\n    /// contract. Indexers are strongly encouraged to ignore untrusted anons.\\n    /// @param sender `msg.sender` adding a treasury asset.\\n    /// @param asset The treasury asset being added.\\n    event TreasuryAsset(address sender, address asset);\\n\\n    /// Anon can emit a `TreasuryAsset` event to notify token holders that\\n    /// an asset could be redeemed by burning `RedeemableERC20` tokens.\\n    /// As this is callable by anon the events should be filtered by the\\n    /// indexer to those from trusted entities only.\\n    /// @param newTreasuryAsset_ The asset to log.\\n    function newTreasuryAsset(address newTreasuryAsset_) public {\\n        emit TreasuryAsset(msg.sender, newTreasuryAsset_);\\n    }\\n\\n    /// Burn tokens for a prorata share of the current treasury.\\n    ///\\n    /// The assets to be redeemed for must be specified as an array. This keeps\\n    /// the redeem functionality:\\n    /// - Gas efficient as we avoid tracking assets in storage\\n    /// - Decentralised as any user can deposit any asset to be redeemed\\n    /// - Error resistant as any individual asset reverting can be avoided by\\n    ///   redeeming againt sans the problematic asset.\\n    /// It is also a super sharp edge if someone burns their tokens prematurely\\n    /// or with an incorrect asset list. Implementing contracts are strongly\\n    /// encouraged to implement additional safety rails to prevent high value\\n    /// mistakes.\\n    /// Only \\\"vanilla\\\" erc20 token balances are supported as treasury assets.\\n    /// I.e. if the balance is changing such as due to a rebasing token or\\n    /// other mechanism then the WRONG token amounts will be redeemed. The\\n    /// redemption calculation is very simple and naive in that it takes the\\n    /// current balance of this contract of the assets being claimed via\\n    /// redemption to calculate the \\\"prorata\\\" entitlement. If the contract's\\n    /// balance of the claimed token is changing between redemptions (other\\n    /// than due to the redemption itself) then each redemption will send\\n    /// incorrect amounts.\\n    /// @param treasuryAssets_ The list of assets to redeem.\\n    /// @param redeemAmount_ The amount of redeemable token to burn.\\n    function _redeem(IERC20[] memory treasuryAssets_, uint256 redeemAmount_)\\n        internal\\n    {\\n        uint256 assetsLength_ = treasuryAssets_.length;\\n\\n        // Calculate everything before any balances change.\\n        uint256[] memory amounts_ = new uint256[](assetsLength_);\\n\\n        // The fraction of the assets we release is the fraction of the\\n        // outstanding total supply of the redeemable being burned.\\n        // Every treasury asset is released in the same proportion.\\n        // Guard against no asset redemptions and log all events before we\\n        // change any contract state or call external contracts.\\n        require(assetsLength_ > 0, \\\"EMPTY_ASSETS\\\");\\n        uint256 supply_ = IERC20(address(this)).totalSupply();\\n        uint256 amount_ = 0;\\n        for (uint256 i_ = 0; i_ < assetsLength_; i_++) {\\n            amount_ =\\n                (treasuryAssets_[i_].balanceOf(address(this)) * redeemAmount_) /\\n                supply_;\\n            require(amount_ > 0, \\\"ZERO_AMOUNT\\\");\\n            emit Redeem(\\n                msg.sender,\\n                address(treasuryAssets_[i_]),\\n                redeemAmount_,\\n                amount_\\n            );\\n            amounts_[i_] = amount_;\\n        }\\n\\n        // Burn FIRST (reentrancy safety).\\n        _burn(msg.sender, redeemAmount_);\\n\\n        // THEN send all assets.\\n        for (uint256 i_ = 0; i_ < assetsLength_; i_++) {\\n            treasuryAssets_[i_].safeTransfer(msg.sender, amounts_[i_]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x01e0e94c9dabf2a7784af0ec801b0b5f5696821b205bb06117fb31572fb4fc3e\",\"license\":\"CAL\"},\"contracts/escrow/BPoolFeeEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport {IBPool} from \\\"../pool/IBPool.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IConfigurableRightsPool} from \\\"../pool/IConfigurableRightsPool.sol\\\";\\nimport \\\"./TrustEscrow.sol\\\";\\n\\n/// Represents fees as they are claimed by a recipient on a per-trust basis.\\n/// Used to work around a limitation in the EVM i.e. return values must be\\n/// structured this way in a dynamic length array when bulk-claiming.\\n/// @param trust The trust that fees were claimed for.\\n/// @param claimedFees The amount of fees that were claimed.\\n/// This is denominated in the token claimed.\\nstruct ClaimedFees {\\n    address trust;\\n    uint256 claimedFees;\\n}\\n\\n/// Escrow contract for fees IN ADDITION TO BPool fees.\\n/// The goal is to set aside some revenue for curators, infrastructure, and\\n/// anyone else who can convince an end-user to part with some extra tokens and\\n/// gas for escrow internal accounting on top of the basic balancer swap. This\\n/// is Rain's \\\"pay it forward\\\" revenue model, rather than trying to capture and\\n/// pull funds back to the protocol somehow. The goal is to incentivise many\\n/// ecosystems that are nourished by Rain but are not themselves Rain.\\n///\\n/// Technically this might look like a website/front-end prefilling an address\\n/// the maintainers own and some nominal fee like 1% of each trade. The fee is\\n/// in absolute numbers on this contract but a GUI is free to calculate this\\n/// value in any way it deems appropriate. The assumption is that end-users of\\n/// a GUI will not manually alter the fee, because if they would do that it\\n/// makes more sense that they would simply call the balancer swap function\\n/// directly and avoid even paying the gas required by the escrow contract.\\n///\\n/// Balancer pool fees natively set aside prorata for LPs ONLY. Our `Trust`\\n/// requires that 100% of the LP tokens and token supply are held by the\\n/// managing pool contract that the `Trust` deploys. Naively we could set a\\n/// fee on the balancer pool and have the contract that owns the LP tokens\\n/// attempt to divvy the volume fees out to FEs from some registry. The issue\\n/// is that the Balancer contracts are all outside our control so we have no\\n/// way to prevent a malicious end-user or FE lying about how they interact\\n/// with the Balancer pool. The only way to ensure that every trade accurately\\n/// sets aside fees is to put a contract in between the buyer and the pool\\n/// that can execute the trade sans fees on the buyers's behalf.\\n///\\n/// Some important things to note about fee handling:\\n/// - Fees are NOT forwarded if the raise fails according to the Trust. Instead\\n///   they are forwarded to the redeemable token so buyers can redeem a refund.\\n/// - Fees are ONLY collected when tokens are purchased, thus contributing to\\n///   the success of a raise. When tokens are sold there are no additional fees\\n///   set aside by this escrow. Repeatedly buying/selling does NOT allow for\\n///   wash trading to claim additional fees as the user must pay the fee in\\n///   full in addition to the token spot price for every round-trip.\\n/// - ANYONE can process a claim for a recipient and/or a refund for a trust.\\n/// - The information about which trusts to claim/refund is available offchain\\n///   via the `Fee` event.\\n///\\n/// We cannot prevent FEs implementing their own smart contracts to take fees\\n/// outside the scope of the escrow, but we aren't encouraging or implementing\\n/// it for them either.\\ncontract BPoolFeeEscrow is TrustEscrow {\\n    using SafeERC20 for IERC20;\\n\\n    /// A claim has been processed for a recipient.\\n    /// ONLY emitted if non-zero fees were claimed.\\n    /// @param sender Anon `msg.sender` who processed the claim.\\n    /// @param recipient Recipient of the fees.\\n    /// @param trust Trust the fees were collected for.\\n    /// @param reserve Reserve token first reported by the `Trust`.\\n    /// @param claimedFees Amount of fees claimed.\\n    event ClaimFees(\\n        address sender,\\n        address recipient,\\n        address trust,\\n        address reserve,\\n        uint256 claimedFees\\n    );\\n\\n    /// A refund has been processed for a `Trust`.\\n    /// ONLY emitted if non-zero fees were refunded.\\n    /// @param sender Anon `msg.sender` who processed the refund.\\n    /// @param trust `Trust` the fees were refunded to.\\n    /// Fees go to the redeemable token, not the `Trust` itself.\\n    /// @param reserve Reserve token first reported by the `Trust`.\\n    /// @param redeemable Redeemable token first reported by the `Trust`.\\n    /// @param refundedFees Amount of fees refunded.\\n    event RefundFees(\\n        address sender,\\n        address trust,\\n        address reserve,\\n        address redeemable,\\n        uint256 refundedFees\\n    );\\n\\n    /// A fee has been set aside for a recipient.\\n    /// @param sender Anon `msg.sender` who sent fees.\\n    /// @param recipient Recipient of the fee.\\n    /// @param trust `Trust` the fee was set aside for.\\n    /// @param reserve Reserve token first reported by the `Trust`.\\n    /// @param redeemable Redeemable token first reported by the `Trust`.\\n    /// @param fee Amount of fee denominated in the reserve asset of the\\n    /// `Trust`.\\n    event Fee(\\n        address sender,\\n        address recipient,\\n        address trust,\\n        address reserve,\\n        address redeemable,\\n        uint256 fee\\n    );\\n\\n    /// Fees set aside under a trust for a specific recipient.\\n    /// Denominated in the reserve asset of the trust.\\n    /// There can be many recipients for a single trust.\\n    /// Fees are forwarded to each recipient when they claim. The recipient\\n    /// receives all the fees collected under a trust in a single claim.\\n    /// Fee claims are mutually exclusive with refund claims.\\n    /// trust => recipient => amount\\n    mapping(address => mapping(address => uint256)) internal fees;\\n\\n    /// Refunds for a trust are the same as the sum of all its fees.\\n    /// Denominated in the reserve asset of the trust.\\n    /// Refunds are forwarded to the raise token created by the trust.\\n    /// Refunds are mutually exclusive with any fee claims.\\n    /// All fees are forwarded to the same token address which is singular per\\n    /// trust.\\n    /// trust => amount\\n    mapping(address => uint256) internal totalFees;\\n\\n    /// Anon can pay the gas to send all claimable fees to any recipient.\\n    /// Caller is expected to infer profitable trusts for the recipient by\\n    /// parsing the event log for `Fee` events. Caller pays gas and there is no\\n    /// benefit to not claiming fees, so anon can claim for any recipient.\\n    /// Claims are processed on a per-trust basis.\\n    /// Processing a claim before the trust distribution has reached either a\\n    /// success/fail state is an error.\\n    /// Processing a claim for a failed distribution simply deletes the record\\n    /// of claimable fees for the recipient without sending tokens.\\n    /// Processing a claim for a successful distribution transfers the accrued\\n    /// fees to the recipient (and deletes the record for gas refund).\\n    /// Partial claims are NOT supported, to avoid anon griefing claims by e.g.\\n    /// claiming 95% of a recipient's value, leaving dust behind that isn't\\n    /// worth the gas to claim, but meaningfully haircut's the recipients fees.\\n    /// A 0 value claim is a noop rather than error, to make it possible to\\n    /// write a batch claim wrapper that cannot be griefed. E.g. anon claims N\\n    /// trusts and then another anon claims 1 of these trusts with higher gas,\\n    /// causing the batch transaction to revert.\\n    /// @param recipient_ The recipient of the fees.\\n    /// @param trust_ The trust to process claims for. SHOULD be a child of the\\n    /// a trusted `TrustFactory`.\\n    /// @return The fees claimed.\\n    function claimFees(address recipient_, address trust_)\\n        public\\n        returns (uint256)\\n    {\\n        EscrowStatus escrowStatus_ = escrowStatus(trust_);\\n        require(escrowStatus_ == EscrowStatus.Success, \\\"NOT_SUCCESS\\\");\\n\\n        uint256 amount_ = fees[trust_][recipient_];\\n\\n        // Zero `amount_` is noop not error.\\n        // Allows batch wrappers to be written that cannot be front run\\n        // and reverted.\\n        if (amount_ > 0) {\\n            // Guard against outputs exceeding inputs.\\n            // Last `receipient_` gets gas refund.\\n            totalFees[trust_] -= amount_;\\n\\n            // Gas refund.\\n            delete fees[trust_][recipient_];\\n\\n            address reserve_ = reserve(trust_);\\n            emit ClaimFees(msg.sender, recipient_, trust_, reserve_, amount_);\\n            IERC20(reserve_).safeTransfer(recipient_, amount_);\\n        }\\n        return amount_;\\n    }\\n\\n    /// Anon can pay the gas to refund fees for a `Trust`.\\n    /// Refunding forwards the fees as `Trust` reserve to its redeemable token.\\n    /// Refunding does NOT directly return fees to the sender nor directly to\\n    /// the `Trust`.\\n    /// The refund will forward all fees collected if and only if the raise\\n    /// failed, according to the `Trust`.\\n    /// This can be called many times but a failed raise will only have fees to\\n    /// refund once. Subsequent calls will be a noop if there is `0` refundable\\n    /// value remaining.\\n    ///\\n    /// @param trust_ The `Trust` to refund for. This SHOULD be a child of\\n    /// a trusted `TrustFactory`.\\n    /// @return The total refund.\\n    function refundFees(address trust_) external returns (uint256) {\\n        EscrowStatus escrowStatus_ = escrowStatus(trust_);\\n        require(escrowStatus_ == EscrowStatus.Fail, \\\"NOT_FAIL\\\");\\n\\n        uint256 amount_ = totalFees[trust_];\\n\\n        // Zero `amount_` is noop not error.\\n        // Allows batch wrappers to be written that cannot be front run\\n        // and reverted.\\n        if (amount_ > 0) {\\n            // Gas refund.\\n            delete totalFees[trust_];\\n\\n            address reserve_ = reserve(trust_);\\n            address token_ = token(trust_);\\n            emit RefundFees(msg.sender, trust_, reserve_, token_, amount_);\\n            IERC20(reserve_).safeTransfer(token_, amount_);\\n        }\\n        return amount_;\\n    }\\n\\n    /// Unidirectional wrapper around `swapExactAmountIn` for 'buying tokens'.\\n    /// In this context, buying tokens means swapping the reserve token IN to\\n    /// the underlying balancer pool and withdrawing the minted token OUT.\\n    ///\\n    /// The main goal is to establish a convention for front ends that drive\\n    /// traffic to a raise to collect some fee from each token purchase. As\\n    /// there could be many front ends for a single raise, and the fees are\\n    /// based on volume, the safest thing to do is to set aside the fees at the\\n    /// source in an escrow and allow each receipient to claim their fees when\\n    /// ready. This avoids issues like wash trading to siphon fees etc.\\n    ///\\n    /// The end-user 'chooses' (read: The FE sets the parameters for them) a\\n    /// recipient (the FE) and fee to be _added_ to their trade.\\n    ///\\n    /// Of course, the end-user can 'simply' bypass the `buyToken` function\\n    /// call and interact with the pool themselves, but if a client front-end\\n    /// presents this to a user it's most likely they will just use it.\\n    ///\\n    /// This function does a lot of heavy lifting:\\n    /// - Ensure the `Trust` is a child of the factory this escrow is bound to\\n    /// - Internal accounting to track fees for the fee recipient\\n    /// - Ensure the fee meets the minimum requirements of the receiver\\n    /// - Taking enough reserve tokens to cover the trade and the fee\\n    /// - Poking the weights on the underlying pool to ensure the best price\\n    /// - Performing the trade and forwading the token back to the caller\\n    ///\\n    /// Despite the additional \\\"hop\\\" with the escrow sitting between the user\\n    /// and the pool this function is similar or even cheaper gas than the\\n    /// user poking, trading and setting aside a fee as separate actions.\\n    ///\\n    /// @param feeRecipient_ The recipient of the fee as `Trust` reserve.\\n    /// @param trust_ The `Trust` to buy tokens from. This `Trust` SHOULD be\\n    /// known as a child of a trusted `TrustFactory`.\\n    /// @param fee_ The amount of the fee.\\n    /// @param reserveAmountIn_ As per balancer.\\n    /// @param minTokenAmountOut_ As per balancer.\\n    /// @param maxPrice_ As per balancer.\\n    function buyToken(\\n        address feeRecipient_,\\n        address trust_,\\n        uint256 fee_,\\n        uint256 reserveAmountIn_,\\n        uint256 minTokenAmountOut_,\\n        uint256 maxPrice_\\n    ) external returns (uint256 tokenAmountOut, uint256 spotPriceAfter) {\\n        // Zero fee makes no sense, simply call `swapExactAmountIn` directly\\n        // rather than using the escrow.\\n        require(fee_ > 0, \\\"ZERO_FEE\\\");\\n        require(escrowStatus(trust_) == EscrowStatus.Pending, \\\"ENDED\\\");\\n        fees[trust_][feeRecipient_] += fee_;\\n        totalFees[trust_] += fee_;\\n\\n        // A bad reserve could set itself up to be drained from the escrow, but\\n        // cannot interfere with other reserve balances.\\n        // e.g. rebasing reserves are NOT supported.\\n        // A bad token could fail to send itself to `msg.sender` which doesn't\\n        // hurt the escrow.\\n        // A bad crp or pool is not approved to touch escrow fees, only the\\n        // `msg.sender` funds.\\n        address reserve_ = reserve(trust_);\\n        address token_ = token(trust_);\\n        IConfigurableRightsPool crp_ = IConfigurableRightsPool(crp(trust_));\\n        address pool_ = crp_.bPool();\\n\\n        emit Fee(msg.sender, feeRecipient_, trust_, reserve_, token_, fee_);\\n\\n        crp_.pokeWeights();\\n\\n        // These two calls are to the reserve, which we do NOT know or have any\\n        // control over. Even a well known `Trust` can set a badly behaved\\n        // reserve.\\n        IERC20(reserve_).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            fee_ + reserveAmountIn_\\n        );\\n        // The pool is never approved for anything other than this swap so we\\n        // can set the allowance directly rather than increment it.\\n        IERC20(reserve_).safeApprove(pool_, reserveAmountIn_);\\n\\n        // Perform the swap sans fee.\\n        (uint256 tokenAmountOut_, uint256 spotPriceAfter_) = IBPool(pool_)\\n            .swapExactAmountIn(\\n                reserve_,\\n                reserveAmountIn_,\\n                token_,\\n                minTokenAmountOut_,\\n                maxPrice_\\n            );\\n        // Return the result of the swap to `msg.sender`.\\n        IERC20(token_).safeTransfer(msg.sender, tokenAmountOut_);\\n        // Mimic return signature of `swapExactAmountIn`.\\n        return ((tokenAmountOut_, spotPriceAfter_));\\n    }\\n}\\n\",\"keccak256\":\"0xb6f7d36635f4ee09486ed88fd9ff6cf1d9b43335a10fa0f0e8052f79bf80b078\",\"license\":\"CAL\"},\"contracts/escrow/SaleEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport \\\"../sale/ISale.sol\\\";\\n\\n/// Represents the 3 possible statuses an escrow could care about.\\n/// Either the escrow takes no action or consistently allows a success/fail\\n/// action.\\nenum EscrowStatus {\\n    /// The underlying `Sale` has not reached a definitive pass/fail state.\\n    /// Important this is the first item in the enum as inequality is used to\\n    /// check pending vs. pass/fail in security sensitive code.\\n    Pending,\\n    /// The underlying `Sale` distribution failed.\\n    Fail,\\n    /// The underlying `Sale` distribution succeeded.\\n    Success\\n}\\n\\n/// @title SaleEscrow\\n/// An escrow that is designed to work with untrusted `Sale` bytecode.\\n/// `escrowStatus` wraps `Sale` functions to guarantee that results do not\\n/// change. Reserve and token addresses never change for a given `Sale` and\\n/// a pass/fail result is one-way. Even if some bug in the `Sale` causes the\\n/// pass/fail status to flip, this will not result in the escrow double\\n/// spending or otherwise changing the direction that it sends funds.\\ncontract SaleEscrow {\\n    /// ISale address => reserve address.\\n    mapping(address => address) internal reserves;\\n    /// ISale address => token address.\\n    mapping(address => address) internal tokens;\\n    /// ISale address => status.\\n    mapping(address => EscrowStatus) internal escrowStatuses;\\n\\n    /// Immutable wrapper around `ISale.reserve`.\\n    /// Once a `Sale` reports a reserve address the `SaleEscrow` never asks\\n    /// again. Prevents a malicious `Sale` from changing the reserve at some\\n    /// point to break internal escrow accounting.\\n    /// @param sale_ The ISale to fetch reserve for.\\n    function reserve(address sale_) internal returns (address) {\\n        address reserve_ = reserves[sale_];\\n        if (reserve_ == address(0)) {\\n            address saleReserve_ = address(ISale(sale_).reserve());\\n            require(saleReserve_ != address(0), \\\"0_RESERVE\\\");\\n            reserves[sale_] = saleReserve_;\\n            reserve_ = saleReserve_;\\n        }\\n        return reserve_;\\n    }\\n\\n    /// Immutable wrapper around `ISale.token`.\\n    /// Once a `Sale` reports a token address the `SaleEscrow` never asks\\n    /// again. Prevents a malicious `Sale` from changing the token at some\\n    /// point to divert escrow payments after assets have already been set\\n    /// aside.\\n    /// @param sale_ The ISale to fetch token for.\\n    function token(address sale_) internal returns (address) {\\n        address token_ = tokens[sale_];\\n        if (token_ == address(0)) {\\n            address saleToken_ = address(ISale(sale_).token());\\n            require(saleToken_ != address(0), \\\"0_TOKEN\\\");\\n            tokens[sale_] = saleToken_;\\n            token_ = saleToken_;\\n        }\\n        return token_;\\n    }\\n\\n    /// Read the one-way, one-time transition from pending to success/fail.\\n    /// We never change our opinion of a success/fail outcome.\\n    /// If a buggy/malicious `ISale` somehow changes success/fail state then\\n    /// that is obviously bad as the escrow will release funds in the wrong\\n    /// direction. But if we were to change our opinion that would be worse as\\n    /// claims/refunds could potentially be \\\"double spent\\\" somehow.\\n    /// @param sale_ The sale to get the escrow status for.\\n    function escrowStatus(address sale_) internal returns (EscrowStatus) {\\n        EscrowStatus escrowStatus_ = escrowStatuses[sale_];\\n        // Short circuit and ignore the `ISale` if we previously saved a value.\\n        if (escrowStatus_ > EscrowStatus.Pending) {\\n            return escrowStatus_;\\n        }\\n        // We have never seen a success/fail outcome so need to ask the `ISale`\\n        // for the distribution status.\\n        else {\\n            SaleStatus saleStatus_ = ISale(sale_).saleStatus();\\n            // Success maps to success.\\n            if (saleStatus_ == SaleStatus.Success) {\\n                escrowStatuses[sale_] = EscrowStatus.Success;\\n                return EscrowStatus.Success;\\n            }\\n            // Fail maps to fail.\\n            else if (saleStatus_ == SaleStatus.Fail) {\\n                escrowStatuses[sale_] = EscrowStatus.Fail;\\n                return EscrowStatus.Fail;\\n            }\\n            // Everything else is still pending.\\n            else {\\n                return EscrowStatus.Pending;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xea7de87cf6adb5eeca906b72407650b01a0de09d866b8af5b94e77970fe0f1bd\",\"license\":\"CAL\"},\"contracts/escrow/TrustEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport \\\"./SaleEscrow.sol\\\";\\nimport \\\"../trust/Trust.sol\\\";\\n\\n/// @title TrustEscrow\\n/// An escrow that is designed to work with untrusted `Trust` bytecode.\\n/// `escrowStatus` wraps `Trust` functions to guarantee that results do not\\n/// change. Reserve and token addresses never change for a given `Trust` and\\n/// a pass/fail result is one-way. Even if some bug in the `Trust` causes the\\n/// pass/fail status to flip, this will not result in the escrow double\\n/// spending or otherwise changing the direction that it sends funds.\\ncontract TrustEscrow is SaleEscrow {\\n    /// Trust address => CRP address.\\n    mapping(address => address) internal crps;\\n\\n    /// Immutable wrapper around `Trust.crp`.\\n    /// Once a `Trust` reports a crp address the `TrustEscrow` never asks\\n    /// again. Prevents a malicious `Trust` from changing the pool at some\\n    /// point to attack traders.\\n    /// @param trust_ The trust to fetch reserve for.\\n    function crp(address trust_) internal returns (address) {\\n        address crp_ = crps[trust_];\\n        if (crp_ == address(0)) {\\n            address trustCrp_ = address(Trust(trust_).crp());\\n            require(trustCrp_ != address(0), \\\"0_CRP\\\");\\n            crps[trust_] = trustCrp_;\\n            crp_ = trustCrp_;\\n        }\\n        return crp_;\\n    }\\n}\\n\",\"keccak256\":\"0x9940de7d979eafac2c3fa2a6ae4666e6b2bae0fed8c44299bbfb028f2e223184\",\"license\":\"CAL\"},\"contracts/factory/Factory.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport {IFactory} from \\\"./IFactory.sol\\\";\\n// solhint-disable-next-line max-line-length\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n/// @title Factory\\n/// @notice Base contract for deploying and registering child contracts.\\nabstract contract Factory is IFactory, ReentrancyGuard {\\n    /// @dev state to track each deployed contract address. A `Factory` will\\n    /// never lie about deploying a child, unless `isChild` is overridden to do\\n    /// so.\\n    mapping(address => bool) private contracts;\\n\\n    /// Implements `IFactory`.\\n    ///\\n    /// `_createChild` hook must be overridden to actually create child\\n    /// contract.\\n    ///\\n    /// Implementers may want to overload this function with a typed equivalent\\n    /// to expose domain specific structs etc. to the compiled ABI consumed by\\n    /// tooling and other scripts. To minimise gas costs for deployment it is\\n    /// expected that the tooling will consume the typed ABI, then encode the\\n    /// arguments and pass them to this function directly.\\n    ///\\n    /// @param data_ ABI encoded data to pass to child contract constructor.\\n    function _createChild(bytes calldata data_)\\n        internal\\n        virtual\\n        returns (address);\\n\\n    /// Implements `IFactory`.\\n    ///\\n    /// Calls the `_createChild` hook that inheriting contracts must override.\\n    /// Registers child contract address such that `isChild` is `true`.\\n    /// Emits `NewChild` event.\\n    ///\\n    /// @param data_ Encoded data to pass down to child contract constructor.\\n    /// @return New child contract address.\\n    function createChild(bytes calldata data_)\\n        external\\n        virtual\\n        override\\n        nonReentrant\\n        returns (address)\\n    {\\n        // Create child contract using hook.\\n        address child_ = _createChild(data_);\\n        // Ensure the child at this address has not previously been deployed.\\n        require(!contracts[child_], \\\"DUPLICATE_CHILD\\\");\\n        // Register child contract address to `contracts` mapping.\\n        contracts[child_] = true;\\n        // Emit `NewChild` event with child contract address.\\n        emit IFactory.NewChild(msg.sender, child_);\\n        return child_;\\n    }\\n\\n    /// Implements `IFactory`.\\n    ///\\n    /// Checks if address is registered as a child contract of this factory.\\n    ///\\n    /// @param maybeChild_ Address of child contract to look up.\\n    /// @return Returns `true` if address is a contract created by this\\n    /// contract factory, otherwise `false`.\\n    function isChild(address maybeChild_)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return contracts[maybeChild_];\\n    }\\n}\\n\",\"keccak256\":\"0x1e603d9367137008af1b035b02832d86048fc5156310e9080e5d5f873c0f4846\",\"license\":\"CAL\"},\"contracts/factory/IFactory.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity ^0.8.0;\\n\\ninterface IFactory {\\n    /// Whenever a new child contract is deployed, a `NewChild` event\\n    /// containing the new child contract address MUST be emitted.\\n    /// @param sender `msg.sender` that deployed the contract (factory).\\n    /// @param child address of the newly deployed child.\\n    event NewChild(address sender, address child);\\n\\n    /// Factories that clone a template contract MUST emit an event any time\\n    /// they set the implementation being cloned. Factories that deploy new\\n    /// contracts without cloning do NOT need to emit this.\\n    /// @param sender `msg.sender` that deployed the implementation (factory).\\n    /// @param implementation address of the implementation contract that will\\n    /// be used for future clones if relevant.\\n    event Implementation(address sender, address implementation);\\n\\n    /// Creates a new child contract.\\n    ///\\n    /// @param data_ Domain specific data for the child contract constructor.\\n    /// @return New child contract address.\\n    function createChild(bytes calldata data_) external returns (address);\\n\\n    /// Checks if address is registered as a child contract of this factory.\\n    ///\\n    /// Addresses that were not deployed by `createChild` MUST NOT return\\n    /// `true` from `isChild`. This is CRITICAL to the security guarantees for\\n    /// any contract implementing `IFactory`.\\n    ///\\n    /// @param maybeChild_ Address to check registration for.\\n    /// @return `true` if address was deployed by this contract factory,\\n    /// otherwise `false`.\\n    function isChild(address maybeChild_) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x3e9ca6613b0c19d98c4e19a7586d4109e498db2cf7d6e38e34fc2d2c0dbc32e2\",\"license\":\"CAL\"},\"contracts/math/SaturatingMath.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\n/// @title SaturatingMath\\n/// @notice Sometimes we neither want math operations to error nor wrap around\\n/// on an overflow or underflow. In the case of transferring assets an error\\n/// may cause assets to be locked in an irretrievable state within the erroring\\n/// contract, e.g. due to a tiny rounding/calculation error. We also can't have\\n/// assets underflowing and attempting to approve/transfer \\\"infinity\\\" when we\\n/// wanted \\\"almost or exactly zero\\\" but some calculation bug underflowed zero.\\n/// Ideally there are no calculation mistakes, but in guarding against bugs it\\n/// may be safer pragmatically to saturate arithmatic at the numeric bounds.\\n/// Note that saturating div is not supported because 0/0 is undefined.\\nlibrary SaturatingMath {\\n    /// Saturating addition.\\n    /// @param a_ First term.\\n    /// @param b_ Second term.\\n    /// @return Minimum of a_ + b_ and max uint256.\\n    function saturatingAdd(uint256 a_, uint256 b_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        unchecked {\\n            uint256 c_ = a_ + b_;\\n            return c_ < a_ ? type(uint256).max : c_;\\n        }\\n    }\\n\\n    /// Saturating subtraction.\\n    /// @param a_ Minuend.\\n    /// @param b_ Subtrahend.\\n    /// @return Maximum of a_ - b_ and 0.\\n    function saturatingSub(uint256 a_, uint256 b_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        unchecked {\\n            return a_ > b_ ? a_ - b_ : 0;\\n        }\\n    }\\n\\n    /// Saturating multiplication.\\n    /// @param a_ First term.\\n    /// @param b_ Second term.\\n    /// @return Minimum of a_ * b_ and max uint256.\\n    function saturatingMul(uint256 a_, uint256 b_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being\\n            // zero, but the benefit is lost if 'b' is also tested.\\n            // https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a_ == 0) return 0;\\n            uint256 c_ = a_ * b_;\\n            return c_ / a_ != b_ ? type(uint256).max : c_;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9078a23bd04812d8a57e26ef51ddc7f2c6b0c65d8c7cfc2f2ebf40e6642fff88\",\"license\":\"CAL\"},\"contracts/phased/Phased.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\n/// @title Phased\\n/// @notice `Phased` is an abstract contract that defines up to `9` phases that\\n/// an implementing contract moves through.\\n///\\n/// Phase `0` is always the first phase and does not, and cannot, be set\\n/// expicitly. Effectively it is implied that phase `0` has been active\\n/// since block zero.\\n///\\n/// Each subsequent phase `1` through `8` must be scheduled sequentially and\\n/// explicitly at a block number.\\n///\\n/// Only the immediate next phase can be scheduled with `scheduleNextPhase`,\\n/// it is not possible to schedule multiple phases ahead.\\n///\\n/// Multiple phases can be scheduled in a single block if each scheduled phase\\n/// is scheduled for the current block.\\n///\\n/// Several utility functions and modifiers are provided.\\n///\\n/// One event `PhaseShiftScheduled` is emitted each time a phase shift is\\n/// scheduled (not when the scheduled phase is reached).\\n///\\n/// @dev `Phased` contracts have a defined timeline with available\\n/// functionality grouped into phases.\\n/// Every `Phased` contract starts at `0` and moves sequentially\\n/// through phases `1` to `8`.\\n/// Every `Phase` other than `0` is optional, there is no requirement\\n/// that all 9 phases are implemented.\\n/// Phases can never be revisited, the inheriting contract always moves through\\n/// each achieved phase linearly.\\n/// This is enforced by only allowing `scheduleNextPhase` to be called once per\\n/// phase.\\n/// It is possible to call `scheduleNextPhase` several times in a single block\\n/// but the `block.number` for each phase must be reached each time to schedule\\n/// the next phase.\\n/// Importantly there are events and several modifiers and checks available to\\n/// ensure that functionality is limited to the current phase.\\n/// The full history of each phase shift block is recorded as a fixed size\\n/// array of `uint32`.\\ncontract Phased {\\n    /// @dev Every phase block starts uninitialized.\\n    /// Only uninitialized blocks can be set by the phase scheduler.\\n    uint32 private constant UNINITIALIZED = type(uint32).max;\\n    /// @dev This is how many phases can fit in a `uint256`.\\n    uint256 private constant MAX_PHASE = 8;\\n\\n    /// `PhaseScheduled` is emitted when the next phase is scheduled.\\n    /// @param sender `msg.sender` that scheduled the next phase.\\n    /// @param newPhase The next phase being scheduled.\\n    /// @param scheduledBlock The block the phase will be achieved.\\n    event PhaseScheduled(\\n        address sender,\\n        uint256 newPhase,\\n        uint256 scheduledBlock\\n    );\\n\\n    /// 8 phases each as 32 bits to fit a single 32 byte word.\\n    uint32[MAX_PHASE] public phaseBlocks;\\n\\n    /// Initialize the blocks at \\\"never\\\".\\n    /// All phase blocks are initialized to `UNINITIALIZED`.\\n    /// i.e. not fallback solidity value of `0`.\\n    function initializePhased() internal {\\n        // Reinitialization is a bug.\\n        // Only need to check the first block as all blocks are about to be set\\n        // to `UNINITIALIZED`.\\n        assert(phaseBlocks[0] < 1);\\n        uint32[MAX_PHASE] memory phaseBlocks_ = [\\n            UNINITIALIZED,\\n            UNINITIALIZED,\\n            UNINITIALIZED,\\n            UNINITIALIZED,\\n            UNINITIALIZED,\\n            UNINITIALIZED,\\n            UNINITIALIZED,\\n            UNINITIALIZED\\n        ];\\n        phaseBlocks = phaseBlocks_;\\n        // 0 is always the block for implied phase 0.\\n        emit PhaseScheduled(msg.sender, 0, 0);\\n    }\\n\\n    /// Pure function to reduce an array of phase blocks and block number to a\\n    /// specific `Phase`.\\n    /// The phase will be the highest attained even if several phases have the\\n    /// same block number.\\n    /// If every phase block is after the block number then `0` is\\n    /// returned.\\n    /// If every phase block is before the block number then `MAX_PHASE` is\\n    /// returned.\\n    /// @param phaseBlocks_ Fixed array of phase blocks to compare against.\\n    /// @param blockNumber_ Determine the relevant phase relative to this block\\n    /// number.\\n    /// @return The \\\"current\\\" phase relative to the block number and phase\\n    /// blocks list.\\n    function phaseAtBlockNumber(\\n        uint32[MAX_PHASE] memory phaseBlocks_,\\n        uint256 blockNumber_\\n    ) public pure returns (uint256) {\\n        for (uint256 i_ = 0; i_ < MAX_PHASE; i_++) {\\n            if (blockNumber_ < phaseBlocks_[i_]) {\\n                return i_;\\n            }\\n        }\\n        return MAX_PHASE;\\n    }\\n\\n    /// Pure function to reduce an array of phase blocks and phase to a\\n    /// specific block number.\\n    /// `Phase.ZERO` will always return block `0`.\\n    /// Every other phase will map to a block number in `phaseBlocks_`.\\n    /// @param phaseBlocks_ Fixed array of phase blocks to compare against.\\n    /// @param phase_ Determine the relevant block number for this phase.\\n    /// @return The block number for the phase according to `phaseBlocks_`.\\n    function blockNumberForPhase(\\n        uint32[MAX_PHASE] memory phaseBlocks_,\\n        uint256 phase_\\n    ) public pure returns (uint256) {\\n        return phase_ > 0 ? phaseBlocks_[phase_ - 1] : 0;\\n    }\\n\\n    /// Impure read-only function to return the \\\"current\\\" phase from internal\\n    /// contract state.\\n    /// Simply wraps `phaseAtBlockNumber` for current values of `phaseBlocks`\\n    /// and `block.number`.\\n    function currentPhase() public view returns (uint256) {\\n        return phaseAtBlockNumber(phaseBlocks, block.number);\\n    }\\n\\n    /// Modifies functions to only be callable in a specific phase.\\n    /// @param phase_ Modified functions can only be called during this phase.\\n    modifier onlyPhase(uint256 phase_) {\\n        require(currentPhase() == phase_, \\\"BAD_PHASE\\\");\\n        _;\\n    }\\n\\n    /// Modifies functions to only be callable in a specific phase OR if the\\n    /// specified phase has passed.\\n    /// @param phase_ Modified function only callable during or after this\\n    /// phase.\\n    modifier onlyAtLeastPhase(uint256 phase_) {\\n        require(currentPhase() >= phase_, \\\"MIN_PHASE\\\");\\n        _;\\n    }\\n\\n    /// Writes the block for the next phase.\\n    /// Only uninitialized blocks can be written to.\\n    /// Only the immediate next phase relative to `currentPhase` can be written\\n    /// to. It is still required to specify the `phase_` so that it is explicit\\n    /// and clear in the calling code which phase is being moved to.\\n    /// Emits `PhaseShiftScheduled` with the phase block.\\n    /// @param phase_ The phase being scheduled.\\n    /// @param block_ The block for the phase.\\n    function schedulePhase(uint256 phase_, uint256 block_) internal {\\n        require(block.number <= block_, \\\"NEXT_BLOCK_PAST\\\");\\n        require(block_ < UNINITIALIZED, \\\"NEXT_BLOCK_UNINITIALIZED\\\");\\n        // Don't need to check for underflow as the index will be used as a\\n        // fixed array index below. Implies that scheduling phase `0` is NOT\\n        // supported.\\n        uint256 index_;\\n        unchecked {\\n            index_ = phase_ - 1;\\n        }\\n        // Bit of a hack to check the current phase against the index to\\n        // save calculating the subtraction twice.\\n        require(currentPhase() == index_, \\\"NEXT_PHASE\\\");\\n\\n        require(UNINITIALIZED == phaseBlocks[index_], \\\"NEXT_BLOCK_SET\\\");\\n\\n        // Cannot exceed UNINITIALIZED (see above) so don't need to check\\n        // overflow on downcast.\\n        unchecked {\\n            phaseBlocks[index_] = uint32(block_);\\n        }\\n\\n        emit PhaseScheduled(msg.sender, phase_, block_);\\n    }\\n}\\n\",\"keccak256\":\"0x52a0382e49b725e4ac16bc96a7eef4f90dc3014c7f4b5d0ff78d68ce479fc1e1\",\"license\":\"CAL\"},\"contracts/pool/IBPool.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity ^0.8.0;\\n\\n/// Mirrors the Balancer `BPool` functions relevant to Rain.\\n/// Much of the Balancer contract is elided intentionally.\\n/// Clients should use Balancer code directly for full functionality.\\n// solhint-disable-next-line max-line-length\\n/// https://github.com/balancer-labs/balancer-core/blob/f4ed5d65362a8d6cec21662fb6eae233b0babc1f/contracts/BPool.sol\\ninterface IBPool {\\n    // solhint-disable-next-line max-line-length\\n    // https://github.com/balancer-labs/balancer-core/blob/f4ed5d65362a8d6cec21662fb6eae233b0babc1f/contracts/BPool.sol#L423\\n    function swapExactAmountIn(\\n        address tokenIn,\\n        uint256 tokenAmountIn,\\n        address tokenOut,\\n        uint256 minAmountOut,\\n        uint256 maxPrice\\n    ) external returns (uint256 tokenAmountOut, uint256 spotPriceAfter);\\n\\n    // solhint-disable-next-line max-line-length\\n    // https://github.com/balancer-labs/balancer-core/blob/f4ed5d65362a8d6cec21662fb6eae233b0babc1f/contracts/BPool.sol#L167\\n    function getBalance(address token) external view returns (uint256);\\n\\n    // solhint-disable-next-line max-line-length\\n    // https://github.com/balancer-labs/balancer-core/blob/f4ed5d65362a8d6cec21662fb6eae233b0babc1f/contracts/BPool.sol#L334\\n    function gulp(address token) external;\\n}\\n\",\"keccak256\":\"0x41166051a99c9ef25c0fb46378cf392836ff9286fc6c58da6d6cad95e2cbafc8\",\"license\":\"CAL\"},\"contracts/pool/IBalancerConstants.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity ^0.8.0;\\n\\n// Mirrors all the constants from Balancer `configurable-rights-pool` repo.\\n// As we do not include balancer contracts as a dependency, we need to ensure\\n// that any calculations or values that cross the interface to their system are\\n// identical.\\n// solhint-disable-next-line max-line-length\\n// https://github.com/balancer-labs/configurable-rights-pool/blob/5bd63657ac71a9e5f8484ea561de572193b3317b/libraries/BalancerConstants.sol#L9\\nlibrary IBalancerConstants {\\n    uint256 public constant BONE = 10**18;\\n    uint256 public constant MIN_WEIGHT = BONE;\\n    uint256 public constant MAX_WEIGHT = BONE * 50;\\n    uint256 public constant MAX_TOTAL_WEIGHT = BONE * 50;\\n    uint256 public constant MIN_BALANCE = BONE / 10**6;\\n    uint256 public constant MAX_BALANCE = BONE * 10**12;\\n    uint256 public constant MIN_POOL_SUPPLY = BONE * 100;\\n    uint256 public constant MAX_POOL_SUPPLY = BONE * 10**9;\\n    uint256 public constant MIN_FEE = BONE / 10**6;\\n    uint256 public constant MAX_FEE = BONE / 10;\\n    uint256 public constant EXIT_FEE = 0;\\n    uint256 public constant MAX_IN_RATIO = BONE / 2;\\n    uint256 public constant MAX_OUT_RATIO = (BONE / 3) + 1 wei;\\n    uint256 public constant MIN_ASSET_LIMIT = 2;\\n    uint256 public constant MAX_ASSET_LIMIT = 8;\\n    uint256 public constant MAX_UINT =\\n        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n}\\n\",\"keccak256\":\"0xf0619c014f9cba1aacc5097278853304ffbc9cb358f8e53ecb11ed6460efbe16\",\"license\":\"CAL\"},\"contracts/pool/ICRPFactory.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity ^0.8.0;\\n\\nimport {PoolParams} from \\\"./IConfigurableRightsPool.sol\\\";\\nimport {Rights} from \\\"./IRightsManager.sol\\\";\\n\\n/// Mirrors the Balancer `CRPFactory` functions relevant to\\n/// bootstrapping a pool. This is the minimal interface required for\\n/// `RedeemableERC20Pool` to function, much of the Balancer contract is elided\\n/// intentionally. Clients should use Balancer code directly.\\n// solhint-disable-next-line max-line-length\\n/// https://github.com/balancer-labs/configurable-rights-pool/blob/5bd63657ac71a9e5f8484ea561de572193b3317b/contracts/CRPFactory.sol#L27\\ninterface ICRPFactory {\\n    // solhint-disable-next-line max-line-length\\n    // https://github.com/balancer-labs/configurable-rights-pool/blob/5bd63657ac71a9e5f8484ea561de572193b3317b/contracts/CRPFactory.sol#L50\\n    function newCrp(\\n        address factoryAddress,\\n        PoolParams calldata poolParams,\\n        Rights calldata rights\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0x18c543df7ccd7b2ac65705481cd163829fcd69b23708b23d077090579ae73130\",\"license\":\"CAL\"},\"contracts/pool/IConfigurableRightsPool.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity ^0.8.0;\\n\\n/// Mirrors the `PoolParams` struct normally internal to a Balancer\\n/// `ConfigurableRightsPool`.\\n/// If nothing else, this fixes errors that prevent slither from compiling when\\n/// running the security scan.\\n// solhint-disable-next-line max-line-length\\n/// https://github.com/balancer-labs/configurable-rights-pool/blob/5bd63657ac71a9e5f8484ea561de572193b3317b/contracts/ConfigurableRightsPool.sol#L47\\nstruct PoolParams {\\n    string poolTokenSymbol;\\n    string poolTokenName;\\n    address[] constituentTokens;\\n    uint256[] tokenBalances;\\n    uint256[] tokenWeights;\\n    uint256 swapFee;\\n}\\n\\n/// Mirrors the Balancer `ConfigurableRightsPool` functions relevant to Rain.\\n/// Much of the Balancer contract is elided intentionally.\\n/// Clients should use Balancer code directly for full functionality.\\n// solhint-disable-next-line max-line-length\\n/// https://github.com/balancer-labs/configurable-rights-pool/blob/5bd63657ac71a9e5f8484ea561de572193b3317b/contracts/ConfigurableRightsPool.sol#L41\\ninterface IConfigurableRightsPool {\\n    // solhint-disable-next-line max-line-length\\n    // https://github.com/balancer-labs/configurable-rights-pool/blob/5bd63657ac71a9e5f8484ea561de572193b3317b/contracts/ConfigurableRightsPool.sol#L61\\n    function bPool() external view returns (address);\\n\\n    // solhint-disable-next-line max-line-length\\n    // https://github.com/balancer-labs/configurable-rights-pool/blob/5bd63657ac71a9e5f8484ea561de572193b3317b/contracts/ConfigurableRightsPool.sol#L60\\n    function bFactory() external view returns (address);\\n\\n    // solhint-disable-next-line max-line-length\\n    // https://github.com/balancer-labs/configurable-rights-pool/blob/5bd63657ac71a9e5f8484ea561de572193b3317b/contracts/ConfigurableRightsPool.sol#L318\\n    function createPool(\\n        uint256 initialSupply,\\n        uint256 minimumWeightChangeBlockPeriodParam,\\n        uint256 addTokenTimeLockInBlocksParam\\n    ) external;\\n\\n    // solhint-disable-next-line max-line-length\\n    // https://github.com/balancer-labs/configurable-rights-pool/blob/5bd63657ac71a9e5f8484ea561de572193b3317b/contracts/ConfigurableRightsPool.sol#L393\\n    function updateWeightsGradually(\\n        uint256[] calldata newWeights,\\n        uint256 startBlock,\\n        uint256 endBlock\\n    ) external;\\n\\n    // solhint-disable-next-line max-line-length\\n    // https://github.com/balancer-labs/configurable-rights-pool/blob/5bd63657ac71a9e5f8484ea561de572193b3317b/contracts/ConfigurableRightsPool.sol#L581\\n    function exitPool(uint256 poolAmountIn, uint256[] calldata minAmountsOut)\\n        external;\\n\\n    // solhint-disable-next-line max-line-length\\n    // https://github.com/balancer-labs/configurable-rights-pool/blob/5bd63657ac71a9e5f8484ea561de572193b3317b/contracts/ConfigurableRightsPool.sol#L426\\n    function pokeWeights() external;\\n}\\n\",\"keccak256\":\"0x19069aa0befefd0236f0f076332172dba28374e4d0dd4a1f752f1ece5f7d2c79\",\"license\":\"CAL\"},\"contracts/pool/IRightsManager.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity ^0.8.0;\\n\\n// Mirrors `Rights` from Balancer `configurable-rights-pool` repo.\\n// As we do not include balancer contracts as a dependency, we need to ensure\\n// that any calculations or values that cross the interface to their system are\\n// identical.\\n// solhint-disable-next-line max-line-length\\n// https://github.com/balancer-labs/configurable-rights-pool/blob/5bd63657ac71a9e5f8484ea561de572193b3317b/libraries/RightsManager.sol#L29\\nstruct Rights {\\n    bool canPauseSwapping;\\n    bool canChangeSwapFee;\\n    bool canChangeWeights;\\n    bool canAddRemoveTokens;\\n    bool canWhitelistLPs;\\n    bool canChangeCap;\\n}\\n\",\"keccak256\":\"0x18dfd045bf9bbb07cb7ed75b274a937d085b2147ec8318723f09f14f8626237a\",\"license\":\"CAL\"},\"contracts/redeemableERC20/RedeemableERC20.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport {ERC20Config} from \\\"../erc20/ERC20Config.sol\\\";\\nimport \\\"../erc20/ERC20Redeem.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n// solhint-disable-next-line max-line-length\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport {ITier} from \\\"../tier/ITier.sol\\\";\\nimport {TierReport} from \\\"../tier/libraries/TierReport.sol\\\";\\n\\nimport {Phased} from \\\"../phased/Phased.sol\\\";\\n\\nimport {ERC20Pull, ERC20PullConfig} from \\\"../erc20/ERC20Pull.sol\\\";\\n\\n/// Everything required by the `RedeemableERC20` constructor.\\n/// @param reserve Reserve token that the associated `Trust` or equivalent\\n/// raise contract will be forwarding to the `RedeemableERC20` contract.\\n/// @param erc20Config ERC20 config forwarded to the ERC20 constructor.\\n/// @param tier Tier contract to compare statuses against on transfer.\\n/// @param minimumTier Minimum tier required for transfers in `Phase.ZERO`.\\n/// Can be `0`.\\n/// @param distributionEndForwardingAddress Optional address to send rTKN to at\\n/// the end of the distribution phase. If `0` address then all undistributed\\n/// rTKN will burn itself at the end of the distribution.\\nstruct RedeemableERC20Config {\\n    address reserve;\\n    ERC20Config erc20Config;\\n    address tier;\\n    uint256 minimumTier;\\n    address distributionEndForwardingAddress;\\n}\\n\\n/// @title RedeemableERC20\\n/// @notice This is the ERC20 token that is minted and distributed.\\n///\\n/// During `Phase.ZERO` the token can be traded and so compatible with the\\n/// Balancer pool mechanics.\\n///\\n/// During `Phase.ONE` the token is frozen and no longer able to be traded on\\n/// any AMM or transferred directly.\\n///\\n/// The token can be redeemed during `Phase.ONE` which burns the token in\\n/// exchange for pro-rata erc20 tokens held by the `RedeemableERC20` contract\\n/// itself.\\n///\\n/// The token balances can be used indirectly for other claims, promotions and\\n/// events as a proof of participation in the original distribution by token\\n/// holders.\\n///\\n/// The token can optionally be restricted by the `ITier` contract to only\\n/// allow receipients with a specified membership status.\\n///\\n/// @dev `RedeemableERC20` is an ERC20 with 2 phases.\\n///\\n/// `Phase.ZERO` is the distribution phase where the token can be freely\\n/// transfered but not redeemed.\\n/// `Phase.ONE` is the redemption phase where the token can be redeemed but no\\n/// longer transferred.\\n///\\n/// Redeeming some amount of `RedeemableERC20` burns the token in exchange for\\n/// some other tokens held by the contract. For example, if the\\n/// `RedeemableERC20` token contract holds 100 000 USDC then a holder of the\\n/// redeemable token can burn some of their tokens to receive a % of that USDC.\\n/// If they redeemed (burned) an amount equal to 10% of the redeemable token\\n/// supply then they would receive 10 000 USDC.\\n///\\n/// To make the treasury assets discoverable anyone can call `newTreasuryAsset`\\n/// to emit an event containing the treasury asset address. As malicious and/or\\n/// spam users can emit many treasury events there is a need for sensible\\n/// indexing and filtering of asset events to only trusted users. This contract\\n/// is agnostic to how that trust relationship is defined for each user.\\n///\\n/// Users must specify all the treasury assets they wish to redeem to the\\n/// `redeem` function. After `redeem` is called the redeemed tokens are burned\\n/// so all treasury assets must be specified and claimed in a batch atomically.\\n/// Note: The same amount of `RedeemableERC20` is burned, regardless of which\\n/// treasury assets were specified. Specifying fewer assets will NOT increase\\n/// the proportion of each that is returned.\\n///\\n/// `RedeemableERC20` has several owner administrative functions:\\n/// - Owner can add senders and receivers that can send/receive tokens even\\n///   during `Phase.ONE`\\n/// - Owner can end `Phase.ONE` during `Phase.ZERO` by specifying the address\\n///   of a distributor, which will have any undistributed tokens burned.\\n/// The owner should be a `Trust` not an EOA.\\n///\\n/// The redeem functions MUST be used to redeem and burn RedeemableERC20s\\n/// (NOT regular transfers).\\n///\\n/// `redeem` will simply revert if called outside `Phase.ONE`.\\n/// A `Redeem` event is emitted on every redemption (per treasury asset) as\\n/// `(redeemer, asset, redeemAmount)`.\\ncontract RedeemableERC20 is Initializable, Phased, ERC20Redeem, ERC20Pull {\\n    using SafeERC20 for IERC20;\\n\\n    /// @dev Phase constants.\\n    /// Contract is not yet initialized.\\n    uint256 private constant PHASE_UNINITIALIZED = 0;\\n    /// @dev Token is in the distribution phase and can be transferred freely\\n    /// subject to tier requirements.\\n    uint256 private constant PHASE_DISTRIBUTING = 1;\\n    /// @dev Token is frozen and cannot be transferred unless the\\n    /// sender/receiver is authorized as a sender/receiver.\\n    uint256 private constant PHASE_FROZEN = 2;\\n\\n    /// @dev Bits for a receiver.\\n    uint256 private constant RECEIVER = 0x1;\\n    /// @dev Bits for a sender.\\n    uint256 private constant SENDER = 0x2;\\n\\n    /// @dev To be clear, this admin is NOT intended to be an EOA.\\n    /// This contract is designed assuming the admin is a `Sale` or equivalent\\n    /// contract that itself does NOT have an admin key.\\n    address private admin;\\n    /// @dev Tracks addresses that can always send/receive regardless of phase.\\n    /// sender/receiver => access bits\\n    mapping(address => uint256) private access;\\n\\n    /// Results of initializing.\\n    /// @param sender `msg.sender` of initialize.\\n    /// @param config Initialization config.\\n    event Initialize(address sender, RedeemableERC20Config config);\\n\\n    /// A new token sender has been added.\\n    /// @param sender `msg.sender` that approved the token sender.\\n    /// @param grantedSender address that is now a token sender.\\n    event Sender(address sender, address grantedSender);\\n\\n    /// A new token receiver has been added.\\n    /// @param sender `msg.sender` that approved the token receiver.\\n    /// @param grantedReceiver address that is now a token receiver.\\n    event Receiver(address sender, address grantedReceiver);\\n\\n    /// RedeemableERC20 uses the standard/default 18 ERC20 decimals.\\n    /// The minimum supply enforced by the constructor is \\\"one\\\" token which is\\n    /// `10 ** 18`.\\n    /// The minimum supply does not prevent subsequent redemption/burning.\\n    uint256 private constant MINIMUM_INITIAL_SUPPLY = 10**18;\\n\\n    /// Tier contract that produces the report that `minimumTier` is checked\\n    /// against.\\n    /// Public so external contracts can interface with the required tier.\\n    ITier public tier;\\n\\n    /// The minimum status that a user must hold to receive transfers during\\n    /// `Phase.ZERO`.\\n    /// The tier contract passed to `TierByConstruction` determines if\\n    /// the status is held during `_beforeTokenTransfer`.\\n    /// Public so external contracts can interface with the required tier.\\n    uint256 public minimumTier;\\n\\n    /// Optional address to send rTKN to at the end of the distribution phase.\\n    /// If `0` address then all undistributed rTKN will burn itself at the end\\n    /// of the distribution.\\n    address private distributionEndForwardingAddress;\\n\\n    /// Mint the full ERC20 token supply and configure basic transfer\\n    /// restrictions. Initializes all base contracts.\\n    /// @param config_ Initialized configuration.\\n    function initialize(RedeemableERC20Config calldata config_)\\n        external\\n        initializer\\n    {\\n        initializePhased();\\n\\n        tier = ITier(config_.tier);\\n        __ERC20_init(config_.erc20Config.name, config_.erc20Config.symbol);\\n        initializeERC20Pull(\\n            ERC20PullConfig(config_.erc20Config.distributor, config_.reserve)\\n        );\\n\\n        require(\\n            config_.erc20Config.initialSupply >= MINIMUM_INITIAL_SUPPLY,\\n            \\\"MINIMUM_INITIAL_SUPPLY\\\"\\n        );\\n        minimumTier = config_.minimumTier;\\n        distributionEndForwardingAddress = config_\\n            .distributionEndForwardingAddress;\\n\\n        // Minting and burning must never fail.\\n        access[address(0)] = RECEIVER | SENDER;\\n\\n        // Admin receives full supply.\\n        access[config_.erc20Config.distributor] = RECEIVER;\\n\\n        // Forwarding address must be able to receive tokens.\\n        if (distributionEndForwardingAddress != address(0)) {\\n            access[distributionEndForwardingAddress] = RECEIVER;\\n        }\\n\\n        admin = config_.erc20Config.distributor;\\n\\n        // Need to mint after assigning access.\\n        _mint(\\n            config_.erc20Config.distributor,\\n            config_.erc20Config.initialSupply\\n        );\\n\\n        // The reserve must always be one of the treasury assets.\\n        newTreasuryAsset(config_.reserve);\\n\\n        emit Initialize(msg.sender, config_);\\n\\n        // Smoke test on whatever is on the other side of `config_.tier`.\\n        // It is a common mistake to pass in a contract without the `ITier`\\n        // interface and brick transfers. We want to discover that ASAP.\\n        // E.g. `Verify` instead of `VerifyTier`.\\n        // Slither does not like this unused return, but we're not looking for\\n        // any specific return value, just trying to avoid something that\\n        // blatantly errors out.\\n        // slither-disable-next-line unused-return\\n        ITier(config_.tier).report(msg.sender);\\n\\n        schedulePhase(PHASE_DISTRIBUTING, block.number);\\n    }\\n\\n    /// Require a function is only admin callable.\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"ONLY_ADMIN\\\");\\n        _;\\n    }\\n\\n    /// Check that an address is a receiver.\\n    /// A sender is also a receiver.\\n    /// @param maybeReceiver_ account to check.\\n    /// @return True if account is a receiver.\\n    function isReceiver(address maybeReceiver_) public view returns (bool) {\\n        return access[maybeReceiver_] & RECEIVER > 0;\\n    }\\n\\n    /// Admin can grant an address receiver rights.\\n    /// @param newReceiver_ The account to grand receiver.\\n    function grantReceiver(address newReceiver_) external onlyAdmin {\\n        // Using `|` preserves sender if previously granted.\\n        access[newReceiver_] |= RECEIVER;\\n        emit Receiver(msg.sender, newReceiver_);\\n    }\\n\\n    /// Check that an address is a sender.\\n    /// @param maybeSender_ account to check.\\n    /// @return True if account is a sender.\\n    function isSender(address maybeSender_) public view returns (bool) {\\n        return access[maybeSender_] & SENDER > 0;\\n    }\\n\\n    /// Admin can grant an addres sender rights.\\n    /// @param newSender_ The account to grant sender.\\n    function grantSender(address newSender_) external onlyAdmin {\\n        // Uinsg `|` preserves receiver if previously granted.\\n        access[newSender_] |= SENDER;\\n        emit Sender(msg.sender, newSender_);\\n    }\\n\\n    /// The admin can forward or burn all tokens of a single address to end\\n    /// `PHASE_DISTRIBUTING`.\\n    /// The intent is that during `PHASE_DISTRIBUTING` there is some contract\\n    /// responsible for distributing the tokens.\\n    /// The admin specifies the distributor to end `PHASE_DISTRIBUTING` and the\\n    /// forwarding address set during initialization is used. If the forwarding\\n    /// address is `0` the rTKN will be burned, otherwise the entire balance of\\n    /// the distributor is forwarded to the nominated address. In practical\\n    /// terms the forwarding allows for escrow depositors to receive a prorata\\n    /// claim on unsold rTKN if they forward it to themselves, otherwise raise\\n    /// participants will receive a greater share of the final escrowed tokens\\n    /// due to the burn reducing the total supply.\\n    /// The distributor is NOT set during the constructor because it may not\\n    /// exist at that point. For example, Balancer needs the paired erc20\\n    /// tokens to exist before the trading pool can be built.\\n    /// @param distributor_ The distributor according to the admin.\\n    /// BURN the tokens if `address(0)`.\\n    function endDistribution(address distributor_)\\n        external\\n        onlyPhase(PHASE_DISTRIBUTING)\\n        onlyAdmin\\n    {\\n        schedulePhase(PHASE_FROZEN, block.number);\\n        address forwardTo_ = distributionEndForwardingAddress;\\n        uint256 distributorBalance_ = balanceOf(distributor_);\\n        if (distributorBalance_ > 0) {\\n            if (forwardTo_ == address(0)) {\\n                _burn(distributor_, distributorBalance_);\\n            } else {\\n                _transfer(distributor_, forwardTo_, distributorBalance_);\\n            }\\n        }\\n    }\\n\\n    /// Wraps `_redeem` from `ERC20Redeem`.\\n    /// Very thin wrapper so be careful when calling!\\n    /// @param treasuryAssets_ The treasury assets to redeem for. If this is\\n    /// empty or incomplete then tokens will be permanently burned for no\\n    /// reason by the caller and the remaining funds will be effectively\\n    /// redistributed to everyone else.\\n    function redeem(IERC20[] calldata treasuryAssets_, uint256 redeemAmount_)\\n        external\\n        onlyPhase(PHASE_FROZEN)\\n    {\\n        _redeem(treasuryAssets_, redeemAmount_);\\n    }\\n\\n    /// Apply phase sensitive transfer restrictions.\\n    /// During `Phase.ZERO` only tier requirements apply.\\n    /// During `Phase.ONE` all transfers except burns are prevented.\\n    /// If a transfer involves either a sender or receiver with the SENDER\\n    /// or RECEIVER role, respectively, it will bypass these restrictions.\\n    /// @inheritdoc ERC20Upgradeable\\n    function _beforeTokenTransfer(\\n        address sender_,\\n        address receiver_,\\n        uint256 amount_\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(sender_, receiver_, amount_);\\n\\n        // Sending tokens to this contract (e.g. instead of redeeming) is\\n        // always an error.\\n        require(receiver_ != address(this), \\\"TOKEN_SEND_SELF\\\");\\n\\n        // Some contracts may attempt a preflight (e.g. Balancer) of a 0 amount\\n        // transfer.\\n        // We don't want to accidentally cause external errors due to zero\\n        // value transfers.\\n        if (\\n            amount_ > 0 &&\\n            // The sender and receiver lists bypass all access restrictions.\\n            !(isSender(sender_) || isReceiver(receiver_))\\n        ) {\\n            // During `PHASE_DISTRIBUTING` transfers are only restricted by the\\n            // tier of the recipient. Every other phase only allows senders and\\n            // receivers as above.\\n            require(currentPhase() == PHASE_DISTRIBUTING, \\\"FROZEN\\\");\\n\\n            // Receivers act as \\\"hubs\\\" that can send to \\\"spokes\\\".\\n            // i.e. any address of the minimum tier.\\n            // Spokes cannot send tokens another \\\"hop\\\" e.g. to each other.\\n            // Spokes can only send back to a receiver (doesn't need to be\\n            // the same receiver they received from).\\n            require(isReceiver(sender_), \\\"2SPOKE\\\");\\n            require(\\n                TierReport.tierAtBlockFromReport(\\n                    tier.report(receiver_),\\n                    block.number\\n                ) >= minimumTier,\\n                \\\"MIN_TIER\\\"\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9d6a738069f0c1559456e12e9fa8e1c9d2d7884f5144680140766f94bae62d51\",\"license\":\"CAL\"},\"contracts/redeemableERC20/RedeemableERC20Factory.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport {Factory} from \\\"../factory/Factory.sol\\\";\\nimport {RedeemableERC20, RedeemableERC20Config} from \\\"./RedeemableERC20.sol\\\";\\nimport {ITier} from \\\"../tier/ITier.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\n\\n/// @title RedeemableERC20Factory\\n/// @notice Factory for deploying and registering `RedeemableERC20` contracts.\\ncontract RedeemableERC20Factory is Factory {\\n    /// Template contract to clone.\\n    /// Deployed by the constructor.\\n    address public immutable implementation;\\n\\n    /// Build the reference implementation to clone for each child.\\n    constructor() {\\n        address implementation_ = address(new RedeemableERC20());\\n        emit Implementation(msg.sender, implementation_);\\n        implementation = implementation_;\\n    }\\n\\n    /// @inheritdoc Factory\\n    function _createChild(bytes calldata data_)\\n        internal\\n        virtual\\n        override\\n        returns (address)\\n    {\\n        RedeemableERC20Config memory config_ = abi.decode(\\n            data_,\\n            (RedeemableERC20Config)\\n        );\\n        address clone_ = Clones.clone(implementation);\\n        RedeemableERC20(clone_).initialize(config_);\\n        return clone_;\\n    }\\n\\n    /// Allows calling `createChild` with `RedeemableERC20Config` struct.\\n    /// Use original `Factory` `createChild` function signature if function\\n    /// parameters are already encoded.\\n    ///\\n    /// @param config_ `RedeemableERC20` constructor configuration.\\n    /// @return New `RedeemableERC20` child contract.\\n    function createChildTyped(RedeemableERC20Config calldata config_)\\n        external\\n        returns (RedeemableERC20)\\n    {\\n        return RedeemableERC20(this.createChild(abi.encode(config_)));\\n    }\\n}\\n\",\"keccak256\":\"0x9dd4f3a970390ecdd05aa18ab68379a8ea4315a5cf807c5f800818a1edc12e14\",\"license\":\"CAL\"},\"contracts/sale/ISale.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity ^0.8.0;\\n\\n/// An `ISale` can be in one of 4 possible states and a linear progression is\\n/// expected from an \\\"in flight\\\" status to an immutable definitive outcome.\\n/// - Pending: The sale is deployed onchain but cannot be interacted with yet.\\n/// - Active: The sale can now be bought into and otherwise interacted with.\\n/// - Success: The sale has ended AND reached its minimum raise target.\\n/// - Fail: The sale has ended BUT NOT reached its minimum raise target.\\n/// Once an `ISale` reaches `Active` it MUST NOT return `Pending` ever again.\\n/// Once an `ISale` reaches `Success` or `Fail` it MUST NOT return any other\\n/// status ever again.\\nenum SaleStatus {\\n    Pending,\\n    Active,\\n    Success,\\n    Fail\\n}\\n\\ninterface ISale {\\n    /// Returns the address of the token being sold in the sale.\\n    /// MUST NOT change during the lifecycle of the sale contract.\\n    function token() external view returns (address);\\n\\n    /// Returns the address of the token that sale prices are denominated in.\\n    /// MUST NOT change during the lifecycle of the sale contract.\\n    function reserve() external view returns (address);\\n\\n    /// Returns the current `SaleStatus` of the sale.\\n    /// Represents a linear progression of the sale through its major lifecycle\\n    /// events.\\n    function saleStatus() external view returns (SaleStatus);\\n}\\n\",\"keccak256\":\"0x05ea99f5e024326b2964dfed6c49b895376826e7115265978ceeccd9278a5b20\",\"license\":\"CAL\"},\"contracts/seed/SeedERC20.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport {ERC20Config} from \\\"../erc20/ERC20Config.sol\\\";\\n\\nimport \\\"../erc20/ERC20Redeem.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n// solhint-disable-next-line max-line-length\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport {Phased} from \\\"../phased/Phased.sol\\\";\\nimport {Cooldown} from \\\"../cooldown/Cooldown.sol\\\";\\n\\nimport {ERC20Pull, ERC20PullConfig} from \\\"../erc20/ERC20Pull.sol\\\";\\n\\n/// Everything required to construct a `SeedERC20` contract.\\n/// @param reserve erc20 token contract used to purchase seed tokens.\\n/// @param recipient address for all reserve funds raised when seeding is\\n/// complete.\\n/// @param seedPrice Price per seed unit denominated in reserve token.\\n/// @param cooldownDuration Cooldown duration in blocks for seed/unseed cycles.\\n/// Seeding requires locking funds for at least the cooldown period.\\n/// Ideally `unseed` is never called and `seed` leaves funds in the contract\\n/// until all seed tokens are sold out.\\n/// A failed raise cannot make funds unrecoverable, so `unseed` does exist,\\n/// but it should be called rarely.\\n/// @param erc20Config ERC20 config.\\n/// 100% of all supply must be sold for seeding to complete.\\n/// Recommended to keep initial supply to a small value\\n/// (single-triple digits).\\n/// The ability for users to buy/sell or not buy/sell dust seed quantities\\n/// is likely NOT desired.\\nstruct SeedERC20Config {\\n    IERC20 reserve;\\n    address recipient;\\n    uint256 seedPrice;\\n    uint256 cooldownDuration;\\n    ERC20Config erc20Config;\\n}\\n\\n/// @title SeedERC20\\n/// @notice Facilitates raising seed reserve from an open set of seeders.\\n///\\n/// When a single seeder address cannot be specified at the time the\\n/// `Trust` is constructed a `SeedERC20` will be deployed.\\n///\\n/// The `SeedERC20` has two phases:\\n///\\n/// - `Phase.ZERO`: Can swap seed tokens for reserve assets with `seed` and\\n///   `unseed`\\n/// - `Phase.ONE`: Can redeem seed tokens pro-rata for reserve assets\\n///\\n/// When the last seed token is distributed the `SeedERC20` immediately moves\\n/// to `Phase.ONE` atomically within that transaction and forwards all reserve\\n/// to the configured recipient.\\n///\\n/// For our use-case the recipient is a `Trust` contract but `SeedERC20`\\n/// could be used as a mini-fundraise contract for many purposes. In the case\\n/// that a recipient is not a `Trust` the recipient will need to be careful not\\n/// to fall afoul of KYC and securities law.\\n///\\n/// @dev Facilitates a pool of reserve funds to forward to a named recipient\\n/// contract.\\n/// The funds to raise and the recipient is fixed at construction.\\n/// The total is calculated as `( seedPrice * seedUnits )` and so is a fixed\\n/// amount. It is recommended to keep `seedUnits` relatively small so that each\\n/// unit represents a meaningful contribution to keep dust out of the system.\\n///\\n/// The contract lifecycle is split into two phases:\\n///\\n/// - `Phase.ZERO`: the `seed` and `unseed` functions are callable by anyone.\\n/// - `Phase.ONE`: holders of the seed erc20 token can redeem any reserve funds\\n///   in the contract pro-rata.\\n///\\n/// When `seed` is called the `SeedERC20` contract takes ownership of reserve\\n/// funds in exchange for seed tokens.\\n/// When `unseed` is called the `SeedERC20` contract takes ownership of seed\\n/// tokens in exchange for reserve funds.\\n///\\n/// When the last `seed` token is transferred to an external address the\\n/// `SeedERC20` contract immediately:\\n///\\n/// - Moves to `Phase.ONE`, disabling both `seed` and `unseed`\\n/// - Transfers the full balance of reserve from itself to the recipient\\n///   address.\\n///\\n/// Seed tokens are standard ERC20 so can be freely transferred etc.\\n///\\n/// The recipient (or anyone else) MAY transfer reserve back to the `SeedERC20`\\n/// at a later date.\\n/// Seed token holders can call `redeem` in `Phase.ONE` to burn their tokens in\\n/// exchange for pro-rata reserve assets.\\ncontract SeedERC20 is Initializable, Phased, Cooldown, ERC20Redeem, ERC20Pull {\\n    using Math for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /// Phase constants.\\n    /// Contract is uninitialized.\\n    uint256 private constant PHASE_UNINITIALIZED = 0;\\n    /// Minimum seed funds have not yet been reached so seeding is in progress.\\n    uint256 private constant PHASE_SEEDING = 1;\\n    /// Minimum seed funds were reached so now tokens can be redeemed but not\\n    /// purchased from or refunded to this contract.\\n    uint256 private constant PHASE_REDEEMING = 2;\\n\\n    /// Contract has initialized.\\n    /// @param sender `msg.sender` that initialized the contract.\\n    /// @param recipient Recipient of the seed funds, if/when seeding is\\n    /// successful.\\n    /// @param reserve The token seed funds are denominated in.\\n    /// @param seedPrice The price of each seed unit denominated in reserve.\\n    event Initialize(\\n        address sender,\\n        address recipient,\\n        address reserve,\\n        uint256 seedPrice\\n    );\\n\\n    /// Reserve was paid in exchange for seed tokens.\\n    /// @param sender Anon `msg.sender` seeding.\\n    /// @param tokensSeeded Number of seed tokens purchased.\\n    /// @param reserveReceived Amount of reserve received by the seed contract\\n    /// for the seed tokens.\\n    event Seed(\\n        address sender,\\n        uint256 tokensSeeded,\\n        uint256 reserveReceived\\n    );\\n\\n    /// Reserve was refunded for seed tokens.\\n    /// @param sender Anon `msg.sender` unseeding.\\n    /// @param tokensUnseeded Number of seed tokens returned.\\n    /// @param reserveReturned Amount of reserve returned to the `msg.sender`.\\n    event Unseed(\\n        address sender,\\n        uint256 tokensUnseeded,\\n        uint256 reserveReturned\\n    );\\n\\n    /// Reserve erc20 token contract used to purchase seed tokens.\\n    IERC20 private reserve;\\n    /// Recipient address for all reserve funds raised when seeding is\\n    /// complete.\\n    address private recipient;\\n    /// Price in reserve for a unit of seed token.\\n    uint256 private seedPrice;\\n    /// Minimum amount of reserve to safely exit.\\n    /// I.e. the amount of reserve raised is the minimum that seeders should\\n    /// expect back in the redeeming phase.\\n    uint256 private safeExit;\\n    /// The highest reserve value seen upon redeem call.\\n    /// See `redeem` for more discussion.\\n    uint256 public highwater;\\n\\n    /// Sanity checks on configuration.\\n    /// Store relevant config as contract state.\\n    /// Mint all seed tokens.\\n    /// @param config_ All config required to initialize the contract.\\n    function initialize(SeedERC20Config memory config_) external initializer {\\n        require(config_.seedPrice > 0, \\\"PRICE_0\\\");\\n        require(config_.erc20Config.initialSupply > 0, \\\"SUPPLY_0\\\");\\n        require(config_.recipient != address(0), \\\"RECIPIENT_0\\\");\\n\\n        initializePhased();\\n        initializeCooldown(config_.cooldownDuration);\\n\\n        // Force initial supply to mint to this contract as distributor.\\n        config_.erc20Config.distributor = address(this);\\n        __ERC20_init(config_.erc20Config.name, config_.erc20Config.symbol);\\n        _mint(\\n            config_.erc20Config.distributor,\\n            config_.erc20Config.initialSupply\\n        );\\n        initializeERC20Pull(\\n            ERC20PullConfig(config_.recipient, address(config_.reserve))\\n        );\\n        recipient = config_.recipient;\\n        reserve = config_.reserve;\\n        seedPrice = config_.seedPrice;\\n        safeExit = config_.seedPrice * config_.erc20Config.initialSupply;\\n        // The reserve must always be one of the treasury assets.\\n        newTreasuryAsset(address(config_.reserve));\\n        emit Initialize(\\n            msg.sender,\\n            config_.recipient,\\n            address(config_.reserve),\\n            config_.seedPrice\\n        );\\n\\n        schedulePhase(PHASE_SEEDING, block.number);\\n    }\\n\\n    /// @inheritdoc ERC20Upgradeable\\n    function decimals() public pure override returns (uint8) {\\n        return 0;\\n    }\\n\\n    /// Take reserve from seeder as `units * seedPrice`.\\n    ///\\n    /// When the final unit is sold the contract immediately:\\n    ///\\n    /// - enters `Phase.ONE`\\n    /// - transfers its entire reserve balance to the recipient\\n    ///\\n    /// The desired units may not be available by the time this transaction\\n    /// executes. This could be due to high demand, griefing and/or\\n    /// front-running on the contract.\\n    /// The caller can set a range between `minimumUnits_` and `desiredUnits_`\\n    /// to mitigate errors due to the contract running out of stock.\\n    /// The maximum available units up to `desiredUnits_` will always be\\n    /// processed by the contract. Only the stock of this contract is checked\\n    /// against the seed unit range, the caller is responsible for ensuring\\n    /// their reserve balance.\\n    /// Seeding enforces the cooldown configured in the constructor.\\n    /// @param minimumUnits_ The minimum units the caller will accept for a\\n    /// successful `seed` call.\\n    /// @param desiredUnits_ The maximum units the caller is willing to fund.\\n    function seed(uint256 minimumUnits_, uint256 desiredUnits_)\\n        external\\n        onlyPhase(PHASE_SEEDING)\\n        onlyAfterCooldown\\n    {\\n        require(desiredUnits_ > 0, \\\"DESIRED_0\\\");\\n        require(minimumUnits_ <= desiredUnits_, \\\"MINIMUM_OVER_DESIRED\\\");\\n        uint256 remainingStock_ = balanceOf(address(this));\\n        require(minimumUnits_ <= remainingStock_, \\\"INSUFFICIENT_STOCK\\\");\\n\\n        uint256 units_ = desiredUnits_.min(remainingStock_);\\n        uint256 reserveAmount_ = seedPrice * units_;\\n\\n        // Sold out. Move to the next phase.\\n        if (remainingStock_ == units_) {\\n            schedulePhase(PHASE_REDEEMING, block.number);\\n        }\\n        _transfer(address(this), msg.sender, units_);\\n\\n        emit Seed(msg.sender, units_, reserveAmount_);\\n\\n        reserve.safeTransferFrom(msg.sender, address(this), reserveAmount_);\\n        // Immediately transfer to the recipient.\\n        // The transfer is immediate rather than only approving for the\\n        // recipient.\\n        // This avoids the situation where a seeder immediately redeems their\\n        // units before the recipient can withdraw.\\n        // It also introduces a failure case where the reserve errors on\\n        // transfer. If this fails then everyone can call `unseed` after their\\n        // individual cooldowns to exit.\\n        if (currentPhase() == PHASE_REDEEMING) {\\n            reserve.safeTransfer(recipient, reserve.balanceOf(address(this)));\\n        }\\n    }\\n\\n    /// Send reserve back to seeder as `( units * seedPrice )`.\\n    ///\\n    /// Allows addresses to back out until `Phase.ONE`.\\n    /// Unlike `redeem` the seed tokens are NOT burned so become newly\\n    /// available for another account to `seed`.\\n    ///\\n    /// In `Phase.ONE` the only way to recover reserve assets is:\\n    /// - Wait for the recipient or someone else to deposit reserve assets into\\n    ///   this contract.\\n    /// - Call redeem and burn the seed tokens\\n    ///\\n    /// @param units_ Units to unseed.\\n    function unseed(uint256 units_)\\n        external\\n        onlyPhase(PHASE_SEEDING)\\n        onlyAfterCooldown\\n    {\\n        uint256 reserveAmount_ = seedPrice * units_;\\n        _transfer(msg.sender, address(this), units_);\\n\\n        emit Unseed(msg.sender, units_, reserveAmount_);\\n\\n        reserve.safeTransfer(msg.sender, reserveAmount_);\\n    }\\n\\n    /// Burn seed tokens for pro-rata reserve assets.\\n    ///\\n    /// ```\\n    /// (units * reserve held by seed contract) / total seed token supply\\n    /// = reserve transfer to `msg.sender`\\n    /// ```\\n    ///\\n    /// The recipient or someone else must first transfer reserve assets to the\\n    /// `SeedERC20` contract.\\n    /// The recipient MUST be a TRUSTED contract or third party.\\n    /// This contract has no control over the reserve assets once they are\\n    /// transferred away at the start of `Phase.ONE`.\\n    /// It is the caller's responsibility to monitor the reserve balance of the\\n    /// `SeedERC20` contract.\\n    ///\\n    /// For example, if `SeedERC20` is used as a seeder for a `Trust` contract\\n    /// (in this repo) it will receive a refund or refund + fee.\\n    /// @param units_ Amount of seed units to burn and redeem for reserve\\n    /// assets.\\n    /// @param safetyRelease_ Amount of reserve above the high water mark the\\n    /// redeemer is willing to writeoff - e.g. pool dust for a failed raise.\\n    function redeem(uint256 units_, uint256 safetyRelease_)\\n        external\\n        onlyPhase(PHASE_REDEEMING)\\n    {\\n        uint256 currentReserveBalance_ = reserve.balanceOf(address(this));\\n\\n        // Guard against someone accidentally calling redeem before the reserve\\n        // has been returned. It's possible for the highwater to never hit the\\n        // `safeExit`, notably and most easily in the case of a failed raise\\n        // there will be pool dust trapped in the LBP, so the user can specify\\n        // some `safetyRelease` as reserve they are willing to write off. A\\n        // less likely scenario is that reserve is sent to the seed contract\\n        // across several transactions, interleaved with other seeders\\n        // redeeming, thus producing a very low highwater. In this case the\\n        // process is identical but manual review and a larger safety release\\n        // will be required.\\n        uint256 highwater_ = highwater;\\n        if (highwater_ < currentReserveBalance_) {\\n            highwater_ = currentReserveBalance_;\\n            highwater = highwater_;\\n        }\\n        require(highwater_ + safetyRelease_ >= safeExit, \\\"RESERVE_BALANCE\\\");\\n\\n        IERC20[] memory assets_ = new IERC20[](1);\\n        assets_[0] = reserve;\\n        _redeem(assets_, units_);\\n    }\\n}\\n\",\"keccak256\":\"0xe90e12f5d6d652cebf5d47c2fc37d625b0e07850575faa7ee6681569e991ea22\",\"license\":\"CAL\"},\"contracts/seed/SeedERC20Factory.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport {Factory} from \\\"../factory/Factory.sol\\\";\\nimport {SeedERC20, SeedERC20Config} from \\\"./SeedERC20.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\n\\n/// @title SeedERC20Factory\\n/// @notice Factory for creating and deploying `SeedERC20` contracts.\\ncontract SeedERC20Factory is Factory {\\n    /// Template contract to clone.\\n    /// Deployed by the constructor.\\n    address public immutable implementation;\\n\\n    /// Build the reference implementation to clone for each child.\\n    constructor() {\\n        address implementation_ = address(new SeedERC20());\\n        emit Implementation(msg.sender, implementation_);\\n        implementation = implementation_;\\n    }\\n\\n    /// @inheritdoc Factory\\n    function _createChild(bytes calldata data_)\\n        internal\\n        virtual\\n        override\\n        returns (address)\\n    {\\n        SeedERC20Config memory config_ = abi.decode(data_, (SeedERC20Config));\\n        address clone_ = Clones.clone(implementation);\\n        SeedERC20(clone_).initialize(config_);\\n        return clone_;\\n    }\\n\\n    /// Allows calling `createChild` with `SeedERC20Config` struct.\\n    /// Use original `Factory` `createChild` function signature if function\\n    /// parameters are already encoded.\\n    ///\\n    /// @param config_ `SeedERC20` constructor configuration.\\n    /// @return New `SeedERC20` child contract.\\n    function createChildTyped(SeedERC20Config calldata config_)\\n        external\\n        returns (SeedERC20)\\n    {\\n        return SeedERC20(this.createChild(abi.encode(config_)));\\n    }\\n}\\n\",\"keccak256\":\"0x5ff1306ffd1e42f431e636bf944b17fbbd896911fea747a077b95bf99ff823d2\",\"license\":\"CAL\"},\"contracts/tier/ITier.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity ^0.8.0;\\n\\n/// @title ITier\\n/// @notice `ITier` is a simple interface that contracts can\\n/// implement to provide membership lists for other contracts.\\n///\\n/// There are many use-cases for a time-preserving conditional membership list.\\n///\\n/// Some examples include:\\n///\\n/// - Self-serve whitelist to participate in fundraising\\n/// - Lists of users who can claim airdrops and perks\\n/// - Pooling resources with implied governance/reward tiers\\n/// - POAP style attendance proofs allowing access to future exclusive events\\n///\\n/// @dev Standard interface to a tiered membership.\\n///\\n/// A \\\"membership\\\" can represent many things:\\n/// - Exclusive access.\\n/// - Participation in some event or process.\\n/// - KYC completion.\\n/// - Combination of sub-memberships.\\n/// - Etc.\\n///\\n/// The high level requirements for a contract implementing `ITier`:\\n/// - MUST represent held tiers as a `uint`.\\n/// - MUST implement `report`.\\n///   - The report is a `uint256` that SHOULD represent the block each tier has\\n///     been continuously held since encoded as `uint32`.\\n///   - The encoded tiers start at `1`; Tier `0` is implied if no tier has ever\\n///     been held.\\n///   - Tier `0` is NOT encoded in the report, it is simply the fallback value.\\n///   - If a tier is lost the block data is erased for that tier and will be\\n///     set if/when the tier is regained to the new block.\\n///   - If a tier is held but the historical block information is not available\\n///     the report MAY return `0x00000000` for all held tiers.\\n///   - Tiers that are lost or have never been held MUST return `0xFFFFFFFF`.\\n/// - SHOULD implement `setTier`.\\n///   - Contracts SHOULD revert with `SET_TIER` error if they cannot\\n///     meaningfully set a tier directly.\\n///     For example a contract that can only derive a membership tier by\\n///     reading the state of an external contract cannot set tiers.\\n///   - Contracts implementing `setTier` SHOULD error with `SET_ZERO_TIER`\\n///     if tier 0 is being set.\\n/// - MUST emit `TierChange` when `setTier` successfully writes a new tier.\\n///   - Contracts that cannot meaningfully set a tier are exempt.\\n///\\n/// So the four possible states and report values are:\\n/// - Tier is held and block is known: Block is in the report\\n/// - Tier is held but block is NOT known: `0` is in the report\\n/// - Tier is NOT held: `0xFF..` is in the report\\n/// - Tier is unknown: `0xFF..` is in the report\\ninterface ITier {\\n    /// Every time a tier changes we log start and end tier against the\\n    /// account.\\n    /// This MAY NOT be emitted if reports are being read from the state of an\\n    /// external contract.\\n    /// The start tier MAY be lower than the current tier as at the block this\\n    /// event is emitted in.\\n    /// @param sender The `msg.sender` that authorized the tier change.\\n    /// @param account The account changing tier.\\n    /// @param startTier The previous tier the account held.\\n    /// @param endTier The newly acquired tier the account now holds.\\n    /// @param data The associated data for the tier change.\\n    event TierChange(\\n        address sender,\\n        address account,\\n        uint256 startTier,\\n        uint256 endTier,\\n        bytes data\\n    );\\n\\n    /// @notice Users can set their own tier by calling `setTier`.\\n    ///\\n    /// The contract that implements `ITier` is responsible for checking\\n    /// eligibility and/or taking actions required to set the tier.\\n    ///\\n    /// For example, the contract must take/refund any tokens relevant to\\n    /// changing the tier.\\n    ///\\n    /// Obviously the user is responsible for any approvals for this action\\n    /// prior to calling `setTier`.\\n    ///\\n    /// When the tier is changed a `TierChange` event will be emmited as:\\n    /// ```\\n    /// event TierChange(address account, uint startTier, uint endTier);\\n    /// ```\\n    ///\\n    /// The `setTier` function includes arbitrary data as the third\\n    /// parameter. This can be used to disambiguate in the case that\\n    /// there may be many possible options for a user to achieve some tier.\\n    ///\\n    /// For example, consider the case where tier 3 can be achieved\\n    /// by EITHER locking 1x rare NFT or 3x uncommon NFTs. A user with both\\n    /// could use `data` to explicitly state their intent.\\n    ///\\n    /// NOTE however that _any_ address can call `setTier` for any other\\n    /// address.\\n    ///\\n    /// If you implement `data` or anything that changes state then be very\\n    /// careful to avoid griefing attacks.\\n    ///\\n    /// The `data` parameter can also be ignored by the contract implementing\\n    /// `ITier`. For example, ERC20 tokens are fungible so only the balance\\n    /// approved by the user is relevant to a tier change.\\n    ///\\n    /// The `setTier` function SHOULD prevent users from reassigning\\n    /// tier 0 to themselves.\\n    ///\\n    /// The tier 0 status represents never having any status.\\n    /// @dev Updates the tier of an account.\\n    ///\\n    /// The implementing contract is responsible for all checks and state\\n    /// changes required to set the tier. For example, taking/refunding\\n    /// funds/NFTs etc.\\n    ///\\n    /// Contracts may disallow directly setting tiers, preferring to derive\\n    /// reports from other onchain data.\\n    /// In this case they should `revert(\\\"SET_TIER\\\");`.\\n    ///\\n    /// @param account Account to change the tier for.\\n    /// @param endTier Tier after the change.\\n    /// @param data Arbitrary input to disambiguate ownership\\n    /// (e.g. NFTs to lock).\\n    function setTier(\\n        address account,\\n        uint256 endTier,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice A tier report is a `uint256` that contains each of the block\\n    /// numbers each tier has been held continously since as a `uint32`.\\n    /// There are 9 possible tier, starting with tier 0 for `0` offset or\\n    /// \\\"never held any tier\\\" then working up through 8x 4 byte offsets to the\\n    /// full 256 bits.\\n    ///\\n    /// Low bits = Lower tier.\\n    ///\\n    /// In hexadecimal every 8 characters = one tier, starting at tier 8\\n    /// from high bits and working down to tier 1.\\n    ///\\n    /// `uint32` should be plenty for any blockchain that measures block times\\n    /// in seconds, but reconsider if deploying to an environment with\\n    /// significantly sub-second block times.\\n    ///\\n    /// ~135 years of 1 second blocks fit into `uint32`.\\n    ///\\n    /// `2^8 / (365 * 24 * 60 * 60)`\\n    ///\\n    /// When a user INCREASES their tier they keep all the block numbers they\\n    /// already had, and get new block times for each increased tiers they have\\n    /// earned.\\n    ///\\n    /// When a user DECREASES their tier they return to `0xFFFFFFFF` (never)\\n    /// for every tier level they remove, but keep their block numbers for the\\n    /// remaining tiers.\\n    ///\\n    /// GUIs are encouraged to make this dynamic very clear for users as\\n    /// round-tripping to a lower status and back is a DESTRUCTIVE operation\\n    /// for block times.\\n    ///\\n    /// The intent is that downstream code can provide additional benefits for\\n    /// members who have maintained a certain tier for/since a long time.\\n    /// These benefits can be provided by inspecting the report, and by\\n    /// on-chain contracts directly,\\n    /// rather than needing to work with snapshots etc.\\n    /// @dev Returns the earliest block the account has held each tier for\\n    /// continuously.\\n    /// This is encoded as a uint256 with blocks represented as 8x\\n    /// concatenated uint32.\\n    /// I.e. Each 4 bytes of the uint256 represents a u32 tier start time.\\n    /// The low bits represent low tiers and high bits the high tiers.\\n    /// Implementing contracts should return 0xFFFFFFFF for lost and\\n    /// never-held tiers.\\n    ///\\n    /// @param account Account to get the report for.\\n    /// @return The report blocks encoded as a uint256.\\n    function report(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xae2cc8231b77c7d7d907f88c7a627191bb84c26794b8a3d76ff7841eebff7316\",\"license\":\"CAL\"},\"contracts/tier/libraries/TierConstants.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\n/// @title TierConstants\\n/// @notice Constants for use with tier logic.\\nlibrary TierConstants {\\n    /// NEVER is 0xFF.. as it is infinitely in the future.\\n    /// NEVER for an entire report.\\n    uint256 internal constant NEVER_REPORT = type(uint256).max;\\n    /// NEVER for a single tier.\\n    uint32 internal constant NEVER_TIER = type(uint32).max;\\n\\n    /// Always is 0 as it is the genesis block.\\n    /// Tiers can't predate the chain but they can predate an `ITier` contract.\\n    uint256 internal constant ALWAYS = 0;\\n\\n    /// Account has never held a tier.\\n    uint256 internal constant TIER_ZERO = 0;\\n\\n    /// Magic number for tier one.\\n    uint256 internal constant TIER_ONE = 1;\\n    /// Magic number for tier two.\\n    uint256 internal constant TIER_TWO = 2;\\n    /// Magic number for tier three.\\n    uint256 internal constant TIER_THREE = 3;\\n    /// Magic number for tier four.\\n    uint256 internal constant TIER_FOUR = 4;\\n    /// Magic number for tier five.\\n    uint256 internal constant TIER_FIVE = 5;\\n    /// Magic number for tier six.\\n    uint256 internal constant TIER_SIX = 6;\\n    /// Magic number for tier seven.\\n    uint256 internal constant TIER_SEVEN = 7;\\n    /// Magic number for tier eight.\\n    uint256 internal constant TIER_EIGHT = 8;\\n    /// Maximum tier is `TIER_EIGHT`.\\n    uint256 internal constant MAX_TIER = TIER_EIGHT;\\n}\\n\",\"keccak256\":\"0x271026773264b9c4e68753778ffeeb00c7bd31ddf350f526ae383b2aef4bd6ff\",\"license\":\"CAL\"},\"contracts/tier/libraries/TierReport.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport {ITier} from \\\"../ITier.sol\\\";\\nimport \\\"./TierConstants.sol\\\";\\n\\n/// @title TierReport\\n/// @notice `TierReport` implements several pure functions that can be\\n/// used to interface with reports.\\n/// - `tierAtBlockFromReport`: Returns the highest status achieved relative to\\n/// a block number and report. Statuses gained after that block are ignored.\\n/// - `tierBlock`: Returns the block that a given tier has been held\\n/// since according to a report.\\n/// - `truncateTiersAbove`: Resets all the tiers above the reference tier.\\n/// - `updateBlocksForTierRange`: Updates a report with a block\\n/// number for every tier in a range.\\n/// - `updateReportWithTierAtBlock`: Updates a report to a new tier.\\n/// @dev Utilities to consistently read, write and manipulate tiers in reports.\\n/// The low-level bit shifting can be difficult to get right so this\\n/// factors that out.\\nlibrary TierReport {\\n    /// Enforce upper limit on tiers so we can do unchecked math.\\n    /// @param tier_ The tier to enforce bounds on.\\n    modifier maxTier(uint256 tier_) {\\n        require(tier_ <= TierConstants.MAX_TIER, \\\"MAX_TIER\\\");\\n        _;\\n    }\\n\\n    /// Returns the highest tier achieved relative to a block number\\n    /// and report.\\n    ///\\n    /// Note that typically the report will be from the _current_ contract\\n    /// state, i.e. `block.number` but not always. Tiers gained after the\\n    /// reference block are ignored.\\n    ///\\n    /// When the `report` comes from a later block than the `blockNumber` this\\n    /// means the user must have held the tier continuously from `blockNumber`\\n    /// _through_ to the report block.\\n    /// I.e. NOT a snapshot.\\n    ///\\n    /// @param report_ A report as per `ITier`.\\n    /// @param blockNumber_ The block number to check the tiers against.\\n    /// @return The highest tier held since `blockNumber` as per `report`.\\n    function tierAtBlockFromReport(uint256 report_, uint256 blockNumber_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        unchecked {\\n            for (uint256 i_ = 0; i_ < 8; i_++) {\\n                if (uint32(uint256(report_ >> (i_ * 32))) > blockNumber_) {\\n                    return i_;\\n                }\\n            }\\n            return TierConstants.MAX_TIER;\\n        }\\n    }\\n\\n    /// Returns the block that a given tier has been held since from a report.\\n    ///\\n    /// The report MUST encode \\\"never\\\" as 0xFFFFFFFF. This ensures\\n    /// compatibility with `tierAtBlockFromReport`.\\n    ///\\n    /// @param report_ The report to read a block number from.\\n    /// @param tier_ The Tier to read the block number for.\\n    /// @return The block number this has been held since.\\n    function tierBlock(uint256 report_, uint256 tier_)\\n        internal\\n        pure\\n        maxTier(tier_)\\n        returns (uint256)\\n    {\\n        unchecked {\\n            // ZERO is a special case. Everyone has always been at least ZERO,\\n            // since block 0.\\n            if (tier_ == 0) {\\n                return 0;\\n            }\\n\\n            uint256 offset_ = (tier_ - 1) * 32;\\n            return uint256(uint32(uint256(report_ >> offset_)));\\n        }\\n    }\\n\\n    /// Resets all the tiers above the reference tier to 0xFFFFFFFF.\\n    ///\\n    /// @param report_ Report to truncate with high bit 1s.\\n    /// @param tier_ Tier to truncate above (exclusive).\\n    /// @return Truncated report.\\n    function truncateTiersAbove(uint256 report_, uint256 tier_)\\n        internal\\n        pure\\n        maxTier(tier_)\\n        returns (uint256)\\n    {\\n        unchecked {\\n            uint256 offset_ = tier_ * 32;\\n            uint256 mask_ = (TierConstants.NEVER_REPORT >> offset_) << offset_;\\n            return report_ | mask_;\\n        }\\n    }\\n\\n    /// Updates a report with a block number for a given tier.\\n    /// More gas efficient than `updateBlocksForTierRange` if only a single\\n    /// tier is being modified.\\n    /// The tier at/above the given tier is updated. E.g. tier `0` will update\\n    /// the block for tier `1`.\\n    /// @param report_ Report to use as the baseline for the updated report.\\n    /// @param tier_ The tier level to update.\\n    /// @param blockNumber_ The new block number for `tier_`.\\n    function updateBlockAtTier(\\n        uint256 report_,\\n        uint256 tier_,\\n        uint256 blockNumber_\\n    ) internal pure maxTier(tier_) returns (uint256) {\\n        unchecked {\\n            uint256 offset_ = tier_ * 32;\\n            return\\n                (report_ &\\n                    ~uint256(uint256(TierConstants.NEVER_TIER) << offset_)) |\\n                uint256(blockNumber_ << offset_);\\n        }\\n    }\\n\\n    /// Updates a report with a block number for every tier in a range.\\n    ///\\n    /// Does nothing if the end status is equal or less than the start tier.\\n    /// @param report_ The report to update.\\n    /// @param startTier_ The tier at the start of the range (exclusive).\\n    /// @param endTier_ The tier at the end of the range (inclusive).\\n    /// @param blockNumber_ The block number to set for every tier in the\\n    /// range.\\n    /// @return The updated report.\\n    function updateBlocksForTierRange(\\n        uint256 report_,\\n        uint256 startTier_,\\n        uint256 endTier_,\\n        uint256 blockNumber_\\n    ) internal pure maxTier(endTier_) returns (uint256) {\\n        unchecked {\\n            uint256 offset_;\\n            for (uint256 i_ = startTier_; i_ < endTier_; i_++) {\\n                offset_ = i_ * 32;\\n                report_ =\\n                    (report_ &\\n                        ~uint256(\\n                            uint256(TierConstants.NEVER_TIER) << offset_\\n                        )) |\\n                    uint256(blockNumber_ << offset_);\\n            }\\n            return report_;\\n        }\\n    }\\n\\n    /// Updates a report to a new status.\\n    ///\\n    /// Internally dispatches to `truncateTiersAbove` and\\n    /// `updateBlocksForTierRange`.\\n    /// The dispatch is based on whether the new tier is above or below the\\n    /// current tier.\\n    /// The `startTier_` MUST match the result of `tierAtBlockFromReport`.\\n    /// It is expected the caller will know the current tier when\\n    /// calling this function and need to do other things in the calling scope\\n    /// with it.\\n    ///\\n    /// @param report_ The report to update.\\n    /// @param startTier_ The tier to start updating relative to. Data above\\n    /// this tier WILL BE LOST so probably should be the current tier.\\n    /// @param endTier_ The new highest tier held, at the given block number.\\n    /// @param blockNumber_ The block number to update the highest tier to, and\\n    /// intermediate tiers from `startTier_`.\\n    /// @return The updated report.\\n    function updateReportWithTierAtBlock(\\n        uint256 report_,\\n        uint256 startTier_,\\n        uint256 endTier_,\\n        uint256 blockNumber_\\n    ) internal pure returns (uint256) {\\n        return\\n            endTier_ < startTier_\\n                ? truncateTiersAbove(report_, endTier_)\\n                : updateBlocksForTierRange(\\n                    report_,\\n                    startTier_,\\n                    endTier_,\\n                    blockNumber_\\n                );\\n    }\\n}\\n\",\"keccak256\":\"0x214b857ca65e52ee4e7e631f656b650f612e1bf2e3cf7cf74544fa3550a10743\",\"license\":\"CAL\"},\"contracts/trust/Trust.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport {SaturatingMath} from \\\"../math/SaturatingMath.sol\\\";\\n\\nimport {IBalancerConstants} from \\\"../pool/IBalancerConstants.sol\\\";\\nimport {IBPool} from \\\"../pool/IBPool.sol\\\";\\nimport {ICRPFactory} from \\\"../pool/ICRPFactory.sol\\\";\\nimport {Rights} from \\\"../pool/IRightsManager.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n// solhint-disable-next-line max-line-length\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n// solhint-disable-next-line max-line-length\\nimport {RedeemableERC20, RedeemableERC20Config} from \\\"../redeemableERC20/RedeemableERC20.sol\\\";\\nimport {SeedERC20, SeedERC20Config} from \\\"../seed/SeedERC20.sol\\\";\\n// solhint-disable-next-line max-line-length\\nimport {RedeemableERC20Factory} from \\\"../redeemableERC20/RedeemableERC20Factory.sol\\\";\\nimport {SeedERC20Factory} from \\\"../seed/SeedERC20Factory.sol\\\";\\nimport {BPoolFeeEscrow} from \\\"../escrow/BPoolFeeEscrow.sol\\\";\\nimport {ERC20Config} from \\\"../erc20/ERC20Config.sol\\\";\\nimport {Phased} from \\\"../phased/Phased.sol\\\";\\n\\nimport \\\"../sale/ISale.sol\\\";\\n\\n// solhint-disable-next-line max-line-length\\nimport {PoolParams, IConfigurableRightsPool} from \\\"../pool/IConfigurableRightsPool.sol\\\";\\n\\n/// High level state of the distribution.\\n/// An amalgamation of the phases and states of the internal contracts.\\nenum DistributionStatus {\\n    /// Trust is created but does not have reserve funds required to start the\\n    /// distribution.\\n    Pending,\\n    /// Trust has enough reserve funds to start the distribution.\\n    Seeded,\\n    /// The balancer pool is funded and trading.\\n    Trading,\\n    /// The last block of the balancer pool gradual weight changes is in the\\n    /// past.\\n    TradingCanEnd,\\n    /// The balancer pool liquidity has been removed and distribution is\\n    /// successful.\\n    Success,\\n    /// The balancer pool liquidity has been removed and distribution is a\\n    /// failure.\\n    Fail\\n}\\n\\n/// Everything required to setup a `ConfigurableRightsPool` for a `Trust`.\\n/// @param reserve Reserve side of the pool pair.\\n/// @param token Redeemable ERC20 side of the pool pair.\\n/// @param reserveInit Initial reserve value in the pool.\\n/// @param tokenSupply Total token supply.\\n/// @param initialValuation Initial marketcap of the token according to the\\n/// balancer pool denominated in reserve token.\\n/// The spot price of the token is ( market cap / token supply ) where market\\n/// cap is defined in terms of the reserve. The spot price of a balancer pool\\n/// token is a function of both the amounts of each token and their weights.\\n/// This bonding curve is described in the Balancer whitepaper. We define a\\n/// valuation of newly minted tokens in terms of the deposited reserve. The\\n/// reserve weight is set to the minimum allowable value to achieve maximum\\n/// capital efficiency for the fund raising.\\nstruct CRPConfig {\\n    address reserve;\\n    address token;\\n    uint256 reserveInit;\\n    uint256 tokenSupply;\\n    uint256 initialValuation;\\n}\\n\\n/// Configuration specific to constructing the `Trust`.\\n/// @param crpFactory Balancer `ConfigurableRightsPool` factory.\\n/// @param balancerFactory Balancer factory.\\n/// @param redeemableERC20Factory `RedeemableERC20Factory`.\\n/// @param seedERC20Factory The `SeedERC20Factory` on the current network.\\n/// @param creatorFundsReleaseTimeout Number of blocks after which emergency\\n/// mode can be activated in phase two or three. Ideally this never happens and\\n/// instead anon ends the auction successfully and all funds are cleared. If\\n/// this does happen then creator can access any trust related tokens owned by\\n/// the trust.\\n/// @param maxRaiseDuration Every `Trust` built by this factory will have its\\n/// raise duration limited by this max duration.\\nstruct TrustConstructionConfig {\\n    address crpFactory;\\n    address balancerFactory;\\n    RedeemableERC20Factory redeemableERC20Factory;\\n    SeedERC20Factory seedERC20Factory;\\n    uint256 creatorFundsReleaseTimeout;\\n    uint256 maxRaiseDuration;\\n}\\n\\n/// Configuration specific to initializing a `Trust` clone.\\n/// `Trust` contracts also take inner config for the pool and token.\\n/// @param reserve Reserve token address, e.g. USDC.\\n/// @param reserveInit Initital reserve amount to start the LBP with.\\n/// @param initialValuation Initital valuation to weight the LBP against,\\n/// relative to the reserve.\\n/// @param finalValuation Final valuation to weight the LBP against, relative\\n/// to the reserve, assuming no trades.\\n/// @param minimumTradingDuration Minimum number of blocks the raise can be\\n/// active. Relies on anon to call `endDutchAuction` to close out the auction\\n/// after this many blocks.\\n/// @param creator Address of the creator who will receive reserve assets on\\n/// successful distribution.\\n/// @param minimumCreatorRaise Minimum amount to raise for the creator from the\\n/// distribution period. A successful distribution raises at least this\\n/// AND also the seed fee and `redeemInit`;\\n/// On success the creator receives these funds.\\n/// On failure the creator receives `0`.\\n/// @param seederFee Absolute amount of reserve tokens that the seeders will\\n/// receive in addition to their initial capital in the case that the raise is\\n/// successful.\\n/// @param redeemInit The initial reserve token amount to forward to the\\n/// redeemable token in the case that the raise is successful. If the raise\\n/// fails this is ignored and instead the full reserve amount sans seeder\\n/// refund is forwarded instead.\\nstruct TrustConfig {\\n    IERC20 reserve;\\n    uint256 reserveInit;\\n    uint256 initialValuation;\\n    uint256 finalValuation;\\n    uint256 minimumTradingDuration;\\n    address creator;\\n    uint256 minimumCreatorRaise;\\n    uint256 seederFee;\\n    uint256 redeemInit;\\n}\\n\\n/// Forwarded config for `SeedERC20Config`.\\n/// @param seeder Either an EOA (externally owned address) or `address(0)`.\\n/// If an EOA the seeder account must transfer seed funds to the newly\\n/// constructed `Trust` before distribution can start.\\n/// If `address(0)` a new `SeedERC20` contract is built in the `Trust`\\n/// constructor.\\nstruct TrustSeedERC20Config {\\n    address seeder;\\n    uint256 cooldownDuration;\\n    ERC20Config erc20Config;\\n}\\n\\n/// Forwarded config for `RedeemableERC20Config`.\\nstruct TrustRedeemableERC20Config {\\n    ERC20Config erc20Config;\\n    address tier;\\n    uint256 minimumTier;\\n}\\n\\n/// @title Trust\\n/// @notice The Balancer LBP functionality is wrapped by `RedeemableERC20Pool`.\\n///\\n/// Ensures the pool tokens created during the initialization of the\\n/// Balancer LBP are owned by the `Trust` and never touch an externally owned\\n/// account.\\n///\\n/// `Trust` has several phases:\\n///\\n/// - `PHASE_PENDING`: Deployed not trading but can be by anon calling\\n/// `startDutchAuction`\\n/// - `PHASE_TRADING`: Trading open\\n/// - `PHASE_CAN_END`: Trading open but can be closed by anon calling\\n/// `endDutchAuction`\\n/// - `PHASE_ENDED`: Trading closed\\n/// - `PHASE_EMERGENCY`: Something went very wrong and creator can pull funds\\n/// and attempt to manually fix it.\\n///\\n/// @notice Coordinates the mediation and distribution of tokens\\n/// between stakeholders.\\n///\\n/// The `Trust` contract is responsible for configuring and owning the\\n/// `RedeemableERC20` token, and the `SeedERC20` contract.\\n///\\n/// The major functions of the `Trust` contract, apart from building\\n/// and configuring the other contracts, is to start and end the\\n/// fundraising event, and mediate the distribution of funds to the\\n/// correct stakeholders:\\n///\\n/// - On `Trust` construction, all minted `RedeemableERC20` tokens\\n///   are sent to the `RedeemableERC20Pool`\\n/// - `startDutchAuction` can be called by anyone on `RedeemableERC20Pool` to\\n///   begin the Dutch Auction. This will revert if this is called before seeder\\n///   reserve funds are available on the `Trust`.\\n/// - `endDutchAuction` can be called by anyone (only when\\n///   `Trust` is in `PHASE_CAN_END`) to end the Dutch Auction\\n///   and distribute funds to the correct stakeholders, depending on\\n///   whether or not the auction met the fundraising target.\\n///   - On successful raise\\n///     - seed funds are returned to `seeder` address along with\\n///       additional `seederFee` if configured\\n///     - `redeemInit` is sent to the `redeemableERC20` address, to back\\n///       redemptions\\n///     - the `creator` gets the remaining balance, which should\\n///       equal or exceed `minimumCreatorRaise`\\n///   - On failed raise\\n///     - seed funds are returned to `seeder` address\\n///     - the remaining balance is sent to the `redeemableERC20` address, to\\n///       back redemptions\\n///     - the `creator` gets nothing\\n/// @dev Mediates stakeholders and creates internal Balancer pools and tokens\\n/// for a distribution.\\n///\\n/// The goals of a distribution:\\n/// - Mint and distribute a `RedeemableERC20` as fairly as possible,\\n///   prioritising true fans of a creator.\\n/// - Raise a minimum reserve so that a creator can deliver value to fans.\\n/// - Provide a safe space through membership style filters to enhance\\n///   exclusivity for fans.\\n/// - Ensure that anyone who seeds the raise (not fans) by risking and\\n///   providing capital is compensated.\\n///\\n/// Stakeholders:\\n/// - Creator: Have a project of interest to their fans\\n/// - Fans: Will purchase project-specific tokens to receive future rewards\\n///   from the creator\\n/// - Seeder(s): Provide initial reserve assets to seed a Balancer trading pool\\n/// - Deployer: Configures and deploys the `Trust` contract\\n///\\n/// The creator is nominated to receive reserve assets on a successful\\n/// distribution. The creator must complete the project and fans receive\\n/// rewards. There is no on-chain mechanism to hold the creator accountable to\\n/// the project completion. Requires a high degree of trust between creator and\\n/// their fans.\\n///\\n/// Fans are willing to trust and provide funds to a creator to complete a\\n/// project. Fans likely expect some kind of reward or \\\"perks\\\" from the\\n/// creator, such as NFTs, exclusive events, etc.\\n/// The distributed tokens are untransferable after trading ends and merely act\\n/// as records for who should receive rewards.\\n///\\n/// Seeders add the initial reserve asset to the Balancer pool to start the\\n/// automated market maker (AMM).\\n/// Ideally this would not be needed at all.\\n/// Future versions of `Trust` may include a bespoke distribution mechanism\\n/// rather than Balancer contracts. Currently it is required by Balancer so the\\n/// seeder provides some reserve and receives a fee on successful distribution.\\n/// If the distribution fails the seeder is returned their initial reserve\\n/// assets. The seeder is expected to promote and mentor the creator in\\n/// non-financial ways.\\n///\\n/// The deployer has no specific priviledge or admin access once the `Trust` is\\n/// deployed. They provide the configuration, including nominating\\n/// creator/seeder, and pay gas but that is all.\\n/// The deployer defines the conditions under which the distribution is\\n/// successful. The seeder/creator could also act as the deployer.\\n///\\n/// Importantly the `Trust` contract is the owner/admin of the contracts it\\n/// creates. The `Trust` never transfers ownership so it directly controls all\\n/// internal workflows. No stakeholder, even the deployer or creator, can act\\n/// as owner of the internals.\\ncontract Trust is Phased, ISale {\\n    using Math for uint256;\\n    using SaturatingMath for uint256;\\n\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for RedeemableERC20;\\n\\n    /// Balancer requires a minimum balance of `10 ** 6` for all tokens at all\\n    /// times. ConfigurableRightsPool repo misreports this as 10 ** 12 but the\\n    /// Balancer Core repo has it set as `10 ** 6`. We add one here to protect\\n    /// ourselves against rounding issues.\\n    uint256 private constant MIN_BALANCER_POOL_BALANCE = 10**6 + 1;\\n    /// To ensure that the dust at the end of the raise is dust-like, we\\n    /// enforce a minimum starting reserve balance 100x the minimum.\\n    uint256 private constant MIN_RESERVE_INIT = 10**8;\\n\\n    /// Trust is not initialized.\\n    uint256 private constant PHASE_UNINITIALIZED = 0;\\n    /// Trust has not received reserve funds to start a raise.\\n    uint256 private constant PHASE_PENDING = 1;\\n    /// Trust has started trading against an LBP.\\n    uint256 private constant PHASE_TRADING = 2;\\n    /// LBP can end.\\n    uint256 private constant PHASE_CAN_END = 3;\\n    /// LBP has ended successfully and funds are distributed.\\n    uint256 private constant PHASE_ENDED = 4;\\n    /// LBP failed to end somehow and creator must handle funds.\\n    uint256 private constant PHASE_EMERGENCY = 5;\\n\\n    /// Trust has been constructed.\\n    /// Intended for use with a `TrustFactory` that will clone all these.\\n    /// @param sender `msg.sender` of the construction.\\n    event Construction(\\n        address sender,\\n        address balancerFactory,\\n        address crpFactory,\\n        address redeemableERC20Factory,\\n        address seedERC20Factory,\\n        address bPoolFeeEscrow,\\n        uint256 creatorFundsReleaseTimeout,\\n        uint256 maxRaiseDuration\\n    );\\n\\n    /// Summary of every contract built or referenced internally by `Trust`.\\n    /// @param sender `msg.sender` of the initialize.\\n    /// @param config config input to initialize.\\n    /// @param crp The Balancer `ConfigurableRightsPool` deployed for this\\n    /// distribution.\\n    /// @param seeder Address that provides the initial reserve token seed.\\n    /// @param redeemableERC20 Redeemable erc20 token that is minted and\\n    /// distributed.\\n    /// @param successBalance Success balance calculated from the config.\\n    event Initialize(\\n        address sender,\\n        TrustConfig config,\\n        address crp,\\n        address seeder,\\n        address redeemableERC20,\\n        uint256 successBalance\\n    );\\n\\n    /// The dutch auction has started.\\n    /// @param sender `msg.sender` of the auction start.\\n    /// @param pool The pool created for the auction.\\n    /// @param finalAuctionBlock The block the auction can end after.\\n    event StartDutchAuction(\\n        address sender,\\n        address pool,\\n        uint256 finalAuctionBlock\\n    );\\n\\n    /// The dutch auction has ended.\\n    /// @param sender `msg.sender` of the auction end.\\n    /// @param finalBalance Final balance of the auction that is payable to\\n    /// participants. Doesn't include trapped dust.\\n    /// @param seederPay Amount paid to seeder.\\n    /// @param creatorPay Amount paid to raise creator.\\n    /// @param tokenPay Amount paid to redeemable token.\\n    /// @param poolDust Dust trapped in the pool.\\n    event EndDutchAuction(\\n        address sender,\\n        uint256 finalBalance,\\n        uint256 seederPay,\\n        uint256 creatorPay,\\n        uint256 tokenPay,\\n        uint256 poolDust\\n    );\\n\\n    /// Funds released for creator in emergency mode.\\n    /// @param sender `msg.sender` of the funds release.\\n    /// @param token Token being released.\\n    /// @param amount Amount of token released.\\n    event CreatorFundsRelease(address sender, address token, uint256 amount);\\n\\n    /// Balancer pool fee escrow used for trust trades.\\n    BPoolFeeEscrow private immutable bPoolFeeEscrow;\\n\\n    /// Max duration that can be initialized for the `Trust`.\\n    uint256 private immutable maxRaiseDuration;\\n\\n    /// Seeder from the initial config.\\n    address private seeder;\\n    /// `SeedERC20Factory` from the construction config.\\n    SeedERC20Factory private immutable seedERC20Factory;\\n    /// `RedeemableERC20Factory` from the construction config.\\n    RedeemableERC20Factory private immutable redeemableERC20Factory;\\n    /// `CRPFactory` from the construction config.\\n    address private immutable crpFactory;\\n    /// `BalancerFactory` from the construction config.\\n    address private immutable balancerFactory;\\n\\n    /// Balance of the reserve asset in the Balance pool at the moment\\n    /// `anonEndDistribution` is called. This must be greater than or equal to\\n    /// `successBalance` for the distribution to succeed.\\n    /// Will be uninitialized until `anonEndDistribution` is called.\\n    /// Note the finalBalance includes the dust that is permanently locked in\\n    /// the Balancer pool after the distribution.\\n    /// The actual distributed amount will lose roughly 10 ** -7 times this as\\n    /// locked dust.\\n    /// The exact dust can be retrieved by inspecting the reserve balance of\\n    /// the Balancer pool after the distribution.\\n    uint256 private finalBalance;\\n    /// Pool reserveInit + seederFee + redeemInit + minimumCreatorRaise.\\n    /// Could be calculated as a view function but that would require external\\n    /// calls to the pool contract.\\n    uint256 private successBalance;\\n\\n    /// The redeemable token minted in the constructor.\\n    RedeemableERC20 private _token;\\n    /// Reserve token.\\n    IERC20 private _reserve;\\n    /// The `ConfigurableRightsPool` built during construction.\\n    IConfigurableRightsPool public crp;\\n\\n    /// Initial reserve balance of the pool.\\n    uint256 private reserveInit;\\n\\n    /// Minimum amount that must be raised for the creator for a success.\\n    /// Dust, seeder and token balances must be added to this for the final\\n    /// pool success value.\\n    uint256 private minimumCreatorRaise;\\n\\n    /// The creator of the raise.\\n    address private creator;\\n    /// After this many blocks in a raise-endable state, the creator funds\\n    /// release can be activated. Ideally this is either never activated or by\\n    /// the time it is activated all funds are long gone due to a successful\\n    /// raise end distribution.\\n    uint256 private immutable creatorFundsReleaseTimeout;\\n\\n    /// The fee paid to seeders on top of the seeder input if the raise is a\\n    /// success.\\n    uint256 private seederFee;\\n    /// The reserve forwarded to the redeemable token if the raise is a\\n    /// success.\\n    uint256 private redeemInit;\\n\\n    /// Minimum trading duration from the initial config.\\n    uint256 private minimumTradingDuration;\\n\\n    /// The final weight on the last block of the raise.\\n    /// Note the spot price is unknown until the end because we don't know\\n    /// either of the final token balances.\\n    uint256 private finalWeight;\\n\\n    constructor(TrustConstructionConfig memory config_) {\\n        balancerFactory = config_.balancerFactory;\\n        crpFactory = config_.crpFactory;\\n        redeemableERC20Factory = config_.redeemableERC20Factory;\\n        seedERC20Factory = config_.seedERC20Factory;\\n        BPoolFeeEscrow bPoolFeeEscrow_ = new BPoolFeeEscrow();\\n        bPoolFeeEscrow = bPoolFeeEscrow_;\\n        creatorFundsReleaseTimeout = config_.creatorFundsReleaseTimeout;\\n        // Assumption here that the `msg.sender` is a `TrustFactory` that the\\n        // `BPoolFeeEscrow` can trust. If it isn't then an insecure escrow will\\n        // be deployed for this `Trust` AND this `Trust` itself won't have a\\n        // secure parent `TrustFactory` so nobody should trust it.\\n        maxRaiseDuration = config_.maxRaiseDuration;\\n\\n        emit Construction(\\n            msg.sender,\\n            config_.balancerFactory,\\n            config_.crpFactory,\\n            address(config_.redeemableERC20Factory),\\n            address(config_.seedERC20Factory),\\n            address(bPoolFeeEscrow_),\\n            config_.creatorFundsReleaseTimeout,\\n            config_.maxRaiseDuration\\n        );\\n    }\\n\\n    /// Sanity checks configuration.\\n    /// Creates the `RedeemableERC20` contract and mints the redeemable ERC20\\n    /// token.\\n    /// Creates the `RedeemableERC20Pool` contract.\\n    /// (optional) Creates the `SeedERC20` contract. Pass a non-zero address to\\n    /// bypass this.\\n    /// Adds the Balancer pool contracts to the token sender/receiver lists as\\n    /// needed.\\n    /// Adds the Balancer pool reserve asset as the first redeemable on the\\n    /// `RedeemableERC20` contract.\\n    ///\\n    /// Note on slither:\\n    /// Slither detects a benign reentrancy in this constructor.\\n    /// However reentrancy is not possible in a contract constructor.\\n    /// Further discussion with the slither team:\\n    /// https://github.com/crytic/slither/issues/887\\n    ///\\n    /// @param config_ Config for the Trust.\\n    // Slither false positive. `initializePhased` cannot be reentrant.\\n    // https://github.com/crytic/slither/issues/887\\n    // slither-disable-next-line reentrancy-benign\\n    function initialize(\\n        TrustConfig memory config_,\\n        TrustRedeemableERC20Config memory trustRedeemableERC20Config_,\\n        TrustSeedERC20Config memory trustSeedERC20Config_\\n    ) external {\\n        initializePhased();\\n        // Copied from onlyPhase so it can sit after `initializePhased`.\\n        require(currentPhase() == PHASE_UNINITIALIZED, \\\"BAD_PHASE\\\");\\n        schedulePhase(PHASE_PENDING, block.number);\\n\\n        require(config_.creator != address(0), \\\"CREATOR_0\\\");\\n        require(address(config_.reserve) != address(0), \\\"RESERVE_0\\\");\\n        require(\\n            config_.reserveInit >= MIN_RESERVE_INIT,\\n            \\\"RESERVE_INIT_MINIMUM\\\"\\n        );\\n        require(\\n            config_.initialValuation >= config_.finalValuation,\\n            \\\"MIN_INITIAL_VALUATION\\\"\\n        );\\n\\n        creator = config_.creator;\\n        _reserve = config_.reserve;\\n        reserveInit = config_.reserveInit;\\n\\n        // If the raise really does have a minimum of `0` and `0` trading\\n        // happens then the raise will be considered a \\\"success\\\", burning all\\n        // rTKN, which would trap any escrowed or deposited funds that nobody\\n        // can retrieve as nobody holds any rTKN.\\n        // A zero or very low minimum raise is very likely NOT what you want\\n        // for a LBP, consider using `Sale` instead, which supports rTKN\\n        // forwarding in the case of a raise not selling out.\\n        require(config_.minimumCreatorRaise > 0, \\\"MIN_RAISE_0\\\");\\n        minimumCreatorRaise = config_.minimumCreatorRaise;\\n        seederFee = config_.seederFee;\\n        redeemInit = config_.redeemInit;\\n\\n        finalWeight = valuationWeight(\\n            config_.reserveInit,\\n            config_.finalValuation\\n        );\\n\\n        uint256 successBalance_ = config_.reserveInit +\\n            config_.seederFee +\\n            config_.redeemInit +\\n            config_.minimumCreatorRaise;\\n\\n        require(\\n            config_.finalValuation >= successBalance_,\\n            \\\"MIN_FINAL_VALUATION\\\"\\n        );\\n        successBalance = successBalance_;\\n\\n        require(\\n            config_.minimumTradingDuration <= maxRaiseDuration,\\n            \\\"MAX_RAISE_DURATION\\\"\\n        );\\n        require(config_.minimumTradingDuration > 0, \\\"0_TRADING_DURATION\\\");\\n        minimumTradingDuration = config_.minimumTradingDuration;\\n\\n        address redeemableERC20_ = initializeRedeemableERC20(\\n            config_,\\n            trustRedeemableERC20Config_\\n        );\\n        _token = RedeemableERC20(redeemableERC20_);\\n\\n        address seeder_ = initializeSeeder(config_, trustSeedERC20Config_);\\n        seeder = seeder_;\\n\\n        address crp_ = initializeCRP(\\n            CRPConfig(\\n                address(config_.reserve),\\n                redeemableERC20_,\\n                config_.reserveInit,\\n                trustRedeemableERC20Config_.erc20Config.initialSupply,\\n                config_.initialValuation\\n            )\\n        );\\n        crp = IConfigurableRightsPool(crp_);\\n\\n        emit Initialize(\\n            msg.sender,\\n            config_,\\n            crp_,\\n            seeder_,\\n            address(redeemableERC20_),\\n            successBalance_\\n        );\\n    }\\n\\n    /// Initializes the `RedeemableERC20` token used by the trust.\\n    function initializeRedeemableERC20(\\n        TrustConfig memory config_,\\n        TrustRedeemableERC20Config memory trustRedeemableERC20Config_\\n    ) private returns (address) {\\n        // There are additional minimum reserve init and token supply\\n        // restrictions enforced by `RedeemableERC20` and\\n        // `RedeemableERC20Pool`. This ensures that the weightings and\\n        // valuations will be in a sensible range according to the internal\\n        // assumptions made by Balancer etc.\\n        require(\\n            trustRedeemableERC20Config_.erc20Config.initialSupply >=\\n                config_.reserveInit,\\n            \\\"MIN_TOKEN_SUPPLY\\\"\\n        );\\n        // Whatever address is provided for erc20Config as the distributor is\\n        // ignored and overwritten as the `Trust`.\\n        trustRedeemableERC20Config_.erc20Config.distributor = address(this);\\n        RedeemableERC20 redeemableERC20_ = RedeemableERC20(\\n            redeemableERC20Factory.createChild(\\n                abi.encode(\\n                    RedeemableERC20Config(\\n                        address(config_.reserve),\\n                        trustRedeemableERC20Config_.erc20Config,\\n                        trustRedeemableERC20Config_.tier,\\n                        trustRedeemableERC20Config_.minimumTier,\\n                        // Forwarding address is always zero\\n                        // (i.e. distribution will burn unsold rTKN)\\n                        // because LBP mechanics basically mandate many unsold\\n                        // tokens.\\n                        address(0)\\n                    )\\n                )\\n            )\\n        );\\n        redeemableERC20_.grantReceiver(address(bPoolFeeEscrow));\\n        return address(redeemableERC20_);\\n    }\\n\\n    /// Initializes the seeder used by the `Trust`.\\n    /// If `TrustSeedERC20Config.seeder` is `address(0)` a new `SeedERC20`\\n    /// contract is cloned, otherwise the seeder is used verbatim.\\n    function initializeSeeder(\\n        TrustConfig memory config_,\\n        TrustSeedERC20Config memory trustSeedERC20Config_\\n    ) private returns (address) {\\n        address seeder_ = trustSeedERC20Config_.seeder;\\n        if (seeder_ == address(0)) {\\n            require(\\n                0 ==\\n                    config_.reserveInit %\\n                        trustSeedERC20Config_.erc20Config.initialSupply,\\n                \\\"SEED_PRICE_MULTIPLIER\\\"\\n            );\\n            seeder_ = address(\\n                seedERC20Factory.createChild(\\n                    abi.encode(\\n                        SeedERC20Config(\\n                            config_.reserve,\\n                            address(this),\\n                            // seed price.\\n                            config_.reserveInit /\\n                                trustSeedERC20Config_.erc20Config.initialSupply,\\n                            trustSeedERC20Config_.cooldownDuration,\\n                            trustSeedERC20Config_.erc20Config\\n                        )\\n                    )\\n                )\\n            );\\n        }\\n        return seeder_;\\n    }\\n\\n    /// Configures and deploys the `ConfigurableRightsPool`.\\n    /// Call this during initialization.\\n    /// @param config_ All configuration for the `RedeemableERC20Pool`.\\n    function initializeCRP(CRPConfig memory config_) private returns (address) {\\n        // The addresses in the `RedeemableERC20Pool`, as `[reserve, token]`.\\n        address[] memory poolAddresses_ = new address[](2);\\n        poolAddresses_[0] = address(config_.reserve);\\n        poolAddresses_[1] = address(config_.token);\\n\\n        // Initial amounts as configured reserve init and total token supply.\\n        uint256[] memory poolAmounts_ = new uint256[](2);\\n        poolAmounts_[0] = config_.reserveInit;\\n        poolAmounts_[1] = config_.tokenSupply;\\n\\n        // Initital weights follow initial valuation reserve denominated.\\n        uint256[] memory initialWeights_ = new uint256[](2);\\n        initialWeights_[0] = IBalancerConstants.MIN_WEIGHT;\\n        initialWeights_[1] = valuationWeight(\\n            config_.reserveInit,\\n            config_.initialValuation\\n        );\\n\\n        address crp_ = ICRPFactory(crpFactory).newCrp(\\n            balancerFactory,\\n            PoolParams(\\n                \\\"R20P\\\",\\n                \\\"RedeemableERC20Pool\\\",\\n                poolAddresses_,\\n                poolAmounts_,\\n                initialWeights_,\\n                IBalancerConstants.MIN_FEE\\n            ),\\n            Rights(\\n                // 0. Pause\\n                false,\\n                // 1. Change fee\\n                false,\\n                // 2. Change weights\\n                // (`true` needed to set gradual weight schedule)\\n                true,\\n                // 3. Add/remove tokens\\n                false,\\n                // 4. Whitelist LPs (default behaviour for `true` is that\\n                //    nobody can `joinPool`)\\n                true,\\n                // 5. Change cap\\n                false\\n            )\\n        );\\n\\n        // Need to grant transfers for a few balancer addresses to facilitate\\n        // setup and exits.\\n        RedeemableERC20(config_.token).grantReceiver(\\n            address(IConfigurableRightsPool(crp_).bFactory())\\n        );\\n        RedeemableERC20(config_.token).grantReceiver(address(this));\\n        RedeemableERC20(config_.token).grantReceiver(crp_);\\n        RedeemableERC20(config_.token).grantSender(crp_);\\n\\n        // Preapprove all tokens and reserve for the CRP.\\n        IERC20(config_.reserve).safeApprove(address(crp_), config_.reserveInit);\\n        IERC20(config_.token).safeApprove(address(crp_), config_.tokenSupply);\\n\\n        return crp_;\\n    }\\n\\n    /// https://balancer.finance/whitepaper/\\n    /// Spot = ( Br / Wr ) / ( Bt / Wt )\\n    /// => ( Bt / Wt ) = ( Br / Wr ) / Spot\\n    /// => Wt = ( Spot x Bt ) / ( Br / Wr )\\n    ///\\n    /// Valuation = Spot * Token supply\\n    /// Valuation / Supply = Spot\\n    /// => Wt = ( ( Val / Supply ) x Bt ) / ( Br / Wr )\\n    ///\\n    /// Bt = Total supply\\n    /// => Wt = ( ( Val / Bt ) x Bt ) / ( Br / Wr )\\n    /// => Wt = Val / ( Br / Wr )\\n    ///\\n    /// Wr = Min weight = 1\\n    /// => Wt = Val / Br\\n    ///\\n    /// Br = reserve balance\\n    /// => Wt = Val / reserve balance (reserve init if no trading occurs)\\n    /// @param reserveBalance_ Reserve balance to calculate weight against.\\n    /// @param valuation_ Valuation as ( market cap * price ) denominated in\\n    /// reserve to calculate a weight for.\\n    function valuationWeight(uint256 reserveBalance_, uint256 valuation_)\\n        private\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 weight_ = (valuation_ * IBalancerConstants.BONE) /\\n            reserveBalance_;\\n        require(\\n            weight_ >= IBalancerConstants.MIN_WEIGHT,\\n            \\\"MIN_WEIGHT_VALUATION\\\"\\n        );\\n        // The combined weight of both tokens cannot exceed the maximum even\\n        // temporarily during a transaction so we need to subtract one for\\n        // headroom.\\n        require(\\n            (IBalancerConstants.MAX_WEIGHT - IBalancerConstants.BONE) >=\\n                (IBalancerConstants.MIN_WEIGHT + weight_),\\n            \\\"MAX_WEIGHT_VALUATION\\\"\\n        );\\n        return weight_;\\n    }\\n\\n    /// @inheritdoc ISale\\n    function token() external view returns (address) {\\n        return address(_token);\\n    }\\n\\n    /// @inheritdoc ISale\\n    function reserve() external view returns (address) {\\n        return address(_reserve);\\n    }\\n\\n    /// @inheritdoc ISale\\n    function saleStatus() external view returns (SaleStatus) {\\n        uint256 poolPhase_ = currentPhase();\\n        if (poolPhase_ == PHASE_ENDED || poolPhase_ == PHASE_EMERGENCY) {\\n            if (finalBalance >= successBalance) {\\n                return SaleStatus.Success;\\n            } else {\\n                return SaleStatus.Fail;\\n            }\\n        } else {\\n            return SaleStatus.Pending;\\n        }\\n    }\\n\\n    /// Accessor for the `DistributionStatus` of this `Trust`.\\n    /// Some of the distribution statuses are derived from the state of the\\n    /// contract in addition to the phase.\\n    function getDistributionStatus()\\n        external\\n        view\\n        returns (DistributionStatus)\\n    {\\n        uint256 poolPhase_ = currentPhase();\\n        if (poolPhase_ == PHASE_UNINITIALIZED) {\\n            return DistributionStatus.Pending;\\n        }\\n        if (poolPhase_ == PHASE_PENDING) {\\n            if (_reserve.balanceOf(address(this)) >= reserveInit) {\\n                return DistributionStatus.Seeded;\\n            } else {\\n                return DistributionStatus.Pending;\\n            }\\n        } else if (poolPhase_ == PHASE_TRADING) {\\n            return DistributionStatus.Trading;\\n        } else if (poolPhase_ == PHASE_CAN_END) {\\n            return DistributionStatus.TradingCanEnd;\\n        }\\n        /// PHASE_EMERGENCY is emergency funds release mode, which ideally will\\n        /// never happen. If it does we still use the final/success balance to\\n        /// calculate success/failure so that the escrows can action their own\\n        /// fund releases.\\n        else if (poolPhase_ == PHASE_ENDED || poolPhase_ == PHASE_EMERGENCY) {\\n            if (finalBalance >= successBalance) {\\n                return DistributionStatus.Success;\\n            } else {\\n                return DistributionStatus.Fail;\\n            }\\n        } else {\\n            revert(\\\"UNKNOWN_POOL_PHASE\\\");\\n        }\\n    }\\n\\n    /// Allow anyone to start the Balancer style dutch auction.\\n    /// The auction won't start unless this contract owns enough of both the\\n    /// tokens for the pool, so it is safe for anon to call.\\n    /// Creates the pool via. the CRP contract and configures the weight change\\n    /// curve.\\n    function startDutchAuction() external onlyPhase(PHASE_PENDING) {\\n        uint256 finalAuctionBlock_ = minimumTradingDuration + block.number;\\n        // Move to `PHASE_TRADING` immediately.\\n        schedulePhase(PHASE_TRADING, block.number);\\n        // Schedule `PHASE_CAN_END` for `1` block after auctions weights have\\n        // stopped changing.\\n        schedulePhase(PHASE_CAN_END, finalAuctionBlock_ + 1);\\n        // Define the weight curve.\\n        uint256[] memory finalWeights_ = new uint256[](2);\\n        finalWeights_[0] = IBalancerConstants.MIN_WEIGHT;\\n        finalWeights_[1] = finalWeight;\\n\\n        IConfigurableRightsPool crp_ = crp;\\n\\n        // Max pool tokens to minimise dust on exit.\\n        // No minimum weight change period.\\n        // No time lock (we handle our own locks in the trust).\\n        crp_.createPool(IBalancerConstants.MAX_POOL_SUPPLY, 0, 0);\\n        address pool_ = crp_.bPool();\\n        emit StartDutchAuction(msg.sender, pool_, finalAuctionBlock_);\\n        // Now that the bPool has a known address we need it to be a RECEIVER\\n        // as it is impossible in general for `ITier` restricted tokens to be\\n        // able to approve the pool itself. This ensures that token holders can\\n        // always sell back into the pool.\\n        // Note: We do NOT grant the bPool the SENDER role as that would bypass\\n        // `ITier` restrictions for everyone buying the token.\\n        _token.grantReceiver(pool_);\\n        crp_.updateWeightsGradually(\\n            finalWeights_,\\n            block.number,\\n            finalAuctionBlock_\\n        );\\n    }\\n\\n    function exitPool() private {\\n        IBPool pool_ = IBPool(crp.bPool());\\n\\n        // Ensure the bPool is aware of the real internal token balances.\\n        // Balancer will ignore tokens transferred to it until they are gulped.\\n        pool_.gulp(address(_reserve));\\n        pool_.gulp(address(_token));\\n\\n        uint256 totalPoolTokens_ = IERC20(address(crp)).totalSupply();\\n\\n        // Balancer enforces a global minimum pool LP token supply as\\n        // `MIN_POOL_SUPPLY`.\\n        // Balancer also indirectly enforces local minimums on pool token\\n        // supply by enforcing minimum erc20 token balances in the pool.\\n        // The real minimum pool LP token supply is the largest of:\\n        // - The global minimum\\n        // - The LP token supply implied by the reserve\\n        // - The LP token supply implied by the token\\n        uint256 minReservePoolTokens_ = MIN_BALANCER_POOL_BALANCE.saturatingMul(\\n                totalPoolTokens_\\n            ) /\\n            // It's important to use the balance in the opinion of the\\n            // bPool to be sure that the pool token calculations are the\\n            // same.\\n            // WARNING: This will error if reserve balance in the pool is\\n            // somehow `0`. That should not be possible as balancer should\\n            // be preventing zero balance due to trades. If this ever\\n            // happens even emergency mode probably won't help because it's\\n            // unlikely that `exitPool` will succeed for any input values.\\n            pool_.getBalance(address(_reserve));\\n        // The minimum redeemable token supply is `10 ** 18` so it is near\\n        // impossible to hit this before the reserve or global pool minimums.\\n        uint256 minRedeemablePoolTokens_ = MIN_BALANCER_POOL_BALANCE\\n            .saturatingMul(totalPoolTokens_) /\\n            // It's important to use the balance in the opinion of the\\n            // bPool to be sure that the pool token calculations are the\\n            // same.\\n            // WARNING: As above, this will error if token balance in the\\n            // pool is `0`.\\n            pool_.getBalance(address(_token));\\n        uint256 minPoolSupply_ = IBalancerConstants\\n            .MIN_POOL_SUPPLY\\n            .max(minReservePoolTokens_)\\n            .max(minRedeemablePoolTokens_) +\\n            // Overcompensate for any rounding that could cause `exitPool` to\\n            // fail. This probably doesn't change anything because there are 9\\n            // OOMs between BONE and MAX_POOL_SUPPLY so `bdiv` will truncate\\n            // the precision a lot anyway.\\n            // Also `SmartPoolManager.exitPool` used internally by\\n            // `crp.exitPool` subtracts one so token amounts round down.\\n            1;\\n\\n        // This removes as much as is allowable which leaves behind some dust.\\n        // The reserve dust will be trapped.\\n        // The redeemable token will be burned when it moves to its own\\n        // `PHASE_FROZEN`.\\n        crp.exitPool(\\n            // Exit the maximum allowable pool tokens.\\n            totalPoolTokens_.saturatingSub(minPoolSupply_).min(\\n                // Don't attempt to exit more tokens than the `Trust` owns.\\n                // This SHOULD be the same as `totalPoolTokens_` so it's just\\n                // guarding against some bug or edge case.\\n                IERC20(address(crp)).balanceOf(address(this))\\n            ),\\n            new uint256[](2)\\n        );\\n    }\\n\\n    /// Allow anon to end the Balancer style dutch auction.\\n    /// Moves from `PHASE_CAN_END` to `PHASE_ENDED` to indicate the auction has\\n    /// ended.\\n    /// `PHASE_CAN_END` is scheduled by `startDutchAuction`.\\n    /// Removes all LP tokens from the Balancer pool.\\n    /// Moves the redeemable token to `PHASE_FROZEN`.\\n    // `SaturatingMath` is used in case there is somehow an edge case not\\n    // considered that causes overflow/underflow, we still want to approve\\n    // the final state so as not to trap funds with an underflow error.\\n    function endDutchAuction() public onlyPhase(PHASE_CAN_END) {\\n        // Move to `PHASE_ENDED` immediately.\\n        // Prevents reentrancy.\\n        schedulePhase(PHASE_ENDED, block.number);\\n\\n        exitPool();\\n\\n        address pool_ = crp.bPool();\\n\\n        // Burning the distributor moves the rTKN to its `PHASE_FROZEN` and\\n        // unlocks redemptions.\\n        // The distributor is the `bPool` itself and all unsold inventory.\\n        // First we send all exited rTKN back to the pool so it can be burned.\\n        IERC20(address(_token)).safeTransfer(\\n            pool_,\\n            _token.balanceOf(address(this))\\n        );\\n        _token.endDistribution(pool_);\\n\\n        // The dust is NOT included in the final balance.\\n        // The `availableBalance_` is the reserve the `Trust` owns and so can\\n        // safely transfer, despite dust etc.\\n        uint256 finalBalance_ = _reserve.balanceOf(address(this));\\n        finalBalance = finalBalance_;\\n\\n        // `Trust` must ensure that success balance covers seeder and token pay\\n        // in addition to creator minimum raise. Otherwise someone won't get\\n        // paid in full.\\n        bool success_ = successBalance <= finalBalance_;\\n\\n        // We do our best to pay each party in full in priority order:\\n        // - Seeder\\n        // - rTKN\\n        // - Creator\\n        // There is some pool dust that makes it a bit unpredictable exactly\\n        // who will be paid slightly less than they are expecting at the edge\\n        // cases.\\n        uint256 seederPay_ = reserveInit;\\n        // The seeder gets an additional fee on success.\\n        if (success_) {\\n            seederPay_ = seederPay_.saturatingAdd(seederFee);\\n        }\\n        // The `finalBalance_` can be lower than the seeder entitlement due to\\n        // unavoidable pool dust trapped in Balancer.\\n        seederPay_ = seederPay_.min(finalBalance_);\\n\\n        // Once the seeder is covered the remaining capital is allocated\\n        // according to success/fail of the raise.\\n        uint256 tokenPay_ = 0;\\n        uint256 creatorPay_ = 0;\\n        uint256 remaining_ = finalBalance_.saturatingSub(seederPay_);\\n        if (success_) {\\n            // This `.min` is guarding against pool dust edge cases.\\n            // Any raise the exceeds the success balance by more than the dust\\n            // will cover the seeder and token in full, in which case the\\n            // creator covers the dust from their excess.\\n            tokenPay_ = redeemInit.min(remaining_);\\n            creatorPay_ = remaining_.saturatingSub(tokenPay_);\\n        } else {\\n            // Creator gets nothing on a failed raise. Send what is left to the\\n            // rTKN. Pool dust is taken from here to make the seeder whole if\\n            // possible.\\n            tokenPay_ = remaining_;\\n        }\\n\\n        emit EndDutchAuction(\\n            msg.sender,\\n            finalBalance_,\\n            seederPay_,\\n            creatorPay_,\\n            tokenPay_,\\n            // Read dust balance from the pool.\\n            _reserve.balanceOf(pool_)\\n        );\\n\\n        if (seederPay_ > 0) {\\n            _reserve.safeIncreaseAllowance(seeder, seederPay_);\\n        }\\n\\n        if (creatorPay_ > 0) {\\n            _reserve.safeIncreaseAllowance(creator, creatorPay_);\\n        }\\n\\n        if (tokenPay_ > 0) {\\n            _reserve.safeIncreaseAllowance(address(_token), tokenPay_);\\n        }\\n    }\\n\\n    /// After `endDutchAuction` has been called this function will sweep all\\n    /// the approvals atomically. This MAY fail if there is some bug or reason\\n    /// ANY of the transfers can't succeed. In that case each transfer should\\n    /// be attempted by each entity unatomically. This is provided as a public\\n    /// function as anyone can call `endDutchAuction` even if the transfers\\n    /// WILL succeed, so in that case it is best to process them all together\\n    /// as a single transaction.\\n    /// Consumes all approvals from `endDutchAuction` as transfers. Any zero\\n    /// value approvals are a no-op. If this fails for some reason then each\\n    /// of the creator, seeder and redeemable token can individually consume\\n    /// their approvals fully or partially. By default this should be called\\n    /// atomically after `endDutchAuction`.\\n    function transferAuctionTokens() public onlyAtLeastPhase(PHASE_ENDED) {\\n        IERC20 reserve_ = _reserve;\\n        RedeemableERC20 token_ = _token;\\n        address creator_ = creator;\\n        address seeder_ = seeder;\\n\\n        uint256 creatorAllowance_ = reserve_.allowance(address(this), creator_);\\n        uint256 seederAllowance_ = reserve_.allowance(address(this), seeder_);\\n        uint256 tokenAllowance_ = reserve_.allowance(\\n            address(this),\\n            address(token_)\\n        );\\n\\n        if (creatorAllowance_ > 0) {\\n            reserve_.safeTransfer(creator_, creatorAllowance_);\\n        }\\n        if (seederAllowance_ > 0) {\\n            reserve_.safeTransfer(seeder_, seederAllowance_);\\n        }\\n        if (tokenAllowance_ > 0) {\\n            reserve_.safeTransfer(address(token_), tokenAllowance_);\\n        }\\n    }\\n\\n    /// Atomically calls `endDutchAuction` and `transferApprovedTokens`.\\n    /// This should be the defacto approach to end the auction as it performs\\n    /// all necessary steps to clear funds in a single transaction. However it\\n    /// MAY fail if there is some bug or reason ANY of the transfers can't\\n    /// succeed. In that case it is better to call `endDutchAuction` to merely\\n    /// approve funds and then let each entity attempt to withdraw tokens for\\n    /// themselves unatomically.\\n    function endDutchAuctionAndTransfer() public {\\n        endDutchAuction();\\n        transferAuctionTokens();\\n    }\\n\\n    /// `endDutchAuction` is apparently critically failing.\\n    /// Move to `PHASE_EMERGENCY` immediately.\\n    /// This can ONLY be done when the contract has been in the current phase\\n    /// for at least `creatorFundsReleaseTimeout` blocks.\\n    /// Either it did not run at all, or somehow it failed to grant access\\n    /// to funds.\\n    /// This cannot be done until after the raise can end.\\n    function enableCreatorFundsRelease()\\n        external\\n        onlyAtLeastPhase(PHASE_CAN_END)\\n    {\\n        uint256 startPhase_ = currentPhase();\\n        require(\\n            blockNumberForPhase(phaseBlocks, startPhase_) +\\n                creatorFundsReleaseTimeout <=\\n                block.number,\\n            \\\"EARLY_RELEASE\\\"\\n        );\\n        // Move to `PHASE_EMERGENCY` immediately.\\n        if (startPhase_ == PHASE_CAN_END) {\\n            schedulePhase(PHASE_ENDED, block.number);\\n        }\\n        schedulePhase(PHASE_EMERGENCY, block.number);\\n    }\\n\\n    /// Anon can approve any amount of reserve, redeemable or CRP LP token for\\n    /// the creator to transfer to themselves. The `Trust` MUST ensure this is\\n    /// only callable during `PHASE_EMERGENCY` (emergency funds release phase).\\n    ///\\n    /// Tokens unknown to the `Trust` CANNOT be released in this way. We don't\\n    /// allow the `Trust` to call functions on arbitrary external contracts.\\n    ///\\n    /// Normally the `Trust` is NOT in emergency mode, and the creator cannot\\n    /// do anything to put the `Trust` into emergency mode other than wait for\\n    /// the timeout like everybody else. Normally anon will end the auction\\n    /// successfully long before emergency mode is possible.\\n    /// @param token_ Forwarded to `RedeemableERC20Pool.creatorFundsRelease`.\\n    /// @param amount_ Forwarded to `RedeemableERC20Pool.creatorFundsRelease`.\\n    function creatorFundsRelease(address token_, uint256 amount_)\\n        external\\n        onlyPhase(PHASE_EMERGENCY)\\n    {\\n        require(\\n            token_ == address(_reserve) ||\\n                token_ == address(_token) ||\\n                token_ == address(crp),\\n            \\\"UNKNOWN_TOKEN\\\"\\n        );\\n        emit CreatorFundsRelease(msg.sender, token_, amount_);\\n        IERC20(token_).safeIncreaseAllowance(creator, amount_);\\n    }\\n}\\n\",\"keccak256\":\"0x56ed86e5796626c5655580d40d039e7a51b36321e8033c887e3de1776dd0721f\",\"license\":\"CAL\"},\"contracts/trust/TrustFactory.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {ITier} from \\\"../tier/ITier.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\n\\nimport {Factory} from \\\"../factory/Factory.sol\\\";\\nimport {Trust, TrustConstructionConfig, TrustConfig} from \\\"../trust/Trust.sol\\\";\\n// solhint-disable-next-line max-line-length\\nimport {RedeemableERC20Factory} from \\\"../redeemableERC20/RedeemableERC20Factory.sol\\\";\\n// solhint-disable-next-line max-line-length\\nimport {RedeemableERC20, RedeemableERC20Config} from \\\"../redeemableERC20/RedeemableERC20.sol\\\";\\nimport {SeedERC20Factory} from \\\"../seed/SeedERC20Factory.sol\\\";\\n// solhint-disable-next-line max-line-length\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {TrustRedeemableERC20Config, TrustSeedERC20Config} from \\\"./Trust.sol\\\";\\nimport {BPoolFeeEscrow} from \\\"../escrow/BPoolFeeEscrow.sol\\\";\\nimport {ERC20Config} from \\\"../erc20/ERC20Config.sol\\\";\\n\\n/// @title TrustFactory\\n/// @notice The `TrustFactory` contract is the only contract that the\\n/// deployer uses to deploy all contracts for a single project\\n/// fundraising event. It takes references to\\n/// `RedeemableERC20Factory`, `RedeemableERC20PoolFactory` and\\n/// `SeedERC20Factory` contracts, and builds a new `Trust` contract.\\n/// @dev Factory for creating and registering new Trust contracts.\\ncontract TrustFactory is Factory {\\n    using SafeERC20 for RedeemableERC20;\\n\\n    /// Template contract to clone.\\n    /// Deployed by the constructor.\\n    address public immutable implementation;\\n\\n    /// Build the reference implementation to clone for each child.\\n    /// @param config_ All configuration for the `TrustFactory`.\\n    constructor(TrustConstructionConfig memory config_) {\\n        address implementation_ = address(new Trust(config_));\\n        emit Implementation(msg.sender, implementation_);\\n        implementation = implementation_;\\n    }\\n\\n    /// Allows calling `createChild` with TrustConfig,\\n    /// TrustRedeemableERC20Config and\\n    /// TrustRedeemableERC20PoolConfig parameters.\\n    /// Can use original Factory `createChild` function signature if function\\n    /// parameters are already encoded.\\n    ///\\n    /// @param trustConfig_ Trust constructor configuration.\\n    /// @param trustRedeemableERC20Config_ RedeemableERC20 constructor\\n    /// configuration.\\n    /// @param trustSeedERC20Config_ SeedERC20 constructor configuration.\\n    /// @return New Trust child contract address.\\n    function createChildTyped(\\n        TrustConfig calldata trustConfig_,\\n        TrustRedeemableERC20Config calldata trustRedeemableERC20Config_,\\n        TrustSeedERC20Config calldata trustSeedERC20Config_\\n    ) external returns (Trust) {\\n        return\\n            Trust(\\n                this.createChild(\\n                    abi.encode(\\n                        trustConfig_,\\n                        trustRedeemableERC20Config_,\\n                        trustSeedERC20Config_\\n                    )\\n                )\\n            );\\n    }\\n\\n    /// @inheritdoc Factory\\n    function _createChild(bytes calldata data_)\\n        internal\\n        virtual\\n        override\\n        returns (address)\\n    {\\n        (\\n            TrustConfig memory trustConfig_,\\n            TrustRedeemableERC20Config memory trustRedeemableERC20Config_,\\n            TrustSeedERC20Config memory trustSeedERC20Config_\\n        ) = abi.decode(\\n                data_,\\n                (TrustConfig, TrustRedeemableERC20Config, TrustSeedERC20Config)\\n            );\\n\\n        address clone_ = Clones.clone(implementation);\\n\\n        Trust(clone_).initialize(\\n            trustConfig_,\\n            trustRedeemableERC20Config_,\\n            trustSeedERC20Config_\\n        );\\n\\n        return clone_;\\n    }\\n}\\n\",\"keccak256\":\"0x07a3c37699091bd57415003d61c3633cada48948672637d5a0246eec879e5de4\",\"license\":\"CAL\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c806305506b4f146100515780632ea72a491461008e5780635c60da1b146100a1578063fc91a897146100c8575b600080fd5b61006461005f36600461053a565b610111565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b61006461009c3660046105b9565b6101ba565b6100647f000000000000000000000000000000000000000000000000000000000000000081565b6101016100d636600461065b565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205460ff1690565b6040519015158152602001610085565b60003073ffffffffffffffffffffffffffffffffffffffff16632ea72a498585856040516020016101449392919061089a565b6040516020818303038152906040526040518263ffffffff1660e01b815260040161016f91906109d2565b6020604051808303816000875af115801561018e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101b291906109e5565b949350505050565b60006002600054141561022e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b6002600090815561023f8484610368565b73ffffffffffffffffffffffffffffffffffffffff811660009081526001602052604090205490915060ff16156102d2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4455504c49434154455f4348494c4400000000000000000000000000000000006044820152606401610225565b73ffffffffffffffffffffffffffffffffffffffff811660008181526001602081815260409283902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169092179091558151338152908101929092527f7da70c4e5387d7038610b79ca7d304caaef815826e51e67cf247135387a79bce910160405180910390a160016000559392505050565b600080808061037985870187610c9c565b92509250925060006103aa7f0000000000000000000000000000000000000000000000000000000000000000610440565b6040517fbf080f5600000000000000000000000000000000000000000000000000000000815290915073ffffffffffffffffffffffffffffffffffffffff82169063bf080f569061040390879087908790600401610e6b565b600060405180830381600087803b15801561041d57600080fd5b505af1158015610431573d6000803e3d6000fd5b50929998505050505050505050565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260601b60148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f091505073ffffffffffffffffffffffffffffffffffffffff811661051d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f455243313136373a20637265617465206661696c6564000000000000000000006044820152606401610225565b919050565b60006060828403121561053457600080fd5b50919050565b600080600083850361016081121561055157600080fd5b6101208082121561056157600080fd5b859450840135905067ffffffffffffffff8082111561057f57600080fd5b61058b87838801610522565b93506101408601359150808211156105a257600080fd5b506105af86828701610522565b9150509250925092565b600080602083850312156105cc57600080fd5b823567ffffffffffffffff808211156105e457600080fd5b818501915085601f8301126105f857600080fd5b81358181111561060757600080fd5b86602082850101111561061957600080fd5b60209290920196919550909350505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461064d57600080fd5b50565b803561051d8161062b565b60006020828403121561066d57600080fd5b81356106788161062b565b9392505050565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff818336030181126106b357600080fd5b90910192915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126106f157600080fd5b830160208101925035905067ffffffffffffffff81111561071157600080fd5b80360383131561072057600080fd5b9250929050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b600061077c82836106bc565b6080855261078e608086018284610727565b91505061079e60208401846106bc565b85830360208701526107b1838284610727565b9250505060408301356107c38161062b565b73ffffffffffffffffffffffffffffffffffffffff16604085015260609283013592909301919091525090565b60006107fc828361067f565b6060845261080d6060850182610770565b9050602083013561081d8161062b565b73ffffffffffffffffffffffffffffffffffffffff16602085015260409283013592909301919091525090565b600081356108578161062b565b73ffffffffffffffffffffffffffffffffffffffff16835260208281013590840152610886604083018361067f565b606060408501526101b26060850182610770565b600061016085356108aa8161062b565b73ffffffffffffffffffffffffffffffffffffffff8116845250602086013560208401526040860135604084015260608601356060840152608086013560808401526108f860a08701610650565b73ffffffffffffffffffffffffffffffffffffffff811660a08501525060c086013560c084015260e086013560e084015261010080870135818501525080610120840152610948818401866107f0565b905082810361014084015261095d818561084a565b9695505050505050565b6000815180845260005b8181101561098d57602081850181015186830182015201610971565b8181111561099f576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006106786020830184610967565b6000602082840312156109f757600080fd5b81516106788161062b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715610a5457610a54610a02565b60405290565b604051610120810167ffffffffffffffff81118282101715610a5457610a54610a02565b600082601f830112610a8f57600080fd5b813567ffffffffffffffff80821115610aaa57610aaa610a02565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908282118183101715610af057610af0610a02565b81604052838152866020858801011115610b0957600080fd5b836020870160208301376000602085830101528094505050505092915050565b600060808284031215610b3b57600080fd5b6040516080810167ffffffffffffffff8282108183111715610b5f57610b5f610a02565b816040528293508435915080821115610b7757600080fd5b610b8386838701610a7e565b83526020850135915080821115610b9957600080fd5b50610ba685828601610a7e565b6020830152506040830135610bba8161062b565b6040820152606092830135920191909152919050565b600060608284031215610be257600080fd5b610bea610a31565b9050813567ffffffffffffffff811115610c0357600080fd5b610c0f84828501610b29565b8252506020820135610c208161062b565b806020830152506040820135604082015292915050565b600060608284031215610c4957600080fd5b610c51610a31565b90508135610c5e8161062b565b815260208281013590820152604082013567ffffffffffffffff811115610c8457600080fd5b610c9084828501610b29565b60408301525092915050565b6000806000838503610160811215610cb357600080fd5b61012080821215610cc357600080fd5b610ccb610a5a565b9150610cd686610650565b825260208601356020830152604086013560408301526060860135606083015260808601356080830152610d0c60a08701610650565b60a083015260c0868101359083015260e08087013590830152610100808701359083015290935084013567ffffffffffffffff80821115610d4c57600080fd5b610d5887838801610bd0565b9350610140860135915080821115610d6f57600080fd5b506105af86828701610c37565b6000815160808452610d916080850182610967565b905060208301518482036020860152610daa8282610967565b91505073ffffffffffffffffffffffffffffffffffffffff6040840151166040850152606083015160608501528091505092915050565b6000815160608452610df66060850182610d7c565b905073ffffffffffffffffffffffffffffffffffffffff6020840151166020850152604083015160408501528091505092915050565b73ffffffffffffffffffffffffffffffffffffffff81511682526020810151602083015260006040820151606060408501526101b26060850182610d7c565b600061016073ffffffffffffffffffffffffffffffffffffffff86511683526020860151602084015260408601516040840152606086015160608401526080860151608084015260a0860151610ed960a085018273ffffffffffffffffffffffffffffffffffffffff169052565b5060c086015160c084015260e086015160e084015261010080870151818501525080610120840152610f0d81840186610de1565b905082810361014084015261095d8185610e2c56fea2646970667358221220da25f1ceae3b9ba0fa0a185cad75b6b17d7e4300116a26747eb806b957bed0e864736f6c634300080a0033",
  "devdoc": {
    "details": "Factory for creating and registering new Trust contracts.",
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "config_": "All configuration for the `TrustFactory`."
        }
      },
      "createChild(bytes)": {
        "params": {
          "data_": "Encoded data to pass down to child contract constructor."
        },
        "returns": {
          "_0": "New child contract address."
        }
      },
      "createChildTyped((address,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256),((string,string,address,uint256),address,uint256),(address,uint256,(string,string,address,uint256)))": {
        "params": {
          "trustConfig_": "Trust constructor configuration.",
          "trustRedeemableERC20Config_": "RedeemableERC20 constructor configuration.",
          "trustSeedERC20Config_": "SeedERC20 constructor configuration."
        },
        "returns": {
          "_0": "New Trust child contract address."
        }
      },
      "isChild(address)": {
        "params": {
          "maybeChild_": "Address of child contract to look up."
        },
        "returns": {
          "_0": "Returns `true` if address is a contract created by this contract factory, otherwise `false`."
        }
      }
    },
    "title": "TrustFactory",
    "version": 1
  },
  "userdoc": {
    "events": {
      "Implementation(address,address)": {
        "notice": "Factories that clone a template contract MUST emit an event any time they set the implementation being cloned. Factories that deploy new contracts without cloning do NOT need to emit this."
      },
      "NewChild(address,address)": {
        "notice": "Whenever a new child contract is deployed, a `NewChild` event containing the new child contract address MUST be emitted."
      }
    },
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Build the reference implementation to clone for each child."
      },
      "createChild(bytes)": {
        "notice": "Implements `IFactory`. Calls the `_createChild` hook that inheriting contracts must override. Registers child contract address such that `isChild` is `true`. Emits `NewChild` event."
      },
      "createChildTyped((address,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256),((string,string,address,uint256),address,uint256),(address,uint256,(string,string,address,uint256)))": {
        "notice": "Allows calling `createChild` with TrustConfig, TrustRedeemableERC20Config and TrustRedeemableERC20PoolConfig parameters. Can use original Factory `createChild` function signature if function parameters are already encoded."
      },
      "implementation()": {
        "notice": "Template contract to clone. Deployed by the constructor."
      },
      "isChild(address)": {
        "notice": "Implements `IFactory`. Checks if address is registered as a child contract of this factory."
      }
    },
    "notice": "The `TrustFactory` contract is the only contract that the deployer uses to deploy all contracts for a single project fundraising event. It takes references to `RedeemableERC20Factory`, `RedeemableERC20PoolFactory` and `SeedERC20Factory` contracts, and builds a new `Trust` contract.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3818,
        "contract": "contracts/trust/TrustFactory.sol:TrustFactory",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 10063,
        "contract": "contracts/trust/TrustFactory.sol:TrustFactory",
        "label": "contracts",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}