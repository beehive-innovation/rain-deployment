{
  "address": "0x09f91AC0215AFa0533Bf3212FBe59086300c3165",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Implementation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "child",
          "type": "address"
        }
      ],
      "name": "NewChild",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data_",
          "type": "bytes"
        }
      ],
      "name": "createChild",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes[]",
              "name": "sources",
              "type": "bytes[]"
            },
            {
              "internalType": "uint256[]",
              "name": "constants",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "stackLength",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "argumentsLength",
              "type": "uint256"
            }
          ],
          "internalType": "struct StateConfig",
          "name": "config_",
          "type": "tuple"
        }
      ],
      "name": "createChildTyped",
      "outputs": [
        {
          "internalType": "contract CombineTier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "maybeChild_",
          "type": "address"
        }
      ],
      "name": "isChild",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7f8f9956ec4dc0f37435f6484e2117eb1b95e71833447f3b887f49182a707263",
  "receipt": {
    "to": null,
    "from": "0xbF334f8BD1420a1CbFE15407f73919424934B1B3",
    "contractAddress": "0x09f91AC0215AFa0533Bf3212FBe59086300c3165",
    "transactionIndex": 0,
    "gasUsed": "2462291",
    "logsBloom": "0x00000000000000000000000000000000000000000000000008000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000002000000000000000000000000400000000000",
    "blockHash": "0x0b303c37ff08cef3cbf6da1bfe9b3021193da15a1b584e6b173db2c6d1999c70",
    "transactionHash": "0x7f8f9956ec4dc0f37435f6484e2117eb1b95e71833447f3b887f49182a707263",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 25322156,
        "transactionHash": "0x7f8f9956ec4dc0f37435f6484e2117eb1b95e71833447f3b887f49182a707263",
        "address": "0x09f91AC0215AFa0533Bf3212FBe59086300c3165",
        "topics": [
          "0x7fac34ecf0b1b374cd9659e3d17db602659d53f1162b1f20142e6c02694aed70"
        ],
        "data": "0x000000000000000000000000bf334f8bd1420a1cbfe15407f73919424934b1b300000000000000000000000082d5720cb36cd5f3fc28e4b460272e7c131099d3",
        "logIndex": 0,
        "blockHash": "0x0b303c37ff08cef3cbf6da1bfe9b3021193da15a1b584e6b173db2c6d1999c70"
      }
    ],
    "blockNumber": 25322156,
    "cumulativeGasUsed": "2462291",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9e85ba39dabcbad721cb8b95134928f1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Implementation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"child\",\"type\":\"address\"}],\"name\":\"NewChild\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"createChild\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes[]\",\"name\":\"sources\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"constants\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"stackLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"argumentsLength\",\"type\":\"uint256\"}],\"internalType\":\"struct StateConfig\",\"name\":\"config_\",\"type\":\"tuple\"}],\"name\":\"createChildTyped\",\"outputs\":[{\"internalType\":\"contract CombineTier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maybeChild_\",\"type\":\"address\"}],\"name\":\"isChild\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createChild(bytes)\":{\"params\":{\"data_\":\"Encoded data to pass down to child contract constructor.\"},\"returns\":{\"_0\":\"New child contract address.\"}},\"createChildTyped((bytes[],uint256[],uint256,uint256))\":{\"params\":{\"config_\":\"`ImmutableSourceConfig` of the `CombineTier` logic.\"},\"returns\":{\"_0\":\"New `CombineTier` child contract address.\"}},\"isChild(address)\":{\"params\":{\"maybeChild_\":\"Address of child contract to look up.\"},\"returns\":{\"_0\":\"Returns `true` if address is a contract created by this contract factory, otherwise `false`.\"}}},\"title\":\"CombineTierFactory\",\"version\":1},\"userdoc\":{\"events\":{\"Implementation(address,address)\":{\"notice\":\"Factories that clone a template contract MUST emit an event any time they set the implementation being cloned. Factories that deploy new contracts without cloning do NOT need to emit this.\"},\"NewChild(address,address)\":{\"notice\":\"Whenever a new child contract is deployed, a `NewChild` event containing the new child contract address MUST be emitted.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Build the reference implementation to clone for each child.\"},\"createChild(bytes)\":{\"notice\":\"Implements `IFactory`. Calls the `_createChild` hook that inheriting contracts must override. Registers child contract address such that `isChild` is `true`. Emits `NewChild` event.\"},\"createChildTyped((bytes[],uint256[],uint256,uint256))\":{\"notice\":\"Typed wrapper for `createChild` with Source. Use original `Factory` `createChild` function signature if function parameters are already encoded.\"},\"isChild(address)\":{\"notice\":\"Implements `IFactory`. Checks if address is registered as a child contract of this factory.\"}},\"notice\":\"Factory for creating and deploying `CombineTier` contracts.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tier/CombineTierFactory.sol\":\"CombineTierFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x1cc0efb01cbf008b768fd7b334786a6e358809198bb7e67f1c530af4957c6a21\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x4823752b07b8ea4ca971b217e39457930e7cb103c2c91e2a29729e5ca907e4f0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"contracts/factory/Factory.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity ^0.8.10;\\n\\nimport {IFactory} from \\\"./IFactory.sol\\\";\\n// solhint-disable-next-line max-line-length\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n/// @title Factory\\n/// @notice Base contract for deploying and registering child contracts.\\nabstract contract Factory is IFactory, ReentrancyGuard {\\n    /// @dev state to track each deployed contract address. A `Factory` will\\n    /// never lie about deploying a child, unless `isChild` is overridden to do\\n    /// so.\\n    mapping(address => bool) private contracts;\\n\\n    /// Implements `IFactory`.\\n    ///\\n    /// `_createChild` hook must be overridden to actually create child\\n    /// contract.\\n    ///\\n    /// Implementers may want to overload this function with a typed equivalent\\n    /// to expose domain specific structs etc. to the compiled ABI consumed by\\n    /// tooling and other scripts. To minimise gas costs for deployment it is\\n    /// expected that the tooling will consume the typed ABI, then encode the\\n    /// arguments and pass them to this function directly.\\n    ///\\n    /// @param data_ ABI encoded data to pass to child contract constructor.\\n    function _createChild(bytes calldata data_)\\n        internal\\n        virtual\\n        returns (address)\\n    {} // solhint-disable-line no-empty-blocks\\n\\n    /// Implements `IFactory`.\\n    ///\\n    /// Calls the `_createChild` hook that inheriting contracts must override.\\n    /// Registers child contract address such that `isChild` is `true`.\\n    /// Emits `NewChild` event.\\n    ///\\n    /// @param data_ Encoded data to pass down to child contract constructor.\\n    /// @return New child contract address.\\n    function createChild(bytes calldata data_)\\n        external\\n        virtual\\n        override\\n        nonReentrant\\n        returns (address)\\n    {\\n        // Create child contract using hook.\\n        address child_ = _createChild(data_);\\n        // Register child contract address to `contracts` mapping.\\n        contracts[child_] = true;\\n        // Emit `NewChild` event with child contract address.\\n        emit IFactory.NewChild(msg.sender, child_);\\n        return child_;\\n    }\\n\\n    /// Implements `IFactory`.\\n    ///\\n    /// Checks if address is registered as a child contract of this factory.\\n    ///\\n    /// @param maybeChild_ Address of child contract to look up.\\n    /// @return Returns `true` if address is a contract created by this\\n    /// contract factory, otherwise `false`.\\n    function isChild(address maybeChild_)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return contracts[maybeChild_];\\n    }\\n}\\n\",\"keccak256\":\"0xe97bf06e74908b9a590a89dbe1d3189ec7393dfc63c18ff4e141373c71f99d44\",\"license\":\"CAL\"},\"contracts/factory/IFactory.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity ^0.8.10;\\n\\ninterface IFactory {\\n    /// Whenever a new child contract is deployed, a `NewChild` event\\n    /// containing the new child contract address MUST be emitted.\\n    event NewChild(address sender, address child);\\n\\n    /// Factories that clone a template contract MUST emit an event any time\\n    /// they set the implementation being cloned. Factories that deploy new\\n    /// contracts without cloning do NOT need to emit this.\\n    event Implementation(address sender, address implementation);\\n\\n    /// Creates a new child contract.\\n    ///\\n    /// @param data_ Domain specific data for the child contract constructor.\\n    /// @return New child contract address.\\n    function createChild(bytes calldata data_) external returns (address);\\n\\n    /// Checks if address is registered as a child contract of this factory.\\n    ///\\n    /// Addresses that were not deployed by `createChild` MUST NOT return\\n    /// `true` from `isChild`. This is CRITICAL to the security guarantees for\\n    /// any contract implementing `IFactory`.\\n    ///\\n    /// @param maybeChild_ Address to check registration for.\\n    /// @return `true` if address was deployed by this contract factory,\\n    /// otherwise `false`.\\n    function isChild(address maybeChild_) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x560fd102f258d95fa5ac662f3056bfaae0934d754aa3e2c5710d4bc7ca7d5be6\",\"license\":\"CAL\"},\"contracts/math/SaturatingMath.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity ^0.8.10;\\n\\n/// @title SaturatingMath\\n/// @notice Sometimes we neither want math operations to error nor wrap around\\n/// on an overflow or underflow. In the case of transferring assets an error\\n/// may cause assets to be locked in an irretrievable state within the erroring\\n/// contract, e.g. due to a tiny rounding/calculation error. We also can't have\\n/// assets underflowing and attempting to approve/transfer \\\"infinity\\\" when we\\n/// wanted \\\"almost or exactly zero\\\" but some calculation bug underflowed zero.\\n/// Ideally there are no calculation mistakes, but in guarding against bugs it\\n/// may be safer pragmatically to saturate arithmatic at the numeric bounds.\\n/// Note that saturating div is not supported because 0/0 is undefined.\\nlibrary SaturatingMath {\\n    /// Saturating addition.\\n    /// @param a_ First term.\\n    /// @param b_ Second term.\\n    /// @return Minimum of a_ + b_ and max uint256.\\n    function saturatingAdd(uint256 a_, uint256 b_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        unchecked {\\n            uint256 c_ = a_ + b_;\\n            return c_ < a_ ? type(uint256).max : c_;\\n        }\\n    }\\n\\n    /// Saturating subtraction.\\n    /// @param a_ Minuend.\\n    /// @param b_ Subtrahend.\\n    /// @return a_ - b_ if a_ greater than b_, else 0.\\n    function saturatingSub(uint256 a_, uint256 b_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        unchecked {\\n            return a_ > b_ ? a_ - b_ : 0;\\n        }\\n    }\\n\\n    /// Saturating multiplication.\\n    /// @param a_ First term.\\n    /// @param b_ Second term.\\n    /// @return Minimum of a_ * b_ and max uint256.\\n    function saturatingMul(uint256 a_, uint256 b_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being\\n            // zero, but the benefit is lost if 'b' is also tested.\\n            // https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a_ == 0) return 0;\\n            uint256 c_ = a_ * b_;\\n            return c_ / a_ != b_ ? type(uint256).max : c_;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x00eb1e963ad55db930313eb452c512a533eeb34adf8324b1e2c15ee130893115\",\"license\":\"CAL\"},\"contracts/sstore2/SSTORE2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"./utils/Bytecode.sol\\\";\\n\\n/**\\n  @title A key-value storage with auto-generated keys for storing chunks of\\n  data with a lower write & read cost.\\n  @author Agustin Aguilar <aa@horizon.io>\\n\\n  Readme: https://github.com/0xsequence/sstore2#readme\\n*/\\nlibrary SSTORE2 {\\n    error WriteError();\\n\\n    /**\\n    @notice Stores `_data` and returns `pointer` as key for later retrieval\\n    @dev The pointer is a contract address with `_data` as code\\n    @param _data to be written\\n    @return pointer Pointer to the written `_data`\\n  */\\n    function write(bytes memory _data) internal returns (address pointer) {\\n        // Append 00 to _data so contract can't be called\\n        // Build init code\\n        bytes memory code = Bytecode.creationCodeFor(\\n            abi.encodePacked(hex\\\"00\\\", _data)\\n        );\\n\\n        // Deploy contract using create\\n        assembly {\\n            pointer := create(0, add(code, 32), mload(code))\\n        }\\n\\n        // Address MUST be non-zero\\n        if (pointer == address(0)) revert WriteError();\\n    }\\n\\n    /**\\n    @notice Reads the contents of the `_pointer` code as data, skips the first\\n    byte\\n    @dev The function is intended for reading pointers generated by `write`\\n    @param _pointer to be read\\n    @return data read from `_pointer` contract\\n  */\\n    function read(address _pointer) internal view returns (bytes memory) {\\n        return Bytecode.codeAt(_pointer, 1, type(uint256).max);\\n    }\\n\\n    /**\\n    @notice Reads the contents of the `_pointer` code as data, skips the first\\n    byte\\n    @dev The function is intended for reading pointers generated by `write`\\n    @param _pointer to be read\\n    @param _start number of bytes to skip\\n    @return data read from `_pointer` contract\\n  */\\n    function read(address _pointer, uint256 _start)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        return Bytecode.codeAt(_pointer, _start + 1, type(uint256).max);\\n    }\\n\\n    /**\\n    @notice Reads the contents of the `_pointer` code as data, skips the first\\n    byte\\n    @dev The function is intended for reading pointers generated by `write`\\n    @param _pointer to be read\\n    @param _start number of bytes to skip\\n    @param _end index before which to end extraction\\n    @return data read from `_pointer` contract\\n  */\\n    function read(\\n        address _pointer,\\n        uint256 _start,\\n        uint256 _end\\n    ) internal view returns (bytes memory) {\\n        return Bytecode.codeAt(_pointer, _start + 1, _end + 1);\\n    }\\n}\\n\",\"keccak256\":\"0xbd511e001f77820afc35346b1b852e282f16e675ac1fb61ef7b951d5da0caea0\",\"license\":\"MIT\"},\"contracts/sstore2/utils/Bytecode.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nlibrary Bytecode {\\n    error InvalidCodeAtRange(uint256 _size, uint256 _start, uint256 _end);\\n\\n    /**\\n    @notice Generate a creation code that results on a contract with `_code` as\\n    bytecode\\n    @param _code The returning value of the resulting `creationCode`\\n    @return creationCode (constructor) for new contract\\n  */\\n    function creationCodeFor(bytes memory _code)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        /*\\n      0x00    0x63         0x63XXXXXX  PUSH4 _code.length  size\\n      0x01    0x80         0x80        DUP1                size size\\n      0x02    0x60         0x600e      PUSH1 14            14 size size\\n      0x03    0x60         0x6000      PUSH1 00            0 14 size size\\n      0x04    0x39         0x39        CODECOPY            size\\n      0x05    0x60         0x6000      PUSH1 00            0 size\\n      0x06    0xf3         0xf3        RETURN\\n      <CODE>\\n    */\\n\\n        return\\n            abi.encodePacked(\\n                hex\\\"63\\\",\\n                uint32(_code.length),\\n                hex\\\"80_60_0E_60_00_39_60_00_F3\\\",\\n                _code\\n            );\\n    }\\n\\n    /**\\n    @notice Returns the size of the code on a given address\\n    @param _addr Address that may or may not contain code\\n    @return size of the code on the given `_addr`\\n  */\\n    function codeSize(address _addr) internal view returns (uint256 size) {\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n    }\\n\\n    /**\\n    @notice Returns the code of a given address\\n    @dev It will fail if `_end < _start`\\n    @param _addr Address that may or may not contain code\\n    @param _start number of bytes of code to skip on read\\n    @param _end index before which to end extraction\\n    @return oCode read from `_addr` deployed bytecode\\n\\n    Forked: https://gist.github.com/KardanovIR/fe98661df9338c842b4a30306d507fbd\\n  */\\n    function codeAt(\\n        address _addr,\\n        uint256 _start,\\n        uint256 _end\\n    ) internal view returns (bytes memory oCode) {\\n        uint256 csize = codeSize(_addr);\\n        if (csize == 0) return bytes(\\\"\\\");\\n\\n        if (_start > csize) return bytes(\\\"\\\");\\n        if (_end < _start) revert InvalidCodeAtRange(csize, _start, _end);\\n\\n        unchecked {\\n            uint256 reqSize = _end - _start;\\n            uint256 maxSize = csize - _start;\\n\\n            uint256 size = maxSize < reqSize ? maxSize : reqSize;\\n\\n            assembly {\\n                // allocate output byte array - this could also be done without\\n                // assembly\\n                // by using o_code = new bytes(size)\\n                oCode := mload(0x40)\\n                // new \\\"memory end\\\" including padding\\n                mstore(\\n                    0x40,\\n                    add(oCode, and(add(add(size, 0x20), 0x1f), not(0x1f)))\\n                )\\n                // store length in memory\\n                mstore(oCode, size)\\n                // actually retrieve the code, this needs assembly\\n                extcodecopy(_addr, add(oCode, 0x20), _start, size)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x576d7761f235614a1f783d9aaa200f8885023889f6aeed65539ff5b0fc2302c2\",\"license\":\"MIT\"},\"contracts/tier/CombineTier.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nimport {RainVM, State} from \\\"../vm/RainVM.sol\\\";\\nimport {VMState, StateConfig} from \\\"../vm/libraries/VMState.sol\\\";\\nimport {BlockOps} from \\\"../vm/ops/BlockOps.sol\\\";\\nimport {TierOps} from \\\"../vm/ops/TierOps.sol\\\";\\nimport {TierwiseCombine} from \\\"./libraries/TierwiseCombine.sol\\\";\\nimport {ReadOnlyTier, ITier} from \\\"./ReadOnlyTier.sol\\\";\\n\\n/// @title CombineTier\\n/// @notice Implements `ReadOnlyTier` over RainVM. Allows combining the reports\\n/// from any other `ITier` contracts referenced in the `ImmutableSource` set at\\n/// construction.\\n/// The value at the top of the stack after executing the rain script will be\\n/// used as the return of `report`.\\ncontract CombineTier is ReadOnlyTier, RainVM, VMState, Initializable {\\n    /// @dev local opcode to put tier report account on the stack.\\n    uint256 private constant ACCOUNT = 0;\\n    /// @dev local opcodes length.\\n    uint256 internal constant LOCAL_OPS_LENGTH = 1;\\n\\n    /// @dev local offset for block ops.\\n    uint256 private immutable blockOpsStart;\\n    /// @dev local offset for tier ops.\\n    uint256 private immutable tierOpsStart;\\n    /// @dev local offset for combine tier ops.\\n    uint256 private immutable localOpsStart;\\n\\n    address private vmStatePointer;\\n\\n    constructor() {\\n        /// These local opcode offsets are calculated as immutable but are\\n        /// really just compile time constants. They only depend on the\\n        /// imported libraries and contracts. These are calculated at\\n        /// construction to future-proof against underlying ops being\\n        /// added/removed and potentially breaking the offsets here.\\n        blockOpsStart = RainVM.OPS_LENGTH;\\n        tierOpsStart = blockOpsStart + BlockOps.OPS_LENGTH;\\n        localOpsStart = tierOpsStart + TierOps.OPS_LENGTH;\\n    }\\n\\n    function initialize(StateConfig memory config_) external initializer {\\n        vmStatePointer = _snapshot(_newState(config_));\\n    }\\n\\n    /// @inheritdoc RainVM\\n    function applyOp(\\n        bytes memory context_,\\n        State memory state_,\\n        uint256 opcode_,\\n        uint256 operand_\\n    ) internal view override {\\n        unchecked {\\n            if (opcode_ < tierOpsStart) {\\n                BlockOps.applyOp(\\n                    context_,\\n                    state_,\\n                    opcode_ - blockOpsStart,\\n                    operand_\\n                );\\n            } else if (opcode_ < localOpsStart) {\\n                TierOps.applyOp(\\n                    context_,\\n                    state_,\\n                    opcode_ - tierOpsStart,\\n                    operand_\\n                );\\n            } else {\\n                opcode_ -= localOpsStart;\\n                require(opcode_ < LOCAL_OPS_LENGTH, \\\"MAX_OPCODE\\\");\\n                if (opcode_ == ACCOUNT) {\\n                    address account_ = abi.decode(context_, (address));\\n                    state_.stack[state_.stackIndex] = uint256(\\n                        uint160(account_)\\n                    );\\n                    state_.stackIndex++;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc ITier\\n    function report(address account_)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        State memory state_ = _restore(vmStatePointer);\\n        eval(abi.encode(account_), state_, 0);\\n        return state_.stack[state_.stackIndex - 1];\\n    }\\n}\\n\",\"keccak256\":\"0x3e2deb34651c58c0c7b83de3d24e31ec1799e58d62d6da500fdb6c6f78042bd3\",\"license\":\"CAL\"},\"contracts/tier/CombineTierFactory.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport {Factory} from \\\"../factory/Factory.sol\\\";\\nimport {CombineTier} from \\\"./CombineTier.sol\\\";\\nimport {StateConfig} from \\\"../vm/libraries/VMState.sol\\\";\\n\\n/// @title CombineTierFactory\\n/// @notice Factory for creating and deploying `CombineTier` contracts.\\ncontract CombineTierFactory is Factory {\\n    /// Template contract to clone.\\n    /// Deployed by the constructor.\\n    address private implementation;\\n\\n    /// Build the reference implementation to clone for each child.\\n    constructor() {\\n        address implementation_ = address(new CombineTier());\\n        emit Implementation(msg.sender, implementation_);\\n        implementation = implementation_;\\n    }\\n\\n    /// @inheritdoc Factory\\n    function _createChild(bytes calldata data_)\\n        internal\\n        virtual\\n        override\\n        returns (address)\\n    {\\n        StateConfig memory config_ = abi.decode(data_, (StateConfig));\\n        address clone_ = Clones.clone(implementation);\\n        CombineTier(clone_).initialize(config_);\\n        return clone_;\\n    }\\n\\n    /// Typed wrapper for `createChild` with Source.\\n    /// Use original `Factory` `createChild` function signature if function\\n    /// parameters are already encoded.\\n    ///\\n    /// @param config_ `ImmutableSourceConfig` of the `CombineTier` logic.\\n    /// @return New `CombineTier` child contract address.\\n    function createChildTyped(StateConfig calldata config_)\\n        external\\n        returns (CombineTier)\\n    {\\n        return CombineTier(this.createChild(abi.encode(config_)));\\n    }\\n}\\n\",\"keccak256\":\"0x77bed227300c47f78c229e32ef94d7861b0786976cf34f4af351f80d5ee6061b\",\"license\":\"CAL\"},\"contracts/tier/ITier.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity ^0.8.10;\\n\\n/// @title ITier\\n/// @notice `ITier` is a simple interface that contracts can\\n/// implement to provide membership lists for other contracts.\\n///\\n/// There are many use-cases for a time-preserving conditional membership list.\\n///\\n/// Some examples include:\\n///\\n/// - Self-serve whitelist to participate in fundraising\\n/// - Lists of users who can claim airdrops and perks\\n/// - Pooling resources with implied governance/reward tiers\\n/// - POAP style attendance proofs allowing access to future exclusive events\\n///\\n/// @dev Standard interface to a tiered membership.\\n///\\n/// A \\\"membership\\\" can represent many things:\\n/// - Exclusive access.\\n/// - Participation in some event or process.\\n/// - KYC completion.\\n/// - Combination of sub-memberships.\\n/// - Etc.\\n///\\n/// The high level requirements for a contract implementing `ITier`:\\n/// - MUST represent held tiers as a `uint`.\\n/// - MUST implement `report`.\\n///   - The report is a `uint256` that SHOULD represent the block each tier has\\n///     been continuously held since encoded as `uint32`.\\n///   - The encoded tiers start at `1`; Tier `0` is implied if no tier has ever\\n///     been held.\\n///   - Tier `0` is NOT encoded in the report, it is simply the fallback value.\\n///   - If a tier is lost the block data is erased for that tier and will be\\n///     set if/when the tier is regained to the new block.\\n///   - If the historical block information is not available the report MAY\\n///     return `0x00000000` for all held tiers.\\n///   - Tiers that are lost or have never been held MUST return `0xFFFFFFFF`.\\n/// - SHOULD implement `setTier`.\\n///   - Contracts SHOULD revert with `SET_TIER` error if they cannot\\n///     meaningfully set a tier directly.\\n///     For example a contract that can only derive a membership tier by\\n///     reading the state of an external contract cannot set tiers.\\n///   - Contracts implementing `setTier` SHOULD error with `SET_ZERO_TIER`\\n///     if tier 0 is being set.\\n/// - MUST emit `TierChange` when `setTier` successfully writes a new tier.\\n///   - Contracts that cannot meaningfully set a tier are exempt.\\ninterface ITier {\\n    /// Every time a tier changes we log start and end tier against the\\n    /// account.\\n    /// This MAY NOT be emitted if reports are being read from the state of an\\n    /// external contract.\\n    /// The start tier MAY be lower than the current tier as at the block this\\n    /// event is emitted in.\\n    /// @param sender The `msg.sender` that authorized the tier change.\\n    /// @param account The account changing tier.\\n    /// @param startTier The previous tier the account held.\\n    /// @param endTier The newly acquired tier the account now holds.\\n    event TierChange(\\n        address sender,\\n        address account,\\n        uint256 startTier,\\n        uint256 endTier\\n    );\\n\\n    /// @notice Users can set their own tier by calling `setTier`.\\n    ///\\n    /// The contract that implements `ITier` is responsible for checking\\n    /// eligibility and/or taking actions required to set the tier.\\n    ///\\n    /// For example, the contract must take/refund any tokens relevant to\\n    /// changing the tier.\\n    ///\\n    /// Obviously the user is responsible for any approvals for this action\\n    /// prior to calling `setTier`.\\n    ///\\n    /// When the tier is changed a `TierChange` event will be emmited as:\\n    /// ```\\n    /// event TierChange(address account, uint startTier, uint endTier);\\n    /// ```\\n    ///\\n    /// The `setTier` function includes arbitrary data as the third\\n    /// parameter. This can be used to disambiguate in the case that\\n    /// there may be many possible options for a user to achieve some tier.\\n    ///\\n    /// For example, consider the case where tier 3 can be achieved\\n    /// by EITHER locking 1x rare NFT or 3x uncommon NFTs. A user with both\\n    /// could use `data` to explicitly state their intent.\\n    ///\\n    /// NOTE however that _any_ address can call `setTier` for any other\\n    /// address.\\n    ///\\n    /// If you implement `data` or anything that changes state then be very\\n    /// careful to avoid griefing attacks.\\n    ///\\n    /// The `data` parameter can also be ignored by the contract implementing\\n    /// `ITier`. For example, ERC20 tokens are fungible so only the balance\\n    /// approved by the user is relevant to a tier change.\\n    ///\\n    /// The `setTier` function SHOULD prevent users from reassigning\\n    /// tier 0 to themselves.\\n    ///\\n    /// The tier 0 status represents never having any status.\\n    /// @dev Updates the tier of an account.\\n    ///\\n    /// The implementing contract is responsible for all checks and state\\n    /// changes required to set the tier. For example, taking/refunding\\n    /// funds/NFTs etc.\\n    ///\\n    /// Contracts may disallow directly setting tiers, preferring to derive\\n    /// reports from other onchain data.\\n    /// In this case they should `revert(\\\"SET_TIER\\\");`.\\n    ///\\n    /// @param account Account to change the tier for.\\n    /// @param endTier Tier after the change.\\n    /// @param data Arbitrary input to disambiguate ownership\\n    /// (e.g. NFTs to lock).\\n    function setTier(\\n        address account,\\n        uint256 endTier,\\n        bytes memory data\\n    ) external;\\n\\n    /// @notice A tier report is a `uint256` that contains each of the block\\n    /// numbers each tier has been held continously since as a `uint32`.\\n    /// There are 9 possible tier, starting with tier 0 for `0` offset or\\n    /// \\\"never held any tier\\\" then working up through 8x 4 byte offsets to the\\n    /// full 256 bits.\\n    ///\\n    /// Low bits = Lower tier.\\n    ///\\n    /// In hexadecimal every 8 characters = one tier, starting at tier 8\\n    /// from high bits and working down to tier 1.\\n    ///\\n    /// `uint32` should be plenty for any blockchain that measures block times\\n    /// in seconds, but reconsider if deploying to an environment with\\n    /// significantly sub-second block times.\\n    ///\\n    /// ~135 years of 1 second blocks fit into `uint32`.\\n    ///\\n    /// `2^8 / (365 * 24 * 60 * 60)`\\n    ///\\n    /// When a user INCREASES their tier they keep all the block numbers they\\n    /// already had, and get new block times for each increased tiers they have\\n    /// earned.\\n    ///\\n    /// When a user DECREASES their tier they return to `0xFFFFFFFF` (never)\\n    /// for every tier level they remove, but keep their block numbers for the\\n    /// remaining tiers.\\n    ///\\n    /// GUIs are encouraged to make this dynamic very clear for users as\\n    /// round-tripping to a lower status and back is a DESTRUCTIVE operation\\n    /// for block times.\\n    ///\\n    /// The intent is that downstream code can provide additional benefits for\\n    /// members who have maintained a certain tier for/since a long time.\\n    /// These benefits can be provided by inspecting the report, and by\\n    /// on-chain contracts directly,\\n    /// rather than needing to work with snapshots etc.\\n    /// @dev Returns the earliest block the account has held each tier for\\n    /// continuously.\\n    /// This is encoded as a uint256 with blocks represented as 8x\\n    /// concatenated uint32.\\n    /// I.e. Each 4 bytes of the uint256 represents a u32 tier start time.\\n    /// The low bits represent low tiers and high bits the high tiers.\\n    /// Implementing contracts should return 0xFFFFFFFF for lost and\\n    /// never-held tiers.\\n    ///\\n    /// @param account Account to get the report for.\\n    /// @return The report blocks encoded as a uint256.\\n    function report(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x112be3654010b0f3fcb213e09f9008075f68210f583bdaf8efa440852aa5158f\",\"license\":\"CAL\"},\"contracts/tier/ReadOnlyTier.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity ^0.8.10;\\n\\nimport {ITier} from \\\"./ITier.sol\\\";\\nimport {TierReport} from \\\"./libraries/TierReport.sol\\\";\\n\\n/// @title ReadOnlyTier\\n/// @notice `ReadOnlyTier` is a base contract that other contracts\\n/// are expected to inherit.\\n///\\n/// It does not allow `setStatus` and expects `report` to derive from\\n/// some existing onchain data.\\n///\\n/// @dev A contract inheriting `ReadOnlyTier` cannot call `setTier`.\\n///\\n/// `ReadOnlyTier` is abstract because it does not implement `report`.\\n/// The expectation is that `report` will derive tiers from some\\n/// external data source.\\nabstract contract ReadOnlyTier is ITier {\\n    /// Always reverts because it is not possible to set a read only tier.\\n    /// @inheritdoc ITier\\n    function setTier(\\n        address,\\n        uint256,\\n        bytes memory\\n    ) external pure override {\\n        revert(\\\"SET_TIER\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x3e9c71da9f3ad0bf8106d38bab8f292a599a5ca0905218f3b4ee7dbabcbe9b73\",\"license\":\"CAL\"},\"contracts/tier/libraries/TierConstants.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity ^0.8.10;\\n\\n/// @title TierConstants\\n/// @notice Constants for use with tier logic.\\nlibrary TierConstants {\\n    /// NEVER is 0xFF.. as it is infinitely in the future.\\n    /// NEVER for an entire report.\\n    uint256 internal constant NEVER_REPORT = type(uint256).max;\\n    /// NEVER for a single tier.\\n    uint32 internal constant NEVER_TIER = type(uint32).max;\\n\\n    /// Always is 0 as it is the genesis block.\\n    /// Tiers can't predate the chain but they can predate an `ITier` contract.\\n    uint256 internal constant ALWAYS = 0;\\n\\n    /// Account has never held a tier.\\n    uint256 internal constant TIER_ZERO = 0;\\n\\n    /// Magic number for tier one.\\n    uint256 internal constant TIER_ONE = 1;\\n    /// Magic number for tier two.\\n    uint256 internal constant TIER_TWO = 2;\\n    /// Magic number for tier three.\\n    uint256 internal constant TIER_THREE = 3;\\n    /// Magic number for tier four.\\n    uint256 internal constant TIER_FOUR = 4;\\n    /// Magic number for tier five.\\n    uint256 internal constant TIER_FIVE = 5;\\n    /// Magic number for tier six.\\n    uint256 internal constant TIER_SIX = 6;\\n    /// Magic number for tier seven.\\n    uint256 internal constant TIER_SEVEN = 7;\\n    /// Magic number for tier eight.\\n    uint256 internal constant TIER_EIGHT = 8;\\n    /// Maximum tier is `TIER_EIGHT`.\\n    uint256 internal constant MAX_TIER = TIER_EIGHT;\\n}\\n\",\"keccak256\":\"0xb7919997b5260b223afcca2f29d427a8cd8d1220205eba53fe0a8a0997883133\",\"license\":\"CAL\"},\"contracts/tier/libraries/TierReport.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity ^0.8.10;\\n\\nimport {ITier} from \\\"../ITier.sol\\\";\\nimport \\\"./TierConstants.sol\\\";\\n\\n/// @title TierReport\\n/// @notice `TierReport` implements several pure functions that can be\\n/// used to interface with reports.\\n/// - `tierAtBlockFromReport`: Returns the highest status achieved relative to\\n/// a block number and report. Statuses gained after that block are ignored.\\n/// - `tierBlock`: Returns the block that a given tier has been held\\n/// since according to a report.\\n/// - `truncateTiersAbove`: Resets all the tiers above the reference tier.\\n/// - `updateBlocksForTierRange`: Updates a report with a block\\n/// number for every tier in a range.\\n/// - `updateReportWithTierAtBlock`: Updates a report to a new tier.\\n/// @dev Utilities to consistently read, write and manipulate tiers in reports.\\n/// The low-level bit shifting can be difficult to get right so this\\n/// factors that out.\\nlibrary TierReport {\\n    /// Enforce upper limit on tiers so we can do unchecked math.\\n    modifier maxTier(uint256 tier_) {\\n        require(tier_ <= TierConstants.MAX_TIER, \\\"MAX_TIER\\\");\\n        _;\\n    }\\n\\n    /// Returns the highest tier achieved relative to a block number\\n    /// and report.\\n    ///\\n    /// Note that typically the report will be from the _current_ contract\\n    /// state, i.e. `block.number` but not always. Tiers gained after the\\n    /// reference block are ignored.\\n    ///\\n    /// When the `report` comes from a later block than the `blockNumber` this\\n    /// means the user must have held the tier continuously from `blockNumber`\\n    /// _through_ to the report block.\\n    /// I.e. NOT a snapshot.\\n    ///\\n    /// @param report_ A report as per `ITier`.\\n    /// @param blockNumber_ The block number to check the tiers against.\\n    /// @return The highest tier held since `blockNumber` as per `report`.\\n    function tierAtBlockFromReport(uint256 report_, uint256 blockNumber_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        unchecked {\\n            for (uint256 i_ = 0; i_ < 8; i_++) {\\n                if (uint32(uint256(report_ >> (i_ * 32))) > blockNumber_) {\\n                    return i_;\\n                }\\n            }\\n            return TierConstants.MAX_TIER;\\n        }\\n    }\\n\\n    /// Returns the block that a given tier has been held since from a report.\\n    ///\\n    /// The report MUST encode \\\"never\\\" as 0xFFFFFFFF. This ensures\\n    /// compatibility with `tierAtBlockFromReport`.\\n    ///\\n    /// @param report_ The report to read a block number from.\\n    /// @param tier_ The Tier to read the block number for.\\n    /// @return The block number this has been held since.\\n    function tierBlock(uint256 report_, uint256 tier_)\\n        internal\\n        pure\\n        maxTier(tier_)\\n        returns (uint256)\\n    {\\n        unchecked {\\n            // ZERO is a special case. Everyone has always been at least ZERO,\\n            // since block 0.\\n            if (tier_ == 0) {\\n                return 0;\\n            }\\n\\n            uint256 offset_ = (tier_ - 1) * 32;\\n            return uint256(uint32(uint256(report_ >> offset_)));\\n        }\\n    }\\n\\n    /// Resets all the tiers above the reference tier to 0xFFFFFFFF.\\n    ///\\n    /// @param report_ Report to truncate with high bit 1s.\\n    /// @param tier_ Tier to truncate above (exclusive).\\n    /// @return Truncated report.\\n    function truncateTiersAbove(uint256 report_, uint256 tier_)\\n        internal\\n        pure\\n        maxTier(tier_)\\n        returns (uint256)\\n    {\\n        unchecked {\\n            uint256 offset_ = tier_ * 32;\\n            uint256 mask_ = (TierConstants.NEVER_REPORT >> offset_) << offset_;\\n            return report_ | mask_;\\n        }\\n    }\\n\\n    /// Updates a report with a block number for a given tier.\\n    /// More gas efficient than `updateBlocksForTierRange` if only a single\\n    /// tier is being modified.\\n    /// The tier at/above the given tier is updated. E.g. tier `0` will update\\n    /// the block for tier `1`.\\n    function updateBlockAtTier(\\n        uint256 report_,\\n        uint256 tier_,\\n        uint256 blockNumber_\\n    ) internal pure maxTier(tier_) returns (uint256) {\\n        unchecked {\\n            uint256 offset_ = tier_ * 32;\\n            return\\n                (report_ &\\n                    ~uint256(uint256(TierConstants.NEVER_TIER) << offset_)) |\\n                uint256(blockNumber_ << offset_);\\n        }\\n    }\\n\\n    /// Updates a report with a block number for every tier in a range.\\n    ///\\n    /// Does nothing if the end status is equal or less than the start tier.\\n    /// @param report_ The report to update.\\n    /// @param startTier_ The tier at the start of the range (exclusive).\\n    /// @param endTier_ The tier at the end of the range (inclusive).\\n    /// @param blockNumber_ The block number to set for every tier in the\\n    /// range.\\n    /// @return The updated report.\\n    function updateBlocksForTierRange(\\n        uint256 report_,\\n        uint256 startTier_,\\n        uint256 endTier_,\\n        uint256 blockNumber_\\n    ) internal pure maxTier(startTier_) maxTier(endTier_) returns (uint256) {\\n        unchecked {\\n            uint256 offset_;\\n            for (uint256 i_ = startTier_; i_ < endTier_; i_++) {\\n                offset_ = i_ * 32;\\n                report_ =\\n                    (report_ &\\n                        ~uint256(\\n                            uint256(TierConstants.NEVER_TIER) << offset_\\n                        )) |\\n                    uint256(blockNumber_ << offset_);\\n            }\\n            return report_;\\n        }\\n    }\\n\\n    /// Updates a report to a new status.\\n    ///\\n    /// Internally dispatches to `truncateTiersAbove` and\\n    /// `updateBlocksForTierRange`.\\n    /// The dispatch is based on whether the new tier is above or below the\\n    /// current tier.\\n    /// The `startTier_` MUST match the result of `tierAtBlockFromReport`.\\n    /// It is expected the caller will know the current tier when\\n    /// calling this function and need to do other things in the calling scope\\n    /// with it.\\n    ///\\n    /// @param report_ The report to update.\\n    /// @param startTier_ The tier to start updating relative to. Data above\\n    /// this tier WILL BE LOST so probably should be the current tier.\\n    /// @param endTier_ The new highest tier held, at the given block number.\\n    /// @param blockNumber_ The block number to update the highest tier to, and\\n    /// intermediate tiers from `startTier_`.\\n    /// @return The updated report.\\n    function updateReportWithTierAtBlock(\\n        uint256 report_,\\n        uint256 startTier_,\\n        uint256 endTier_,\\n        uint256 blockNumber_\\n    ) internal pure returns (uint256) {\\n        return\\n            endTier_ < startTier_\\n                ? truncateTiersAbove(report_, endTier_)\\n                : updateBlocksForTierRange(\\n                    report_,\\n                    startTier_,\\n                    endTier_,\\n                    blockNumber_\\n                );\\n    }\\n}\\n\",\"keccak256\":\"0x8310af353fcfbd2b57efbfead03142987d98ca93a4a4c5cf1f07a258f890f186\",\"license\":\"CAL\"},\"contracts/tier/libraries/TierwiseCombine.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"./TierReport.sol\\\";\\nimport \\\"../../math/SaturatingMath.sol\\\";\\n\\nlibrary TierwiseCombine {\\n    using Math for uint256;\\n    using SaturatingMath for uint256;\\n\\n    /// Every lte check in `selectLte` must pass.\\n    uint256 internal constant LOGIC_EVERY = 0;\\n    /// Only one lte check in `selectLte` must pass.\\n    uint256 internal constant LOGIC_ANY = 1;\\n\\n    /// Select the minimum block number from passing blocks in `selectLte`.\\n    uint256 internal constant MODE_MIN = 0;\\n    /// Select the maximum block number from passing blocks in `selectLte`.\\n    uint256 internal constant MODE_MAX = 1;\\n    /// Select the first block number that passes in `selectLte`.\\n    uint256 internal constant MODE_FIRST = 2;\\n\\n    /// Performs a tierwise saturating subtraction of two reports.\\n    /// Intepret as \\\"# of blocks older report was held before newer report\\\".\\n    /// If older report is in fact newer then `0` will be returned.\\n    /// i.e. the diff cannot be negative, older report as simply spent 0 blocks\\n    /// existing before newer report, if it is in truth the newer report.\\n    /// @param newerReport_ Block to subtract from.\\n    /// @param olderReport_ Block to subtract.\\n    function saturatingSub(uint256 newerReport_, uint256 olderReport_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        unchecked {\\n            uint256 ret_;\\n            for (uint256 tier_ = 1; tier_ <= 8; tier_++) {\\n                uint256 newerBlock_ = TierReport.tierBlock(newerReport_, tier_);\\n                uint256 olderBlock_ = TierReport.tierBlock(olderReport_, tier_);\\n                uint256 diff_ = newerBlock_.saturatingSub(olderBlock_);\\n                ret_ = TierReport.updateBlockAtTier(ret_, tier_ - 1, diff_);\\n            }\\n            return ret_;\\n        }\\n    }\\n\\n    /// Given a list of reports, selects the best tier in a tierwise fashion.\\n    /// The \\\"best\\\" criteria can be configured by `logic_` and `mode_`.\\n    /// Logic can be \\\"every\\\" or \\\"any\\\", which means that the reports for a given\\n    /// tier must either all or any be less than or equal to the reference\\n    /// `blockNumber_`.\\n    /// Mode can be \\\"min\\\", \\\"max\\\", \\\"first\\\" which selects between all the block\\n    /// numbers for a given tier that meet the lte criteria.\\n    /// @param reports_ The list of reports to select over.\\n    /// @param blockNumber_ The block number that tier blocks must be lte.\\n    /// @param logic_ `LOGIC_EVERY` or `LOGIC_ANY`.\\n    /// @param mode_ `MODE_MIN`, `MODE_MAX` or `MODE_FIRST`.\\n    function selectLte(\\n        uint256[] memory reports_,\\n        uint256 blockNumber_,\\n        uint256 logic_,\\n        uint256 mode_\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 ret_;\\n            uint256 block_;\\n            bool anyLte_;\\n            uint256 length_ = reports_.length;\\n            for (uint256 tier_ = 1; tier_ <= 8; tier_++) {\\n                uint256 accumulator_;\\n                // Nothing lte the reference block for this tier yet.\\n                anyLte_ = false;\\n\\n                // Initialize the accumulator for this tier.\\n                if (mode_ == MODE_MIN) {\\n                    accumulator_ = TierConstants.NEVER_REPORT;\\n                } else {\\n                    accumulator_ = 0;\\n                }\\n\\n                // Filter all the blocks at the current tier from all the\\n                // reports against the reference tier and each other.\\n                for (uint256 i_ = 0; i_ < length_; i_++) {\\n                    block_ = TierReport.tierBlock(reports_[i_], tier_);\\n\\n                    if (block_ <= blockNumber_) {\\n                        // Min and max need to compare current value against\\n                        // the accumulator.\\n                        if (mode_ == MODE_MIN) {\\n                            accumulator_ = block_.min(accumulator_);\\n                        } else if (mode_ == MODE_MAX) {\\n                            accumulator_ = block_.max(accumulator_);\\n                        } else if (mode_ == MODE_FIRST && !anyLte_) {\\n                            accumulator_ = block_;\\n                        }\\n                        anyLte_ = true;\\n                    } else if (logic_ == LOGIC_EVERY) {\\n                        // Can short circuit for an \\\"every\\\" check.\\n                        accumulator_ = TierConstants.NEVER_REPORT;\\n                        break;\\n                    }\\n                }\\n                if (!anyLte_) {\\n                    accumulator_ = TierConstants.NEVER_REPORT;\\n                }\\n                ret_ = TierReport.updateBlockAtTier(\\n                    ret_,\\n                    tier_ - 1,\\n                    accumulator_\\n                );\\n            }\\n            return ret_;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xff9aab5ff678adcc147ee4554521fbe14295f5ad95a58dc308975dd011b4cd7c\",\"license\":\"CAL\"},\"contracts/vm/RainVM.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity ^0.8.10;\\n\\n/// Everything required to evaluate and track the state of a rain script.\\n/// As this is a struct it will be in memory when passed to `RainVM` and so\\n/// will be modified by reference internally. This is important for gas\\n/// efficiency; the stack, arguments and stackIndex will likely be mutated by\\n/// the running script.\\n/// @param stackIndex Opcodes write to the stack at the stack index and can\\n/// consume from the stack by decrementing the index and reading between the\\n/// old and new stack index.\\n/// IMPORANT: The stack is never zeroed out so the index must be used to\\n/// find the \\\"top\\\" of the stack as the result of an `eval`.\\n/// @param stack Stack is the general purpose runtime state that opcodes can\\n/// read from and write to according to their functionality.\\n/// @param sources Sources available to be executed by `eval`.\\n/// Notably `ZIPMAP` can also select a source to execute by index.\\n/// @param constants Constants that can be copied to the stack by index by\\n/// `VAL`.\\n/// @param arguments `ZIPMAP` populates arguments which can be copied to the\\n/// stack by `VAL`.\\nstruct State {\\n    uint256 stackIndex;\\n    uint256[] stack;\\n    bytes[] sources;\\n    uint256[] constants;\\n    uint256[] arguments;\\n}\\n\\n/// @title RainVM\\n/// @notice micro VM for implementing and executing custom contract DSLs.\\n/// Libraries and contracts map opcodes to `view` functionality then RainVM\\n/// runs rain scripts using these opcodes. Rain scripts dispatch as pairs of\\n/// bytes. The first byte is an opcode to run and the second byte is a value\\n/// the opcode can use contextually to inform how to run. Typically opcodes\\n/// will read/write to the stack to produce some meaningful final state after\\n/// all opcodes have been dispatched.\\n///\\n/// The only thing required to run a rain script is a `State` struct to pass\\n/// to `eval`, and the index of the source to run. Additional context can\\n/// optionally be provided to be used by opcodes. For example, an `ITier`\\n/// contract can take the input of `report`, abi encode it as context, then\\n/// expose a local opcode that copies this account to the stack. The state will\\n/// be mutated by reference rather than returned by `eval`, this is to make it\\n/// very clear to implementers that the inline mutation is occurring.\\n///\\n/// Rain scripts run \\\"bottom to top\\\", i.e. \\\"right to left\\\"!\\n/// See the tests for examples on how to construct rain script in JavaScript\\n/// then pass to `ImmutableSource` contracts deployed by a factory that then\\n/// run `eval` to produce a final value.\\n///\\n/// There are only 3 \\\"core\\\" opcodes for `RainVM`:\\n/// - `0`: Skip self and optionally additional opcodes, `0 0` is a noop\\n/// - `1`: Copy value from either `constants` or `arguments` at index `operand`\\n///   to the top of the stack. High bit of `operand` is `0` for `constants` and\\n///   `1` for `arguments`.\\n/// - `2`: Zipmap takes N values from the stack, interprets each as an array of\\n///   configurable length, then zips them into `arguments` and maps a source\\n///   from `sources` over these. See `zipmap` for more details.\\n///\\n/// To do anything useful the contract that inherits `RainVM` needs to provide\\n/// opcodes to build up an internal DSL. This may sound complex but it only\\n/// requires mapping opcode integers to functions to call, and reading/writing\\n/// values to the stack as input/output for these functions. Further, opcode\\n/// packs are provided in rain that any inheriting contract can use as a normal\\n/// solidity library. See `MathOps.sol` opcode pack and the\\n/// `CalculatorTest.sol` test contract for an example of how to dispatch\\n/// opcodes and handle the results in a wrapping contract.\\n///\\n/// RainVM natively has no concept of branching logic such as `if` or loops.\\n/// An opcode pack could implement these similar to the core zipmap by lazily\\n/// evaluating a source from `sources` based on some condition, etc. Instead\\n/// some simpler, eagerly evaluated selection tools such as `min` and `max` in\\n/// the `MathOps` opcode pack are provided. Future versions of `RainVM` MAY\\n/// implement lazy `if` and other similar patterns.\\n///\\n/// The `eval` function is `view` because rain scripts are expected to compute\\n/// results only without modifying any state. The contract wrapping the VM is\\n/// free to mutate as usual. This model encourages exposing only read-only\\n/// functionality to end-user deployers who provide scripts to a VM factory.\\n/// Removing all writes remotes a lot of potential foot-guns for rain script\\n/// authors and allows VM contract authors to reason more clearly about the\\n/// input/output of the wrapping solidity code.\\n///\\n/// Internally `RainVM` makes heavy use of unchecked math and assembly logic\\n/// as the opcode dispatch logic runs on a tight loop and so gas costs can ramp\\n/// up very quickly. Implementing contracts and opcode packs SHOULD require\\n/// that opcodes they receive do not exceed the codes they are expecting.\\nabstract contract RainVM {\\n    /// `0` is a skip as this is the fallback value for unset solidity bytes.\\n    /// Any additional \\\"whitespace\\\" in rain scripts will be noops as `0 0` is\\n    /// \\\"skip self\\\". The val can be used to skip additional opcodes but take\\n    /// care to not underflow the source itself.\\n    uint256 private constant OP_SKIP = 0;\\n    /// `1` copies a value either off `constants` or `arguments` to the top of\\n    /// the stack. The high bit of the operand specifies which, `0` for\\n    /// `constants` and `1` for `arguments`.\\n    uint256 private constant OP_VAL = 1;\\n    /// Duplicates the top of the stack.\\n    uint256 private constant OP_DUP = 2;\\n    /// `2` takes N values off the stack, interprets them as an array then zips\\n    /// and maps a source from `sources` over them. The source has access to\\n    /// the original constants using `1 0` and to zipped arguments as `1 1`.\\n    uint256 private constant OP_ZIPMAP = 3;\\n    /// Number of provided opcodes for `RainVM`.\\n    uint256 internal constant OPS_LENGTH = 4;\\n\\n    /// Zipmap is rain script's native looping construct.\\n    /// N values are taken from the stack as `uint256` then split into `uintX`\\n    /// values where X is configurable by `operand_`. Each 1 increment in the\\n    /// operand size config doubles the number of items in the implied arrays.\\n    /// For example, size 0 is 1 `uint256` value, size 1 is\\n    /// `2x `uint128` values, size 2 is 4x `uint64` values and so on.\\n    ///\\n    /// The implied arrays are zipped and then copied into `arguments` and\\n    /// mapped over with a source from `sources`. Each iteration of the mapping\\n    /// copies values into `arguments` from index `0` but there is no attempt\\n    /// to zero out any values that may already be in the `arguments` array.\\n    /// It is the callers responsibility to ensure that the `arguments` array\\n    /// is correctly sized and populated for the mapped source.\\n    ///\\n    /// The `operand_` for the zipmap opcode is split into 3 components:\\n    /// - 2 low bits: The index of the source to use from `sources`.\\n    /// - 3 middle bits: The size of the loop, where 0 is 1 iteration\\n    /// - 3 high bits: The number of vals to be zipped from the stack where 0\\n    ///   is 1 value to be zipped.\\n    ///\\n    /// This is a separate function to avoid blowing solidity compile stack.\\n    /// In the future it may be moved inline to `eval` for gas efficiency.\\n    ///\\n    /// See https://en.wikipedia.org/wiki/Zipping_(computer_science)\\n    /// See https://en.wikipedia.org/wiki/Map_(higher-order_function)\\n    /// @param context_ Domain specific context the wrapping contract can\\n    /// provide to passthrough back to its own opcodes.\\n    /// @param state_ The execution state of the VM.\\n    /// @param operand_ The operand_ associated with this dispatch to zipmap.\\n    function zipmap(\\n        bytes memory context_,\\n        State memory state_,\\n        uint256 operand_\\n    ) internal view {\\n        unchecked {\\n            uint256 sourceIndex_;\\n            uint256 stepSize_;\\n            uint256 offset_;\\n            uint256 valLength_;\\n            // assembly here to shave some gas.\\n            assembly {\\n                // rightmost 3 bits are the index of the source to use from\\n                // sources in `state_`.\\n                sourceIndex_ := and(operand_, 0x07)\\n                // bits 4 and 5 indicate size of the loop. Each 1 increment of\\n                // the size halves the bits of the arguments to the zipmap.\\n                // e.g. 256 `stepSize_` would copy all 256 bits of the uint256\\n                // into args for the inner `eval`. A loop size of `1` would\\n                // shift `stepSize_` by 1 (halving it) and meaning the uint256\\n                // is `eval` as 2x 128 bit values (runs twice). A loop size of\\n                // `2` would run 4 times as 64 bit values, and so on.\\n                //\\n                // Slither false positive here for the shift of constant `256`.\\n                // slither-disable-next-line incorrect-shift\\n                stepSize_ := shr(and(shr(3, operand_), 0x03), 256)\\n                // `offset_` is used by the actual bit shifting operations and\\n                // is precalculated here to save some gas as this is a hot\\n                // performance path.\\n                offset_ := sub(256, stepSize_)\\n                // bits 5+ determine the number of vals to be zipped. At least\\n                // one value must be provided so a `valLength_` of `0` is one\\n                // value to loop over.\\n                valLength_ := add(shr(5, operand_), 1)\\n            }\\n            state_.stackIndex -= valLength_;\\n\\n            uint256[] memory baseVals_ = new uint256[](valLength_);\\n            for (uint256 a_ = 0; a_ < valLength_; a_++) {\\n                baseVals_[a_] = state_.stack[state_.stackIndex + a_];\\n            }\\n\\n            for (uint256 step_ = 0; step_ < 256; step_ += stepSize_) {\\n                for (uint256 a_ = 0; a_ < valLength_; a_++) {\\n                    state_.arguments[a_] =\\n                        (baseVals_[a_] << (offset_ - step_)) >>\\n                        offset_;\\n                }\\n                eval(context_, state_, sourceIndex_);\\n            }\\n        }\\n    }\\n\\n    /// Evaluates a rain script.\\n    /// The main workhorse of the rain VM, `eval` runs any core opcodes and\\n    /// dispatches anything it is unaware of to the implementing contract.\\n    /// For a script to be useful the implementing contract must override\\n    /// `applyOp` and dispatch non-core opcodes to domain specific logic. This\\n    /// could be mathematical operations for a calculator, tier reports for\\n    /// a membership combinator, entitlements for a minting curve, etc.\\n    ///\\n    /// Everything required to coordinate the execution of a rain script to\\n    /// completion is contained in the `State`. The context and source index\\n    /// are provided so the caller can provide additional data and kickoff the\\n    /// opcode dispatch from the correct source in `sources`.\\n    function eval(\\n        bytes memory context_,\\n        State memory state_,\\n        uint256 sourceIndex_\\n    ) internal view {\\n        // Everything in eval can be checked statically, there are no dynamic\\n        // runtime values read from the stack that can cause out of bounds\\n        // behaviour. E.g. sourceIndex in zipmap and size of a skip are both\\n        // taken from the operand in the source, not the stack. A program that\\n        // operates out of bounds SHOULD be flagged by static code analysis and\\n        // avoided by end-users.\\n        unchecked {\\n            uint256 i_ = 0;\\n            uint256 opcode_;\\n            uint256 operand_;\\n            uint256 len_;\\n            uint256 sourceLocation_;\\n            uint256 constantsLocation_;\\n            uint256 argumentsLocation_;\\n            uint256 stackLocation_;\\n            assembly {\\n                stackLocation_ := mload(add(state_, 0x20))\\n                sourceLocation_ := mload(\\n                    add(\\n                        mload(add(state_, 0x40)),\\n                        add(0x20, mul(sourceIndex_, 0x20))\\n                    )\\n                )\\n                constantsLocation_ := mload(add(state_, 0x60))\\n                argumentsLocation_ := mload(add(state_, 0x80))\\n                len_ := mload(sourceLocation_)\\n            }\\n\\n            // Loop until complete.\\n            while (i_ < len_) {\\n                assembly {\\n                    i_ := add(i_, 2)\\n                    let op_ := mload(add(sourceLocation_, i_))\\n                    opcode_ := byte(30, op_)\\n                    operand_ := byte(31, op_)\\n                }\\n                if (opcode_ < OPS_LENGTH) {\\n                    if (opcode_ == OP_VAL) {\\n                        assembly {\\n                            let location_ := argumentsLocation_\\n                            if iszero(and(operand_, 0x80)) {\\n                                location_ := constantsLocation_\\n                            }\\n\\n                            let stackIndex_ := mload(state_)\\n                            // Copy value to stack.\\n                            mstore(\\n                                add(\\n                                    stackLocation_,\\n                                    add(0x20, mul(stackIndex_, 0x20))\\n                                ),\\n                                mload(\\n                                    add(\\n                                        location_,\\n                                        add(\\n                                            0x20,\\n                                            mul(and(operand_, 0x7F), 0x20)\\n                                        )\\n                                    )\\n                                )\\n                            )\\n                            mstore(state_, add(stackIndex_, 1))\\n                        }\\n                    } else if (opcode_ == OP_DUP) {\\n                        assembly {\\n                            let stackIndex_ := mload(state_)\\n                            mstore(\\n                                add(\\n                                    stackLocation_,\\n                                    add(0x20, mul(stackIndex_, 0x20))\\n                                ),\\n                                mload(\\n                                    add(\\n                                        stackLocation_,\\n                                        add(0x20, mul(operand_, 0x20))\\n                                    )\\n                                )\\n                            )\\n                            mstore(state_, add(stackIndex_, 1))\\n                        }\\n                    } else if (opcode_ == OP_ZIPMAP) {\\n                        zipmap(context_, state_, operand_);\\n                    } else {\\n                        // if the high bit of the operand is nonzero then take\\n                        // the top of the stack and if it is zero we do NOT\\n                        // skip.\\n                        // analogous to `JUMPI` in evm opcodes.\\n                        // If high bit of the operand is zero then we always\\n                        // skip.\\n                        // analogous to `JUMP` in evm opcodes.\\n                        // the operand is interpreted as a signed integer so\\n                        // that we can skip forwards or backwards. Notable\\n                        // difference between skip and jump from evm is that\\n                        // skip moves a relative distance from the current\\n                        // position and is known at compile time, while jump\\n                        // moves to an absolute position read from the stack at\\n                        // runtime. The relative simplicity of skip means we\\n                        // can check for out of bounds behaviour at compile\\n                        // time and each source can never goto a position in a\\n                        // different source.\\n\\n                        // manually sign extend 1 bit.\\n                        // normal signextend works on bytes not bits.\\n                        int8 shift_ = int8(\\n                            uint8(operand_) & ((uint8(operand_) << 1) | 0x7F)\\n                        );\\n\\n                        // if the high bit is 1...\\n                        if (operand_ & 0x80 > 0) {\\n                            // take the top of the stack and only skip if it is\\n                            // nonzero.\\n                            state_.stackIndex--;\\n                            if (state_.stack[state_.stackIndex] == 0) {\\n                                continue;\\n                            }\\n                        }\\n                        if (shift_ != 0) {\\n                            if (shift_ < 0) {\\n                                // This is not particularly intuitive.\\n                                // Converting between int and uint and then\\n                                // moving `i_` back another 2 bytes to\\n                                // compensate for the addition of 2 bytes at\\n                                // the start of the next loop.\\n                                i_ -= uint8(~shift_ + 2) * 2;\\n                            } else {\\n                                i_ += uint8(shift_ * 2);\\n                            }\\n                        }\\n                    }\\n                } else {\\n                    applyOp(context_, state_, opcode_, operand_);\\n                }\\n            }\\n        }\\n    }\\n\\n    /// Every contract that implements `RainVM` should override `applyOp` so\\n    /// that useful opcodes are available to script writers.\\n    /// For an example of a simple and efficient `applyOp` implementation that\\n    /// dispatches over several opcode packs see `CalculatorTest.sol`.\\n    /// Implementing contracts are encouraged to handle the dispatch with\\n    /// unchecked math as the dispatch is a critical performance path and\\n    /// default solidity checked math can significantly increase gas cost for\\n    /// each opcode dispatched. Consider that a single zipmap could loop over\\n    /// dozens of opcode dispatches internally.\\n    /// Stack is modified by reference NOT returned.\\n    /// @param context_ Bytes that the implementing contract can passthrough\\n    /// to be ready internally by its own opcodes. RainVM ignores the context.\\n    /// @param state_ The RainVM state that tracks the execution progress.\\n    /// @param opcode_ The current opcode to dispatch.\\n    /// @param operand_ Additional information to inform the opcode dispatch.\\n    function applyOp(\\n        bytes memory context_,\\n        State memory state_,\\n        uint256 opcode_,\\n        uint256 operand_\\n    ) internal view virtual {} //solhint-disable-line no-empty-blocks\\n}\\n\",\"keccak256\":\"0xd9abedf243b74d40104fcae7271118a0405eb4eb4d00fd2d2ef74ef48efb8ee4\",\"license\":\"CAL\"},\"contracts/vm/libraries/VMState.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity ^0.8.10;\\n\\nimport {State} from \\\"../RainVM.sol\\\";\\nimport \\\"../../sstore2/SSTORE2.sol\\\";\\n\\n/// Config required to build a new `State`.\\n/// @param sources Sources verbatim.\\n/// @param constants Constants verbatim.\\n/// @param stackLength Sets the length of the uint256[] of the stack.\\n/// @param argumentsLength Sets the length of the uint256[] of the arguments.\\nstruct StateConfig {\\n    bytes[] sources;\\n    uint256[] constants;\\n    uint256 stackLength;\\n    uint256 argumentsLength;\\n}\\n\\n/// @title StateSnapshot\\n/// @notice Deploys everything required to build a fresh `State` for rainVM\\n/// execution as an evm contract onchain. Uses SSTORE2 to abi encode rain\\n/// script into evm bytecode, then stores an immutable pointer to the resulting\\n/// contract. Allows arbitrary length rain script source, constants and stack.\\n/// Gas scales for reads much better for longer data than attempting to put\\n/// all the source into storage.\\n/// See https://github.com/0xsequence/sstore2\\ncontract VMState {\\n    /// A new shapshot has been deployed onchain.\\n    /// @param sender `msg.sender` of the deployer.\\n    /// @param pointer Pointer to the onchain snapshot contract.\\n    /// @param state `State` of the snapshot that was deployed.\\n    event Snapshot(address sender, address pointer, State state);\\n\\n    /// Builds a new `State` from `StateConfig`.\\n    /// Empty stack and arguments with stack index 0.\\n    /// @param config_ State config to build the new `State`.\\n    function _newState(StateConfig memory config_)\\n        internal\\n        pure\\n        returns (State memory)\\n    {\\n        return\\n            State(\\n                0,\\n                new uint256[](config_.stackLength),\\n                config_.sources,\\n                config_.constants,\\n                new uint256[](config_.argumentsLength)\\n            );\\n    }\\n\\n    /// Snapshot a RainVM state as an immutable onchain contract.\\n    /// Usually `State` will be new as per `newState` but can be a snapshot of\\n    /// an \\\"in flight\\\" execution state also.\\n    /// @param state_ The state to snapshot.\\n    function _snapshot(State memory state_) internal returns (address) {\\n        address pointer_ = SSTORE2.write(abi.encode(state_));\\n        emit Snapshot(msg.sender, pointer_, state_);\\n        return pointer_;\\n    }\\n\\n    /// Builds a fresh state for rainVM execution from all construction data.\\n    /// This can be passed directly to `eval` for a `RainVM` contract.\\n    /// @param pointer_ The pointer (address) of the snapshot to restore.\\n    function _restore(address pointer_) internal view returns (State memory) {\\n        return abi.decode(SSTORE2.read(pointer_), (State));\\n    }\\n}\\n\",\"keccak256\":\"0xb94cbb2869dbed476ef3f120bd624f7e42378c4ded709b43987ae85866d3880c\",\"license\":\"CAL\"},\"contracts/vm/ops/BlockOps.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity ^0.8.10;\\n\\nimport {State} from \\\"../RainVM.sol\\\";\\n\\n/// @title BlockOps\\n/// @notice RainVM opcode pack to access the current block number.\\nlibrary BlockOps {\\n    /// Opcode for the block number.\\n    uint256 private constant BLOCK_NUMBER = 0;\\n    /// Opcode for the block timestamp.\\n    uint256 private constant BLOCK_TIMESTAMP = 1;\\n    /// Number of provided opcodes for `BlockOps`.\\n    uint256 internal constant OPS_LENGTH = 2;\\n\\n    function applyOp(\\n        bytes memory,\\n        State memory state_,\\n        uint256 opcode_,\\n        uint256\\n    ) internal view {\\n        unchecked {\\n            require(opcode_ < OPS_LENGTH, \\\"MAX_OPCODE\\\");\\n            // Stack the current `block.number`.\\n            if (opcode_ == BLOCK_NUMBER) {\\n                state_.stack[state_.stackIndex] = block.number;\\n                state_.stackIndex++;\\n            }\\n            // Stack the current `block.timestamp`.\\n            else if (opcode_ == BLOCK_TIMESTAMP) {\\n                // solhint-disable-next-line not-rely-on-time\\n                state_.stack[state_.stackIndex] = block.timestamp;\\n                state_.stackIndex++;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x019c85ab5271b8fa63a1a3e525a3964179396dc8e2e9516b17781544cac0771d\",\"license\":\"CAL\"},\"contracts/vm/ops/TierOps.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity ^0.8.10;\\n\\nimport {State} from \\\"../RainVM.sol\\\";\\nimport \\\"../../tier/libraries/TierReport.sol\\\";\\nimport \\\"../../tier/libraries/TierwiseCombine.sol\\\";\\n\\n/// @title TierOps\\n/// @notice RainVM opcode pack to operate on tier reports.\\nlibrary TierOps {\\n    /// Opcode to call `report` on an `ITier` contract.\\n    uint256 private constant REPORT = 0;\\n    /// Opcode to stack a report that has never been held for all tiers.\\n    uint256 private constant NEVER = 1;\\n    /// Opcode to stack a report that has always been held for all tiers.\\n    uint256 private constant ALWAYS = 2;\\n    /// Opcode to calculate the tierwise diff of two reports.\\n    uint256 private constant SATURATING_DIFF = 3;\\n    /// Opcode to update the blocks over a range of tiers for a report.\\n    uint256 private constant UPDATE_BLOCKS_FOR_TIER_RANGE = 4;\\n    /// Opcode to tierwise select the best block lte a reference block.\\n    uint256 private constant SELECT_LTE = 5;\\n    /// Number of provided opcodes for `TierOps`.\\n    uint256 internal constant OPS_LENGTH = 6;\\n\\n    function applyOp(\\n        bytes memory,\\n        State memory state_,\\n        uint256 opcode_,\\n        uint256 operand_\\n    ) internal view {\\n        unchecked {\\n            require(opcode_ < OPS_LENGTH, \\\"MAX_OPCODE\\\");\\n            uint256 baseIndex_;\\n            // Stack the report returned by an `ITier` contract.\\n            // Top two stack vals are used as the address and `ITier` contract\\n            // to check against.\\n            if (opcode_ == REPORT) {\\n                state_.stackIndex -= 1;\\n                baseIndex_ = state_.stackIndex - 1;\\n                state_.stack[baseIndex_] = ITier(\\n                    address(uint160(state_.stack[baseIndex_]))\\n                ).report(address(uint160(state_.stack[baseIndex_ + 1])));\\n            }\\n            // Stack a report that has never been held at any tier.\\n            else if (opcode_ == NEVER) {\\n                state_.stack[state_.stackIndex] = TierConstants.NEVER_REPORT;\\n                state_.stackIndex++;\\n            }\\n            // Stack a report that has always been held at every tier.\\n            else if (opcode_ == ALWAYS) {\\n                state_.stack[state_.stackIndex] = TierConstants.ALWAYS;\\n                state_.stackIndex++;\\n            }\\n            // Stack the tierwise saturating subtraction of two reports.\\n            // If the older report is newer than newer report the result will\\n            // be `0`, else a tierwise diff in blocks will be obtained.\\n            // The older and newer report are taken from the stack.\\n            else if (opcode_ == SATURATING_DIFF) {\\n                state_.stackIndex -= 2;\\n                baseIndex_ = state_.stackIndex;\\n                uint256 newerReport_ = state_.stack[baseIndex_];\\n                uint256 olderReport_ = state_.stack[baseIndex_ + 1];\\n                state_.stack[baseIndex_] = TierwiseCombine.saturatingSub(\\n                    newerReport_,\\n                    olderReport_\\n                );\\n                state_.stackIndex++;\\n            }\\n            // Stacks a report with updated blocks over tier range.\\n            // The start and end tier are taken from the low and high bits of\\n            // the `operand_` respectively.\\n            // The block number to update to and the report to update over are\\n            // both taken from the stack.\\n            else if (opcode_ == UPDATE_BLOCKS_FOR_TIER_RANGE) {\\n                uint256 startTier_ = operand_ & 0x0f; // & 00001111\\n                uint256 endTier_ = (operand_ >> 4) & 0x0f; // & 00001111\\n                state_.stackIndex -= 2;\\n                baseIndex_ = state_.stackIndex;\\n                uint256 report_ = state_.stack[baseIndex_];\\n                uint256 blockNumber_ = state_.stack[baseIndex_ + 1];\\n                state_.stack[baseIndex_] = TierReport.updateBlocksForTierRange(\\n                    report_,\\n                    startTier_,\\n                    endTier_,\\n                    blockNumber_\\n                );\\n                state_.stackIndex++;\\n            }\\n            // Stacks the result of a `selectLte` combinator.\\n            // All `selectLte` share the same stack and argument handling.\\n            // In the future these may be combined into a single opcode, taking\\n            // the `logic_` and `mode_` from the `operand_` high bits.\\n            else if (opcode_ == SELECT_LTE) {\\n                uint256 logic_ = operand_ >> 7;\\n                uint256 mode_ = (operand_ >> 5) & 0x3; // & 00000011\\n                uint256 reportsLength_ = operand_ & 0x1F; // & 00011111\\n\\n                // Need one more than reports length to include block number.\\n                state_.stackIndex -= reportsLength_ + 1;\\n                baseIndex_ = state_.stackIndex;\\n                uint256 cursor_ = baseIndex_;\\n\\n                uint256[] memory reports_ = new uint256[](reportsLength_);\\n                for (uint256 a_ = 0; a_ < reportsLength_; a_++) {\\n                    reports_[a_] = state_.stack[cursor_];\\n                    cursor_++;\\n                }\\n                uint256 blockNumber_ = state_.stack[cursor_];\\n\\n                state_.stack[baseIndex_] = TierwiseCombine.selectLte(\\n                    reports_,\\n                    blockNumber_,\\n                    logic_,\\n                    mode_\\n                );\\n                state_.stackIndex++;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xde0a048976b75b543e4933b218be41c0af205dcfa6238824bdcedef093591cc5\",\"license\":\"CAL\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060016000908155604051610024906100aa565b604051809103906000f080158015610040573d6000803e3d6000fd5b50604080513381526001600160a01b03831660208201529192507f7fac34ecf0b1b374cd9659e3d17db602659d53f1162b1f20142e6c02694aed70910160405180910390a1600280546001600160a01b0319166001600160a01b03929092169190911790556100b7565b611eb380610cf983390190565b610c33806100c66000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80632ea72a491461004657806384e0ecdb14610083578063fc91a89714610096575b600080fd5b610059610054366004610449565b6100df565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100596100913660046104bb565b6101fd565b6100cf6100a4366004610522565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205460ff1690565b604051901515815260200161007a565b600060026000541415610153576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b6002600090815561016484846102a0565b73ffffffffffffffffffffffffffffffffffffffff811660008181526001602081815260409283902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169092179091558151338152908101929092529192507f7da70c4e5387d7038610b79ca7d304caaef815826e51e67cf247135387a79bce910160405180910390a160016000559392505050565b60003073ffffffffffffffffffffffffffffffffffffffff16632ea72a498360405160200161022c9190610645565b6040516020818303038152906040526040518263ffffffff1660e01b815260040161025791906107f8565b6020604051808303816000875af1158015610276573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029a919061080b565b92915050565b6000806102af8385018561095e565b6002549091506000906102d79073ffffffffffffffffffffffffffffffffffffffff16610367565b6040517fe684b6d600000000000000000000000000000000000000000000000000000000815290915073ffffffffffffffffffffffffffffffffffffffff82169063e684b6d69061032c908590600401610b21565b600060405180830381600087803b15801561034657600080fd5b505af115801561035a573d6000803e3d6000fd5b5092979650505050505050565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260601b60148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f091505073ffffffffffffffffffffffffffffffffffffffff8116610444576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f455243313136373a20637265617465206661696c656400000000000000000000604482015260640161014a565b919050565b6000806020838503121561045c57600080fd5b823567ffffffffffffffff8082111561047457600080fd5b818501915085601f83011261048857600080fd5b81358181111561049757600080fd5b8660208285010111156104a957600080fd5b60209290920196919550909350505050565b6000602082840312156104cd57600080fd5b813567ffffffffffffffff8111156104e457600080fd5b8201608081850312156104f657600080fd5b9392505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461051f57600080fd5b50565b60006020828403121561053457600080fd5b81356104f6816104fd565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261057457600080fd5b830160208101925035905067ffffffffffffffff81111561059457600080fd5b8060051b36038313156105a657600080fd5b9250929050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561062857600080fd5b8260051b8083602087013760009401602001938452509192915050565b6000602080835260a0830161065a858661053f565b6080848701528281845260c08701905060c08260051b88010193508260005b83811015610723577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff4089870301835281357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18636030181126106da57600080fd5b8501803567ffffffffffffffff8111156106f357600080fd5b80360387131561070257600080fd5b61070f88828b85016105ad565b975050509186019190860190600101610679565b50505050506107348286018661053f565b92507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe085830301604086015261076b8284836105f6565b9250505060408401356060840152606084013560808401528091505092915050565b6000815180845260005b818110156107b357602081850181015186830182015201610797565b818111156107c5576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006104f6602083018461078d565b60006020828403121561081d57600080fd5b81516104f6816104fd565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516080810167ffffffffffffffff8111828210171561087a5761087a610828565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156108c7576108c7610828565b604052919050565b600067ffffffffffffffff8211156108e9576108e9610828565b5060051b60200190565b600082601f83011261090457600080fd5b81356020610919610914836108cf565b610880565b82815260059290921b8401810191818101908684111561093857600080fd5b8286015b84811015610953578035835291830191830161093c565b509695505050505050565b6000602080838503121561097157600080fd5b823567ffffffffffffffff8082111561098957600080fd5b908401906080828703121561099d57600080fd5b6109a5610857565b8235828111156109b457600080fd5b8301601f810188136109c557600080fd5b80356109d3610914826108cf565b81815260059190911b8201860190868101908a8311156109f257600080fd5b8784015b83811015610a9d57803587811115610a0e5760008081fd5b8501603f81018d13610a205760008081fd5b89810135604089821115610a3657610a36610828565b610a668c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85011601610880565b8281528f82848601011115610a7b5760008081fd5b828285018e83013760009281018d0192909252508452509188019188016109f6565b5084525050508284013582811115610ab457600080fd5b610ac0888286016108f3565b858301525060408301356040820152606083013560608201528094505050505092915050565b600081518084526020808501945080840160005b83811015610b1657815187529582019590820190600101610afa565b509495945050505050565b6000602080835260a08301845160808386015281815180845260c08701915060c08160051b8801019350848301925060005b81811015610b9f577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff40888603018352610b8d85855161078d565b94509285019291850191600101610b53565b50505050908401518382037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001604085015290610bdc8183610ae6565b9150506040840151606084015260608401516080840152809150509291505056fea264697066735822122027032a2958023730a3aa5c22f6809cc7a2e2956fc1e267d7f72b3c433956c76564736f6c634300080a003360e060405234801561001057600080fd5b50600460808190526100249060029061003d565b60a08190526100359060069061003d565b60c052610063565b6000821982111561005e57634e487b7160e01b600052601160045260246000fd5b500190565b60805160a05160c051611e12620000a16000396000818161084001526108960152600081816107e5015261086d015260006108120152611e126000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80638a200fff14610046578063e053ea311461005b578063e684b6d614610080575b600080fd5b6100596100543660046116cc565b610093565b005b61006e610069366004611725565b6100fa565b60405190815260200160405180910390f35b61005961008e3660046117cc565b610197565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f5345545f5449455200000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6000805481906101259062010000900473ffffffffffffffffffffffffffffffffffffffff16610305565b6040805173ffffffffffffffffffffffffffffffffffffffff861660208201529192506101649101604051602081830303815290604052826000610359565b60208101518151610177906001906118e1565b815181106101875761018761191f565b6020026020010151915050919050565b600054610100900460ff166101b25760005460ff16156101b6565b303b155b610242576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016100f1565b600054610100900460ff1615801561028157600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b61029261028d836104ee565b6105e1565b600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550801561030157600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b5050565b6103376040518060a0016040528060008152602001606081526020016060815260200160608152602001606081525090565b6103408261064f565b8060200190518101906103539190611a91565b92915050565b602082810151604084015183830201909101516060840151608085015182516000948594859492939092915b848810156104e1576002880197508784015180601e1a975080601f1a96505060048710156104d55760018714156103e85781608087166103c25750825b8a516020607f89160260200182015160208202602001840152600181018c525050610385565b60028714156104135789516020870260200182015160208202602001830152600181018b5250610385565b600387141561042c576104278b8b8861067d565b610385565b607f6101fe600188901b161786166080871615610498578a517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01808c5260208c0151805190919081106104825761048261191f565b6020026020010151600014156104985750610385565b8060000b6000146104cf5760008160000b12156104c357801960020160020260ff16890398506104cf565b8060020260ff16890198505b50610385565b6104278b8b89896107e3565b5050505050505050505050565b6105206040518060a0016040528060008152602001606081526020016060815260200160608152602001606081525090565b6040518060a0016040528060008152602001836040015167ffffffffffffffff81111561054f5761054f611566565b604051908082528060200260200182016040528015610578578160200160208202803683370190505b5081526020018360000151815260200183602001518152602001836060015167ffffffffffffffff8111156105af576105af611566565b6040519080825280602002602001820160405280156105d8578160200160208202803683370190505b50905292915050565b60008061060c836040516020016105f89190611c9d565b60405160208183030381529060405261098b565b90507ff95eed63f55d96a35306669cc3b5f652f8d44552e3e4b17b2f78f13571114abd33828560405161064193929190611cb0565b60405180910390a192915050565b60606103538260017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610a16565b81517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600583901c918290030183526007821690610100600384811c1681901c91908290039060010160008167ffffffffffffffff8111156106e1576106e1611566565b60405190808252806020026020018201604052801561070a578160200160208202803683370190505b50905060005b8281101561076157876020015181896000015101815181106107345761073461191f565b602002602001015182828151811061074e5761074e61191f565b6020908102919091010152600101610710565b5060005b6101008110156107d85760005b838110156107c557848286038483815181106107905761079061191f565b6020026020010151901b901c896080015182815181106107b2576107b261191f565b6020908102919091010152600101610772565b506107d1898988610359565b8401610765565b505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000082101561083e5761083984847f0000000000000000000000000000000000000000000000000000000000000000850384610aff565b610985565b7f00000000000000000000000000000000000000000000000000000000000000008210156108945761083984847f0000000000000000000000000000000000000000000000000000000000000000850384610bdb565b7f00000000000000000000000000000000000000000000000000000000000000008203915060018210610923576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4d41585f4f50434f44450000000000000000000000000000000000000000000060448201526064016100f1565b816109855760008480602001905181019061093e9190611ce9565b90508073ffffffffffffffffffffffffffffffffffffffff1684602001518560000151815181106109715761097161191f565b602090810291909101015250825160010183525b50505050565b6000806109b6836040516020016109a29190611d06565b6040516020818303038152906040526110d8565b90508051602082016000f0915073ffffffffffffffffffffffffffffffffffffffff8216610a10576040517f08d4abb600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50919050565b6060833b80610a35575050604080516020810190915260008152610af8565b80841115610a53575050604080516020810190915260008152610af8565b83831015610a9e576040517f2c4a89fa0000000000000000000000000000000000000000000000000000000081526004810182905260248101859052604481018490526064016100f1565b8383038482036000828210610ab35782610ab5565b815b60408051603f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168101909152818152955090508087602087018a3c505050505b9392505050565b60028210610b69576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4d41585f4f50434f44450000000000000000000000000000000000000000000060448201526064016100f1565b81610ba057438360200151846000015181518110610b8957610b8961191f565b602090810291909101015282516001018352610985565b600182141561098557428360200151846000015181518110610bc457610bc461191f565b602090810291909101015250508051600101905250565b60068210610c45576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4d41585f4f50434f44450000000000000000000000000000000000000000000060448201526064016100f1565b600082610d94575082517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81018452602084015180517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe9092019182908110610cb057610cb061191f565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1663e053ea3185602001518360010181518110610cec57610cec61191f565b60200260200101516040518263ffffffff1660e01b8152600401610d2c919073ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b602060405180830381865afa158015610d49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6d9190611d2c565b84602001518281518110610d8357610d8361191f565b6020026020010181815250506110d1565b6001831415610def577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8460200151856000015181518110610dd857610dd861191f565b6020908102919091010152835160010184526110d1565b6002831415610e145760008460200151856000015181518110610dd857610dd861191f565b6003831415610ec8575082517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01808452602084015180516000919083908110610e6057610e6061191f565b60200260200101519050600085602001518360010181518110610e8557610e8561191f565b60200260200101519050610e998282611104565b86602001518481518110610eaf57610eaf61191f565b60209081029190910101525050835160010184526110d1565b6004831415610f90575082517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0180845260208401518051600f80851692600486901c909116916000919085908110610f2357610f2361191f565b60200260200101519050600087602001518560010181518110610f4857610f4861191f565b60200260200101519050610f5e82858584611163565b88602001518681518110610f7457610f7461191f565b6020908102919091010152505085516001018652506110d19050565b60058314156110d1575082517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff601f8316918290030180855290600783901c906003600585901c16908360008267ffffffffffffffff811115610ff557610ff5611566565b60405190808252806020026020018201604052801561101e578160200160208202803683370190505b50905060005b8381101561107357896020015183815181106110425761104261191f565b602002602001015182828151811061105c5761105c61191f565b602090810291909101015260019283019201611024565b5060008960200151838151811061108c5761108c61191f565b602002602001015190506110a282828888611276565b8a6020015188815181106110b8576110b861191f565b6020908102919091010152505087516001018852505050505b5050505050565b60608151826040516020016110ee929190611d45565b6040516020818303038152906040529050919050565b60008060015b6008811161115b57600061111e86836113c6565b9050600061112c86846113c6565b9050600061113a838361147b565b905061114a856001860383611491565b9450506001909201915061110a9050565b509392505050565b60008360088111156111d1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4d41585f5449455200000000000000000000000000000000000000000000000060448201526064016100f1565b83600881111561123d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4d41585f5449455200000000000000000000000000000000000000000000000060448201526064016100f1565b6000865b868110156112695763ffffffff6020820290811b1999909916868a1b17989150600101611241565b5096979650505050505050565b835160009081908190819060015b600881116113b8576000925082876112bd57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6112c1565b5060005b60005b83811015611376576112ef8c82815181106112e1576112e161191f565b6020026020010151846113c6565b95508a8611611341578861130e57611307868361151b565b9150611338565b6001891415611321576113078683611531565b60028914801561132f575084155b15611338578591505b6001945061136e565b8961136e577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9150611376565b6001016112c4565b508361139f57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b6113ad866001840383611491565b955050600101611284565b509298975050505050505050565b6000816008811115611434576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4d41585f5449455200000000000000000000000000000000000000000000000060448201526064016100f1565b826114425760009150611474565b63ffffffff60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85010285901c1691505b5092915050565b600081831161148b576000610af8565b50900390565b60008260088111156114ff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4d41585f5449455200000000000000000000000000000000000000000000000060448201526064016100f1565b505060209190910290811b63ffffffff90911b19919091161790565b600081831061152a5781610af8565b5090919050565b60008183101561152a5781610af8565b73ffffffffffffffffffffffffffffffffffffffff8116811461156357600080fd5b50565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516080810167ffffffffffffffff811182821017156115b8576115b8611566565b60405290565b60405160a0810167ffffffffffffffff811182821017156115b8576115b8611566565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561162857611628611566565b604052919050565b600067ffffffffffffffff82111561164a5761164a611566565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600082601f83011261168757600080fd5b813561169a61169582611630565b6115e1565b8181528460208386010111156116af57600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000606084860312156116e157600080fd5b83356116ec81611541565b925060208401359150604084013567ffffffffffffffff81111561170f57600080fd5b61171b86828701611676565b9150509250925092565b60006020828403121561173757600080fd5b8135610af881611541565b600067ffffffffffffffff82111561175c5761175c611566565b5060051b60200190565b600082601f83011261177757600080fd5b8135602061178761169583611742565b82815260059290921b840181019181810190868411156117a657600080fd5b8286015b848110156117c157803583529183019183016117aa565b509695505050505050565b600060208083850312156117df57600080fd5b823567ffffffffffffffff808211156117f757600080fd5b908401906080828703121561180b57600080fd5b611813611595565b82358281111561182257600080fd5b8301601f8101881361183357600080fd5b803561184161169582611742565b81815260059190911b8201860190868101908a83111561186057600080fd5b8784015b838110156118985780358781111561187c5760008081fd5b61188a8d8b83890101611676565b845250918801918801611864565b50845250505082840135828111156118af57600080fd5b6118bb88828601611766565b858301525060408301356040820152606083013560608201528094505050505092915050565b60008282101561191a577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082601f83011261195f57600080fd5b8151602061196f61169583611742565b82815260059290921b8401810191818101908684111561198e57600080fd5b8286015b848110156117c15780518352918301918301611992565b60005b838110156119c45781810151838201526020016119ac565b838111156109855750506000910152565b600082601f8301126119e657600080fd5b815160206119f661169583611742565b82815260059290921b84018101918181019086841115611a1557600080fd5b8286015b848110156117c157805167ffffffffffffffff811115611a395760008081fd5b8701603f81018913611a4b5760008081fd5b848101516040611a5d61169583611630565b8281528b82848601011115611a725760008081fd5b611a81838983018487016119a9565b8652505050918301918301611a19565b600060208284031215611aa357600080fd5b815167ffffffffffffffff80821115611abb57600080fd5b9083019060a08286031215611acf57600080fd5b611ad76115be565b82518152602083015182811115611aed57600080fd5b611af98782860161194e565b602083015250604083015182811115611b1157600080fd5b611b1d878286016119d5565b604083015250606083015182811115611b3557600080fd5b611b418782860161194e565b606083015250608083015182811115611b5957600080fd5b611b658782860161194e565b60808301525095945050505050565b600081518084526020808501945080840160005b83811015611ba457815187529582019590820190600101611b88565b509495945050505050565b80518252600060208083015160a082860152611bce60a0860182611b74565b9050604084015185820360408701528181518084528484019150848160051b850101858401935060005b82811015611c5c577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08087840301855285518051808552611c3e818b87018c85016119a9565b9689019695890195601f019091169290920187019150600101611bf8565b506060880151955088810360608a0152611c768187611b74565b9550505050505060808301518482036080860152611c948282611b74565b95945050505050565b602081526000610af86020830184611baf565b600073ffffffffffffffffffffffffffffffffffffffff808616835280851660208401525060606040830152611c946060830184611baf565b600060208284031215611cfb57600080fd5b8151610af881611541565b6000815260008251611d1f8160018501602087016119a9565b9190910160010192915050565b600060208284031215611d3e57600080fd5b5051919050565b7f630000000000000000000000000000000000000000000000000000000000000081527fffffffff000000000000000000000000000000000000000000000000000000008360e01b1660018201527f80600e6000396000f30000000000000000000000000000000000000000000000600582015260008251611dce81600e8501602087016119a9565b91909101600e01939250505056fea26469706673582212209e60c61c8840d8c74f4bd6d0dea7ef02ef09038b71e8be919f1f4ec7465950e364736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80632ea72a491461004657806384e0ecdb14610083578063fc91a89714610096575b600080fd5b610059610054366004610449565b6100df565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100596100913660046104bb565b6101fd565b6100cf6100a4366004610522565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205460ff1690565b604051901515815260200161007a565b600060026000541415610153576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b6002600090815561016484846102a0565b73ffffffffffffffffffffffffffffffffffffffff811660008181526001602081815260409283902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169092179091558151338152908101929092529192507f7da70c4e5387d7038610b79ca7d304caaef815826e51e67cf247135387a79bce910160405180910390a160016000559392505050565b60003073ffffffffffffffffffffffffffffffffffffffff16632ea72a498360405160200161022c9190610645565b6040516020818303038152906040526040518263ffffffff1660e01b815260040161025791906107f8565b6020604051808303816000875af1158015610276573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029a919061080b565b92915050565b6000806102af8385018561095e565b6002549091506000906102d79073ffffffffffffffffffffffffffffffffffffffff16610367565b6040517fe684b6d600000000000000000000000000000000000000000000000000000000815290915073ffffffffffffffffffffffffffffffffffffffff82169063e684b6d69061032c908590600401610b21565b600060405180830381600087803b15801561034657600080fd5b505af115801561035a573d6000803e3d6000fd5b5092979650505050505050565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260601b60148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f091505073ffffffffffffffffffffffffffffffffffffffff8116610444576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f455243313136373a20637265617465206661696c656400000000000000000000604482015260640161014a565b919050565b6000806020838503121561045c57600080fd5b823567ffffffffffffffff8082111561047457600080fd5b818501915085601f83011261048857600080fd5b81358181111561049757600080fd5b8660208285010111156104a957600080fd5b60209290920196919550909350505050565b6000602082840312156104cd57600080fd5b813567ffffffffffffffff8111156104e457600080fd5b8201608081850312156104f657600080fd5b9392505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461051f57600080fd5b50565b60006020828403121561053457600080fd5b81356104f6816104fd565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261057457600080fd5b830160208101925035905067ffffffffffffffff81111561059457600080fd5b8060051b36038313156105a657600080fd5b9250929050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561062857600080fd5b8260051b8083602087013760009401602001938452509192915050565b6000602080835260a0830161065a858661053f565b6080848701528281845260c08701905060c08260051b88010193508260005b83811015610723577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff4089870301835281357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18636030181126106da57600080fd5b8501803567ffffffffffffffff8111156106f357600080fd5b80360387131561070257600080fd5b61070f88828b85016105ad565b975050509186019190860190600101610679565b50505050506107348286018661053f565b92507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe085830301604086015261076b8284836105f6565b9250505060408401356060840152606084013560808401528091505092915050565b6000815180845260005b818110156107b357602081850181015186830182015201610797565b818111156107c5576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006104f6602083018461078d565b60006020828403121561081d57600080fd5b81516104f6816104fd565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516080810167ffffffffffffffff8111828210171561087a5761087a610828565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156108c7576108c7610828565b604052919050565b600067ffffffffffffffff8211156108e9576108e9610828565b5060051b60200190565b600082601f83011261090457600080fd5b81356020610919610914836108cf565b610880565b82815260059290921b8401810191818101908684111561093857600080fd5b8286015b84811015610953578035835291830191830161093c565b509695505050505050565b6000602080838503121561097157600080fd5b823567ffffffffffffffff8082111561098957600080fd5b908401906080828703121561099d57600080fd5b6109a5610857565b8235828111156109b457600080fd5b8301601f810188136109c557600080fd5b80356109d3610914826108cf565b81815260059190911b8201860190868101908a8311156109f257600080fd5b8784015b83811015610a9d57803587811115610a0e5760008081fd5b8501603f81018d13610a205760008081fd5b89810135604089821115610a3657610a36610828565b610a668c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85011601610880565b8281528f82848601011115610a7b5760008081fd5b828285018e83013760009281018d0192909252508452509188019188016109f6565b5084525050508284013582811115610ab457600080fd5b610ac0888286016108f3565b858301525060408301356040820152606083013560608201528094505050505092915050565b600081518084526020808501945080840160005b83811015610b1657815187529582019590820190600101610afa565b509495945050505050565b6000602080835260a08301845160808386015281815180845260c08701915060c08160051b8801019350848301925060005b81811015610b9f577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff40888603018352610b8d85855161078d565b94509285019291850191600101610b53565b50505050908401518382037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001604085015290610bdc8183610ae6565b9150506040840151606084015260608401516080840152809150509291505056fea264697066735822122027032a2958023730a3aa5c22f6809cc7a2e2956fc1e267d7f72b3c433956c76564736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createChild(bytes)": {
        "params": {
          "data_": "Encoded data to pass down to child contract constructor."
        },
        "returns": {
          "_0": "New child contract address."
        }
      },
      "createChildTyped((bytes[],uint256[],uint256,uint256))": {
        "params": {
          "config_": "`ImmutableSourceConfig` of the `CombineTier` logic."
        },
        "returns": {
          "_0": "New `CombineTier` child contract address."
        }
      },
      "isChild(address)": {
        "params": {
          "maybeChild_": "Address of child contract to look up."
        },
        "returns": {
          "_0": "Returns `true` if address is a contract created by this contract factory, otherwise `false`."
        }
      }
    },
    "title": "CombineTierFactory",
    "version": 1
  },
  "userdoc": {
    "events": {
      "Implementation(address,address)": {
        "notice": "Factories that clone a template contract MUST emit an event any time they set the implementation being cloned. Factories that deploy new contracts without cloning do NOT need to emit this."
      },
      "NewChild(address,address)": {
        "notice": "Whenever a new child contract is deployed, a `NewChild` event containing the new child contract address MUST be emitted."
      }
    },
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Build the reference implementation to clone for each child."
      },
      "createChild(bytes)": {
        "notice": "Implements `IFactory`. Calls the `_createChild` hook that inheriting contracts must override. Registers child contract address such that `isChild` is `true`. Emits `NewChild` event."
      },
      "createChildTyped((bytes[],uint256[],uint256,uint256))": {
        "notice": "Typed wrapper for `createChild` with Source. Use original `Factory` `createChild` function signature if function parameters are already encoded."
      },
      "isChild(address)": {
        "notice": "Implements `IFactory`. Checks if address is registered as a child contract of this factory."
      }
    },
    "notice": "Factory for creating and deploying `CombineTier` contracts.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3812,
        "contract": "contracts/tier/CombineTierFactory.sol:CombineTierFactory",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 10285,
        "contract": "contracts/tier/CombineTierFactory.sol:CombineTierFactory",
        "label": "contracts",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 16885,
        "contract": "contracts/tier/CombineTierFactory.sol:CombineTierFactory",
        "label": "implementation",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
