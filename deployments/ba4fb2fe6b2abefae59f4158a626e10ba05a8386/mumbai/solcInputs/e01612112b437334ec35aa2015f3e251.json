{
  "language": "Solidity",
  "sources": {
    "contracts/noticeboard/NoticeBoard.sol": {
      "content": "// SPDX-License-Identifier: CAL\npragma solidity ^0.8.10;\n\nstruct Notice {\n    /// Every notice is assumed to be about some contract. If it isn't then\n    /// emitting `0` bytes for the address will likely be cheaper in gas.\n    address subject;\n    /// Opaque bytes to be interpreted by the indexer/GUI.\n    bytes data;\n}\n\ncontract NoticeBoard {\n    /// Anyone can emit a `Notice`.\n    /// This is open ended content related to the subject.\n    /// Some examples:\n    /// - Raise descriptions/promises\n    /// - Reviews/comments from token holders\n    /// - Simple onchain voting/signalling\n    /// GUIs/tooling/indexers reading this data are expected to know how to\n    /// interpret it in context because the `NoticeBoard` contract does not.\n    event NewNotice(\n        /// The `msg.sender` that emitted the `Notice`.\n        address sender,\n        /// The notice data.\n        Notice notice\n    );\n\n    /// Anyone can create notices about some subject.\n    /// The notice is opaque bytes. The indexer/GUI is expected to understand\n    /// the context to decode/interpret it. The indexer/GUI is strongly\n    /// recommended to filter out untrusted content.\n    /// @param notices_ All the notices to emit.\n    function createNotices(Notice[] calldata notices_) external {\n        for (uint256 i_ = 0; i_ < notices_.length; i_++) {\n            emit NewNotice(msg.sender, notices_[i_]);\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 100000
    },
    "metadata": {
      "useLiteralContent": true
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}