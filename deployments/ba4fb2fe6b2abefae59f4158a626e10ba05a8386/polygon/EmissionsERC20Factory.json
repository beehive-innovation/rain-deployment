{
  "address": "0xeA4faDB2edcC7e362C7dbCdC1A83e44E1009661A",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Implementation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "child",
          "type": "address"
        }
      ],
      "name": "NewChild",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data_",
          "type": "bytes"
        }
      ],
      "name": "createChild",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "allowDelegatedClaims",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                },
                {
                  "internalType": "address",
                  "name": "distributor",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "initialSupply",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ERC20Config",
              "name": "erc20Config",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "bytes[]",
                  "name": "sources",
                  "type": "bytes[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "constants",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256",
                  "name": "stackLength",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "argumentsLength",
                  "type": "uint256"
                }
              ],
              "internalType": "struct StateConfig",
              "name": "vmStateConfig",
              "type": "tuple"
            }
          ],
          "internalType": "struct EmissionsERC20Config",
          "name": "config_",
          "type": "tuple"
        }
      ],
      "name": "createChildTyped",
      "outputs": [
        {
          "internalType": "contract EmissionsERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "maybeChild_",
          "type": "address"
        }
      ],
      "name": "isChild",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xcf216ef3100cc5bf43e48dbbb81c885daf35a83af1021d74939d0f8a7f88ff70",
  "receipt": {
    "to": null,
    "from": "0xbF334f8BD1420a1CbFE15407f73919424934B1B3",
    "contractAddress": "0xeA4faDB2edcC7e362C7dbCdC1A83e44E1009661A",
    "transactionIndex": 0,
    "gasUsed": "4223067",
    "logsBloom": "0x
    "blockHash": "0x0025da76bc45067b8239a93a021b6c888680e4afe3bd22ff9696c0986da30942",
    "transactionHash": "0xcf216ef3100cc5bf43e48dbbb81c885daf35a83af1021d74939d0f8a7f88ff70",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 25946315,
        "transactionHash": "0xcf216ef3100cc5bf43e48dbbb81c885daf35a83af1021d74939d0f8a7f88ff70",
        "address": "0xeA4faDB2edcC7e362C7dbCdC1A83e44E1009661A",
        "topics": [
          "0x7fac34ecf0b1b374cd9659e3d17db602659d53f1162b1f20142e6c02694aed70"
        ],
        "data": "0x000000000000000000000000bf334f8bd1420a1cbfe15407f73919424934b1b30000000000000000000000001d3b528165f12f88d75375741ba7ae707f09102c",
        "logIndex": 0,
        "blockHash": "0x0025da76bc45067b8239a93a021b6c888680e4afe3bd22ff9696c0986da30942"
      }
    ],
    "blockNumber": 25946315,
    "cumulativeGasUsed": "4223067",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9e85ba39dabcbad721cb8b95134928f1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Implementation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"child\",\"type\":\"address\"}],\"name\":\"NewChild\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"createChild\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"allowDelegatedClaims\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"distributor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC20Config\",\"name\":\"erc20Config\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes[]\",\"name\":\"sources\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"constants\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"stackLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"argumentsLength\",\"type\":\"uint256\"}],\"internalType\":\"struct StateConfig\",\"name\":\"vmStateConfig\",\"type\":\"tuple\"}],\"internalType\":\"struct EmissionsERC20Config\",\"name\":\"config_\",\"type\":\"tuple\"}],\"name\":\"createChildTyped\",\"outputs\":[{\"internalType\":\"contract EmissionsERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maybeChild_\",\"type\":\"address\"}],\"name\":\"isChild\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createChild(bytes)\":{\"params\":{\"data_\":\"Encoded data to pass down to child contract constructor.\"},\"returns\":{\"_0\":\"New child contract address.\"}},\"createChildTyped((bool,(string,string,address,uint256),(bytes[],uint256[],uint256,uint256)))\":{\"params\":{\"config_\":\"`EmissionsERC20` constructor configuration.\"},\"returns\":{\"_0\":\"New `EmissionsERC20` child contract address.\"}},\"isChild(address)\":{\"params\":{\"maybeChild_\":\"Address of child contract to look up.\"},\"returns\":{\"_0\":\"Returns `true` if address is a contract created by this contract factory, otherwise `false`.\"}}},\"title\":\"EmissionsERC20Factory\",\"version\":1},\"userdoc\":{\"events\":{\"Implementation(address,address)\":{\"notice\":\"Factories that clone a template contract MUST emit an event any time they set the implementation being cloned. Factories that deploy new contracts without cloning do NOT need to emit this.\"},\"NewChild(address,address)\":{\"notice\":\"Whenever a new child contract is deployed, a `NewChild` event containing the new child contract address MUST be emitted.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Build the reference implementation to clone for each child.\"},\"createChild(bytes)\":{\"notice\":\"Implements `IFactory`. Calls the `_createChild` hook that inheriting contracts must override. Registers child contract address such that `isChild` is `true`. Emits `NewChild` event.\"},\"createChildTyped((bool,(string,string,address,uint256),(bytes[],uint256[],uint256,uint256)))\":{\"notice\":\"Allows calling `createChild` with `EmissionsERC20Config` struct. Use original `Factory` `createChild` function signature if function parameters are already encoded.\"},\"isChild(address)\":{\"notice\":\"Implements `IFactory`. Checks if address is registered as a child contract of this factory.\"}},\"notice\":\"Factory for deploying and registering `EmissionsERC20` contracts.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/claim/EmissionsERC20Factory.sol\":\"EmissionsERC20Factory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x7160017c8d2373a33a6d7e45368d60d7d582ea1695a098de8356c94dab2ec3ce\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6777f3fccb5dab95a9088ef62c41bee0198fd92e50d7c94f0e3733788af4079e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x1cc0efb01cbf008b768fd7b334786a6e358809198bb7e67f1c530af4957c6a21\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"contracts/claim/EmissionsERC20.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity ^0.8.10;\\n\\nimport \\\"../tier/libraries/TierConstants.sol\\\";\\nimport {ERC20Config} from \\\"../erc20/ERC20Config.sol\\\";\\nimport \\\"./IClaim.sol\\\";\\nimport \\\"../tier/ReadOnlyTier.sol\\\";\\nimport {RainVM, State} from \\\"../vm/RainVM.sol\\\";\\nimport {VMState, StateConfig} from \\\"../vm/libraries/VMState.sol\\\";\\nimport {BlockOps} from \\\"../vm/ops/BlockOps.sol\\\";\\nimport {ThisOps} from \\\"../vm/ops/ThisOps.sol\\\";\\nimport {MathOps} from \\\"../vm/ops/MathOps.sol\\\";\\nimport {TierOps} from \\\"../vm/ops/TierOps.sol\\\";\\nimport {FixedPointMathOps} from \\\"../vm/ops/FixedPointMathOps.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\n\\n/// Constructor config.\\nstruct EmissionsERC20Config {\\n    /// True if accounts can call `claim` on behalf of another account.\\n    bool allowDelegatedClaims;\\n    /// Constructor config for the ERC20 token minted according to emissions\\n    /// schedule in `claim`.\\n    ERC20Config erc20Config;\\n    /// Constructor config for the `ImmutableSource` that defines the emissions\\n    /// schedule for claiming.\\n    StateConfig vmStateConfig;\\n}\\n\\n/// @title EmissionsERC20\\n/// @notice Mints itself according to some predefined schedule. The schedule is\\n/// expressed as a rainVM script and the `claim` function is world-callable.\\n/// Intended behaviour is to avoid sybils infinitely minting by putting the\\n/// claim functionality behind a `ITier` contract. The emissions contract\\n/// itself implements `ReadOnlyTier` and every time a claim is processed it\\n/// logs the block number of the claim against every tier claimed. So the block\\n/// numbers in the tier report for `EmissionsERC20` are the last time that tier\\n/// was claimed against this contract. The simplest way to make use of this\\n/// information is to take the max block for the underlying tier and the last\\n/// claim and then diff it against the current block number.\\n/// See `test/Claim/EmissionsERC20.sol.ts` for examples, including providing\\n/// staggered rewards where more tokens are minted for higher tier accounts.\\ncontract EmissionsERC20 is\\n    Initializable,\\n    RainVM,\\n    VMState,\\n    ERC20Upgradeable,\\n    IClaim,\\n    ReadOnlyTier\\n{\\n    /// Contract has initialized.\\n    event Initialize(\\n        address sender,\\n        bool allowDelegatedClaims,\\n        uint256 constructionBlockNumber\\n    );\\n\\n    /// @dev local opcode to put claimant account on the stack.\\n    uint256 private constant CLAIMANT_ACCOUNT = 0;\\n    /// @dev local opcode to put this contract's deploy block on the stack.\\n    uint256 private constant CONSTRUCTION_BLOCK_NUMBER = 1;\\n    /// @dev local opcodes length.\\n    uint256 internal constant LOCAL_OPS_LENGTH = 2;\\n\\n    /// @dev local offset for block ops.\\n    uint256 private immutable blockOpsStart;\\n    /// @dev local offest for this ops.\\n    uint256 private immutable thisOpsStart;\\n    /// @dev local offset for tier ops.\\n    uint256 private immutable tierOpsStart;\\n    /// @dev local offset for math ops.\\n    uint256 private immutable mathOpsStart;\\n    /// @dev local offset for fixed point math ops.\\n    uint private immutable fixedPointMathOpsStart;\\n    /// @dev local offset for local ops.\\n    uint256 private immutable localOpsStart;\\n\\n    /// @dev Block this contract was constructed.\\n    /// Can be used to calculate claim entitlements relative to the deployment\\n    /// of the emissions contract itself.\\n    /// This is internal to `EmissionsERC20` but is available via a local\\n    /// opcode, and so can be used in rainVM scripts.\\n    uint256 private constructionBlockNumber;\\n\\n    /// Address of the immutable rain script deployed as a `VMState`.\\n    address private vmStatePointer;\\n\\n    /// Whether the claimant must be the caller of `claim`. If `false` then\\n    /// accounts other than claimant can claim. This may or may not be\\n    /// desirable depending on the emissions schedule. For example, a linear\\n    /// schedule will produce the same end result for the claimant regardless\\n    /// of who calls `claim` or when but an exponential schedule is more\\n    /// profitable if the claimant waits longer between claims. In the\\n    /// non-linear case delegated claims would be inappropriate as third\\n    /// party accounts could grief claimants by claiming \\\"early\\\", thus forcing\\n    /// opportunity cost on claimants who would have preferred to wait.\\n    bool public allowDelegatedClaims;\\n\\n    /// Each claim is modelled as a report so that the claim report can be\\n    /// diffed against the upstream report from a tier based emission scheme.\\n    mapping(address => uint256) private reports;\\n\\n    /// Constructs the emissions schedule source, opcodes and ERC20 to mint.\\n    constructor() {\\n        /// These local opcode offsets are calculated as immutable but are\\n        /// really just compile time constants. They only depend on the\\n        /// imported libraries and contracts. These are calculated at\\n        /// construction to future-proof against underlying ops being\\n        /// added/removed and potentially breaking the offsets here.\\n        blockOpsStart = RainVM.OPS_LENGTH;\\n        thisOpsStart = blockOpsStart + BlockOps.OPS_LENGTH;\\n        tierOpsStart = thisOpsStart + ThisOps.OPS_LENGTH;\\n        mathOpsStart = tierOpsStart + TierOps.OPS_LENGTH;\\n        fixedPointMathOpsStart = mathOpsStart + MathOps.OPS_LENGTH;\\n        localOpsStart = fixedPointMathOpsStart + FixedPointMathOps.OPS_LENGTH;\\n    }\\n\\n    /// @param config_ source and token config. Also controls delegated claims.\\n    function initialize(EmissionsERC20Config memory config_)\\n        external\\n        initializer\\n    {\\n        __ERC20_init(config_.erc20Config.name, config_.erc20Config.symbol);\\n        _mint(\\n            config_.erc20Config.distributor,\\n            config_.erc20Config.initialSupply\\n        );\\n\\n        vmStatePointer = _snapshot(\\n            _newState(config_.vmStateConfig)\\n        );\\n\\n        /// Log some deploy state for use by claim/opcodes.\\n        allowDelegatedClaims = config_.allowDelegatedClaims;\\n        constructionBlockNumber = block.number;\\n\\n        emit Initialize(msg.sender, config_.allowDelegatedClaims, block.number);\\n    }\\n\\n    /// @inheritdoc RainVM\\n    function applyOp(\\n        bytes memory context_,\\n        State memory state_,\\n        uint256 opcode_,\\n        uint256 operand_\\n    ) internal view override {\\n        unchecked {\\n            if (opcode_ < thisOpsStart) {\\n                BlockOps.applyOp(\\n                    context_,\\n                    state_,\\n                    opcode_ - blockOpsStart,\\n                    operand_\\n                );\\n            } else if (opcode_ < tierOpsStart) {\\n                ThisOps.applyOp(\\n                    context_,\\n                    state_,\\n                    opcode_ - thisOpsStart,\\n                    operand_\\n                );\\n            } else if (opcode_ < mathOpsStart) {\\n                TierOps.applyOp(\\n                    context_,\\n                    state_,\\n                    opcode_ - tierOpsStart,\\n                    operand_\\n                );\\n            } else if (opcode_ < fixedPointMathOpsStart) {\\n                MathOps.applyOp(\\n                    context_,\\n                    state_,\\n                    opcode_ - mathOpsStart,\\n                    operand_\\n                );\\n            } else if (opcode_ < localOpsStart) {\\n                FixedPointMathOps.applyOp(\\n                    context_,\\n                    state_,\\n                    opcode_ - fixedPointMathOpsStart,\\n                    operand_\\n                );\\n            } else {\\n                opcode_ -= localOpsStart;\\n                require(opcode_ < LOCAL_OPS_LENGTH, \\\"MAX_OPCODE\\\");\\n                if (opcode_ == CLAIMANT_ACCOUNT) {\\n                    address account_ = abi.decode(context_, (address));\\n                    state_.stack[state_.stackIndex] = uint256(\\n                        uint160(account_)\\n                    );\\n                    state_.stackIndex++;\\n                } else if (opcode_ == CONSTRUCTION_BLOCK_NUMBER) {\\n                    state_.stack[state_.stackIndex] = constructionBlockNumber;\\n                    state_.stackIndex++;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc ITier\\n    function report(address account_)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return\\n            reports[account_] > 0\\n                ? reports[account_]\\n                : TierConstants.NEVER_REPORT;\\n    }\\n\\n    /// Calculates the claim without processing it.\\n    /// Read only method that may be useful downstream both onchain and\\n    /// offchain if a claimant wants to check the claim amount before deciding\\n    /// whether to process it.\\n    /// As this is read only there are no checks against delegated claims. It\\n    /// is possible to return a value from `calculateClaim` and to not be able\\n    /// to process the claim with `claim` if `msg.sender` is not the\\n    /// `claimant_`.\\n    /// @param claimant_ Address to calculate current claim for.\\n    function calculateClaim(address claimant_) public view returns (uint256) {\\n        State memory state_ = _restore(vmStatePointer);\\n        eval(abi.encode(claimant_), state_, 0);\\n        return state_.stack[state_.stackIndex - 1];\\n    }\\n\\n    /// Processes the claim for `claimant_`.\\n    /// - Enforces `allowDelegatedClaims` if it is `true` so that `msg.sender`\\n    /// must also be `claimant_`.\\n    /// - Takes the return from `calculateClaim` and mints for `claimant_`.\\n    /// - Records the current block as the claim-tier for this contract.\\n    /// - emits a `Claim` event as per `IClaim`.\\n    /// @param claimant_ address receiving minted tokens. MUST be `msg.sender`\\n    /// if `allowDelegatedClaims` is `false`.\\n    /// @param data_ NOT used onchain. Forwarded to `Claim` event for potential\\n    /// additional offchain processing.\\n    /// @inheritdoc IClaim\\n    function claim(address claimant_, bytes memory data_) external {\\n        // Disallow delegated claims if appropriate.\\n        if (!allowDelegatedClaims) {\\n            require(msg.sender == claimant_, \\\"DELEGATED_CLAIM\\\");\\n        }\\n\\n        // Mint the claim.\\n        uint256 amount_ = calculateClaim(claimant_);\\n        _mint(claimant_, amount_);\\n\\n        // Record the current block as the latest claim.\\n        // This can be diffed/combined with external reports in future claim\\n        // calculations.\\n        reports[claimant_] = TierReport.updateBlocksForTierRange(\\n            TierConstants.NEVER_REPORT,\\n            TierConstants.TIER_ZERO,\\n            TierConstants.TIER_EIGHT,\\n            block.number\\n        );\\n        emit TierChange(\\n            msg.sender,\\n            claimant_,\\n            TierConstants.TIER_ZERO,\\n            TierConstants.TIER_EIGHT\\n        );\\n        emit Claim(msg.sender, claimant_, data_);\\n    }\\n}\\n\",\"keccak256\":\"0x0ca59c8cb61bb1657e0ee99df080eba99b31da7be8067a3dcb2728bb426544b7\",\"license\":\"CAL\"},\"contracts/claim/EmissionsERC20Factory.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity ^0.8.10;\\n\\nimport {Factory} from \\\"../factory/Factory.sol\\\";\\nimport {EmissionsERC20, EmissionsERC20Config} from \\\"./EmissionsERC20.sol\\\";\\nimport {ITier} from \\\"../tier/ITier.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\n\\n/// @title EmissionsERC20Factory\\n/// @notice Factory for deploying and registering `EmissionsERC20` contracts.\\ncontract EmissionsERC20Factory is Factory {\\n    /// Template contract to clone.\\n    /// Deployed by the constructor.\\n    address private immutable implementation;\\n\\n    /// Build the reference implementation to clone for each child.\\n    constructor() {\\n        address implementation_ = address(new EmissionsERC20());\\n        emit Implementation(msg.sender, implementation_);\\n        implementation = implementation_;\\n    }\\n\\n    /// @inheritdoc Factory\\n    function _createChild(bytes calldata data_)\\n        internal\\n        virtual\\n        override\\n        returns (address)\\n    {\\n        EmissionsERC20Config memory config_ = abi.decode(\\n            data_,\\n            (EmissionsERC20Config)\\n        );\\n        address clone_ = Clones.clone(implementation);\\n        EmissionsERC20(clone_).initialize(config_);\\n        return clone_;\\n    }\\n\\n    /// Allows calling `createChild` with `EmissionsERC20Config` struct.\\n    /// Use original `Factory` `createChild` function signature if function\\n    /// parameters are already encoded.\\n    ///\\n    /// @param config_ `EmissionsERC20` constructor configuration.\\n    /// @return New `EmissionsERC20` child contract address.\\n    function createChildTyped(EmissionsERC20Config calldata config_)\\n        external\\n        returns (EmissionsERC20)\\n    {\\n        return EmissionsERC20(this.createChild(abi.encode(config_)));\\n    }\\n}\\n\",\"keccak256\":\"0xf6bf38c329f61fd1c3a092c85248dec95f48e97212c90f21ee46955eadcb5e4e\",\"license\":\"CAL\"},\"contracts/claim/IClaim.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity ^0.8.10;\\n\\n/// @title IClaim\\n/// @notice Embodies the idea of processing a claim for some kind of reward.\\ninterface IClaim {\\n\\n    /// `Claim` is emitted whenever `claim` is called to signify that the claim\\n    /// has been processed. Makes no assumptions about what is being claimed,\\n    /// not even requiring an \\\"amount\\\" or similar. Instead there is a generic\\n    /// `data` field where contextual information can be logged for offchain\\n    /// processing.\\n    /// @param sender `msg.sender` authorizing the claim.\\n    /// @param claimant The claimant receiving the `Claim`.\\n    /// @param data Associated data for the claim call.\\n    event Claim(\\n        address sender,\\n        address claimant,\\n        bytes data\\n    );\\n\\n    /// Process a claim for `claimant`.\\n    /// It is up to the implementing contract to define what a \\\"claim\\\" is, but\\n    /// broadly it is expected to be some kind of reward.\\n    /// Implementing contracts MAY allow addresses other than `claimant` to\\n    /// process a claim but be careful if doing so to avoid griefing!\\n    /// Implementing contracts MAY allow `claim` to be called arbitrarily many\\n    /// times, or restrict themselves to a single or several calls only.\\n    /// @param claimant The address that will receive the result of this claim.\\n    function claim(address claimant, bytes memory data) external;\\n\\n}\",\"keccak256\":\"0x226703c20efed1376be61ad7d52affde373d5db562ec3294ba7227bf334bf0d5\",\"license\":\"CAL\"},\"contracts/erc20/ERC20Config.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity ^0.8.10;\\n\\n/// Constructor config for standard Open Zeppelin ERC20.\\nstruct ERC20Config {\\n    /// Name as defined by Open Zeppelin ERC20.\\n    string name;\\n    /// Symbol as defined by Open Zeppelin ERC20.\\n    string symbol;\\n    /// Distributor address of the initial supply.\\n    /// MAY be zero.\\n    address distributor;\\n    /// Initial supply to mint.\\n    /// MAY be zero.\\n    uint256 initialSupply;\\n}\\n\",\"keccak256\":\"0xd707c1a826978e23f9363e71b925a59bd625bf344d12d48b0675fbe381d07e27\",\"license\":\"CAL\"},\"contracts/factory/Factory.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity ^0.8.10;\\n\\nimport {IFactory} from \\\"./IFactory.sol\\\";\\n// solhint-disable-next-line max-line-length\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n/// @title Factory\\n/// @notice Base contract for deploying and registering child contracts.\\nabstract contract Factory is IFactory, ReentrancyGuard {\\n    /// @dev state to track each deployed contract address. A `Factory` will\\n    /// never lie about deploying a child, unless `isChild` is overridden to do\\n    /// so.\\n    mapping(address => bool) private contracts;\\n\\n    /// Implements `IFactory`.\\n    ///\\n    /// `_createChild` hook must be overridden to actually create child\\n    /// contract.\\n    ///\\n    /// Implementers may want to overload this function with a typed equivalent\\n    /// to expose domain specific structs etc. to the compiled ABI consumed by\\n    /// tooling and other scripts. To minimise gas costs for deployment it is\\n    /// expected that the tooling will consume the typed ABI, then encode the\\n    /// arguments and pass them to this function directly.\\n    ///\\n    /// @param data_ ABI encoded data to pass to child contract constructor.\\n    function _createChild(bytes calldata data_)\\n        internal\\n        virtual\\n        returns (address)\\n    {} // solhint-disable-line no-empty-blocks\\n\\n    /// Implements `IFactory`.\\n    ///\\n    /// Calls the `_createChild` hook that inheriting contracts must override.\\n    /// Registers child contract address such that `isChild` is `true`.\\n    /// Emits `NewChild` event.\\n    ///\\n    /// @param data_ Encoded data to pass down to child contract constructor.\\n    /// @return New child contract address.\\n    function createChild(bytes calldata data_)\\n        external\\n        virtual\\n        override\\n        nonReentrant\\n        returns (address)\\n    {\\n        // Create child contract using hook.\\n        address child_ = _createChild(data_);\\n        // Register child contract address to `contracts` mapping.\\n        contracts[child_] = true;\\n        // Emit `NewChild` event with child contract address.\\n        emit IFactory.NewChild(msg.sender, child_);\\n        return child_;\\n    }\\n\\n    /// Implements `IFactory`.\\n    ///\\n    /// Checks if address is registered as a child contract of this factory.\\n    ///\\n    /// @param maybeChild_ Address of child contract to look up.\\n    /// @return Returns `true` if address is a contract created by this\\n    /// contract factory, otherwise `false`.\\n    function isChild(address maybeChild_)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return contracts[maybeChild_];\\n    }\\n}\\n\",\"keccak256\":\"0xe97bf06e74908b9a590a89dbe1d3189ec7393dfc63c18ff4e141373c71f99d44\",\"license\":\"CAL\"},\"contracts/factory/IFactory.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity ^0.8.10;\\n\\ninterface IFactory {\\n    /// Whenever a new child contract is deployed, a `NewChild` event\\n    /// containing the new child contract address MUST be emitted.\\n    event NewChild(address sender, address child);\\n\\n    /// Factories that clone a template contract MUST emit an event any time\\n    /// they set the implementation being cloned. Factories that deploy new\\n    /// contracts without cloning do NOT need to emit this.\\n    event Implementation(address sender, address implementation);\\n\\n    /// Creates a new child contract.\\n    ///\\n    /// @param data_ Domain specific data for the child contract constructor.\\n    /// @return New child contract address.\\n    function createChild(bytes calldata data_) external returns (address);\\n\\n    /// Checks if address is registered as a child contract of this factory.\\n    ///\\n    /// Addresses that were not deployed by `createChild` MUST NOT return\\n    /// `true` from `isChild`. This is CRITICAL to the security guarantees for\\n    /// any contract implementing `IFactory`.\\n    ///\\n    /// @param maybeChild_ Address to check registration for.\\n    /// @return `true` if address was deployed by this contract factory,\\n    /// otherwise `false`.\\n    function isChild(address maybeChild_) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x560fd102f258d95fa5ac662f3056bfaae0934d754aa3e2c5710d4bc7ca7d5be6\",\"license\":\"CAL\"},\"contracts/math/FixedPointMath.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity ^0.8.10;\\n\\n/// @title FixedPointMath\\n/// @notice Sometimes we want to do math with decimal values but all we have\\n/// are integers, typically uint256 integers. Floats are very complex so we\\n/// don't attempt to simulate them. Instead we provide a standard definition of\\n/// \\\"one\\\" as 10 ** 18 and scale everything up/down to this as fixed point math.\\n/// Overflows are errors as per Solidity.\\nlibrary FixedPointMath {\\n    uint256 public constant DECIMALS = 18;\\n    uint256 public constant ONE = 10**DECIMALS;\\n\\n    /// Scale a fixed point decimal of some scale factor to match `DECIMALS`.\\n    /// @param a_ Some fixed point decimal value.\\n    /// @param aDecimals_ The number of fixed decimals of `a_`.\\n    /// @return `a_` scaled to match `DECIMALS`.\\n    function scale18(uint256 a_, uint256 aDecimals_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (DECIMALS == aDecimals_) {\\n            return a_;\\n        } else if (DECIMALS > aDecimals_) {\\n            return a_ * 10**(DECIMALS - aDecimals_);\\n        } else {\\n            return a_ / 10**(aDecimals_ - DECIMALS);\\n        }\\n    }\\n\\n    /// Scale a fixed point decimals of `DECIMALS` to some other scale.\\n    /// @param a_ A `DECIMALS` fixed point decimals.\\n    /// @param targetDecimals_ The new scale of `a_`.\\n    /// @return `a_` rescaled from `DECIMALS` to `targetDecimals_`.\\n    function scaleN(uint256 a_, uint256 targetDecimals_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (targetDecimals_ == DECIMALS) {\\n            return a_;\\n        } else if (DECIMALS > targetDecimals_) {\\n            return a_ / 10**(DECIMALS - targetDecimals_);\\n        } else {\\n            return a_ * 10**(targetDecimals_ - DECIMALS);\\n        }\\n    }\\n\\n    /// Scale a fixed point up or down by `scaleBy_` orders of magnitude.\\n    /// The caller MUST ensure the end result matches `DECIMALS` if other\\n    /// functions in this library are to work correctly.\\n    /// Notably `scaleBy` is a SIGNED integer so scaling down by negative OOMS\\n    /// is supported.\\n    /// @param a_ Some integer of any scale.\\n    /// @param scaleBy_ OOMs to scale `a_` up or down by.\\n    /// @return `a_` rescaled according to `scaleBy_`.\\n    function scaleBy(uint256 a_, int8 scaleBy_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (scaleBy_ == 0) {\\n            return a_;\\n        } else if (scaleBy_ > 0) {\\n            return a_ * 10**uint8(scaleBy_);\\n        } else {\\n            return a_ / 10**(~uint8(scaleBy_) + 1);\\n        }\\n    }\\n\\n    /// Fixed point multiplication in native scale decimals.\\n    /// Both `a_` and `b_` MUST be `DECIMALS` fixed point decimals.\\n    /// @param a_ First term.\\n    /// @param b_ Second term.\\n    /// @return `a_` multiplied by `b_` to `DECIMALS` fixed point decimals.\\n    function fixedPointMul(uint256 a_, uint256 b_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (a_ * b_) / ONE;\\n    }\\n\\n    /// Fixed point division in native scale decimals.\\n    /// Both `a_` and `b_` MUST be `DECIMALS` fixed point decimals.\\n    /// @param a_ First term.\\n    /// @param b_ Second term.\\n    /// @return `a_` divided by `b_` to `DECIMALS` fixed point decimals.\\n    function fixedPointDiv(uint256 a_, uint256 b_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (a_ * ONE) / b_;\\n    }\\n}\\n\",\"keccak256\":\"0xebb1b57dc3cea28aa90a5d4b1e44cea426cd3556961ec0bcec05dfc22f3f1621\",\"license\":\"CAL\"},\"contracts/math/SaturatingMath.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity ^0.8.10;\\n\\n/// @title SaturatingMath\\n/// @notice Sometimes we neither want math operations to error nor wrap around\\n/// on an overflow or underflow. In the case of transferring assets an error\\n/// may cause assets to be locked in an irretrievable state within the erroring\\n/// contract, e.g. due to a tiny rounding/calculation error. We also can't have\\n/// assets underflowing and attempting to approve/transfer \\\"infinity\\\" when we\\n/// wanted \\\"almost or exactly zero\\\" but some calculation bug underflowed zero.\\n/// Ideally there are no calculation mistakes, but in guarding against bugs it\\n/// may be safer pragmatically to saturate arithmatic at the numeric bounds.\\n/// Note that saturating div is not supported because 0/0 is undefined.\\nlibrary SaturatingMath {\\n    /// Saturating addition.\\n    /// @param a_ First term.\\n    /// @param b_ Second term.\\n    /// @return Minimum of a_ + b_ and max uint256.\\n    function saturatingAdd(uint256 a_, uint256 b_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        unchecked {\\n            uint256 c_ = a_ + b_;\\n            return c_ < a_ ? type(uint256).max : c_;\\n        }\\n    }\\n\\n    /// Saturating subtraction.\\n    /// @param a_ Minuend.\\n    /// @param b_ Subtrahend.\\n    /// @return a_ - b_ if a_ greater than b_, else 0.\\n    function saturatingSub(uint256 a_, uint256 b_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        unchecked {\\n            return a_ > b_ ? a_ - b_ : 0;\\n        }\\n    }\\n\\n    /// Saturating multiplication.\\n    /// @param a_ First term.\\n    /// @param b_ Second term.\\n    /// @return Minimum of a_ * b_ and max uint256.\\n    function saturatingMul(uint256 a_, uint256 b_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being\\n            // zero, but the benefit is lost if 'b' is also tested.\\n            // https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a_ == 0) return 0;\\n            uint256 c_ = a_ * b_;\\n            return c_ / a_ != b_ ? type(uint256).max : c_;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x00eb1e963ad55db930313eb452c512a533eeb34adf8324b1e2c15ee130893115\",\"license\":\"CAL\"},\"contracts/sstore2/SSTORE2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"./utils/Bytecode.sol\\\";\\n\\n/**\\n  @title A key-value storage with auto-generated keys for storing chunks of\\n  data with a lower write & read cost.\\n  @author Agustin Aguilar <aa@horizon.io>\\n\\n  Readme: https://github.com/0xsequence/sstore2#readme\\n*/\\nlibrary SSTORE2 {\\n    error WriteError();\\n\\n    /**\\n    @notice Stores `_data` and returns `pointer` as key for later retrieval\\n    @dev The pointer is a contract address with `_data` as code\\n    @param _data to be written\\n    @return pointer Pointer to the written `_data`\\n  */\\n    function write(bytes memory _data) internal returns (address pointer) {\\n        // Append 00 to _data so contract can't be called\\n        // Build init code\\n        bytes memory code = Bytecode.creationCodeFor(\\n            abi.encodePacked(hex\\\"00\\\", _data)\\n        );\\n\\n        // Deploy contract using create\\n        assembly {\\n            pointer := create(0, add(code, 32), mload(code))\\n        }\\n\\n        // Address MUST be non-zero\\n        if (pointer == address(0)) revert WriteError();\\n    }\\n\\n    /**\\n    @notice Reads the contents of the `_pointer` code as data, skips the first\\n    byte\\n    @dev The function is intended for reading pointers generated by `write`\\n    @param _pointer to be read\\n    @return data read from `_pointer` contract\\n  */\\n    function read(address _pointer) internal view returns (bytes memory) {\\n        return Bytecode.codeAt(_pointer, 1, type(uint256).max);\\n    }\\n\\n    /**\\n    @notice Reads the contents of the `_pointer` code as data, skips the first\\n    byte\\n    @dev The function is intended for reading pointers generated by `write`\\n    @param _pointer to be read\\n    @param _start number of bytes to skip\\n    @return data read from `_pointer` contract\\n  */\\n    function read(address _pointer, uint256 _start)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        return Bytecode.codeAt(_pointer, _start + 1, type(uint256).max);\\n    }\\n\\n    /**\\n    @notice Reads the contents of the `_pointer` code as data, skips the first\\n    byte\\n    @dev The function is intended for reading pointers generated by `write`\\n    @param _pointer to be read\\n    @param _start number of bytes to skip\\n    @param _end index before which to end extraction\\n    @return data read from `_pointer` contract\\n  */\\n    function read(\\n        address _pointer,\\n        uint256 _start,\\n        uint256 _end\\n    ) internal view returns (bytes memory) {\\n        return Bytecode.codeAt(_pointer, _start + 1, _end + 1);\\n    }\\n}\\n\",\"keccak256\":\"0xbd511e001f77820afc35346b1b852e282f16e675ac1fb61ef7b951d5da0caea0\",\"license\":\"MIT\"},\"contracts/sstore2/utils/Bytecode.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nlibrary Bytecode {\\n    error InvalidCodeAtRange(uint256 _size, uint256 _start, uint256 _end);\\n\\n    /**\\n    @notice Generate a creation code that results on a contract with `_code` as\\n    bytecode\\n    @param _code The returning value of the resulting `creationCode`\\n    @return creationCode (constructor) for new contract\\n  */\\n    function creationCodeFor(bytes memory _code)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        /*\\n      0x00    0x63         0x63XXXXXX  PUSH4 _code.length  size\\n      0x01    0x80         0x80        DUP1                size size\\n      0x02    0x60         0x600e      PUSH1 14            14 size size\\n      0x03    0x60         0x6000      PUSH1 00            0 14 size size\\n      0x04    0x39         0x39        CODECOPY            size\\n      0x05    0x60         0x6000      PUSH1 00            0 size\\n      0x06    0xf3         0xf3        RETURN\\n      <CODE>\\n    */\\n\\n        return\\n            abi.encodePacked(\\n                hex\\\"63\\\",\\n                uint32(_code.length),\\n                hex\\\"80_60_0E_60_00_39_60_00_F3\\\",\\n                _code\\n            );\\n    }\\n\\n    /**\\n    @notice Returns the size of the code on a given address\\n    @param _addr Address that may or may not contain code\\n    @return size of the code on the given `_addr`\\n  */\\n    function codeSize(address _addr) internal view returns (uint256 size) {\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n    }\\n\\n    /**\\n    @notice Returns the code of a given address\\n    @dev It will fail if `_end < _start`\\n    @param _addr Address that may or may not contain code\\n    @param _start number of bytes of code to skip on read\\n    @param _end index before which to end extraction\\n    @return oCode read from `_addr` deployed bytecode\\n\\n    Forked: https://gist.github.com/KardanovIR/fe98661df9338c842b4a30306d507fbd\\n  */\\n    function codeAt(\\n        address _addr,\\n        uint256 _start,\\n        uint256 _end\\n    ) internal view returns (bytes memory oCode) {\\n        uint256 csize = codeSize(_addr);\\n        if (csize == 0) return bytes(\\\"\\\");\\n\\n        if (_start > csize) return bytes(\\\"\\\");\\n        if (_end < _start) revert InvalidCodeAtRange(csize, _start, _end);\\n\\n        unchecked {\\n            uint256 reqSize = _end - _start;\\n            uint256 maxSize = csize - _start;\\n\\n            uint256 size = maxSize < reqSize ? maxSize : reqSize;\\n\\n            assembly {\\n                // allocate output byte array - this could also be done without\\n                // assembly\\n                // by using o_code = new bytes(size)\\n                oCode := mload(0x40)\\n                // new \\\"memory end\\\" including padding\\n                mstore(\\n                    0x40,\\n                    add(oCode, and(add(add(size, 0x20), 0x1f), not(0x1f)))\\n                )\\n                // store length in memory\\n                mstore(oCode, size)\\n                // actually retrieve the code, this needs assembly\\n                extcodecopy(_addr, add(oCode, 0x20), _start, size)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x576d7761f235614a1f783d9aaa200f8885023889f6aeed65539ff5b0fc2302c2\",\"license\":\"MIT\"},\"contracts/tier/ITier.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity ^0.8.10;\\n\\n/// @title ITier\\n/// @notice `ITier` is a simple interface that contracts can\\n/// implement to provide membership lists for other contracts.\\n///\\n/// There are many use-cases for a time-preserving conditional membership list.\\n///\\n/// Some examples include:\\n///\\n/// - Self-serve whitelist to participate in fundraising\\n/// - Lists of users who can claim airdrops and perks\\n/// - Pooling resources with implied governance/reward tiers\\n/// - POAP style attendance proofs allowing access to future exclusive events\\n///\\n/// @dev Standard interface to a tiered membership.\\n///\\n/// A \\\"membership\\\" can represent many things:\\n/// - Exclusive access.\\n/// - Participation in some event or process.\\n/// - KYC completion.\\n/// - Combination of sub-memberships.\\n/// - Etc.\\n///\\n/// The high level requirements for a contract implementing `ITier`:\\n/// - MUST represent held tiers as a `uint`.\\n/// - MUST implement `report`.\\n///   - The report is a `uint256` that SHOULD represent the block each tier has\\n///     been continuously held since encoded as `uint32`.\\n///   - The encoded tiers start at `1`; Tier `0` is implied if no tier has ever\\n///     been held.\\n///   - Tier `0` is NOT encoded in the report, it is simply the fallback value.\\n///   - If a tier is lost the block data is erased for that tier and will be\\n///     set if/when the tier is regained to the new block.\\n///   - If the historical block information is not available the report MAY\\n///     return `0x00000000` for all held tiers.\\n///   - Tiers that are lost or have never been held MUST return `0xFFFFFFFF`.\\n/// - SHOULD implement `setTier`.\\n///   - Contracts SHOULD revert with `SET_TIER` error if they cannot\\n///     meaningfully set a tier directly.\\n///     For example a contract that can only derive a membership tier by\\n///     reading the state of an external contract cannot set tiers.\\n///   - Contracts implementing `setTier` SHOULD error with `SET_ZERO_TIER`\\n///     if tier 0 is being set.\\n/// - MUST emit `TierChange` when `setTier` successfully writes a new tier.\\n///   - Contracts that cannot meaningfully set a tier are exempt.\\ninterface ITier {\\n    /// Every time a tier changes we log start and end tier against the\\n    /// account.\\n    /// This MAY NOT be emitted if reports are being read from the state of an\\n    /// external contract.\\n    /// The start tier MAY be lower than the current tier as at the block this\\n    /// event is emitted in.\\n    /// @param sender The `msg.sender` that authorized the tier change.\\n    /// @param account The account changing tier.\\n    /// @param startTier The previous tier the account held.\\n    /// @param endTier The newly acquired tier the account now holds.\\n    event TierChange(\\n        address sender,\\n        address account,\\n        uint256 startTier,\\n        uint256 endTier\\n    );\\n\\n    /// @notice Users can set their own tier by calling `setTier`.\\n    ///\\n    /// The contract that implements `ITier` is responsible for checking\\n    /// eligibility and/or taking actions required to set the tier.\\n    ///\\n    /// For example, the contract must take/refund any tokens relevant to\\n    /// changing the tier.\\n    ///\\n    /// Obviously the user is responsible for any approvals for this action\\n    /// prior to calling `setTier`.\\n    ///\\n    /// When the tier is changed a `TierChange` event will be emmited as:\\n    /// ```\\n    /// event TierChange(address account, uint startTier, uint endTier);\\n    /// ```\\n    ///\\n    /// The `setTier` function includes arbitrary data as the third\\n    /// parameter. This can be used to disambiguate in the case that\\n    /// there may be many possible options for a user to achieve some tier.\\n    ///\\n    /// For example, consider the case where tier 3 can be achieved\\n    /// by EITHER locking 1x rare NFT or 3x uncommon NFTs. A user with both\\n    /// could use `data` to explicitly state their intent.\\n    ///\\n    /// NOTE however that _any_ address can call `setTier` for any other\\n    /// address.\\n    ///\\n    /// If you implement `data` or anything that changes state then be very\\n    /// careful to avoid griefing attacks.\\n    ///\\n    /// The `data` parameter can also be ignored by the contract implementing\\n    /// `ITier`. For example, ERC20 tokens are fungible so only the balance\\n    /// approved by the user is relevant to a tier change.\\n    ///\\n    /// The `setTier` function SHOULD prevent users from reassigning\\n    /// tier 0 to themselves.\\n    ///\\n    /// The tier 0 status represents never having any status.\\n    /// @dev Updates the tier of an account.\\n    ///\\n    /// The implementing contract is responsible for all checks and state\\n    /// changes required to set the tier. For example, taking/refunding\\n    /// funds/NFTs etc.\\n    ///\\n    /// Contracts may disallow directly setting tiers, preferring to derive\\n    /// reports from other onchain data.\\n    /// In this case they should `revert(\\\"SET_TIER\\\");`.\\n    ///\\n    /// @param account Account to change the tier for.\\n    /// @param endTier Tier after the change.\\n    /// @param data Arbitrary input to disambiguate ownership\\n    /// (e.g. NFTs to lock).\\n    function setTier(\\n        address account,\\n        uint256 endTier,\\n        bytes memory data\\n    ) external;\\n\\n    /// @notice A tier report is a `uint256` that contains each of the block\\n    /// numbers each tier has been held continously since as a `uint32`.\\n    /// There are 9 possible tier, starting with tier 0 for `0` offset or\\n    /// \\\"never held any tier\\\" then working up through 8x 4 byte offsets to the\\n    /// full 256 bits.\\n    ///\\n    /// Low bits = Lower tier.\\n    ///\\n    /// In hexadecimal every 8 characters = one tier, starting at tier 8\\n    /// from high bits and working down to tier 1.\\n    ///\\n    /// `uint32` should be plenty for any blockchain that measures block times\\n    /// in seconds, but reconsider if deploying to an environment with\\n    /// significantly sub-second block times.\\n    ///\\n    /// ~135 years of 1 second blocks fit into `uint32`.\\n    ///\\n    /// `2^8 / (365 * 24 * 60 * 60)`\\n    ///\\n    /// When a user INCREASES their tier they keep all the block numbers they\\n    /// already had, and get new block times for each increased tiers they have\\n    /// earned.\\n    ///\\n    /// When a user DECREASES their tier they return to `0xFFFFFFFF` (never)\\n    /// for every tier level they remove, but keep their block numbers for the\\n    /// remaining tiers.\\n    ///\\n    /// GUIs are encouraged to make this dynamic very clear for users as\\n    /// round-tripping to a lower status and back is a DESTRUCTIVE operation\\n    /// for block times.\\n    ///\\n    /// The intent is that downstream code can provide additional benefits for\\n    /// members who have maintained a certain tier for/since a long time.\\n    /// These benefits can be provided by inspecting the report, and by\\n    /// on-chain contracts directly,\\n    /// rather than needing to work with snapshots etc.\\n    /// @dev Returns the earliest block the account has held each tier for\\n    /// continuously.\\n    /// This is encoded as a uint256 with blocks represented as 8x\\n    /// concatenated uint32.\\n    /// I.e. Each 4 bytes of the uint256 represents a u32 tier start time.\\n    /// The low bits represent low tiers and high bits the high tiers.\\n    /// Implementing contracts should return 0xFFFFFFFF for lost and\\n    /// never-held tiers.\\n    ///\\n    /// @param account Account to get the report for.\\n    /// @return The report blocks encoded as a uint256.\\n    function report(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x112be3654010b0f3fcb213e09f9008075f68210f583bdaf8efa440852aa5158f\",\"license\":\"CAL\"},\"contracts/tier/ReadOnlyTier.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity ^0.8.10;\\n\\nimport {ITier} from \\\"./ITier.sol\\\";\\nimport {TierReport} from \\\"./libraries/TierReport.sol\\\";\\n\\n/// @title ReadOnlyTier\\n/// @notice `ReadOnlyTier` is a base contract that other contracts\\n/// are expected to inherit.\\n///\\n/// It does not allow `setStatus` and expects `report` to derive from\\n/// some existing onchain data.\\n///\\n/// @dev A contract inheriting `ReadOnlyTier` cannot call `setTier`.\\n///\\n/// `ReadOnlyTier` is abstract because it does not implement `report`.\\n/// The expectation is that `report` will derive tiers from some\\n/// external data source.\\nabstract contract ReadOnlyTier is ITier {\\n    /// Always reverts because it is not possible to set a read only tier.\\n    /// @inheritdoc ITier\\n    function setTier(\\n        address,\\n        uint256,\\n        bytes memory\\n    ) external pure override {\\n        revert(\\\"SET_TIER\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x3e9c71da9f3ad0bf8106d38bab8f292a599a5ca0905218f3b4ee7dbabcbe9b73\",\"license\":\"CAL\"},\"contracts/tier/libraries/TierConstants.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity ^0.8.10;\\n\\n/// @title TierConstants\\n/// @notice Constants for use with tier logic.\\nlibrary TierConstants {\\n    /// NEVER is 0xFF.. as it is infinitely in the future.\\n    /// NEVER for an entire report.\\n    uint256 internal constant NEVER_REPORT = type(uint256).max;\\n    /// NEVER for a single tier.\\n    uint32 internal constant NEVER_TIER = type(uint32).max;\\n\\n    /// Always is 0 as it is the genesis block.\\n    /// Tiers can't predate the chain but they can predate an `ITier` contract.\\n    uint256 internal constant ALWAYS = 0;\\n\\n    /// Account has never held a tier.\\n    uint256 internal constant TIER_ZERO = 0;\\n\\n    /// Magic number for tier one.\\n    uint256 internal constant TIER_ONE = 1;\\n    /// Magic number for tier two.\\n    uint256 internal constant TIER_TWO = 2;\\n    /// Magic number for tier three.\\n    uint256 internal constant TIER_THREE = 3;\\n    /// Magic number for tier four.\\n    uint256 internal constant TIER_FOUR = 4;\\n    /// Magic number for tier five.\\n    uint256 internal constant TIER_FIVE = 5;\\n    /// Magic number for tier six.\\n    uint256 internal constant TIER_SIX = 6;\\n    /// Magic number for tier seven.\\n    uint256 internal constant TIER_SEVEN = 7;\\n    /// Magic number for tier eight.\\n    uint256 internal constant TIER_EIGHT = 8;\\n    /// Maximum tier is `TIER_EIGHT`.\\n    uint256 internal constant MAX_TIER = TIER_EIGHT;\\n}\\n\",\"keccak256\":\"0xb7919997b5260b223afcca2f29d427a8cd8d1220205eba53fe0a8a0997883133\",\"license\":\"CAL\"},\"contracts/tier/libraries/TierReport.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity ^0.8.10;\\n\\nimport {ITier} from \\\"../ITier.sol\\\";\\nimport \\\"./TierConstants.sol\\\";\\n\\n/// @title TierReport\\n/// @notice `TierReport` implements several pure functions that can be\\n/// used to interface with reports.\\n/// - `tierAtBlockFromReport`: Returns the highest status achieved relative to\\n/// a block number and report. Statuses gained after that block are ignored.\\n/// - `tierBlock`: Returns the block that a given tier has been held\\n/// since according to a report.\\n/// - `truncateTiersAbove`: Resets all the tiers above the reference tier.\\n/// - `updateBlocksForTierRange`: Updates a report with a block\\n/// number for every tier in a range.\\n/// - `updateReportWithTierAtBlock`: Updates a report to a new tier.\\n/// @dev Utilities to consistently read, write and manipulate tiers in reports.\\n/// The low-level bit shifting can be difficult to get right so this\\n/// factors that out.\\nlibrary TierReport {\\n    /// Enforce upper limit on tiers so we can do unchecked math.\\n    modifier maxTier(uint256 tier_) {\\n        require(tier_ <= TierConstants.MAX_TIER, \\\"MAX_TIER\\\");\\n        _;\\n    }\\n\\n    /// Returns the highest tier achieved relative to a block number\\n    /// and report.\\n    ///\\n    /// Note that typically the report will be from the _current_ contract\\n    /// state, i.e. `block.number` but not always. Tiers gained after the\\n    /// reference block are ignored.\\n    ///\\n    /// When the `report` comes from a later block than the `blockNumber` this\\n    /// means the user must have held the tier continuously from `blockNumber`\\n    /// _through_ to the report block.\\n    /// I.e. NOT a snapshot.\\n    ///\\n    /// @param report_ A report as per `ITier`.\\n    /// @param blockNumber_ The block number to check the tiers against.\\n    /// @return The highest tier held since `blockNumber` as per `report`.\\n    function tierAtBlockFromReport(uint256 report_, uint256 blockNumber_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        unchecked {\\n            for (uint256 i_ = 0; i_ < 8; i_++) {\\n                if (uint32(uint256(report_ >> (i_ * 32))) > blockNumber_) {\\n                    return i_;\\n                }\\n            }\\n            return TierConstants.MAX_TIER;\\n        }\\n    }\\n\\n    /// Returns the block that a given tier has been held since from a report.\\n    ///\\n    /// The report MUST encode \\\"never\\\" as 0xFFFFFFFF. This ensures\\n    /// compatibility with `tierAtBlockFromReport`.\\n    ///\\n    /// @param report_ The report to read a block number from.\\n    /// @param tier_ The Tier to read the block number for.\\n    /// @return The block number this has been held since.\\n    function tierBlock(uint256 report_, uint256 tier_)\\n        internal\\n        pure\\n        maxTier(tier_)\\n        returns (uint256)\\n    {\\n        unchecked {\\n            // ZERO is a special case. Everyone has always been at least ZERO,\\n            // since block 0.\\n            if (tier_ == 0) {\\n                return 0;\\n            }\\n\\n            uint256 offset_ = (tier_ - 1) * 32;\\n            return uint256(uint32(uint256(report_ >> offset_)));\\n        }\\n    }\\n\\n    /// Resets all the tiers above the reference tier to 0xFFFFFFFF.\\n    ///\\n    /// @param report_ Report to truncate with high bit 1s.\\n    /// @param tier_ Tier to truncate above (exclusive).\\n    /// @return Truncated report.\\n    function truncateTiersAbove(uint256 report_, uint256 tier_)\\n        internal\\n        pure\\n        maxTier(tier_)\\n        returns (uint256)\\n    {\\n        unchecked {\\n            uint256 offset_ = tier_ * 32;\\n            uint256 mask_ = (TierConstants.NEVER_REPORT >> offset_) << offset_;\\n            return report_ | mask_;\\n        }\\n    }\\n\\n    /// Updates a report with a block number for a given tier.\\n    /// More gas efficient than `updateBlocksForTierRange` if only a single\\n    /// tier is being modified.\\n    /// The tier at/above the given tier is updated. E.g. tier `0` will update\\n    /// the block for tier `1`.\\n    function updateBlockAtTier(\\n        uint256 report_,\\n        uint256 tier_,\\n        uint256 blockNumber_\\n    ) internal pure maxTier(tier_) returns (uint256) {\\n        unchecked {\\n            uint256 offset_ = tier_ * 32;\\n            return\\n                (report_ &\\n                    ~uint256(uint256(TierConstants.NEVER_TIER) << offset_)) |\\n                uint256(blockNumber_ << offset_);\\n        }\\n    }\\n\\n    /// Updates a report with a block number for every tier in a range.\\n    ///\\n    /// Does nothing if the end status is equal or less than the start tier.\\n    /// @param report_ The report to update.\\n    /// @param startTier_ The tier at the start of the range (exclusive).\\n    /// @param endTier_ The tier at the end of the range (inclusive).\\n    /// @param blockNumber_ The block number to set for every tier in the\\n    /// range.\\n    /// @return The updated report.\\n    function updateBlocksForTierRange(\\n        uint256 report_,\\n        uint256 startTier_,\\n        uint256 endTier_,\\n        uint256 blockNumber_\\n    ) internal pure maxTier(startTier_) maxTier(endTier_) returns (uint256) {\\n        unchecked {\\n            uint256 offset_;\\n            for (uint256 i_ = startTier_; i_ < endTier_; i_++) {\\n                offset_ = i_ * 32;\\n                report_ =\\n                    (report_ &\\n                        ~uint256(\\n                            uint256(TierConstants.NEVER_TIER) << offset_\\n                        )) |\\n                    uint256(blockNumber_ << offset_);\\n            }\\n            return report_;\\n        }\\n    }\\n\\n    /// Updates a report to a new status.\\n    ///\\n    /// Internally dispatches to `truncateTiersAbove` and\\n    /// `updateBlocksForTierRange`.\\n    /// The dispatch is based on whether the new tier is above or below the\\n    /// current tier.\\n    /// The `startTier_` MUST match the result of `tierAtBlockFromReport`.\\n    /// It is expected the caller will know the current tier when\\n    /// calling this function and need to do other things in the calling scope\\n    /// with it.\\n    ///\\n    /// @param report_ The report to update.\\n    /// @param startTier_ The tier to start updating relative to. Data above\\n    /// this tier WILL BE LOST so probably should be the current tier.\\n    /// @param endTier_ The new highest tier held, at the given block number.\\n    /// @param blockNumber_ The block number to update the highest tier to, and\\n    /// intermediate tiers from `startTier_`.\\n    /// @return The updated report.\\n    function updateReportWithTierAtBlock(\\n        uint256 report_,\\n        uint256 startTier_,\\n        uint256 endTier_,\\n        uint256 blockNumber_\\n    ) internal pure returns (uint256) {\\n        return\\n            endTier_ < startTier_\\n                ? truncateTiersAbove(report_, endTier_)\\n                : updateBlocksForTierRange(\\n                    report_,\\n                    startTier_,\\n                    endTier_,\\n                    blockNumber_\\n                );\\n    }\\n}\\n\",\"keccak256\":\"0x8310af353fcfbd2b57efbfead03142987d98ca93a4a4c5cf1f07a258f890f186\",\"license\":\"CAL\"},\"contracts/tier/libraries/TierwiseCombine.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"./TierReport.sol\\\";\\nimport \\\"../../math/SaturatingMath.sol\\\";\\n\\nlibrary TierwiseCombine {\\n    using Math for uint256;\\n    using SaturatingMath for uint256;\\n\\n    /// Every lte check in `selectLte` must pass.\\n    uint256 internal constant LOGIC_EVERY = 0;\\n    /// Only one lte check in `selectLte` must pass.\\n    uint256 internal constant LOGIC_ANY = 1;\\n\\n    /// Select the minimum block number from passing blocks in `selectLte`.\\n    uint256 internal constant MODE_MIN = 0;\\n    /// Select the maximum block number from passing blocks in `selectLte`.\\n    uint256 internal constant MODE_MAX = 1;\\n    /// Select the first block number that passes in `selectLte`.\\n    uint256 internal constant MODE_FIRST = 2;\\n\\n    /// Performs a tierwise saturating subtraction of two reports.\\n    /// Intepret as \\\"# of blocks older report was held before newer report\\\".\\n    /// If older report is in fact newer then `0` will be returned.\\n    /// i.e. the diff cannot be negative, older report as simply spent 0 blocks\\n    /// existing before newer report, if it is in truth the newer report.\\n    /// @param newerReport_ Block to subtract from.\\n    /// @param olderReport_ Block to subtract.\\n    function saturatingSub(uint256 newerReport_, uint256 olderReport_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        unchecked {\\n            uint256 ret_;\\n            for (uint256 tier_ = 1; tier_ <= 8; tier_++) {\\n                uint256 newerBlock_ = TierReport.tierBlock(newerReport_, tier_);\\n                uint256 olderBlock_ = TierReport.tierBlock(olderReport_, tier_);\\n                uint256 diff_ = newerBlock_.saturatingSub(olderBlock_);\\n                ret_ = TierReport.updateBlockAtTier(ret_, tier_ - 1, diff_);\\n            }\\n            return ret_;\\n        }\\n    }\\n\\n    /// Given a list of reports, selects the best tier in a tierwise fashion.\\n    /// The \\\"best\\\" criteria can be configured by `logic_` and `mode_`.\\n    /// Logic can be \\\"every\\\" or \\\"any\\\", which means that the reports for a given\\n    /// tier must either all or any be less than or equal to the reference\\n    /// `blockNumber_`.\\n    /// Mode can be \\\"min\\\", \\\"max\\\", \\\"first\\\" which selects between all the block\\n    /// numbers for a given tier that meet the lte criteria.\\n    /// @param reports_ The list of reports to select over.\\n    /// @param blockNumber_ The block number that tier blocks must be lte.\\n    /// @param logic_ `LOGIC_EVERY` or `LOGIC_ANY`.\\n    /// @param mode_ `MODE_MIN`, `MODE_MAX` or `MODE_FIRST`.\\n    function selectLte(\\n        uint256[] memory reports_,\\n        uint256 blockNumber_,\\n        uint256 logic_,\\n        uint256 mode_\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 ret_;\\n            uint256 block_;\\n            bool anyLte_;\\n            uint256 length_ = reports_.length;\\n            for (uint256 tier_ = 1; tier_ <= 8; tier_++) {\\n                uint256 accumulator_;\\n                // Nothing lte the reference block for this tier yet.\\n                anyLte_ = false;\\n\\n                // Initialize the accumulator for this tier.\\n                if (mode_ == MODE_MIN) {\\n                    accumulator_ = TierConstants.NEVER_REPORT;\\n                } else {\\n                    accumulator_ = 0;\\n                }\\n\\n                // Filter all the blocks at the current tier from all the\\n                // reports against the reference tier and each other.\\n                for (uint256 i_ = 0; i_ < length_; i_++) {\\n                    block_ = TierReport.tierBlock(reports_[i_], tier_);\\n\\n                    if (block_ <= blockNumber_) {\\n                        // Min and max need to compare current value against\\n                        // the accumulator.\\n                        if (mode_ == MODE_MIN) {\\n                            accumulator_ = block_.min(accumulator_);\\n                        } else if (mode_ == MODE_MAX) {\\n                            accumulator_ = block_.max(accumulator_);\\n                        } else if (mode_ == MODE_FIRST && !anyLte_) {\\n                            accumulator_ = block_;\\n                        }\\n                        anyLte_ = true;\\n                    } else if (logic_ == LOGIC_EVERY) {\\n                        // Can short circuit for an \\\"every\\\" check.\\n                        accumulator_ = TierConstants.NEVER_REPORT;\\n                        break;\\n                    }\\n                }\\n                if (!anyLte_) {\\n                    accumulator_ = TierConstants.NEVER_REPORT;\\n                }\\n                ret_ = TierReport.updateBlockAtTier(\\n                    ret_,\\n                    tier_ - 1,\\n                    accumulator_\\n                );\\n            }\\n            return ret_;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xff9aab5ff678adcc147ee4554521fbe14295f5ad95a58dc308975dd011b4cd7c\",\"license\":\"CAL\"},\"contracts/vm/RainVM.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity ^0.8.10;\\n\\n/// Everything required to evaluate and track the state of a rain script.\\n/// As this is a struct it will be in memory when passed to `RainVM` and so\\n/// will be modified by reference internally. This is important for gas\\n/// efficiency; the stack, arguments and stackIndex will likely be mutated by\\n/// the running script.\\n/// @param stackIndex Opcodes write to the stack at the stack index and can\\n/// consume from the stack by decrementing the index and reading between the\\n/// old and new stack index.\\n/// IMPORANT: The stack is never zeroed out so the index must be used to\\n/// find the \\\"top\\\" of the stack as the result of an `eval`.\\n/// @param stack Stack is the general purpose runtime state that opcodes can\\n/// read from and write to according to their functionality.\\n/// @param sources Sources available to be executed by `eval`.\\n/// Notably `ZIPMAP` can also select a source to execute by index.\\n/// @param constants Constants that can be copied to the stack by index by\\n/// `VAL`.\\n/// @param arguments `ZIPMAP` populates arguments which can be copied to the\\n/// stack by `VAL`.\\nstruct State {\\n    uint256 stackIndex;\\n    uint256[] stack;\\n    bytes[] sources;\\n    uint256[] constants;\\n    uint256[] arguments;\\n}\\n\\n/// @title RainVM\\n/// @notice micro VM for implementing and executing custom contract DSLs.\\n/// Libraries and contracts map opcodes to `view` functionality then RainVM\\n/// runs rain scripts using these opcodes. Rain scripts dispatch as pairs of\\n/// bytes. The first byte is an opcode to run and the second byte is a value\\n/// the opcode can use contextually to inform how to run. Typically opcodes\\n/// will read/write to the stack to produce some meaningful final state after\\n/// all opcodes have been dispatched.\\n///\\n/// The only thing required to run a rain script is a `State` struct to pass\\n/// to `eval`, and the index of the source to run. Additional context can\\n/// optionally be provided to be used by opcodes. For example, an `ITier`\\n/// contract can take the input of `report`, abi encode it as context, then\\n/// expose a local opcode that copies this account to the stack. The state will\\n/// be mutated by reference rather than returned by `eval`, this is to make it\\n/// very clear to implementers that the inline mutation is occurring.\\n///\\n/// Rain scripts run \\\"bottom to top\\\", i.e. \\\"right to left\\\"!\\n/// See the tests for examples on how to construct rain script in JavaScript\\n/// then pass to `ImmutableSource` contracts deployed by a factory that then\\n/// run `eval` to produce a final value.\\n///\\n/// There are only 3 \\\"core\\\" opcodes for `RainVM`:\\n/// - `0`: Skip self and optionally additional opcodes, `0 0` is a noop\\n/// - `1`: Copy value from either `constants` or `arguments` at index `operand`\\n///   to the top of the stack. High bit of `operand` is `0` for `constants` and\\n///   `1` for `arguments`.\\n/// - `2`: Zipmap takes N values from the stack, interprets each as an array of\\n///   configurable length, then zips them into `arguments` and maps a source\\n///   from `sources` over these. See `zipmap` for more details.\\n///\\n/// To do anything useful the contract that inherits `RainVM` needs to provide\\n/// opcodes to build up an internal DSL. This may sound complex but it only\\n/// requires mapping opcode integers to functions to call, and reading/writing\\n/// values to the stack as input/output for these functions. Further, opcode\\n/// packs are provided in rain that any inheriting contract can use as a normal\\n/// solidity library. See `MathOps.sol` opcode pack and the\\n/// `CalculatorTest.sol` test contract for an example of how to dispatch\\n/// opcodes and handle the results in a wrapping contract.\\n///\\n/// RainVM natively has no concept of branching logic such as `if` or loops.\\n/// An opcode pack could implement these similar to the core zipmap by lazily\\n/// evaluating a source from `sources` based on some condition, etc. Instead\\n/// some simpler, eagerly evaluated selection tools such as `min` and `max` in\\n/// the `MathOps` opcode pack are provided. Future versions of `RainVM` MAY\\n/// implement lazy `if` and other similar patterns.\\n///\\n/// The `eval` function is `view` because rain scripts are expected to compute\\n/// results only without modifying any state. The contract wrapping the VM is\\n/// free to mutate as usual. This model encourages exposing only read-only\\n/// functionality to end-user deployers who provide scripts to a VM factory.\\n/// Removing all writes remotes a lot of potential foot-guns for rain script\\n/// authors and allows VM contract authors to reason more clearly about the\\n/// input/output of the wrapping solidity code.\\n///\\n/// Internally `RainVM` makes heavy use of unchecked math and assembly logic\\n/// as the opcode dispatch logic runs on a tight loop and so gas costs can ramp\\n/// up very quickly. Implementing contracts and opcode packs SHOULD require\\n/// that opcodes they receive do not exceed the codes they are expecting.\\nabstract contract RainVM {\\n    /// `0` is a skip as this is the fallback value for unset solidity bytes.\\n    /// Any additional \\\"whitespace\\\" in rain scripts will be noops as `0 0` is\\n    /// \\\"skip self\\\". The val can be used to skip additional opcodes but take\\n    /// care to not underflow the source itself.\\n    uint256 private constant OP_SKIP = 0;\\n    /// `1` copies a value either off `constants` or `arguments` to the top of\\n    /// the stack. The high bit of the operand specifies which, `0` for\\n    /// `constants` and `1` for `arguments`.\\n    uint256 private constant OP_VAL = 1;\\n    /// Duplicates the top of the stack.\\n    uint256 private constant OP_DUP = 2;\\n    /// `2` takes N values off the stack, interprets them as an array then zips\\n    /// and maps a source from `sources` over them. The source has access to\\n    /// the original constants using `1 0` and to zipped arguments as `1 1`.\\n    uint256 private constant OP_ZIPMAP = 3;\\n    /// Number of provided opcodes for `RainVM`.\\n    uint256 internal constant OPS_LENGTH = 4;\\n\\n    /// Zipmap is rain script's native looping construct.\\n    /// N values are taken from the stack as `uint256` then split into `uintX`\\n    /// values where X is configurable by `operand_`. Each 1 increment in the\\n    /// operand size config doubles the number of items in the implied arrays.\\n    /// For example, size 0 is 1 `uint256` value, size 1 is\\n    /// `2x `uint128` values, size 2 is 4x `uint64` values and so on.\\n    ///\\n    /// The implied arrays are zipped and then copied into `arguments` and\\n    /// mapped over with a source from `sources`. Each iteration of the mapping\\n    /// copies values into `arguments` from index `0` but there is no attempt\\n    /// to zero out any values that may already be in the `arguments` array.\\n    /// It is the callers responsibility to ensure that the `arguments` array\\n    /// is correctly sized and populated for the mapped source.\\n    ///\\n    /// The `operand_` for the zipmap opcode is split into 3 components:\\n    /// - 2 low bits: The index of the source to use from `sources`.\\n    /// - 3 middle bits: The size of the loop, where 0 is 1 iteration\\n    /// - 3 high bits: The number of vals to be zipped from the stack where 0\\n    ///   is 1 value to be zipped.\\n    ///\\n    /// This is a separate function to avoid blowing solidity compile stack.\\n    /// In the future it may be moved inline to `eval` for gas efficiency.\\n    ///\\n    /// See https://en.wikipedia.org/wiki/Zipping_(computer_science)\\n    /// See https://en.wikipedia.org/wiki/Map_(higher-order_function)\\n    /// @param context_ Domain specific context the wrapping contract can\\n    /// provide to passthrough back to its own opcodes.\\n    /// @param state_ The execution state of the VM.\\n    /// @param operand_ The operand_ associated with this dispatch to zipmap.\\n    function zipmap(\\n        bytes memory context_,\\n        State memory state_,\\n        uint256 operand_\\n    ) internal view {\\n        unchecked {\\n            uint256 sourceIndex_;\\n            uint256 stepSize_;\\n            uint256 offset_;\\n            uint256 valLength_;\\n            // assembly here to shave some gas.\\n            assembly {\\n                // rightmost 3 bits are the index of the source to use from\\n                // sources in `state_`.\\n                sourceIndex_ := and(operand_, 0x07)\\n                // bits 4 and 5 indicate size of the loop. Each 1 increment of\\n                // the size halves the bits of the arguments to the zipmap.\\n                // e.g. 256 `stepSize_` would copy all 256 bits of the uint256\\n                // into args for the inner `eval`. A loop size of `1` would\\n                // shift `stepSize_` by 1 (halving it) and meaning the uint256\\n                // is `eval` as 2x 128 bit values (runs twice). A loop size of\\n                // `2` would run 4 times as 64 bit values, and so on.\\n                //\\n                // Slither false positive here for the shift of constant `256`.\\n                // slither-disable-next-line incorrect-shift\\n                stepSize_ := shr(and(shr(3, operand_), 0x03), 256)\\n                // `offset_` is used by the actual bit shifting operations and\\n                // is precalculated here to save some gas as this is a hot\\n                // performance path.\\n                offset_ := sub(256, stepSize_)\\n                // bits 5+ determine the number of vals to be zipped. At least\\n                // one value must be provided so a `valLength_` of `0` is one\\n                // value to loop over.\\n                valLength_ := add(shr(5, operand_), 1)\\n            }\\n            state_.stackIndex -= valLength_;\\n\\n            uint256[] memory baseVals_ = new uint256[](valLength_);\\n            for (uint256 a_ = 0; a_ < valLength_; a_++) {\\n                baseVals_[a_] = state_.stack[state_.stackIndex + a_];\\n            }\\n\\n            for (uint256 step_ = 0; step_ < 256; step_ += stepSize_) {\\n                for (uint256 a_ = 0; a_ < valLength_; a_++) {\\n                    state_.arguments[a_] =\\n                        (baseVals_[a_] << (offset_ - step_)) >>\\n                        offset_;\\n                }\\n                eval(context_, state_, sourceIndex_);\\n            }\\n        }\\n    }\\n\\n    /// Evaluates a rain script.\\n    /// The main workhorse of the rain VM, `eval` runs any core opcodes and\\n    /// dispatches anything it is unaware of to the implementing contract.\\n    /// For a script to be useful the implementing contract must override\\n    /// `applyOp` and dispatch non-core opcodes to domain specific logic. This\\n    /// could be mathematical operations for a calculator, tier reports for\\n    /// a membership combinator, entitlements for a minting curve, etc.\\n    ///\\n    /// Everything required to coordinate the execution of a rain script to\\n    /// completion is contained in the `State`. The context and source index\\n    /// are provided so the caller can provide additional data and kickoff the\\n    /// opcode dispatch from the correct source in `sources`.\\n    function eval(\\n        bytes memory context_,\\n        State memory state_,\\n        uint256 sourceIndex_\\n    ) internal view {\\n        // Everything in eval can be checked statically, there are no dynamic\\n        // runtime values read from the stack that can cause out of bounds\\n        // behaviour. E.g. sourceIndex in zipmap and size of a skip are both\\n        // taken from the operand in the source, not the stack. A program that\\n        // operates out of bounds SHOULD be flagged by static code analysis and\\n        // avoided by end-users.\\n        unchecked {\\n            uint256 i_ = 0;\\n            uint256 opcode_;\\n            uint256 operand_;\\n            uint256 len_;\\n            uint256 sourceLocation_;\\n            uint256 constantsLocation_;\\n            uint256 argumentsLocation_;\\n            uint256 stackLocation_;\\n            assembly {\\n                stackLocation_ := mload(add(state_, 0x20))\\n                sourceLocation_ := mload(\\n                    add(\\n                        mload(add(state_, 0x40)),\\n                        add(0x20, mul(sourceIndex_, 0x20))\\n                    )\\n                )\\n                constantsLocation_ := mload(add(state_, 0x60))\\n                argumentsLocation_ := mload(add(state_, 0x80))\\n                len_ := mload(sourceLocation_)\\n            }\\n\\n            // Loop until complete.\\n            while (i_ < len_) {\\n                assembly {\\n                    i_ := add(i_, 2)\\n                    let op_ := mload(add(sourceLocation_, i_))\\n                    opcode_ := byte(30, op_)\\n                    operand_ := byte(31, op_)\\n                }\\n                if (opcode_ < OPS_LENGTH) {\\n                    if (opcode_ == OP_VAL) {\\n                        assembly {\\n                            let location_ := argumentsLocation_\\n                            if iszero(and(operand_, 0x80)) {\\n                                location_ := constantsLocation_\\n                            }\\n\\n                            let stackIndex_ := mload(state_)\\n                            // Copy value to stack.\\n                            mstore(\\n                                add(\\n                                    stackLocation_,\\n                                    add(0x20, mul(stackIndex_, 0x20))\\n                                ),\\n                                mload(\\n                                    add(\\n                                        location_,\\n                                        add(\\n                                            0x20,\\n                                            mul(and(operand_, 0x7F), 0x20)\\n                                        )\\n                                    )\\n                                )\\n                            )\\n                            mstore(state_, add(stackIndex_, 1))\\n                        }\\n                    } else if (opcode_ == OP_DUP) {\\n                        assembly {\\n                            let stackIndex_ := mload(state_)\\n                            mstore(\\n                                add(\\n                                    stackLocation_,\\n                                    add(0x20, mul(stackIndex_, 0x20))\\n                                ),\\n                                mload(\\n                                    add(\\n                                        stackLocation_,\\n                                        add(0x20, mul(operand_, 0x20))\\n                                    )\\n                                )\\n                            )\\n                            mstore(state_, add(stackIndex_, 1))\\n                        }\\n                    } else if (opcode_ == OP_ZIPMAP) {\\n                        zipmap(context_, state_, operand_);\\n                    } else {\\n                        // if the high bit of the operand is nonzero then take\\n                        // the top of the stack and if it is zero we do NOT\\n                        // skip.\\n                        // analogous to `JUMPI` in evm opcodes.\\n                        // If high bit of the operand is zero then we always\\n                        // skip.\\n                        // analogous to `JUMP` in evm opcodes.\\n                        // the operand is interpreted as a signed integer so\\n                        // that we can skip forwards or backwards. Notable\\n                        // difference between skip and jump from evm is that\\n                        // skip moves a relative distance from the current\\n                        // position and is known at compile time, while jump\\n                        // moves to an absolute position read from the stack at\\n                        // runtime. The relative simplicity of skip means we\\n                        // can check for out of bounds behaviour at compile\\n                        // time and each source can never goto a position in a\\n                        // different source.\\n\\n                        // manually sign extend 1 bit.\\n                        // normal signextend works on bytes not bits.\\n                        int8 shift_ = int8(\\n                            uint8(operand_) & ((uint8(operand_) << 1) | 0x7F)\\n                        );\\n\\n                        // if the high bit is 1...\\n                        if (operand_ & 0x80 > 0) {\\n                            // take the top of the stack and only skip if it is\\n                            // nonzero.\\n                            state_.stackIndex--;\\n                            if (state_.stack[state_.stackIndex] == 0) {\\n                                continue;\\n                            }\\n                        }\\n                        if (shift_ != 0) {\\n                            if (shift_ < 0) {\\n                                // This is not particularly intuitive.\\n                                // Converting between int and uint and then\\n                                // moving `i_` back another 2 bytes to\\n                                // compensate for the addition of 2 bytes at\\n                                // the start of the next loop.\\n                                i_ -= uint8(~shift_ + 2) * 2;\\n                            } else {\\n                                i_ += uint8(shift_ * 2);\\n                            }\\n                        }\\n                    }\\n                } else {\\n                    applyOp(context_, state_, opcode_, operand_);\\n                }\\n            }\\n        }\\n    }\\n\\n    /// Every contract that implements `RainVM` should override `applyOp` so\\n    /// that useful opcodes are available to script writers.\\n    /// For an example of a simple and efficient `applyOp` implementation that\\n    /// dispatches over several opcode packs see `CalculatorTest.sol`.\\n    /// Implementing contracts are encouraged to handle the dispatch with\\n    /// unchecked math as the dispatch is a critical performance path and\\n    /// default solidity checked math can significantly increase gas cost for\\n    /// each opcode dispatched. Consider that a single zipmap could loop over\\n    /// dozens of opcode dispatches internally.\\n    /// Stack is modified by reference NOT returned.\\n    /// @param context_ Bytes that the implementing contract can passthrough\\n    /// to be ready internally by its own opcodes. RainVM ignores the context.\\n    /// @param state_ The RainVM state that tracks the execution progress.\\n    /// @param opcode_ The current opcode to dispatch.\\n    /// @param operand_ Additional information to inform the opcode dispatch.\\n    function applyOp(\\n        bytes memory context_,\\n        State memory state_,\\n        uint256 opcode_,\\n        uint256 operand_\\n    ) internal view virtual {} //solhint-disable-line no-empty-blocks\\n}\\n\",\"keccak256\":\"0xd9abedf243b74d40104fcae7271118a0405eb4eb4d00fd2d2ef74ef48efb8ee4\",\"license\":\"CAL\"},\"contracts/vm/libraries/VMState.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity ^0.8.10;\\n\\nimport {State} from \\\"../RainVM.sol\\\";\\nimport \\\"../../sstore2/SSTORE2.sol\\\";\\n\\n/// Config required to build a new `State`.\\n/// @param sources Sources verbatim.\\n/// @param constants Constants verbatim.\\n/// @param stackLength Sets the length of the uint256[] of the stack.\\n/// @param argumentsLength Sets the length of the uint256[] of the arguments.\\nstruct StateConfig {\\n    bytes[] sources;\\n    uint256[] constants;\\n    uint256 stackLength;\\n    uint256 argumentsLength;\\n}\\n\\n/// @title StateSnapshot\\n/// @notice Deploys everything required to build a fresh `State` for rainVM\\n/// execution as an evm contract onchain. Uses SSTORE2 to abi encode rain\\n/// script into evm bytecode, then stores an immutable pointer to the resulting\\n/// contract. Allows arbitrary length rain script source, constants and stack.\\n/// Gas scales for reads much better for longer data than attempting to put\\n/// all the source into storage.\\n/// See https://github.com/0xsequence/sstore2\\ncontract VMState {\\n    /// A new shapshot has been deployed onchain.\\n    /// @param sender `msg.sender` of the deployer.\\n    /// @param pointer Pointer to the onchain snapshot contract.\\n    /// @param state `State` of the snapshot that was deployed.\\n    event Snapshot(address sender, address pointer, State state);\\n\\n    /// Builds a new `State` from `StateConfig`.\\n    /// Empty stack and arguments with stack index 0.\\n    /// @param config_ State config to build the new `State`.\\n    function _newState(StateConfig memory config_)\\n        internal\\n        pure\\n        returns (State memory)\\n    {\\n        return\\n            State(\\n                0,\\n                new uint256[](config_.stackLength),\\n                config_.sources,\\n                config_.constants,\\n                new uint256[](config_.argumentsLength)\\n            );\\n    }\\n\\n    /// Snapshot a RainVM state as an immutable onchain contract.\\n    /// Usually `State` will be new as per `newState` but can be a snapshot of\\n    /// an \\\"in flight\\\" execution state also.\\n    /// @param state_ The state to snapshot.\\n    function _snapshot(State memory state_) internal returns (address) {\\n        address pointer_ = SSTORE2.write(abi.encode(state_));\\n        emit Snapshot(msg.sender, pointer_, state_);\\n        return pointer_;\\n    }\\n\\n    /// Builds a fresh state for rainVM execution from all construction data.\\n    /// This can be passed directly to `eval` for a `RainVM` contract.\\n    /// @param pointer_ The pointer (address) of the snapshot to restore.\\n    function _restore(address pointer_) internal view returns (State memory) {\\n        return abi.decode(SSTORE2.read(pointer_), (State));\\n    }\\n}\\n\",\"keccak256\":\"0xb94cbb2869dbed476ef3f120bd624f7e42378c4ded709b43987ae85866d3880c\",\"license\":\"CAL\"},\"contracts/vm/ops/BlockOps.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity ^0.8.10;\\n\\nimport {State} from \\\"../RainVM.sol\\\";\\n\\n/// @title BlockOps\\n/// @notice RainVM opcode pack to access the current block number.\\nlibrary BlockOps {\\n    /// Opcode for the block number.\\n    uint256 private constant BLOCK_NUMBER = 0;\\n    /// Opcode for the block timestamp.\\n    uint256 private constant BLOCK_TIMESTAMP = 1;\\n    /// Number of provided opcodes for `BlockOps`.\\n    uint256 internal constant OPS_LENGTH = 2;\\n\\n    function applyOp(\\n        bytes memory,\\n        State memory state_,\\n        uint256 opcode_,\\n        uint256\\n    ) internal view {\\n        unchecked {\\n            require(opcode_ < OPS_LENGTH, \\\"MAX_OPCODE\\\");\\n            // Stack the current `block.number`.\\n            if (opcode_ == BLOCK_NUMBER) {\\n                state_.stack[state_.stackIndex] = block.number;\\n                state_.stackIndex++;\\n            }\\n            // Stack the current `block.timestamp`.\\n            else if (opcode_ == BLOCK_TIMESTAMP) {\\n                // solhint-disable-next-line not-rely-on-time\\n                state_.stack[state_.stackIndex] = block.timestamp;\\n                state_.stackIndex++;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x019c85ab5271b8fa63a1a3e525a3964179396dc8e2e9516b17781544cac0771d\",\"license\":\"CAL\"},\"contracts/vm/ops/FixedPointMathOps.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity ^0.8.10;\\n\\nimport {State} from \\\"../RainVM.sol\\\";\\nimport \\\"../../math/FixedPointMath.sol\\\";\\n\\n/// @title FixedPointMathOps\\n/// @notice RainVM opcode pack to perform basic checked math operations.\\n/// Underflow and overflow will error as per default solidity behaviour.\\nlibrary FixedPointMathOps {\\n    using FixedPointMath for uint256;\\n\\n    /// Opcode for multiplication.\\n    uint256 private constant SCALE18_MUL = 0;\\n    /// Opcode for division.\\n    uint256 private constant SCALE18_DIV = 1;\\n    /// Opcode to rescale some fixed point number to 18 OOMs in situ.\\n    uint256 private constant SCALE18 = 2;\\n    /// Opcode to rescale an 18 OOMs fixed point number to scale N.\\n    uint256 private constant SCALEN = 3;\\n    /// Opcode to rescale an arbitrary fixed point number by some OOMs.\\n    uint256 private constant SCALE_BY = 4;\\n    /// Opcode for stacking the definition of one.\\n    uint256 private constant ONE = 5;\\n    /// Opcode for stacking number of fixed point decimals used.\\n    uint256 private constant DECIMALS = 6;\\n    /// Number of provided opcodes for `FixedPointMathOps`.\\n    uint256 internal constant OPS_LENGTH = 7;\\n\\n    function applyOp(\\n        bytes memory,\\n        State memory state_,\\n        uint256 opcode_,\\n        uint256 operand_\\n    ) internal pure {\\n        unchecked {\\n            require(opcode_ < OPS_LENGTH, \\\"MAX_OPCODE\\\");\\n\\n            if (opcode_ < SCALE18) {\\n                uint256 baseIndex_ = state_.stackIndex - 2;\\n                if (opcode_ == SCALE18_MUL) {\\n                    state_.stack[baseIndex_] = state_\\n                        .stack[baseIndex_]\\n                        .scale18(operand_)\\n                        * state_.stack[baseIndex_ + 1];\\n                } else if (opcode_ == SCALE18_DIV) {\\n                    state_.stack[baseIndex_] = state_\\n                        .stack[baseIndex_]\\n                        .scale18(operand_)\\n                        / state_.stack[baseIndex_ + 1];\\n                }\\n                state_.stackIndex--;\\n            } else if (opcode_ < ONE) {\\n                uint256 baseIndex_ = state_.stackIndex - 1;\\n                if (opcode_ == SCALE18) {\\n                    state_.stack[baseIndex_] = state_.stack[baseIndex_].scale18(\\n                        operand_\\n                    );\\n                } else if (opcode_ == SCALEN) {\\n                    state_.stack[baseIndex_] = state_.stack[baseIndex_].scaleN(\\n                        operand_\\n                    );\\n                } else if (opcode_ == SCALE_BY) {\\n                    state_.stack[baseIndex_] = state_.stack[baseIndex_].scaleBy(\\n                        int8(uint8(operand_))\\n                    );\\n                }\\n            } else {\\n                if (opcode_ == ONE) {\\n                    state_.stack[state_.stackIndex] = FixedPointMath.ONE;\\n                    state_.stackIndex++;\\n                } else if (opcode_ == DECIMALS) {\\n                    state_.stack[state_.stackIndex] = FixedPointMath.DECIMALS;\\n                    state_.stackIndex++;\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6e2ad291fbf3fbf328ddd3e526d9dde6eb9853978979fb6930ad5629067be5f3\",\"license\":\"CAL\"},\"contracts/vm/ops/MathOps.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity ^0.8.10;\\n\\nimport {State} from \\\"../RainVM.sol\\\";\\n\\n/// @title MathOps\\n/// @notice RainVM opcode pack to perform basic checked math operations.\\n/// Underflow and overflow will error as per default solidity behaviour.\\nlibrary MathOps {\\n    /// Opcode for addition.\\n    uint256 private constant ADD = 0;\\n    /// Opcode for subtraction.\\n    uint256 private constant SUB = 1;\\n    /// Opcode for multiplication.\\n    uint256 private constant MUL = 2;\\n    /// Opcode for division.\\n    uint256 private constant DIV = 3;\\n    /// Opcode for modulo.\\n    uint256 private constant MOD = 4;\\n    /// Opcode for exponentiation.\\n    uint256 private constant EXP = 5;\\n    /// Opcode for minimum.\\n    uint256 private constant MIN = 6;\\n    /// Opcode for maximum.\\n    uint256 private constant MAX = 7;\\n    /// Number of provided opcodes for `MathOps`.\\n    uint256 internal constant OPS_LENGTH = 8;\\n\\n    function applyOp(\\n        bytes memory,\\n        State memory state_,\\n        uint256 opcode_,\\n        uint256 operand_\\n    ) internal pure {\\n        require(opcode_ < OPS_LENGTH, \\\"MAX_OPCODE\\\");\\n        uint256 baseIndex_;\\n        uint256 top_;\\n        unchecked {\\n            baseIndex_ = state_.stackIndex - operand_;\\n            top_ = state_.stackIndex - 1;\\n        }\\n        uint256 cursor_ = baseIndex_;\\n        uint256 accumulator_ = state_.stack[cursor_];\\n\\n        // Addition.\\n        if (opcode_ == ADD) {\\n            while (cursor_ < top_) {\\n                unchecked {\\n                    cursor_++;\\n                }\\n                accumulator_ += state_.stack[cursor_];\\n            }\\n        }\\n        // Subtraction.\\n        else if (opcode_ == SUB) {\\n            while (cursor_ < top_) {\\n                unchecked {\\n                    cursor_++;\\n                }\\n                accumulator_ -= state_.stack[cursor_];\\n            }\\n        }\\n        // Multiplication.\\n        // Slither false positive here complaining about dividing before\\n        // multiplying but both are mututally exclusive according to `opcode_`.\\n        else if (opcode_ == MUL) {\\n            while (cursor_ < top_) {\\n                unchecked {\\n                    cursor_++;\\n                }\\n                accumulator_ *= state_.stack[cursor_];\\n            }\\n        }\\n        // Division.\\n        else if (opcode_ == DIV) {\\n            while (cursor_ < top_) {\\n                unchecked {\\n                    cursor_++;\\n                }\\n                accumulator_ /= state_.stack[cursor_];\\n            }\\n        }\\n        // Modulo.\\n        else if (opcode_ == MOD) {\\n            while (cursor_ < top_) {\\n                unchecked {\\n                    cursor_++;\\n                }\\n                accumulator_ %= state_.stack[cursor_];\\n            }\\n        }\\n        // Exponentiation.\\n        else if (opcode_ == EXP) {\\n            while (cursor_ < top_) {\\n                unchecked {\\n                    cursor_++;\\n                }\\n                accumulator_**state_.stack[cursor_];\\n            }\\n        }\\n        // Minimum.\\n        else if (opcode_ == MIN) {\\n            uint256 item_;\\n            while (cursor_ < top_) {\\n                unchecked {\\n                    cursor_++;\\n                }\\n                item_ = state_.stack[cursor_];\\n                if (item_ < accumulator_) {\\n                    accumulator_ = item_;\\n                }\\n            }\\n        }\\n        // Maximum.\\n        else if (opcode_ == MAX) {\\n            uint256 item_;\\n            while (cursor_ < top_) {\\n                unchecked {\\n                    cursor_++;\\n                }\\n                item_ = state_.stack[cursor_];\\n                if (item_ > accumulator_) {\\n                    accumulator_ = item_;\\n                }\\n            }\\n        }\\n\\n        unchecked {\\n            state_.stack[baseIndex_] = accumulator_;\\n            state_.stackIndex = baseIndex_ + 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x20b884d105375bc7305c01c2d796d586645e7ff3728cc02a611e6e7bfd91d9be\",\"license\":\"CAL\"},\"contracts/vm/ops/ThisOps.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity ^0.8.10;\\n\\nimport {State} from \\\"../RainVM.sol\\\";\\n\\n/// @title ThisOps\\n/// @notice RainVM opcode pack to access the current contract address.\\nlibrary ThisOps {\\n    /// Opcode for this contract address.\\n    uint256 private constant THIS_ADDRESS = 0;\\n    /// Number of provided opcodes for `ThisOps`.\\n    uint256 internal constant OPS_LENGTH = 1;\\n\\n    function applyOp(\\n        bytes memory,\\n        State memory state_,\\n        uint256 opcode_,\\n        uint256\\n    ) internal view {\\n        unchecked {\\n            require(opcode_ < OPS_LENGTH, \\\"MAX_OPCODE\\\");\\n            // There's only one opcode.\\n            // Put the current contract address on the stack.\\n            state_.stack[state_.stackIndex] = uint256(\\n                uint160(address(this))\\n            );\\n            state_.stackIndex++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x54e959c092066fbf359f6a5d311358dc54762bfbefc78f86096633ad81e9b875\",\"license\":\"CAL\"},\"contracts/vm/ops/TierOps.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity ^0.8.10;\\n\\nimport {State} from \\\"../RainVM.sol\\\";\\nimport \\\"../../tier/libraries/TierReport.sol\\\";\\nimport \\\"../../tier/libraries/TierwiseCombine.sol\\\";\\n\\n/// @title TierOps\\n/// @notice RainVM opcode pack to operate on tier reports.\\nlibrary TierOps {\\n    /// Opcode to call `report` on an `ITier` contract.\\n    uint256 private constant REPORT = 0;\\n    /// Opcode to stack a report that has never been held for all tiers.\\n    uint256 private constant NEVER = 1;\\n    /// Opcode to stack a report that has always been held for all tiers.\\n    uint256 private constant ALWAYS = 2;\\n    /// Opcode to calculate the tierwise diff of two reports.\\n    uint256 private constant SATURATING_DIFF = 3;\\n    /// Opcode to update the blocks over a range of tiers for a report.\\n    uint256 private constant UPDATE_BLOCKS_FOR_TIER_RANGE = 4;\\n    /// Opcode to tierwise select the best block lte a reference block.\\n    uint256 private constant SELECT_LTE = 5;\\n    /// Number of provided opcodes for `TierOps`.\\n    uint256 internal constant OPS_LENGTH = 6;\\n\\n    function applyOp(\\n        bytes memory,\\n        State memory state_,\\n        uint256 opcode_,\\n        uint256 operand_\\n    ) internal view {\\n        unchecked {\\n            require(opcode_ < OPS_LENGTH, \\\"MAX_OPCODE\\\");\\n            uint256 baseIndex_;\\n            // Stack the report returned by an `ITier` contract.\\n            // Top two stack vals are used as the address and `ITier` contract\\n            // to check against.\\n            if (opcode_ == REPORT) {\\n                state_.stackIndex -= 1;\\n                baseIndex_ = state_.stackIndex - 1;\\n                state_.stack[baseIndex_] = ITier(\\n                    address(uint160(state_.stack[baseIndex_]))\\n                ).report(address(uint160(state_.stack[baseIndex_ + 1])));\\n            }\\n            // Stack a report that has never been held at any tier.\\n            else if (opcode_ == NEVER) {\\n                state_.stack[state_.stackIndex] = TierConstants.NEVER_REPORT;\\n                state_.stackIndex++;\\n            }\\n            // Stack a report that has always been held at every tier.\\n            else if (opcode_ == ALWAYS) {\\n                state_.stack[state_.stackIndex] = TierConstants.ALWAYS;\\n                state_.stackIndex++;\\n            }\\n            // Stack the tierwise saturating subtraction of two reports.\\n            // If the older report is newer than newer report the result will\\n            // be `0`, else a tierwise diff in blocks will be obtained.\\n            // The older and newer report are taken from the stack.\\n            else if (opcode_ == SATURATING_DIFF) {\\n                state_.stackIndex -= 2;\\n                baseIndex_ = state_.stackIndex;\\n                uint256 newerReport_ = state_.stack[baseIndex_];\\n                uint256 olderReport_ = state_.stack[baseIndex_ + 1];\\n                state_.stack[baseIndex_] = TierwiseCombine.saturatingSub(\\n                    newerReport_,\\n                    olderReport_\\n                );\\n                state_.stackIndex++;\\n            }\\n            // Stacks a report with updated blocks over tier range.\\n            // The start and end tier are taken from the low and high bits of\\n            // the `operand_` respectively.\\n            // The block number to update to and the report to update over are\\n            // both taken from the stack.\\n            else if (opcode_ == UPDATE_BLOCKS_FOR_TIER_RANGE) {\\n                uint256 startTier_ = operand_ & 0x0f; // & 00001111\\n                uint256 endTier_ = (operand_ >> 4) & 0x0f; // & 00001111\\n                state_.stackIndex -= 2;\\n                baseIndex_ = state_.stackIndex;\\n                uint256 report_ = state_.stack[baseIndex_];\\n                uint256 blockNumber_ = state_.stack[baseIndex_ + 1];\\n                state_.stack[baseIndex_] = TierReport.updateBlocksForTierRange(\\n                    report_,\\n                    startTier_,\\n                    endTier_,\\n                    blockNumber_\\n                );\\n                state_.stackIndex++;\\n            }\\n            // Stacks the result of a `selectLte` combinator.\\n            // All `selectLte` share the same stack and argument handling.\\n            // In the future these may be combined into a single opcode, taking\\n            // the `logic_` and `mode_` from the `operand_` high bits.\\n            else if (opcode_ == SELECT_LTE) {\\n                uint256 logic_ = operand_ >> 7;\\n                uint256 mode_ = (operand_ >> 5) & 0x3; // & 00000011\\n                uint256 reportsLength_ = operand_ & 0x1F; // & 00011111\\n\\n                // Need one more than reports length to include block number.\\n                state_.stackIndex -= reportsLength_ + 1;\\n                baseIndex_ = state_.stackIndex;\\n                uint256 cursor_ = baseIndex_;\\n\\n                uint256[] memory reports_ = new uint256[](reportsLength_);\\n                for (uint256 a_ = 0; a_ < reportsLength_; a_++) {\\n                    reports_[a_] = state_.stack[cursor_];\\n                    cursor_++;\\n                }\\n                uint256 blockNumber_ = state_.stack[cursor_];\\n\\n                state_.stack[baseIndex_] = TierwiseCombine.selectLte(\\n                    reports_,\\n                    blockNumber_,\\n                    logic_,\\n                    mode_\\n                );\\n                state_.stackIndex++;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xde0a048976b75b543e4933b218be41c0af205dcfa6238824bdcedef093591cc5\",\"license\":\"CAL\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b506001600090815560405161002490610096565b604051809103906000f080158015610040573d6000803e3d6000fd5b50604080513381526001600160a01b03831660208201529192507f7fac34ecf0b1b374cd9659e3d17db602659d53f1162b1f20142e6c02694aed70910160405180910390a16001600160a01b03166080526100a3565b613c478061103983390190565b608051610f7b6100be60003960006102b80152610f7b6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80632ea72a49146100465780638dbdd92614610083578063fc91a89714610096575b600080fd5b61005961005436600461044e565b6100df565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100596100913660046104c0565b6101fd565b6100cf6100a4366004610527565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205460ff1690565b604051901515815260200161007a565b600060026000541415610153576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b6002600090815561016484846102a0565b73ffffffffffffffffffffffffffffffffffffffff811660008181526001602081815260409283902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169092179091558151338152908101929092529192507f7da70c4e5387d7038610b79ca7d304caaef815826e51e67cf247135387a79bce910160405180910390a160016000559392505050565b60003073ffffffffffffffffffffffffffffffffffffffff16632ea72a498360405160200161022c91906107ca565b6040516020818303038152906040526040518263ffffffff1660e01b81526004016102579190610946565b6020604051808303816000875af1158015610276573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029a9190610959565b92915050565b6000806102af83850185610c6e565b905060006102dc7f000000000000000000000000000000000000000000000000000000000000000061036c565b6040517f814e3a8e00000000000000000000000000000000000000000000000000000000815290915073ffffffffffffffffffffffffffffffffffffffff82169063814e3a8e90610331908590600401610e71565b600060405180830381600087803b15801561034b57600080fd5b505af115801561035f573d6000803e3d6000fd5b5092979650505050505050565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260601b60148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f091505073ffffffffffffffffffffffffffffffffffffffff8116610449576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f455243313136373a20637265617465206661696c656400000000000000000000604482015260640161014a565b919050565b6000806020838503121561046157600080fd5b823567ffffffffffffffff8082111561047957600080fd5b818501915085601f83011261048d57600080fd5b81358181111561049c57600080fd5b8660208285010111156104ae57600080fd5b60209290920196919550909350505050565b6000602082840312156104d257600080fd5b813567ffffffffffffffff8111156104e957600080fd5b8201606081850312156104fb57600080fd5b9392505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461052457600080fd5b50565b60006020828403121561053957600080fd5b81356104fb81610502565b8035801515811461044957600080fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8183360301811261058857600080fd5b90910192915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126105c657600080fd5b830160208101925035905067ffffffffffffffff8111156105e657600080fd5b8036038313156105f557600080fd5b9250929050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261067a57600080fd5b830160208101925035905067ffffffffffffffff81111561069a57600080fd5b8060051b36038313156105f557600080fd5b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156106de57600080fd5b8260051b8083602087013760009401602001938452509192915050565b60006080830161070b8384610645565b608086528281845260a08701905060a08260051b88010193508260005b83811015610783577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff608987030183526107618286610591565b61076c8882846105fc565b975050506020928301929190910190600101610728565b50505050506107956020840184610645565b85830360208701526107a88382846106ac565b9250505060408301356040850152606083013560608501528091505092915050565b602081526107d782610544565b1515602082015260006107ed6020840184610554565b606060408401526107fe8182610591565b608080860152610813610100860182846105fc565b9150506108236020830183610591565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff808684030160a08701526108588382846105fc565b92505050604082013561086a81610502565b73ffffffffffffffffffffffffffffffffffffffff1660c0850152606082013560e085015261089c6040860186610554565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08482030160608501526108d281836106fb565b95945050505050565b6000815180845260005b81811015610901576020818501810151868301820152016108e5565b81811115610913576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006104fb60208301846108db565b60006020828403121561096b57600080fd5b81516104fb81610502565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516080810167ffffffffffffffff811182821017156109c8576109c8610976565b60405290565b6040516060810167ffffffffffffffff811182821017156109c8576109c8610976565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715610a3857610a38610976565b604052919050565b600067ffffffffffffffff831115610a5a57610a5a610976565b610a8b60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f860116016109f1565b9050828152838383011115610a9f57600080fd5b828260208301376000602084830101529392505050565b600082601f830112610ac757600080fd5b6104fb83833560208501610a40565b600067ffffffffffffffff821115610af057610af0610976565b5060051b60200190565b600082601f830112610b0b57600080fd5b81356020610b20610b1b83610ad6565b6109f1565b82815260059290921b84018101918181019086841115610b3f57600080fd5b8286015b84811015610b5a5780358352918301918301610b43565b509695505050505050565b600060808284031215610b7757600080fd5b610b7f6109a5565b9050813567ffffffffffffffff80821115610b9957600080fd5b818401915084601f830112610bad57600080fd5b81356020610bbd610b1b83610ad6565b82815260059290921b84018101918181019088841115610bdc57600080fd5b8286015b84811015610c2957803586811115610bf85760008081fd5b8701603f81018b13610c0a5760008081fd5b610c1b8b8683013560408401610a40565b845250918301918301610be0565b5086525085810135935082841115610c4057600080fd5b610c4c87858801610afa565b8186015250505050604082013560408201526060820135606082015292915050565b600060208284031215610c8057600080fd5b813567ffffffffffffffff80821115610c9857600080fd5b9083019060608286031215610cac57600080fd5b610cb46109ce565b610cbd83610544565b8152602083013582811115610cd157600080fd5b830160808188031215610ce357600080fd5b610ceb6109a5565b813584811115610cfa57600080fd5b610d0689828501610ab6565b825250602082013584811115610d1b57600080fd5b610d2789828501610ab6565b6020830152506040820135610d3b81610502565b80604083015250606082013560608201528060208401525050604083013582811115610d6657600080fd5b610d7287828601610b65565b60408301525095945050505050565b600081518084526020808501945080840160005b83811015610db157815187529582019590820190600101610d95565b509495945050505050565b60006080830182516080855281815180845260a08701915060a08160051b88010193506020808401935060005b82811015610e35577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60898703018452610e238686516108db565b95509381019392810192600101610de9565b5080870151935087850381890152505050610e508282610d81565b91505060408301516040850152606083015160608501528091505092915050565b6020815281511515602082015260006020830151606060408401528051608080850152610ea26101008501826108db565b905060208201517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff808583030160a0860152610edd82826108db565b91505073ffffffffffffffffffffffffffffffffffffffff60408301511660c0850152606082015160e0850152604085015191507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08482030160608501526108d28183610dbc56fea2646970667358221220c6fff24710c6249d924572f9a27721d21aa60e15f3328a57ea666f69f85b6d6364736f6c634300080a00336101406040523480156200001257600080fd5b506004608081905262000028906002906200007f565b60a08190526200003b906001906200007f565b60c08190526200004e906006906200007f565b60e081905262000061906008906200007f565b61010081905262000075906007906200007f565b61012052620000a6565b60008219821115620000a157634e487b7160e01b600052601160045260246000fd5b500190565b60805160a05160c05160e0516101005161012051613b2e620001196000396000818161199c01526119f201526000818161194601526119c90152600081816118f0015261197301526000818161189a015261191d01526000818161183f01526118c70152600061186c0152613b2e6000f3fe608060405234801561001057600080fd5b506004361061011b5760003560e01c8063814e3a8e116100b2578063a9059cbb11610081578063dd62ed3e11610066578063dd62ed3e1461026c578063e053ea31146102b2578063ea345540146102c557600080fd5b8063a9059cbb14610246578063bb1757cf1461025957600080fd5b8063814e3a8e146102035780638a200fff1461021857806395d89b411461022b578063a457c2d71461023357600080fd5b8063313ce567116100ee578063313ce56714610186578063395093511461019557806367676b11146101a857806370a08231146101cd57600080fd5b806306fdde0314610120578063095ea7b31461013e57806318160ddd1461016157806323b872dd14610173575b600080fd5b6101286102d8565b6040516101359190612de1565b60405180910390f35b61015161014c366004612e19565b61036a565b6040519015158152602001610135565b6035545b604051908152602001610135565b610151610181366004612e45565b610384565b60405160128152602001610135565b6101516101a3366004612e19565b6103aa565b6066546101519074010000000000000000000000000000000000000000900460ff1681565b6101656101db366004612e86565b73ffffffffffffffffffffffffffffffffffffffff1660009081526033602052604090205490565b6102166102113660046131aa565b6103f6565b005b6102166102263660046132c4565b610604565b610128610666565b610151610241366004612e19565b610675565b610151610254366004612e19565b610751565b61021661026736600461331d565b61075f565b61016561027a36600461336d565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260346020908152604080832093909416825291909152205490565b6101656102c0366004612e86565b6108f4565b6101656102d3366004612e86565b61096d565b6060603680546102e7906133a6565b80601f0160208091040260200160405190810160405280929190818152602001828054610313906133a6565b80156103605780601f1061033557610100808354040283529160200191610360565b820191906000526020600020905b81548152906001019060200180831161034357829003601f168201915b5050505050905090565b600033610378818585610a06565b60019150505b92915050565b600033610392858285610bb9565b61039d858585610c90565b60019150505b9392505050565b33600081815260346020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716845290915281205490919061037890829086906103f1908790613423565b610a06565b600054610100900460ff166104115760005460ff1615610415565b303b155b6104a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600054610100900460ff161580156104e557600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b60208083015180519101516104fa9190610f43565b610514826020015160400151836020015160600151610fe4565b6105296105248360400151611104565b6111f7565b60668054845173ffffffffffffffffffffffffffffffffffffffff939093167fffffffffffffffffffffff00000000000000000000000000000000000000000090911617740100000000000000000000000000000000000000009215159283021790554360658190556040805133815260208101939093528201527f82f92cfda9011a91a9d40be6148a55ba25c11346d730d6ace6468185b00ae4019060600160405180910390a1801561060057600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b5050565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f5345545f54494552000000000000000000000000000000000000000000000000604482015260640161049d565b6060603780546102e7906133a6565b33600081815260346020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716845290915281205490919083811015610739576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f000000000000000000000000000000000000000000000000000000606482015260840161049d565b6107468286868403610a06565b506001949350505050565b600033610378818585610c90565b60665474010000000000000000000000000000000000000000900460ff16610800573373ffffffffffffffffffffffffffffffffffffffff831614610800576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f44454c4547415445445f434c41494d0000000000000000000000000000000000604482015260640161049d565b600061080b8361096d565b90506108178382610fe4565b6108457fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6000600843611265565b73ffffffffffffffffffffffffffffffffffffffff8416600081815260676020908152604080832094909455835133815290810192909252818301526008606082015290517f100c93640a44fd8835d3652fa703bca54387aca4142e2cab319fb66cd80e3c9c9181900360800190a17fbf9d4a3962ab35e7ce8f88984952a416a31b61587fa229030e059141a2646f433384846040516108e79392919061343b565b60405180910390a1505050565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260676020526040812054610944577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61037e565b5073ffffffffffffffffffffffffffffffffffffffff1660009081526067602052604090205490565b60665460009081906109949073ffffffffffffffffffffffffffffffffffffffff16611378565b6040805173ffffffffffffffffffffffffffffffffffffffff861660208201529192506109d391016040516020818303038152906040528260006113c6565b602081015181516109e69060019061347d565b815181106109f6576109f6613494565b6020026020010151915050919050565b73ffffffffffffffffffffffffffffffffffffffff8316610aa8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f7265737300000000000000000000000000000000000000000000000000000000606482015260840161049d565b73ffffffffffffffffffffffffffffffffffffffff8216610b4b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f7373000000000000000000000000000000000000000000000000000000000000606482015260840161049d565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff8381166000908152603460209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610c8a5781811015610c7d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161049d565b610c8a8484848403610a06565b50505050565b73ffffffffffffffffffffffffffffffffffffffff8316610d33576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f6472657373000000000000000000000000000000000000000000000000000000606482015260840161049d565b73ffffffffffffffffffffffffffffffffffffffff8216610dd6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f6573730000000000000000000000000000000000000000000000000000000000606482015260840161049d565b73ffffffffffffffffffffffffffffffffffffffff831660009081526033602052604090205481811015610e8c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e63650000000000000000000000000000000000000000000000000000606482015260840161049d565b73ffffffffffffffffffffffffffffffffffffffff808516600090815260336020526040808220858503905591851681529081208054849290610ed0908490613423565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610f3691815260200190565b60405180910390a3610c8a565b600054610100900460ff16610fda576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161049d565b6106008282611560565b73ffffffffffffffffffffffffffffffffffffffff8216611061576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161049d565b80603560008282546110739190613423565b909155505073ffffffffffffffffffffffffffffffffffffffff8216600090815260336020526040812080548392906110ad908490613423565b909155505060405181815273ffffffffffffffffffffffffffffffffffffffff8316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6111366040518060a0016040528060008152602001606081526020016060815260200160608152602001606081525090565b6040518060a0016040528060008152602001836040015167ffffffffffffffff81111561116557611165612ea3565b60405190808252806020026020018201604052801561118e578160200160208202803683370190505b5081526020018360000151815260200183602001518152602001836060015167ffffffffffffffff8111156111c5576111c5612ea3565b6040519080825280602002602001820160405280156111ee578160200160208202803683370190505b50905292915050565b6000806112228360405160200161120e91906135cb565b60405160208183030381529060405261161e565b90507ff95eed63f55d96a35306669cc3b5f652f8d44552e3e4b17b2f78f13571114abd338285604051611257939291906135de565b60405180910390a192915050565b60008360088111156112d3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4d41585f54494552000000000000000000000000000000000000000000000000604482015260640161049d565b83600881111561133f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4d41585f54494552000000000000000000000000000000000000000000000000604482015260640161049d565b6000865b8681101561136b5763ffffffff6020820290811b1999909916868a1b17989150600101611343565b5096979650505050505050565b6113aa6040518060a0016040528060008152602001606081526020016060815260200160608152602001606081525090565b6113b3826116a9565b80602001905181019061037e919061372e565b602082810151604084015183830201909101516060840151608085015182516000948594859492939092915b8488101561154e576002880197508784015180601e1a975080601f1a965050600487101561154257600187141561145557816080871661142f5750825b8a516020607f89160260200182015160208202602001840152600181018c5250506113f2565b60028714156114805789516020870260200182015160208202602001830152600181018b52506113f2565b6003871415611499576114948b8b886116d7565b6113f2565b607f6101fe600188901b161786166080871615611505578a517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01808c5260208c0151805190919081106114ef576114ef613494565b60200260200101516000141561150557506113f2565b8060000b60001461153c5760008160000b121561153057801960020160020260ff168903985061153c565b8060020260ff16890198505b506113f2565b6114948b8b898961183d565b5050505050505050505050565b505050565b600054610100900460ff166115f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161049d565b815161160a906036906020850190612cd2565b50805161155b906037906020840190612cd2565b600080611649836040516020016116359190613811565b604051602081830303815290604052611b1f565b90508051602082016000f0915073ffffffffffffffffffffffffffffffffffffffff82166116a3576040517f08d4abb600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50919050565b606061037e8260017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff611b4b565b81517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600583901c918290030183526007821690610100600384811c1681901c91908290039060010160008167ffffffffffffffff81111561173b5761173b612ea3565b604051908082528060200260200182016040528015611764578160200160208202803683370190505b50905060005b828110156117bb578760200151818960000151018151811061178e5761178e613494565b60200260200101518282815181106117a8576117a8613494565b602090810291909101015260010161176a565b5060005b6101008110156118325760005b8381101561181f57848286038483815181106117ea576117ea613494565b6020026020010151901b901c8960800151828151811061180c5761180c613494565b60209081029190910101526001016117cc565b5061182b8989886113c6565b84016117bf565b505050505050505050565b7f00000000000000000000000000000000000000000000000000000000000000008210156118985761189384847f0000000000000000000000000000000000000000000000000000000000000000850384611c33565b610c8a565b7f00000000000000000000000000000000000000000000000000000000000000008210156118ee5761189384847f0000000000000000000000000000000000000000000000000000000000000000850384611cf8565b7f00000000000000000000000000000000000000000000000000000000000000008210156119445761189384847f0000000000000000000000000000000000000000000000000000000000000000850384611d7d565b7f000000000000000000000000000000000000000000000000000000000000000082101561199a5761189384847f000000000000000000000000000000000000000000000000000000000000000085038461227a565b7f00000000000000000000000000000000000000000000000000000000000000008210156119f05761189384847f00000000000000000000000000000000000000000000000000000000000000008503846125be565b7f00000000000000000000000000000000000000000000000000000000000000008203915060028210611a7f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4d41585f4f50434f444500000000000000000000000000000000000000000000604482015260640161049d565b81611ae557600084806020019051810190611a9a9190613837565b90508073ffffffffffffffffffffffffffffffffffffffff168460200151856000015181518110611acd57611acd613494565b60209081029190910101525082516001018352610c8a565b6001821415610c8a576065546020840151845181518110611b0857611b08613494565b602090810291909101015250508051600101905250565b6060815182604051602001611b35929190613854565b6040516020818303038152906040529050919050565b6060833b80611b6a5750506040805160208101909152600081526103a3565b80841115611b885750506040805160208101909152600081526103a3565b83831015611bd3576040517f2c4a89fa00000000000000000000000000000000000000000000000000000000815260048101829052602481018590526044810184905260640161049d565b8383038482036000828210611be85782611bea565b815b60408051603f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168101909152818152955090508087602087018a3c505050509392505050565b60028210611c9d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4d41585f4f50434f444500000000000000000000000000000000000000000000604482015260640161049d565b81611cd457438360200151846000015181518110611cbd57611cbd613494565b602090810291909101015282516001018352610c8a565b6001821415610c8a57428360200151846000015181518110611b0857611b08613494565b60018210611d62576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4d41585f4f50434f444500000000000000000000000000000000000000000000604482015260640161049d565b602083015183518151309291908110611b0857611b08613494565b60068210611de7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4d41585f4f50434f444500000000000000000000000000000000000000000000604482015260640161049d565b600082611f36575082517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81018452602084015180517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe9092019182908110611e5257611e52613494565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1663e053ea3185602001518360010181518110611e8e57611e8e613494565b60200260200101516040518263ffffffff1660e01b8152600401611ece919073ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b602060405180830381865afa158015611eeb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f0f91906138eb565b84602001518281518110611f2557611f25613494565b602002602001018181525050612273565b6001831415611f91577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8460200151856000015181518110611f7a57611f7a613494565b602090810291909101015283516001018452612273565b6002831415611fb65760008460200151856000015181518110611f7a57611f7a613494565b600383141561206a575082517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0180845260208401518051600091908390811061200257612002613494565b6020026020010151905060008560200151836001018151811061202757612027613494565b6020026020010151905061203b82826128d7565b8660200151848151811061205157612051613494565b6020908102919091010152505083516001018452612273565b6004831415612132575082517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0180845260208401518051600f80851692600486901c9091169160009190859081106120c5576120c5613494565b602002602001015190506000876020015185600101815181106120ea576120ea613494565b6020026020010151905061210082858584611265565b8860200151868151811061211657612116613494565b6020908102919091010152505085516001018652506122739050565b6005831415612273575082517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff601f8316918290030180855290600783901c906003600585901c16908360008267ffffffffffffffff81111561219757612197612ea3565b6040519080825280602002602001820160405280156121c0578160200160208202803683370190505b50905060005b8381101561221557896020015183815181106121e4576121e4613494565b60200260200101518282815181106121fe576121fe613494565b6020908102919091010152600192830192016121c6565b5060008960200151838151811061222e5761222e613494565b6020026020010151905061224482828888612936565b8a60200151888151811061225a5761225a613494565b6020908102919091010152505087516001018852505050505b5050505050565b600882106122e4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4d41585f4f50434f444500000000000000000000000000000000000000000000604482015260640161049d565b825160208401518051838303927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01918391600091908390811061232a5761232a613494565b602002602001015190506000861415612382575b8282101561237d57602087015180516001909301928390811061236357612363613494565b6020026020010151816123769190613423565b905061233e565b61258e565b60018614156123cb575b8282101561237d5760208701518051600190930192839081106123b1576123b1613494565b6020026020010151816123c4919061347d565b905061238c565b6002861415612414575b8282101561237d5760208701518051600190930192839081106123fa576123fa613494565b60200260200101518161240d9190613904565b90506123d5565b600386141561245d575b8282101561237d57602087015180516001909301928390811061244357612443613494565b6020026020010151816124569190613970565b905061241e565b60048614156124a6575b8282101561237d57602087015180516001909301928390811061248c5761248c613494565b60200260200101518161249f9190613984565b9050612467565b60058614156124ee575b8282101561237d5760208701518051600190930192839081106124d5576124d5613494565b6020026020010151816124e89190613ab8565b506124b0565b60068614156125405760005b8383101561253a57602088015180516001909401938490811061251f5761251f613494565b6020026020010151905081811015612535578091505b6124fa565b5061258e565b600786141561258e5760005b8383101561258c57602088015180516001909401938490811061257157612571613494565b6020026020010151905081811115612587578091505b61254c565b505b80876020015185815181106125a5576125a5613494565b6020908102919091010152505050600101909252505050565b60078210612628576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4d41585f4f50434f444500000000000000000000000000000000000000000000604482015260640161049d565b60028210156127745782517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01826126d3578360200151816001018151811061267357612673613494565b60200260200101516126ab838660200151848151811061269557612695613494565b6020026020010151612a8690919063ffffffff16565b02846020015182815181106126c2576126c2613494565b602002602001018181525050612748565b600183141561274857836020015181600101815181106126f5576126f5613494565b6020026020010151612717838660200151848151811061269557612695613494565b8161272457612724613941565b048460200151828151811061273b5761273b613494565b6020026020010181815250505b5082517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018352610c8a565b60058210156128865782517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0160028314156127eb576127c4828560200151838151811061269557612695613494565b846020015182815181106127da576127da613494565b602002602001018181525050612880565b6003831415612824576127c4828560200151838151811061280e5761280e613494565b6020026020010151612ae890919063ffffffff16565b60048314156128805761285d828560200151838151811061284757612847613494565b6020026020010151612b1990919063ffffffff16565b8460200151828151811061287357612873613494565b6020026020010181815250505b50610c8a565b60058214156128b257602083015183518151670de0b6b3a76400009291908110611cbd57611cbd613494565b6006821415610c8a5760128360200151846000015181518110611b0857611b08613494565b60008060015b6008811161292e5760006128f18683612b57565b905060006128ff8684612b57565b9050600061290d8383612c0c565b905061291d856001860383612c22565b945050600190920191506128dd9050565b509392505050565b835160009081908190819060015b60088111612a785760009250828761297d57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff612981565b5060005b60005b83811015612a36576129af8c82815181106129a1576129a1613494565b602002602001015184612b57565b95508a8611612a0157886129ce576129c78683612cac565b91506129f8565b60018914156129e1576129c78683612cc2565b6002891480156129ef575084155b156129f8578591505b60019450612a2e565b89612a2e577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9150612a36565b600101612984565b5083612a5f57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b612a6d866001840383612c22565b955050600101612944565b509298975050505050505050565b60008160121415612a9857508161037e565b8160121115612ac857612aac82601261347d565b612ab790600a613ab8565b612ac19084613904565b905061037e565b612ad360128361347d565b612ade90600a613ab8565b612ac19084613970565b60006012821415612afa57508161037e565b8160121115612b0e57612ad382601261347d565b612aac60128361347d565b600081810b612b2957508161037e565b60008260000b1315612b4057612ab782600a613ac4565b612b4c82196001613ad3565b612ade90600a613ac4565b6000816008811115612bc5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4d41585f54494552000000000000000000000000000000000000000000000000604482015260640161049d565b82612bd35760009150612c05565b63ffffffff60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85010285901c1691505b5092915050565b6000818311612c1c5760006103a3565b50900390565b6000826008811115612c90576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4d41585f54494552000000000000000000000000000000000000000000000000604482015260640161049d565b505060209190910290811b63ffffffff90911b19919091161790565b6000818310612cbb57816103a3565b5090919050565b600081831015612cbb57816103a3565b828054612cde906133a6565b90600052602060002090601f016020900481019282612d005760008555612d46565b82601f10612d1957805160ff1916838001178555612d46565b82800160010185558215612d46579182015b82811115612d46578251825591602001919060010190612d2b565b50612d52929150612d56565b5090565b5b80821115612d525760008155600101612d57565b60005b83811015612d86578181015183820152602001612d6e565b83811115610c8a5750506000910152565b60008151808452612daf816020860160208601612d6b565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006103a36020830184612d97565b73ffffffffffffffffffffffffffffffffffffffff81168114612e1657600080fd5b50565b60008060408385031215612e2c57600080fd5b8235612e3781612df4565b946020939093013593505050565b600080600060608486031215612e5a57600080fd5b8335612e6581612df4565b92506020840135612e7581612df4565b929592945050506040919091013590565b600060208284031215612e9857600080fd5b81356103a381612df4565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516080810167ffffffffffffffff81118282101715612ef557612ef5612ea3565b60405290565b6040516060810167ffffffffffffffff81118282101715612ef557612ef5612ea3565b60405160a0810167ffffffffffffffff81118282101715612ef557612ef5612ea3565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715612f8857612f88612ea3565b604052919050565b600067ffffffffffffffff821115612faa57612faa612ea3565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600082601f830112612fe757600080fd5b8135612ffa612ff582612f90565b612f41565b81815284602083860101111561300f57600080fd5b816020850160208301376000918101602001919091529392505050565b600067ffffffffffffffff82111561304657613046612ea3565b5060051b60200190565b600082601f83011261306157600080fd5b81356020613071612ff58361302c565b82815260059290921b8401810191818101908684111561309057600080fd5b8286015b848110156130ab5780358352918301918301613094565b509695505050505050565b6000608082840312156130c857600080fd5b6130d0612ed2565b9050813567ffffffffffffffff808211156130ea57600080fd5b818401915084601f8301126130fe57600080fd5b8135602061310e612ff58361302c565b82815260059290921b8401810191818101908884111561312d57600080fd5b8286015b84811015613165578035868111156131495760008081fd5b6131578b86838b0101612fd6565b845250918301918301613131565b508652508581013593508284111561317c57600080fd5b61318887858801613050565b8186015250505050604082013560408201526060820135606082015292915050565b6000602082840312156131bc57600080fd5b813567ffffffffffffffff808211156131d457600080fd5b90830190606082860312156131e857600080fd5b6131f0612efb565b8235801515811461320057600080fd5b815260208301358281111561321457600080fd5b83016080818803121561322657600080fd5b61322e612ed2565b81358481111561323d57600080fd5b61324989828501612fd6565b82525060208201358481111561325e57600080fd5b61326a89828501612fd6565b602083015250604082013561327e81612df4565b806040830152506060820135606082015280602084015250506040830135828111156132a957600080fd5b6132b5878286016130b6565b60408301525095945050505050565b6000806000606084860312156132d957600080fd5b83356132e481612df4565b925060208401359150604084013567ffffffffffffffff81111561330757600080fd5b61331386828701612fd6565b9150509250925092565b6000806040838503121561333057600080fd5b823561333b81612df4565b9150602083013567ffffffffffffffff81111561335757600080fd5b61336385828601612fd6565b9150509250929050565b6000806040838503121561338057600080fd5b823561338b81612df4565b9150602083013561339b81612df4565b809150509250929050565b600181811c908216806133ba57607f821691505b602082108114156116a3577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115613436576134366133f4565b500190565b600073ffffffffffffffffffffffffffffffffffffffff8086168352808516602084015250606060408301526134746060830184612d97565b95945050505050565b60008282101561348f5761348f6133f4565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081518084526020808501945080840160005b838110156134f3578151875295820195908201906001016134d7565b509495945050505050565b80518252600060208083015160a08286015261351d60a08601826134c3565b9050604084015185820360408701528181518084528484019150848160051b850101858401935060005b82811015613593577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0868303018452613581828651612d97565b94870194938701939150600101613547565b506060880151955088810360608a01526135ad81876134c3565b955050505050506080830151848203608086015261347482826134c3565b6020815260006103a360208301846134fe565b600073ffffffffffffffffffffffffffffffffffffffff80861683528085166020840152506060604083015261347460608301846134fe565b600082601f83011261362857600080fd5b81516020613638612ff58361302c565b82815260059290921b8401810191818101908684111561365757600080fd5b8286015b848110156130ab578051835291830191830161365b565b600082601f83011261368357600080fd5b81516020613693612ff58361302c565b82815260059290921b840181019181810190868411156136b257600080fd5b8286015b848110156130ab57805167ffffffffffffffff8111156136d65760008081fd5b8701603f810189136136e85760008081fd5b8481015160406136fa612ff583612f90565b8281528b8284860101111561370f5760008081fd5b61371e83898301848701612d6b565b86525050509183019183016136b6565b60006020828403121561374057600080fd5b815167ffffffffffffffff8082111561375857600080fd5b9083019060a0828603121561376c57600080fd5b613774612f1e565b8251815260208301518281111561378a57600080fd5b61379687828601613617565b6020830152506040830151828111156137ae57600080fd5b6137ba87828601613672565b6040830152506060830151828111156137d257600080fd5b6137de87828601613617565b6060830152506080830151828111156137f657600080fd5b61380287828601613617565b60808301525095945050505050565b600081526000825161382a816001850160208701612d6b565b9190910160010192915050565b60006020828403121561384957600080fd5b81516103a381612df4565b7f630000000000000000000000000000000000000000000000000000000000000081527fffffffff000000000000000000000000000000000000000000000000000000008360e01b1660018201527f80600e6000396000f300000000000000000000000000000000000000000000006005820152600082516138dd81600e850160208701612d6b565b91909101600e019392505050565b6000602082840312156138fd57600080fd5b5051919050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561393c5761393c6133f4565b500290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60008261397f5761397f613941565b500490565b60008261399357613993613941565b500690565b600181815b808511156139f157817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156139d7576139d76133f4565b808516156139e457918102915b93841c939080029061399d565b509250929050565b600082613a085750600161037e565b81613a155750600061037e565b8160018114613a2b5760028114613a3557613a51565b600191505061037e565b60ff841115613a4657613a466133f4565b50506001821b61037e565b5060208310610133831016604e8410600b8410161715613a74575081810a61037e565b613a7e8383613998565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115613ab057613ab06133f4565b029392505050565b60006103a383836139f9565b60006103a360ff8416836139f9565b600060ff821660ff84168060ff03821115613af057613af06133f4565b01939250505056fea264697066735822122007248a986e4e1e49d0ca786bbb22b52c53eb80efbb57f3c404814172b37fde7264736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80632ea72a49146100465780638dbdd92614610083578063fc91a89714610096575b600080fd5b61005961005436600461044e565b6100df565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100596100913660046104c0565b6101fd565b6100cf6100a4366004610527565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205460ff1690565b604051901515815260200161007a565b600060026000541415610153576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b6002600090815561016484846102a0565b73ffffffffffffffffffffffffffffffffffffffff811660008181526001602081815260409283902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169092179091558151338152908101929092529192507f7da70c4e5387d7038610b79ca7d304caaef815826e51e67cf247135387a79bce910160405180910390a160016000559392505050565b60003073ffffffffffffffffffffffffffffffffffffffff16632ea72a498360405160200161022c91906107ca565b6040516020818303038152906040526040518263ffffffff1660e01b81526004016102579190610946565b6020604051808303816000875af1158015610276573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029a9190610959565b92915050565b6000806102af83850185610c6e565b905060006102dc7f000000000000000000000000000000000000000000000000000000000000000061036c565b6040517f814e3a8e00000000000000000000000000000000000000000000000000000000815290915073ffffffffffffffffffffffffffffffffffffffff82169063814e3a8e90610331908590600401610e71565b600060405180830381600087803b15801561034b57600080fd5b505af115801561035f573d6000803e3d6000fd5b5092979650505050505050565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260601b60148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f091505073ffffffffffffffffffffffffffffffffffffffff8116610449576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f455243313136373a20637265617465206661696c656400000000000000000000604482015260640161014a565b919050565b6000806020838503121561046157600080fd5b823567ffffffffffffffff8082111561047957600080fd5b818501915085601f83011261048d57600080fd5b81358181111561049c57600080fd5b8660208285010111156104ae57600080fd5b60209290920196919550909350505050565b6000602082840312156104d257600080fd5b813567ffffffffffffffff8111156104e957600080fd5b8201606081850312156104fb57600080fd5b9392505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461052457600080fd5b50565b60006020828403121561053957600080fd5b81356104fb81610502565b8035801515811461044957600080fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8183360301811261058857600080fd5b90910192915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126105c657600080fd5b830160208101925035905067ffffffffffffffff8111156105e657600080fd5b8036038313156105f557600080fd5b9250929050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261067a57600080fd5b830160208101925035905067ffffffffffffffff81111561069a57600080fd5b8060051b36038313156105f557600080fd5b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156106de57600080fd5b8260051b8083602087013760009401602001938452509192915050565b60006080830161070b8384610645565b608086528281845260a08701905060a08260051b88010193508260005b83811015610783577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff608987030183526107618286610591565b61076c8882846105fc565b975050506020928301929190910190600101610728565b50505050506107956020840184610645565b85830360208701526107a88382846106ac565b9250505060408301356040850152606083013560608501528091505092915050565b602081526107d782610544565b1515602082015260006107ed6020840184610554565b606060408401526107fe8182610591565b608080860152610813610100860182846105fc565b9150506108236020830183610591565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff808684030160a08701526108588382846105fc565b92505050604082013561086a81610502565b73ffffffffffffffffffffffffffffffffffffffff1660c0850152606082013560e085015261089c6040860186610554565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08482030160608501526108d281836106fb565b95945050505050565b6000815180845260005b81811015610901576020818501810151868301820152016108e5565b81811115610913576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006104fb60208301846108db565b60006020828403121561096b57600080fd5b81516104fb81610502565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516080810167ffffffffffffffff811182821017156109c8576109c8610976565b60405290565b6040516060810167ffffffffffffffff811182821017156109c8576109c8610976565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715610a3857610a38610976565b604052919050565b600067ffffffffffffffff831115610a5a57610a5a610976565b610a8b60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f860116016109f1565b9050828152838383011115610a9f57600080fd5b828260208301376000602084830101529392505050565b600082601f830112610ac757600080fd5b6104fb83833560208501610a40565b600067ffffffffffffffff821115610af057610af0610976565b5060051b60200190565b600082601f830112610b0b57600080fd5b81356020610b20610b1b83610ad6565b6109f1565b82815260059290921b84018101918181019086841115610b3f57600080fd5b8286015b84811015610b5a5780358352918301918301610b43565b509695505050505050565b600060808284031215610b7757600080fd5b610b7f6109a5565b9050813567ffffffffffffffff80821115610b9957600080fd5b818401915084601f830112610bad57600080fd5b81356020610bbd610b1b83610ad6565b82815260059290921b84018101918181019088841115610bdc57600080fd5b8286015b84811015610c2957803586811115610bf85760008081fd5b8701603f81018b13610c0a5760008081fd5b610c1b8b8683013560408401610a40565b845250918301918301610be0565b5086525085810135935082841115610c4057600080fd5b610c4c87858801610afa565b8186015250505050604082013560408201526060820135606082015292915050565b600060208284031215610c8057600080fd5b813567ffffffffffffffff80821115610c9857600080fd5b9083019060608286031215610cac57600080fd5b610cb46109ce565b610cbd83610544565b8152602083013582811115610cd157600080fd5b830160808188031215610ce357600080fd5b610ceb6109a5565b813584811115610cfa57600080fd5b610d0689828501610ab6565b825250602082013584811115610d1b57600080fd5b610d2789828501610ab6565b6020830152506040820135610d3b81610502565b80604083015250606082013560608201528060208401525050604083013582811115610d6657600080fd5b610d7287828601610b65565b60408301525095945050505050565b600081518084526020808501945080840160005b83811015610db157815187529582019590820190600101610d95565b509495945050505050565b60006080830182516080855281815180845260a08701915060a08160051b88010193506020808401935060005b82811015610e35577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60898703018452610e238686516108db565b95509381019392810192600101610de9565b5080870151935087850381890152505050610e508282610d81565b91505060408301516040850152606083015160608501528091505092915050565b6020815281511515602082015260006020830151606060408401528051608080850152610ea26101008501826108db565b905060208201517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff808583030160a0860152610edd82826108db565b91505073ffffffffffffffffffffffffffffffffffffffff60408301511660c0850152606082015160e0850152604085015191507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08482030160608501526108d28183610dbc56fea2646970667358221220c6fff24710c6249d924572f9a27721d21aa60e15f3328a57ea666f69f85b6d6364736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createChild(bytes)": {
        "params": {
          "data_": "Encoded data to pass down to child contract constructor."
        },
        "returns": {
          "_0": "New child contract address."
        }
      },
      "createChildTyped((bool,(string,string,address,uint256),(bytes[],uint256[],uint256,uint256)))": {
        "params": {
          "config_": "`EmissionsERC20` constructor configuration."
        },
        "returns": {
          "_0": "New `EmissionsERC20` child contract address."
        }
      },
      "isChild(address)": {
        "params": {
          "maybeChild_": "Address of child contract to look up."
        },
        "returns": {
          "_0": "Returns `true` if address is a contract created by this contract factory, otherwise `false`."
        }
      }
    },
    "title": "EmissionsERC20Factory",
    "version": 1
  },
  "userdoc": {
    "events": {
      "Implementation(address,address)": {
        "notice": "Factories that clone a template contract MUST emit an event any time they set the implementation being cloned. Factories that deploy new contracts without cloning do NOT need to emit this."
      },
      "NewChild(address,address)": {
        "notice": "Whenever a new child contract is deployed, a `NewChild` event containing the new child contract address MUST be emitted."
      }
    },
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Build the reference implementation to clone for each child."
      },
      "createChild(bytes)": {
        "notice": "Implements `IFactory`. Calls the `_createChild` hook that inheriting contracts must override. Registers child contract address such that `isChild` is `true`. Emits `NewChild` event."
      },
      "createChildTyped((bool,(string,string,address,uint256),(bytes[],uint256[],uint256,uint256)))": {
        "notice": "Allows calling `createChild` with `EmissionsERC20Config` struct. Use original `Factory` `createChild` function signature if function parameters are already encoded."
      },
      "isChild(address)": {
        "notice": "Implements `IFactory`. Checks if address is registered as a child contract of this factory."
      }
    },
    "notice": "Factory for deploying and registering `EmissionsERC20` contracts.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3812,
        "contract": "contracts/claim/EmissionsERC20Factory.sol:EmissionsERC20Factory",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 10285,
        "contract": "contracts/claim/EmissionsERC20Factory.sol:EmissionsERC20Factory",
        "label": "contracts",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
