{
  "address": "0x2b730c060FFA83Ce5D2B29016591874f31405A23",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Implementation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "child",
          "type": "address"
        }
      ],
      "name": "NewChild",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data_",
          "type": "bytes"
        }
      ],
      "name": "createChild",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin_",
          "type": "address"
        }
      ],
      "name": "createChildTyped",
      "outputs": [
        {
          "internalType": "contract Verify",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "maybeChild_",
          "type": "address"
        }
      ],
      "name": "isChild",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3b8433896c61fedc8a1977e307bade5828e76f28bd17d2603e8930ad6f247105",
  "receipt": {
    "to": null,
    "from": "0xbF334f8BD1420a1CbFE15407f73919424934B1B3",
    "contractAddress": "0x2b730c060FFA83Ce5D2B29016591874f31405A23",
    "transactionIndex": 0,
    "gasUsed": "25436970",
    "logsBloom": "0x
    "blockHash": "0x84cb15abcb17036435c191bc432eb89a2604af971a368ef4da570857e8651202  ",
    "transactionHash": "0x3b8433896c61fedc8a1977e307bade5828e76f28bd17d2603e8930ad6f247105",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 26117811,
        "transactionHash": "0x3b8433896c61fedc8a1977e307bade5828e76f28bd17d2603e8930ad6f247105",
        "address": "0x2b730c060FFA83Ce5D2B29016591874f31405A23",
        "topics": [
          "0x7fac34ecf0b1b374cd9659e3d17db602659d53f1162b1f20142e6c02694aed70"
        ],
        "data": "0x000000000000000000000000bf334f8bd1420a1cbfe15407f73919424934b1b3000000000000000000000000fd53466d31781aabf8d169da9d4b9743bf67dfc4",
        "logIndex": 0,
        "blockHash": "0x84cb15abcb17036435c191bc432eb89a2604af971a368ef4da570857e8651202  "
      }
    ],
    "blockNumber": 26117811,
    "cumulativeGasUsed": "25436970",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9e85ba39dabcbad721cb8b95134928f1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Implementation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"child\",\"type\":\"address\"}],\"name\":\"NewChild\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"createChild\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"}],\"name\":\"createChildTyped\",\"outputs\":[{\"internalType\":\"contract Verify\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maybeChild_\",\"type\":\"address\"}],\"name\":\"isChild\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createChild(bytes)\":{\"params\":{\"data_\":\"Encoded data to pass down to child contract constructor.\"},\"returns\":{\"_0\":\"New child contract address.\"}},\"createChildTyped(address)\":{\"params\":{\"admin_\":\"`address` of the `Verify` admin.\"},\"returns\":{\"_0\":\"New `Verify` child contract address.\"}},\"isChild(address)\":{\"params\":{\"maybeChild_\":\"Address of child contract to look up.\"},\"returns\":{\"_0\":\"Returns `true` if address is a contract created by this contract factory, otherwise `false`.\"}}},\"title\":\"VerifyFactory\",\"version\":1},\"userdoc\":{\"events\":{\"Implementation(address,address)\":{\"notice\":\"Factories that clone a template contract MUST emit an event any time they set the implementation being cloned. Factories that deploy new contracts without cloning do NOT need to emit this.\"},\"NewChild(address,address)\":{\"notice\":\"Whenever a new child contract is deployed, a `NewChild` event containing the new child contract address MUST be emitted.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Build the reference implementation to clone for each child.\"},\"createChild(bytes)\":{\"notice\":\"Implements `IFactory`. Calls the `_createChild` hook that inheriting contracts must override. Registers child contract address such that `isChild` is `true`. Emits `NewChild` event.\"},\"createChildTyped(address)\":{\"notice\":\"Typed wrapper for `createChild` with admin address. Use original `Factory` `createChild` function signature if function parameters are already encoded.\"},\"isChild(address)\":{\"notice\":\"Implements `IFactory`. Checks if address is registered as a child contract of this factory.\"}},\"notice\":\"Factory for creating and deploying `Verify` contracts.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/verify/VerifyFactory.sol\":\"VerifyFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4a1a0ba12bf1a33f10d9fe226278cf59675c0b929d29e4da99658a079b27fb84\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x1cc0efb01cbf008b768fd7b334786a6e358809198bb7e67f1c530af4957c6a21\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x4823752b07b8ea4ca971b217e39457930e7cb103c2c91e2a29729e5ca907e4f0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/factory/Factory.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity ^0.8.10;\\n\\nimport {IFactory} from \\\"./IFactory.sol\\\";\\n// solhint-disable-next-line max-line-length\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n/// @title Factory\\n/// @notice Base contract for deploying and registering child contracts.\\nabstract contract Factory is IFactory, ReentrancyGuard {\\n    /// @dev state to track each deployed contract address. A `Factory` will\\n    /// never lie about deploying a child, unless `isChild` is overridden to do\\n    /// so.\\n    mapping(address => bool) private contracts;\\n\\n    /// Implements `IFactory`.\\n    ///\\n    /// `_createChild` hook must be overridden to actually create child\\n    /// contract.\\n    ///\\n    /// Implementers may want to overload this function with a typed equivalent\\n    /// to expose domain specific structs etc. to the compiled ABI consumed by\\n    /// tooling and other scripts. To minimise gas costs for deployment it is\\n    /// expected that the tooling will consume the typed ABI, then encode the\\n    /// arguments and pass them to this function directly.\\n    ///\\n    /// @param data_ ABI encoded data to pass to child contract constructor.\\n    function _createChild(bytes calldata data_)\\n        internal\\n        virtual\\n        returns (address)\\n    {} // solhint-disable-line no-empty-blocks\\n\\n    /// Implements `IFactory`.\\n    ///\\n    /// Calls the `_createChild` hook that inheriting contracts must override.\\n    /// Registers child contract address such that `isChild` is `true`.\\n    /// Emits `NewChild` event.\\n    ///\\n    /// @param data_ Encoded data to pass down to child contract constructor.\\n    /// @return New child contract address.\\n    function createChild(bytes calldata data_)\\n        external\\n        virtual\\n        override\\n        nonReentrant\\n        returns (address)\\n    {\\n        // Create child contract using hook.\\n        address child_ = _createChild(data_);\\n        // Register child contract address to `contracts` mapping.\\n        contracts[child_] = true;\\n        // Emit `NewChild` event with child contract address.\\n        emit IFactory.NewChild(msg.sender, child_);\\n        return child_;\\n    }\\n\\n    /// Implements `IFactory`.\\n    ///\\n    /// Checks if address is registered as a child contract of this factory.\\n    ///\\n    /// @param maybeChild_ Address of child contract to look up.\\n    /// @return Returns `true` if address is a contract created by this\\n    /// contract factory, otherwise `false`.\\n    function isChild(address maybeChild_)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return contracts[maybeChild_];\\n    }\\n}\\n\",\"keccak256\":\"0xe97bf06e74908b9a590a89dbe1d3189ec7393dfc63c18ff4e141373c71f99d44\",\"license\":\"CAL\"},\"contracts/factory/IFactory.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity ^0.8.10;\\n\\ninterface IFactory {\\n    /// Whenever a new child contract is deployed, a `NewChild` event\\n    /// containing the new child contract address MUST be emitted.\\n    event NewChild(address sender, address child);\\n\\n    /// Factories that clone a template contract MUST emit an event any time\\n    /// they set the implementation being cloned. Factories that deploy new\\n    /// contracts without cloning do NOT need to emit this.\\n    event Implementation(address sender, address implementation);\\n\\n    /// Creates a new child contract.\\n    ///\\n    /// @param data_ Domain specific data for the child contract constructor.\\n    /// @return New child contract address.\\n    function createChild(bytes calldata data_) external returns (address);\\n\\n    /// Checks if address is registered as a child contract of this factory.\\n    ///\\n    /// Addresses that were not deployed by `createChild` MUST NOT return\\n    /// `true` from `isChild`. This is CRITICAL to the security guarantees for\\n    /// any contract implementing `IFactory`.\\n    ///\\n    /// @param maybeChild_ Address to check registration for.\\n    /// @return `true` if address was deployed by this contract factory,\\n    /// otherwise `false`.\\n    function isChild(address maybeChild_) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x560fd102f258d95fa5ac662f3056bfaae0934d754aa3e2c5710d4bc7ca7d5be6\",\"license\":\"CAL\"},\"contracts/verify/Verify.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./libraries/VerifyConstants.sol\\\";\\n\\n/// Records the block a verify session reaches each status.\\n/// If a status is not reached it is left as UNINITIALIZED, i.e. 0xFFFFFFFF.\\n/// Most accounts will never be banned so most accounts will never reach every\\n/// status, which is a good thing.\\n/// @param addedSince Block the address was added else 0xFFFFFFFF.\\n/// @param approvedSince Block the address was approved else 0xFFFFFFFF.\\n/// @param bannedSince Block the address was banned else 0xFFFFFFFF.\\nstruct State {\\n    uint32 addedSince;\\n    uint32 approvedSince;\\n    uint32 bannedSince;\\n}\\n\\n/// Structure of arbitrary evidence to support any action taken.\\n/// Priviledged roles are expected to provide evidence just as applicants as an\\n/// audit trail will be preserved permanently in the logs.\\n/// @param account The account this evidence is relevant to.\\n/// @param data Arbitrary bytes representing evidence. MAY be e.g. a reference\\n/// to a sufficiently decentralised external system such as an IPFS hash.\\nstruct Evidence {\\n    address account;\\n    bytes data;\\n}\\n\\n/// @title Verify\\n/// Trust-minimised contract to record the state of some verification process.\\n/// When some off-chain identity is to be reified on chain there is inherently\\n/// some multi-party, multi-faceted trust relationship. For example, the DID\\n/// (Decentralized Identifiers) specification from W3C outlines that the\\n/// controller and the subject of an identity are two different entities.\\n///\\n/// This is because self-identification is always problematic to the point of\\n/// being uselessly unbelievable.\\n///\\n/// For example, I can simply say \\\"I am the queen of England\\\" and what\\n/// onchain mechanism could possibly check, let alone stop me?\\n/// The same problem exists in any situation where some priviledge or right is\\n/// associated with identity. Consider passports, driver's licenses,\\n/// celebrity status, age, health, accredited investor, social media account,\\n/// etc. etc.\\n///\\n/// Typically crypto can't and doesn't want to deal with this issue. The usual\\n/// scenario is that some system demands personal information, which leads to:\\n///\\n/// - Data breaches that put individual's safety at risk. Consider the December\\n///   2020 leak from Ledger that dumped 270 000 home addresses and phone\\n///   numbers, and another million emails, of hardware wallet owners on a\\n///   public forum.\\n/// - Discriminatory access, undermining an individual's self-sovereign right\\n///   to run a full node, self-host a GUI and broadcast transactions onchain.\\n///   Consider the dydx airdrop of 2021 where metadata about a user's access\\n///   patterns logged on a server were used to deny access to presumed\\n///   Americans over regulatory fears.\\n/// - An entrenched supply chain of centralized actors from regulators, to\\n///   government databases, through KYC corporations, platforms, etc. each of\\n///   which holds an effective monopoly over, and ability to manipulate user's\\n///   \\\"own\\\" identity.\\n///\\n/// These examples and others are completely antithetical to and undermine the\\n/// safety of an opt-in, permissionless system based on pseudonomous actors\\n/// self-signing actions into a shared space.\\n///\\n/// That said, one can hardly expect a permissionless pseudonomous system\\n/// founded on asynchronous value transfers to succeed without at least some\\n/// concept of curation and reputation.\\n///\\n/// Anon, will you invest YOUR money in anon's project?\\n///\\n/// Clearly for every defi blue chip there are 10 000 scams and nothing onchain\\n/// can stop a scam, this MUST happen at the social layer.\\n///\\n/// Rain protocol is agnostic to how this verification happens. A government\\n/// regulator is going to want a government issued ID cross-referenced against\\n/// international sanctions. A fan of some social media influencer wants to\\n/// see a verified account on that platform. An open source software project\\n/// should show a github profile. A security token may need evidence from an\\n/// accountant showing accredited investor status. There are so many ways in\\n/// which BOTH sides of a fundraise may need to verify something about\\n/// themselves to each other via a THIRD PARTY that Rain cannot assume much.\\n///\\n/// The trust model and process for Rain verification is:\\n///\\n/// - There are many `Verify` contracts, each represents a specific\\n///   verification method with a (hopefully large) set of possible reviewers.\\n/// - The verifyee compiles some evidence that can be referenced in some\\n///   relevant system. It could be a session ID in a KYC provider's database or\\n///   a tweet from a verified account, etc. The evidence is passed to the\\n///   `Verify` contract as raw bytes so it is opaque onchain, but visible as an\\n///   event to verifiers.\\n/// - The verifyee calls `add` _for themselves_ to initialize their state and\\n///   emit the evidence for their account, after which they _cannot change_\\n///   their submission without appealing to someone who can remove. This costs\\n///   gas, so why don't we simply ask the user to sign something and have an\\n///   approver verify the signed data? Because we want to leverage both the\\n///   censorship resistance and asynchronous nature of the underlying\\n///   blockchain. Assuming there are N possible approvers, we want ANY 1 of\\n///   those N approvers to be able to review and approve an application. If the\\n///   user is forced to submit their application directly to one SPECIFIC\\n///   approver we lose this property. In the gasless model the user must then\\n///   rely on their specific approver both being online and not to censor the\\n///   request. It's also possible that many accounts add the same evidence,\\n///   after all it will be public in the event logs, so it is important for\\n///   approvers to verify the PAIRING between account and evidence.\\n/// - ANY account with the `APPROVER` role can review the evidence by\\n///   inspecting the event logs. IF the evidence is valid then the `approve`\\n///   function should be called by the approver.\\n/// - ANY account with the `BANNER` role can veto either an add OR a prior\\n///   approval. In the case of a false positive, i.e. where an account was\\n///   mistakenly approved, an appeal can be made to a banner to update the\\n///   status. Bad accounts SHOULD BE BANNED NOT REMOVED. When an account is\\n///   removed, its onchain state is once again open for the attacker to\\n///   resubmit new fraudulent evidence and potentially be reapproved.\\n///   Once an account is banned, any attempt by the account holder to change\\n///   their status, or an approver to approve will be rejected. Downstream\\n///   consumers of a `State` MUST check for an existing ban.\\n///   - ANY account with the `REMOVER` role can scrub the `State` from an\\n///   account. Of course, this is a blockchain so the state changes are all\\n///   still visible to full nodes and indexers in historical data, in both the\\n///   onchain history and the event logs for each state change. This allows an\\n///   account to appeal to a remover in the case of a MISTAKEN BAN or also in\\n///   the case of a MISTAKEN ADD (e.g. mistake in evidence), effecting a\\n///   \\\"hard reset\\\" at the contract storage level.\\n///\\n/// Banning some account with an invalid session is NOT required. It is\\n/// harmless for an added session to remain as `Status.Added` indefinitely.\\n/// For as long as no approver decides to approve some invalid added session it\\n/// MUST be treated as equivalent to a ban by downstream contracts. This is\\n/// important so that admins are only required to spend gas on useful actions.\\n///\\n/// In addition to `Approve`, `Ban`, `Remove` there are corresponding events\\n/// `RequestApprove`, `RequestBan`, `RequestRemove` that allow for admins to be\\n/// notified that some new evidence must be considered that may lead to each\\n/// action. `RequestApprove` is automatically submitted as part of the `add`\\n/// call, but `RequestBan` and `RequestRemove` must be manually called\\n///\\n/// Rain uses standard Open Zeppelin `AccessControl` and is agnostic to how the\\n/// approver/remover/banner roles and associated admin roles are managed.\\n/// Ideally the more credibly neutral qualified parties assigend to each role\\n/// for each `Verify` contract the better. This improves the censorship\\n/// resistance of the verification process and the responsiveness of the\\n/// end-user experience.\\n///\\n/// Ideally the admin account assigned at deployment would renounce their admin\\n/// rights after establishing a more granular and appropriate set of accounts\\n/// with each specific role.\\ncontract Verify is AccessControl, Initializable {\\n    /// Any state never held is UNINITIALIZED.\\n    /// Note that as per default evm an unset state is 0 so always check the\\n    /// `addedSince` block on a `State` before trusting an equality check on\\n    /// any other block number.\\n    /// (i.e. removed or never added)\\n    uint32 private constant UNINITIALIZED = type(uint32).max;\\n\\n    /// Emitted when evidence is first submitted to approve an account.\\n    /// The requestor is always the `msg.sender` of the user calling `add`.\\n    /// @param sender The `msg.sender` that submitted its own evidence.\\n    /// @param evidence The evidence to support an approval.\\n    /// NOT written to contract storage.\\n    event RequestApprove(address sender, Evidence evidence);\\n    /// Emitted when a previously added account is approved.\\n    /// @param sender The `msg.sender` that approved `account`.\\n    /// @param evidence The approval data.\\n    event Approve(address sender, Evidence evidence);\\n\\n    /// Currently approved accounts can request that any account be banned.\\n    /// The requestor is expected to provide supporting data for the ban.\\n    /// The requestor MAY themselves be banned if vexatious.\\n    /// @param sender The `msg.sender` requesting a ban of `account`.\\n    /// @param evidence Account + data the `requestor` feels will strengthen\\n    /// its case for the ban. NOT written to contract storage.\\n    event RequestBan(address sender, Evidence evidence);\\n    /// Emitted when an added or approved account is banned.\\n    /// @param sender The `msg.sender` that banned `account`.\\n    /// @param evidence Account + the evidence to support a ban.\\n    /// NOT written to contract storage.\\n    event Ban(address sender, Evidence evidence);\\n\\n    /// Currently approved accounts can request that any account be removed.\\n    /// The requestor is expected to provide supporting data for the removal.\\n    /// The requestor MAY themselves be banned if vexatious.\\n    /// @param sender The `msg.sender` requesting a removal of `account`.\\n    /// @param evidence `Evidence` to justify a removal.\\n    event RequestRemove(address sender, Evidence evidence);\\n    /// Emitted when an account is scrubbed from blockchain state.\\n    /// Historical logs still visible offchain of course.\\n    /// @param sender The `msg.sender` that removed `account`.\\n    /// @param evidence `Evidence` to justify the removal.\\n    event Remove(address sender, Evidence evidence);\\n\\n    uint256 public constant REQUEST_APPROVE = 0;\\n    uint256 public constant REQUEST_BAN = 1;\\n    uint256 public constant REQUEST_REMOVE = 2;\\n\\n    /// Admin role for `APPROVER`.\\n    bytes32 public constant APPROVER_ADMIN = keccak256(\\\"APPROVER_ADMIN\\\");\\n    /// Role for `APPROVER`.\\n    bytes32 public constant APPROVER = keccak256(\\\"APPROVER\\\");\\n\\n    /// Admin role for `REMOVER`.\\n    bytes32 public constant REMOVER_ADMIN = keccak256(\\\"REMOVER_ADMIN\\\");\\n    /// Role for `REMOVER`.\\n    bytes32 public constant REMOVER = keccak256(\\\"REMOVER\\\");\\n\\n    /// Admin role for `BANNER`.\\n    bytes32 public constant BANNER_ADMIN = keccak256(\\\"BANNER_ADMIN\\\");\\n    /// Role for `BANNER`.\\n    bytes32 public constant BANNER = keccak256(\\\"BANNER\\\");\\n\\n    // Account => State\\n    mapping(address => State) private states;\\n\\n    /// Defines RBAC logic for each role under Open Zeppelin.\\n    /// @param admin_ The address to ASSIGN ALL ADMIN ROLES to initially. This\\n    /// address is free and encouraged to delegate fine grained permissions to\\n    /// many other sub-admin addresses, then revoke it's own \\\"root\\\" access.\\n    function initialize(address admin_) external initializer {\\n        require(admin_ != address(0), \\\"0_ACCOUNT\\\");\\n\\n        // `APPROVER_ADMIN` can admin each other in addition to\\n        // `APPROVER` addresses underneath.\\n        _setRoleAdmin(APPROVER_ADMIN, APPROVER_ADMIN);\\n        _setRoleAdmin(APPROVER, APPROVER_ADMIN);\\n\\n        // `REMOVER_ADMIN` can admin each other in addition to\\n        // `REMOVER` addresses underneath.\\n        _setRoleAdmin(REMOVER_ADMIN, REMOVER_ADMIN);\\n        _setRoleAdmin(REMOVER, REMOVER_ADMIN);\\n\\n        // `BANNER_ADMIN` can admin each other in addition to\\n        // `BANNER` addresses underneath.\\n        _setRoleAdmin(BANNER_ADMIN, BANNER_ADMIN);\\n        _setRoleAdmin(BANNER, BANNER_ADMIN);\\n\\n        // It is STRONGLY RECOMMENDED that the `admin_` delegates specific\\n        // admin roles then revokes the `DEFAULT_ADMIN_ROLE` and the `X_ADMIN`\\n        // roles.\\n        _setupRole(APPROVER_ADMIN, admin_);\\n        _setupRole(REMOVER_ADMIN, admin_);\\n        _setupRole(BANNER_ADMIN, admin_);\\n    }\\n\\n    /// Typed accessor into states.\\n    /// @param account_ The account to return the current `State` for.\\n    function state(address account_) external view returns (State memory) {\\n        return states[account_];\\n    }\\n\\n    /// Derives a single `Status` from a `State` and a reference block number.\\n    /// @param state_ The raw `State` to reduce into a `Status`.\\n    /// @param blockNumber_ The block number to compare `State` against.\\n    function statusAtBlock(State memory state_, uint256 blockNumber_)\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        // The state hasn't even been added so is picking up block zero as the\\n        // evm fallback value. In this case if we checked other blocks using\\n        // a `<=` equality they would incorrectly return `true` always due to\\n        // also having a `0` fallback value.\\n        // Using `< 1` here to silence slither.\\n        if (state_.addedSince < 1) {\\n            return VerifyConstants.STATUS_NIL;\\n        }\\n        // Banned takes priority over everything.\\n        else if (state_.bannedSince <= blockNumber_) {\\n            return VerifyConstants.STATUS_BANNED;\\n        }\\n        // Approved takes priority over added.\\n        else if (state_.approvedSince <= blockNumber_) {\\n            return VerifyConstants.STATUS_APPROVED;\\n        }\\n        // Added is lowest priority.\\n        else if (state_.addedSince <= blockNumber_) {\\n            return VerifyConstants.STATUS_ADDED;\\n        }\\n        // The `addedSince` block is after `blockNumber_` so `Status` is nil\\n        // relative to `blockNumber_`.\\n        else {\\n            return VerifyConstants.STATUS_NIL;\\n        }\\n    }\\n\\n    /// Requires that `msg.sender` is approved as at the current block.\\n    modifier onlyApproved() {\\n        require(\\n            statusAtBlock(states[msg.sender], block.number) ==\\n                VerifyConstants.STATUS_APPROVED,\\n            \\\"ONLY_APPROVED\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @dev Builds a new `State` for use by `add` and `approve`.\\n    function newState() private view returns (State memory) {\\n        return State(uint32(block.number), UNINITIALIZED, UNINITIALIZED);\\n    }\\n\\n    /// An account adds their own verification evidence.\\n    /// Internally `msg.sender` is used; delegated `add` is not supported.\\n    /// @param data_ The evidence to support approving the `msg.sender`.\\n    function add(bytes calldata data_) external {\\n        // Accounts may NOT change their application to be approved.\\n        // This restriction is the main reason delegated add is not supported\\n        // as it would lead to griefing.\\n        // A mistaken add requires an appeal to a REMOVER to restart the\\n        // process OR a new `msg.sender` (i.e. different wallet address).\\n        // The awkward < 1 here is to silence slither complaining about\\n        // equality checks against `0`. The intent is to ensure that\\n        // `addedSince` is not already set before we set it.\\n        require(states[msg.sender].addedSince < 1, \\\"PRIOR_ADD\\\");\\n        states[msg.sender] = newState();\\n        emit RequestApprove(msg.sender, Evidence(msg.sender, data_));\\n    }\\n\\n    /// Any approved account can request an action be performed by some account\\n    /// with appropriate access. The requestor is expected to provide\\n    /// supporting evidence to justifty the request. Vexatious requstors may\\n    /// find themselves banned, which will at the least remove their ability to\\n    /// submit further requests.\\n    function request(uint256 requestType_, Evidence[] calldata evidences_)\\n        external\\n        onlyApproved\\n    {\\n        if (requestType_ == REQUEST_APPROVE) {\\n            for (uint256 i_ = 0; i_ < evidences_.length; i_++) {\\n                emit RequestApprove(msg.sender, evidences_[i_]);\\n            }\\n        } else if (requestType_ == REQUEST_BAN) {\\n            for (uint256 i_ = 0; i_ < evidences_.length; i_++) {\\n                emit RequestBan(msg.sender, evidences_[i_]);\\n            }\\n        } else if (requestType_ == REQUEST_REMOVE) {\\n            for (uint256 i_ = 0; i_ < evidences_.length; i_++) {\\n                emit RequestRemove(msg.sender, evidences_[i_]);\\n            }\\n        }\\n    }\\n\\n    /// An `APPROVER` can review added evidence and approve accounts.\\n    /// Typically many approvals would be submitted in a single call which is\\n    /// more convenient and gas efficient than sending individual transactions\\n    /// for every approval. However, as there are many individual agents\\n    /// acting concurrently and independently this requires that the approval\\n    /// process be infallible so that no individual approval can rollback the\\n    /// entire batch due to the actions of some other approver/banner. It is\\n    /// possible to approve an already approved or banned account. The\\n    /// `Approve` event will always emit but the approved block will only be\\n    /// set if it was previously uninitialized. A banned account will always\\n    /// be seen as banned when calling `statusAtBlock` regardless of the\\n    /// approval block, even if the approval is more recent than the ban. The\\n    /// only way to reset a ban is to remove and reapprove the account.\\n    /// @param evidences_ All evidence for all approvals.\\n    function approve(Evidence[] calldata evidences_)\\n        external\\n        onlyRole(APPROVER)\\n    {\\n        uint256 dirty_ = 0;\\n        State memory state_;\\n        for (uint256 i_ = 0; i_ < evidences_.length; i_++) {\\n            state_ = states[evidences_[i_].account];\\n            // If the account hasn't been added an approver can still add and\\n            // approve it on their behalf.\\n            if (state_.addedSince < 1) {\\n                state_ = newState();\\n                dirty_ = 1;\\n            }\\n            // If the account hasn't been approved we approve it. As there are\\n            // many approvers operating independently and concurrently we do\\n            // NOT `require` the approval be unique, but we also do NOT change\\n            // the block as the oldest approval is most important. However we\\n            // emit an event for every approval even if the state does not\\n            // change.\\n            // It is possible to approve a banned account but `statusAtBlock`\\n            // will ignore the approval time for any banned account and use the\\n            // banned block only.\\n            if (state_.approvedSince == UNINITIALIZED) {\\n                state_.approvedSince = uint32(block.number);\\n                dirty_ = 1;\\n            }\\n\\n            if (dirty_ > 0) {\\n                states[evidences_[i_].account] = state_;\\n                dirty_ = 0;\\n            }\\n\\n            // Always emit an `Approve` event even if we didn't write state.\\n            // This ensures that supporting evidence hits the logs for offchain\\n            // review.\\n            emit Approve(msg.sender, evidences_[i_]);\\n        }\\n    }\\n\\n    /// A `BANNER` can ban an added OR approved account.\\n    /// @param evidences_ All evidence appropriate for all bans.\\n    function ban(Evidence[] calldata evidences_)\\n        external\\n        onlyRole(BANNER)\\n    {\\n        uint256 dirty_ = 0;\\n        State memory state_;\\n        for (uint256 i_ = 0; i_ < evidences_.length; i_++) {\\n            state_ = states[evidences_[i_].account];\\n\\n            // There is no requirement that an account be formally added before\\n            // it is banned. For example some fraud may be detected in an\\n            // affiliated `Verify` contract and the evidence can be used to ban\\n            // the same address in the current contract.\\n            if (state_.addedSince < 1) {\\n                state_ = newState();\\n                dirty_ = 1;\\n            }\\n            // Respect prior bans by leaving the older block number in place.\\n            if (state_.bannedSince == UNINITIALIZED) {\\n                state_.bannedSince = uint32(block.number);\\n                dirty_ = 1;\\n            }\\n\\n            if (dirty_ > 0) {\\n                states[evidences_[i_].account] = state_;\\n                dirty_ = 0;\\n            }\\n\\n            // Always emit a `Ban` event even if we didn't write state. This\\n            // ensures that supporting evidence hits the logs for offchain\\n            // review.\\n            emit Ban(msg.sender, evidences_[i_]);\\n        }\\n    }\\n\\n    /// A `REMOVER` can scrub state mapping from an account.\\n    /// A malicious account MUST be banned rather than removed.\\n    /// Removal is useful to reset the whole process in case of some mistake.\\n    /// @param evidences_ All evidence to suppor the removal.\\n    function remove(Evidence[] calldata evidences_) external onlyRole(REMOVER) {\\n        for (uint i_ = 0; i_ < evidences_.length; i_++) {\\n            if (states[evidences_[i_].account].addedSince > 0) {\\n                delete(states[evidences_[i_].account]);\\n            }\\n            emit Remove(msg.sender, evidences_[i_]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1dc347461b9ac988e6477ed0bc5c3e5bea3d6d3d7c6e01202166e43aa65458fe\",\"license\":\"CAL\"},\"contracts/verify/VerifyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity ^0.8.10;\\n\\nimport {Factory} from \\\"../factory/Factory.sol\\\";\\nimport {Verify} from \\\"./Verify.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\n\\n/// @title VerifyFactory\\n/// @notice Factory for creating and deploying `Verify` contracts.\\ncontract VerifyFactory is Factory {\\n    /// Template contract to clone.\\n    /// Deployed by the constructor.\\n    address private immutable implementation;\\n\\n    /// Build the reference implementation to clone for each child.\\n    constructor() {\\n        address implementation_ = address(new Verify());\\n        emit Implementation(msg.sender, implementation_);\\n        implementation = implementation_;\\n    }\\n\\n    /// @inheritdoc Factory\\n    function _createChild(bytes calldata data_)\\n        internal\\n        virtual\\n        override\\n        returns (address)\\n    {\\n        address admin_ = abi.decode(data_, (address));\\n        address clone_ = Clones.clone(implementation);\\n        Verify(clone_).initialize(admin_);\\n        return clone_;\\n    }\\n\\n    /// Typed wrapper for `createChild` with admin address.\\n    /// Use original `Factory` `createChild` function signature if function\\n    /// parameters are already encoded.\\n    ///\\n    /// @param admin_ `address` of the `Verify` admin.\\n    /// @return New `Verify` child contract address.\\n    function createChildTyped(address admin_) external returns (Verify) {\\n        return Verify(this.createChild(abi.encode(admin_)));\\n    }\\n}\\n\",\"keccak256\":\"0xd04756518f3422fda8783cdad6d7b70534d210fb0e5f07a8565f59446f91df9f\",\"license\":\"CAL\"},\"contracts/verify/libraries/VerifyConstants.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity ^0.8.10;\\n\\n/// Summary statuses derived from a `State` by comparing the `Since` times\\n/// against a specific block number.\\nlibrary VerifyConstants {\\n    /// Account has not interacted with the system yet or was removed.\\n    uint256 internal constant STATUS_NIL = 0;\\n    /// Account has added evidence for themselves.\\n    uint256 internal constant STATUS_ADDED = 1;\\n    /// Approver has reviewed added/approve evidence and approved the account.\\n    uint256 internal constant STATUS_APPROVED = 2;\\n    /// Banner has reviewed a request to ban an account and banned it.\\n    uint256 internal constant STATUS_BANNED = 3;\\n}\\n\",\"keccak256\":\"0xca104a4834d8b4b62e6d9c4bf76f1fee01993ee73795b166f8674809c995fc36\",\"license\":\"CAL\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b506001600090815560405161002490610096565b604051809103906000f080158015610040573d6000803e3d6000fd5b50604080513381526001600160a01b03831660208201529192507f7fac34ecf0b1b374cd9659e3d17db602659d53f1162b1f20142e6c02694aed70910160405180910390a16001600160a01b03166080526100a3565b61213f8061068883390190565b6080516105ca6100be60003960006102b501526105ca6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80632ea72a4914610046578063b536745114610083578063fc91a89714610096575b600080fd5b610059610054366004610449565b6100df565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100596100913660046104e0565b6101fd565b6100cf6100a43660046104e0565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205460ff1690565b604051901515815260200161007a565b600060026000541415610153576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b60026000908155610164848461029d565b73ffffffffffffffffffffffffffffffffffffffff811660008181526001602081815260409283902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169092179091558151338152908101929092529192507f7da70c4e5387d7038610b79ca7d304caaef815826e51e67cf247135387a79bce910160405180910390a160016000559392505050565b6040805173ffffffffffffffffffffffffffffffffffffffff831660208201526000913091632ea72a4991016040516020818303038152906040526040518263ffffffff1660e01b81526004016102549190610504565b6020604051808303816000875af1158015610273573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102979190610577565b92915050565b6000806102ac838501856104e0565b905060006102d97f0000000000000000000000000000000000000000000000000000000000000000610367565b6040517fc4d66de800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301529192509082169063c4d66de890602401600060405180830381600087803b15801561034657600080fd5b505af115801561035a573d6000803e3d6000fd5b5092979650505050505050565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260601b60148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f091505073ffffffffffffffffffffffffffffffffffffffff8116610444576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f455243313136373a20637265617465206661696c656400000000000000000000604482015260640161014a565b919050565b6000806020838503121561045c57600080fd5b823567ffffffffffffffff8082111561047457600080fd5b818501915085601f83011261048857600080fd5b81358181111561049757600080fd5b8660208285010111156104a957600080fd5b60209290920196919550909350505050565b73ffffffffffffffffffffffffffffffffffffffff811681146104dd57600080fd5b50565b6000602082840312156104f257600080fd5b81356104fd816104bb565b9392505050565b600060208083528351808285015260005b8181101561053157858101830151858201604001528201610515565b81811115610543576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b60006020828403121561058957600080fd5b81516104fd816104bb56fea2646970667358221220254ca48c7d0fc4e48966f47a38b77e42e78f9d33e8bb0d8e4baf764fe2bff78064736f6c634300080a0033608060405234801561001057600080fd5b5061211f806100206000396000f3fe608060405234801561001057600080fd5b50600436106101985760003560e01c80637a0f5079116100e3578063b8c55bfa1161008c578063cd49152611610066578063cd49152614610483578063d547741f14610496578063f214a325146104a957600080fd5b8063b8c55bfa14610436578063ba6581111461045d578063c4d66de81461047057600080fd5b806391d14854116100bd57806391d14854146103df5780639f83922214610423578063a217fddf1461036e57600080fd5b80637a0f50791461039d5780637c7d7f7a146103a557806381792e44146103b857600080fd5b806331e658a51161014557806342c8a14d1161011f57806342c8a14d1461035b5780636c3ceb051461036e5780637547a8671461037657600080fd5b806331e658a51461026c57806336568abe146103215780633d111c7e1461033457600080fd5b8063248a9ca311610176578063248a9ca3146102215780632f2ff15d1461024457806330db8ce61461025957600080fd5b806301ffc9a71461019d578063100ec998146101c55780631e210912146101fa575b600080fd5b6101b06101ab366004611a45565b6104b1565b60405190151581526020015b60405180910390f35b6101ec7f9d65f741849e7609dd1e2c70f0d7da5f5433b36bfcf3ba4d27d2bb08ad2155b181565b6040519081526020016101bc565b6101ec7f2d4d1d70bd81797c3479f5c3f873a5c9203d249659c3b317cdad46367472783c81565b6101ec61022f366004611a87565b60009081526020819052604090206001015490565b610257610252366004611ac9565b61054a565b005b610257610267366004611b41565b610575565b6102f261027a366004611b8d565b60408051606080820183526000808352602080840182905292840181905273ffffffffffffffffffffffffffffffffffffffff9490941684526002825292829020825193840183525463ffffffff80821685526401000000008204811692850192909252680100000000000000009004169082015290565b60408051825163ffffffff908116825260208085015182169083015292820151909216908201526060016101bc565b61025761032f366004611ac9565b6107c2565b6101ec7f5ff1fb0ce9089603e6e193667ed17164e0360a6148f4a39fc194055588948a3181565b6101ec610369366004611beb565b610875565b6101ec600081565b6101ec7f794e4221ebb6dd4e460d558b4ec709511d44017d6610ba89daa896c0684ddfac81565b6101ec600181565b6102576103b3366004611c96565b6108e3565b6101ec7fbb496ca6fee71a17f78592fbc6fc7f04a436edb9c709c4289d6bbfbc5fd45f4d81565b6101b06103ed366004611ac9565b60009182526020828152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b610257610431366004611c96565b610b9b565b6101ec7f5a686c9d070917be517818979fb56f451f007e3ae83e96fb5a22a304929b070d81565b61025761046b366004611cd8565b610d2d565b61025761047e366004611b8d565b610ee6565b610257610491366004611c96565b611259565b6102576104a4366004611ac9565b611509565b6101ec600281565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061054457507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b600082815260208190526040902060010154610566813361152f565b61057083836115ff565b505050565b336000908152600260208181526040928390208351606081018552905463ffffffff8082168352640100000000820481169383019390935268010000000000000000900490911692810192909252906105ce9043610875565b1461063a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4f4e4c595f415050524f5645440000000000000000000000000000000000000060448201526064015b60405180910390fd5b826106be5760005b818110156106b8577f9def0eb63e24d052c362c931f2ab4c31eda642472ddc393a44484906f374ba4d3384848481811061067e5761067e611d4a565b90506020028101906106909190611d79565b60405161069e929190611db7565b60405180910390a1806106b081611ecd565b915050610642565b50505050565b60018314156107405760005b818110156106b8577f1b7bdec72dbe138bce2074865e8cf0347693327c317e9c1fdfe914001d48b5d13384848481811061070657610706611d4a565b90506020028101906107189190611d79565b604051610726929190611db7565b60405180910390a18061073881611ecd565b9150506106ca565b60028314156105705760005b818110156106b8577f9d48392ffd5df4ad821c86aa1f446e2b39cfecb6acd84a5b1dd41e3b4c1defce3384848481811061078857610788611d4a565b905060200281019061079a9190611d79565b6040516107a8929190611db7565b60405180910390a1806107ba81611ecd565b91505061074c565b73ffffffffffffffffffffffffffffffffffffffff81163314610867576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610631565b61087182826116ef565b5050565b60006001836000015163ffffffff16101561089257506000610544565b81836040015163ffffffff16116108ab57506003610544565b81836020015163ffffffff16116108c457506002610544565b825163ffffffff1682106108da57506001610544565b50600092915050565b7f5ff1fb0ce9089603e6e193667ed17164e0360a6148f4a39fc194055588948a3161090e813361152f565b6040805160608101825260008082526020820181905291810182905260005b84811015610b93576002600087878481811061094b5761094b611d4a565b905060200281019061095d9190611d79565b61096b906020810190611b8d565b73ffffffffffffffffffffffffffffffffffffffff16815260208082019290925260409081016000208151606081018352905463ffffffff8082168084526401000000008304821695840195909552680100000000000000009091041691810191909152925060011115610a1757604080516060808201835260008083526020808401829052928401528251908101835263ffffffff4381168252918101829052918201529150600192505b602082015163ffffffff9081161415610a3b5763ffffffff43166020830152600192505b8215610b25578160026000888885818110610a5857610a58611d4a565b9050602002810190610a6a9190611d79565b610a78906020810190611b8d565b73ffffffffffffffffffffffffffffffffffffffff168152602080820192909252604090810160009081208451815494860151959093015163ffffffff90811668010000000000000000027fffffffffffffffffffffffffffffffffffffffff00000000ffffffffffffffff968216640100000000027fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000009096169190941617939093179390931617905592505b7fd140ad1540fe1b6d943b0509d447b34e0719ff7f9c6175d26a870abc89c9304f33878784818110610b5957610b59611d4a565b9050602002810190610b6b9190611d79565b604051610b79929190611db7565b60405180910390a180610b8b81611ecd565b91505061092d565b505050505050565b7f794e4221ebb6dd4e460d558b4ec709511d44017d6610ba89daa896c0684ddfac610bc6813361152f565b60005b828110156106b857600060026000868685818110610be957610be9611d4a565b9050602002810190610bfb9190611d79565b610c09906020810190611b8d565b73ffffffffffffffffffffffffffffffffffffffff16815260208101919091526040016000205463ffffffff161115610cbf5760026000858584818110610c5257610c52611d4a565b9050602002810190610c649190611d79565b610c72906020810190611b8d565b73ffffffffffffffffffffffffffffffffffffffff168152602081019190915260400160002080547fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001690555b7fb6a0d4e5532c50d585db7a2aeb6d4628467d3c969d491458bb46c3dba33c46da33858584818110610cf357610cf3611d4a565b9050602002810190610d059190611d79565b604051610d13929190611db7565b60405180910390a180610d2581611ecd565b915050610bc9565b33600090815260026020526040902054600163ffffffff90911610610dae576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f5052494f525f41444400000000000000000000000000000000000000000000006044820152606401610631565b6040805160608082018352600080835260208084018290529284018190528351918201845263ffffffff43811683528284018181528386018281523380855260028752938790209451855492519151841668010000000000000000027fffffffffffffffffffffffffffffffffffffffff00000000ffffffffffffffff928516640100000000027fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000009094169190941617919091171617909155825180840184528181528351601f86018490048402810184019094528484527f9def0eb63e24d052c362c931f2ab4c31eda642472ddc393a44484906f374ba4d93919290918282019187908790819084018382808284376000920191909152505050915250604051610eda929190611f7c565b60405180910390a15050565b600154610100900460ff16610f015760015460ff1615610f05565b303b155b610f91576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610631565b600154610100900460ff16158015610fd057600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b73ffffffffffffffffffffffffffffffffffffffff821661104d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f305f4143434f554e5400000000000000000000000000000000000000000000006044820152606401610631565b6110777f2d4d1d70bd81797c3479f5c3f873a5c9203d249659c3b317cdad46367472783c806117a6565b6110c17f5ff1fb0ce9089603e6e193667ed17164e0360a6148f4a39fc194055588948a317f2d4d1d70bd81797c3479f5c3f873a5c9203d249659c3b317cdad46367472783c6117a6565b6110eb7f9d65f741849e7609dd1e2c70f0d7da5f5433b36bfcf3ba4d27d2bb08ad2155b1806117a6565b6111357f794e4221ebb6dd4e460d558b4ec709511d44017d6610ba89daa896c0684ddfac7f9d65f741849e7609dd1e2c70f0d7da5f5433b36bfcf3ba4d27d2bb08ad2155b16117a6565b61115f7fbb496ca6fee71a17f78592fbc6fc7f04a436edb9c709c4289d6bbfbc5fd45f4d806117a6565b6111a97f5a686c9d070917be517818979fb56f451f007e3ae83e96fb5a22a304929b070d7fbb496ca6fee71a17f78592fbc6fc7f04a436edb9c709c4289d6bbfbc5fd45f4d6117a6565b6111d37f2d4d1d70bd81797c3479f5c3f873a5c9203d249659c3b317cdad46367472783c836117f1565b6111fd7f9d65f741849e7609dd1e2c70f0d7da5f5433b36bfcf3ba4d27d2bb08ad2155b1836117f1565b6112277fbb496ca6fee71a17f78592fbc6fc7f04a436edb9c709c4289d6bbfbc5fd45f4d836117f1565b801561087157600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555050565b7f5a686c9d070917be517818979fb56f451f007e3ae83e96fb5a22a304929b070d611284813361152f565b6040805160608101825260008082526020820181905291810182905260005b84811015610b9357600260008787848181106112c1576112c1611d4a565b90506020028101906112d39190611d79565b6112e1906020810190611b8d565b73ffffffffffffffffffffffffffffffffffffffff16815260208082019290925260409081016000208151606081018352905463ffffffff808216808452640100000000830482169584019590955268010000000000000000909104169181019190915292506001111561138d57604080516060808201835260008083526020808401829052928401528251908101835263ffffffff4381168252918101829052918201529150600192505b604082015163ffffffff90811614156113b15763ffffffff43166040830152600192505b821561149b5781600260008888858181106113ce576113ce611d4a565b90506020028101906113e09190611d79565b6113ee906020810190611b8d565b73ffffffffffffffffffffffffffffffffffffffff168152602080820192909252604090810160009081208451815494860151959093015163ffffffff90811668010000000000000000027fffffffffffffffffffffffffffffffffffffffff00000000ffffffffffffffff968216640100000000027fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000009096169190941617939093179390931617905592505b7f56ed5bd6a5ed51ea9976f064fa4b26035c05a8d1ef4f4cd92454befc5090e9d2338787848181106114cf576114cf611d4a565b90506020028101906114e19190611d79565b6040516114ef929190611db7565b60405180910390a18061150181611ecd565b9150506112a3565b600082815260208190526040902060010154611525813361152f565b61057083836116ef565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16610871576115858173ffffffffffffffffffffffffffffffffffffffff1660146117fb565b6115908360206117fb565b6040516020016115a1929190611fcb565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a00000000000000000000000000000000000000000000000000000000082526106319160040161204c565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff166108715760008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff85168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556116913390565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16156108715760008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600082815260208190526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b61087182826115ff565b6060600061180a83600261205f565b61181590600261209c565b67ffffffffffffffff81111561182d5761182d611ba8565b6040519080825280601f01601f191660200182016040528015611857576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061188e5761188e611d4a565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106118f1576118f1611d4a565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600061192d84600261205f565b61193890600161209c565b90505b60018111156119d5577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061197957611979611d4a565b1a60f81b82828151811061198f5761198f611d4a565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c936119ce816120b4565b905061193b565b508315611a3e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610631565b9392505050565b600060208284031215611a5757600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114611a3e57600080fd5b600060208284031215611a9957600080fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff81168114611ac457600080fd5b919050565b60008060408385031215611adc57600080fd5b82359150611aec60208401611aa0565b90509250929050565b60008083601f840112611b0757600080fd5b50813567ffffffffffffffff811115611b1f57600080fd5b6020830191508360208260051b8501011115611b3a57600080fd5b9250929050565b600080600060408486031215611b5657600080fd5b83359250602084013567ffffffffffffffff811115611b7457600080fd5b611b8086828701611af5565b9497909650939450505050565b600060208284031215611b9f57600080fd5b611a3e82611aa0565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b803563ffffffff81168114611ac457600080fd5b6000808284036080811215611bff57600080fd5b6060811215611c0d57600080fd5b506040516060810181811067ffffffffffffffff82111715611c58577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604052611c6484611bd7565b8152611c7260208501611bd7565b6020820152611c8360408501611bd7565b6040820152946060939093013593505050565b60008060208385031215611ca957600080fd5b823567ffffffffffffffff811115611cc057600080fd5b611ccc85828601611af5565b90969095509350505050565b60008060208385031215611ceb57600080fd5b823567ffffffffffffffff80821115611d0357600080fd5b818501915085601f830112611d1757600080fd5b813581811115611d2657600080fd5b866020828501011115611d3857600080fd5b60209290920196919550909350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1833603018112611dad57600080fd5b9190910192915050565b600073ffffffffffffffffffffffffffffffffffffffff80851683526040602084015280611de485611aa0565b1660408401525060208301357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112611e2057600080fd5b8301803567ffffffffffffffff811115611e3957600080fd5b803603851315611e4857600080fd5b60406060850152806080850152806020830160a0860137600060a0828601015260a07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f830116850101925050509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611eff57611eff611e9e565b5060010190565b60005b83811015611f21578181015183820152602001611f09565b838111156106b85750506000910152565b60008151808452611f4a816020860160208601611f06565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600073ffffffffffffffffffffffffffffffffffffffff80851683526040602084015280845116604084015250602083015160406060840152611fc26080840182611f32565b95945050505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612003816017850160208801611f06565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351612040816028840160208801611f06565b01602801949350505050565b602081526000611a3e6020830184611f32565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561209757612097611e9e565b500290565b600082198211156120af576120af611e9e565b500190565b6000816120c3576120c3611e9e565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019056fea26469706673582212202599acab0f56062569610a6025a50837c1117c0d9bba214f07a33efdf0c635d064736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80632ea72a4914610046578063b536745114610083578063fc91a89714610096575b600080fd5b610059610054366004610449565b6100df565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100596100913660046104e0565b6101fd565b6100cf6100a43660046104e0565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205460ff1690565b604051901515815260200161007a565b600060026000541415610153576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b60026000908155610164848461029d565b73ffffffffffffffffffffffffffffffffffffffff811660008181526001602081815260409283902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169092179091558151338152908101929092529192507f7da70c4e5387d7038610b79ca7d304caaef815826e51e67cf247135387a79bce910160405180910390a160016000559392505050565b6040805173ffffffffffffffffffffffffffffffffffffffff831660208201526000913091632ea72a4991016040516020818303038152906040526040518263ffffffff1660e01b81526004016102549190610504565b6020604051808303816000875af1158015610273573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102979190610577565b92915050565b6000806102ac838501856104e0565b905060006102d97f0000000000000000000000000000000000000000000000000000000000000000610367565b6040517fc4d66de800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301529192509082169063c4d66de890602401600060405180830381600087803b15801561034657600080fd5b505af115801561035a573d6000803e3d6000fd5b5092979650505050505050565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260601b60148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f091505073ffffffffffffffffffffffffffffffffffffffff8116610444576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f455243313136373a20637265617465206661696c656400000000000000000000604482015260640161014a565b919050565b6000806020838503121561045c57600080fd5b823567ffffffffffffffff8082111561047457600080fd5b818501915085601f83011261048857600080fd5b81358181111561049757600080fd5b8660208285010111156104a957600080fd5b60209290920196919550909350505050565b73ffffffffffffffffffffffffffffffffffffffff811681146104dd57600080fd5b50565b6000602082840312156104f257600080fd5b81356104fd816104bb565b9392505050565b600060208083528351808285015260005b8181101561053157858101830151858201604001528201610515565b81811115610543576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b60006020828403121561058957600080fd5b81516104fd816104bb56fea2646970667358221220254ca48c7d0fc4e48966f47a38b77e42e78f9d33e8bb0d8e4baf764fe2bff78064736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createChild(bytes)": {
        "params": {
          "data_": "Encoded data to pass down to child contract constructor."
        },
        "returns": {
          "_0": "New child contract address."
        }
      },
      "createChildTyped(address)": {
        "params": {
          "admin_": "`address` of the `Verify` admin."
        },
        "returns": {
          "_0": "New `Verify` child contract address."
        }
      },
      "isChild(address)": {
        "params": {
          "maybeChild_": "Address of child contract to look up."
        },
        "returns": {
          "_0": "Returns `true` if address is a contract created by this contract factory, otherwise `false`."
        }
      }
    },
    "title": "VerifyFactory",
    "version": 1
  },
  "userdoc": {
    "events": {
      "Implementation(address,address)": {
        "notice": "Factories that clone a template contract MUST emit an event any time they set the implementation being cloned. Factories that deploy new contracts without cloning do NOT need to emit this."
      },
      "NewChild(address,address)": {
        "notice": "Whenever a new child contract is deployed, a `NewChild` event containing the new child contract address MUST be emitted."
      }
    },
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Build the reference implementation to clone for each child."
      },
      "createChild(bytes)": {
        "notice": "Implements `IFactory`. Calls the `_createChild` hook that inheriting contracts must override. Registers child contract address such that `isChild` is `true`. Emits `NewChild` event."
      },
      "createChildTyped(address)": {
        "notice": "Typed wrapper for `createChild` with admin address. Use original `Factory` `createChild` function signature if function parameters are already encoded."
      },
      "isChild(address)": {
        "notice": "Implements `IFactory`. Checks if address is registered as a child contract of this factory."
      }
    },
    "notice": "Factory for creating and deploying `Verify` contracts.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3812,
        "contract": "contracts/verify/VerifyFactory.sol:VerifyFactory",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 10285,
        "contract": "contracts/verify/VerifyFactory.sol:VerifyFactory",
        "label": "contracts",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
