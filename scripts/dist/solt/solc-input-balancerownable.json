{
    "language": "Solidity",
    "sources": {
        "./contracts/configurable-rights-pool/contracts/utils/BalancerOwnable.sol": {
            "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.6.12;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract BalancerOwnable {\n    // State variables\n\n    address private _owner;\n\n    // Event declarations\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    // Modifiers\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == msg.sender, \"ERR_NOT_CONTROLLER\");\n        _;\n    }\n\n    // Function declarations\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n    }\n\n    /**\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\n     *         Can only be called by the current owner\n     * @dev external for gas optimization\n     * @param newOwner - address of new owner\n     */\n    function setController(address newOwner) external onlyOwner {\n        require(newOwner != address(0), \"ERR_ZERO_ADDRESS\");\n\n        emit OwnershipTransferred(_owner, newOwner);\n\n        _owner = newOwner;\n    }\n\n    /**\n     * @notice Returns the address of the current owner\n     * @dev external for gas optimization\n     * @return address - of the owner (AKA controller)\n     */\n    function getController() external view returns (address) {\n        return _owner;\n    }\n}\n"
        }
    },
    "settings": {
        "metadata": {
            "useLiteralContent": true
        },
        "optimizer": {
            "enabled": true,
            "runs": 100000
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ],
                "": [
                    "id",
                    "ast"
                ]
            }
        }
    }
}