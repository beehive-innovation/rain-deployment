{
    "language": "Solidity",
    "sources": {
        "./contracts/configurable-rights-pool/contracts/utils/BalancerReentrancyGuard.sol": {
            "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.6.12;\n\n/**\n * @author Balancer Labs (and OpenZeppelin)\n * @title Protect against reentrant calls (and also selectively protect view functions)\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {_lock_} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `_lock_` guard, functions marked as\n * `_lock_` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `_lock_` entry\n * points to them.\n *\n * Also adds a _lockview_ modifier, which doesn't create a lock, but fails\n *   if another _lock_ call is in progress\n */\ncontract BalancerReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint private constant _NOT_ENTERED = 1;\n    uint private constant _ENTERED = 2;\n\n    uint private _status;\n\n    constructor () internal {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `_lock_` function from another `_lock_`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `_lock_` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier lock() {\n        // On the first call to _lock_, _notEntered will be true\n        require(_status != _ENTERED, \"ERR_REENTRY\");\n\n        // Any calls to _lock_ after this point will fail\n        _status = _ENTERED;\n        _;\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Also add a modifier that doesn't create a lock, but protects functions that\n     *      should not be called while a _lock_ function is running\n     */\n     modifier viewlock() {\n        require(_status != _ENTERED, \"ERR_REENTRY_VIEW\");\n        _;\n     }\n}\n"
        }
    },
    "settings": {
        "metadata": {
            "useLiteralContent": true
        },
        "optimizer": {
            "enabled": true,
            "runs": 100000
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ],
                "": [
                    "id",
                    "ast"
                ]
            }
        }
    }
}