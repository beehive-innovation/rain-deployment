{
    "language": "Solidity",
    "sources": {
        "./contracts/configurable-rights-pool/libraries/SafeApprove.sol": {
            "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.6.12;\n\n// Imports\n\nimport \"../interfaces/IERC20.sol\";\n\n// Libraries\n\n/**\n * @author PieDAO (ported to Balancer Labs)\n * @title SafeApprove - set approval for tokens that require 0 prior approval\n * @dev Perhaps to address the known ERC20 race condition issue\n *      See https://github.com/crytic/not-so-smart-contracts/tree/master/race_condition\n *      Some tokens - notably KNC - only allow approvals to be increased from 0\n */\nlibrary SafeApprove {\n    /**\n     * @notice handle approvals of tokens that require approving from a base of 0\n     * @param token - the token we're approving\n     * @param spender - entity the owner (sender) is approving to spend his tokens\n     * @param amount - number of tokens being approved\n     */\n    function safeApprove(IERC20 token, address spender, uint amount) internal returns (bool) {\n        uint currentAllowance = token.allowance(address(this), spender);\n\n        // Do nothing if allowance is already set to this value\n        if(currentAllowance == amount) {\n            return true;\n        }\n\n        // If approval is not zero reset it to zero first\n        if(currentAllowance != 0) {\n            return token.approve(spender, 0);\n        }\n\n        // do the actual approval\n        return token.approve(spender, amount);\n    }\n}\n"
        },
        "./contracts/configurable-rights-pool/interfaces/IERC20.sol": {
            "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.6.12;\n\n// Interface declarations\n\n/* solhint-disable func-order */\n\ninterface IERC20 {\n    // Emitted when the allowance of a spender for an owner is set by a call to approve.\n    // Value is the new allowance\n    event Approval(address indexed owner, address indexed spender, uint value);\n\n    // Emitted when value tokens are moved from one account (from) to another (to).\n    // Note that value may be zero\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    // Returns the amount of tokens in existence\n    function totalSupply() external view returns (uint);\n\n    // Returns the amount of tokens owned by account\n    function balanceOf(address account) external view returns (uint);\n\n    // Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner\n    // through transferFrom. This is zero by default\n    // This value changes when approve or transferFrom are called\n    function allowance(address owner, address spender) external view returns (uint);\n\n    // Sets amount as the allowance of spender over the caller’s tokens\n    // Returns a boolean value indicating whether the operation succeeded\n    // Emits an Approval event.\n    function approve(address spender, uint amount) external returns (bool);\n\n    // Moves amount tokens from the caller’s account to recipient\n    // Returns a boolean value indicating whether the operation succeeded\n    // Emits a Transfer event.\n    function transfer(address recipient, uint amount) external returns (bool);\n\n    // Moves amount tokens from sender to recipient using the allowance mechanism\n    // Amount is then deducted from the caller’s allowance\n    // Returns a boolean value indicating whether the operation succeeded\n    // Emits a Transfer event\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\n}\n"
        }
    },
    "settings": {
        "metadata": {
            "useLiteralContent": true
        },
        "optimizer": {
            "enabled": true,
            "runs": 100000
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ],
                "": [
                    "id",
                    "ast"
                ]
            }
        }
    }
}