{
    "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum ITier.Tier\",\"name\":\"startTier\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"enum ITier.Tier\",\"name\":\"endTier\",\"type\":\"uint8\"}],\"name\":\"TierChange\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"report\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"enum ITier.Tier\",\"name\":\"endTier\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"setTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Standard interface to a tiered membership. A \\\"membership\\\" can represent many things: - Exclusive access. - Participation in some event or process. - KYC completion. - Combination of sub-memberships. - Etc. The high level requirements for a contract implementing `ITier`: - MUST represent held tiers with the `Tier` enum. - MUST implement `report`.   - The report is a `uint256` that SHOULD represent the block each tier has     been continuously held since encoded as `uint32`.   - The encoded tiers start at ONE; ZERO is implied if no tier has ever     been held.   - `Tier.ZERO` is NOT encoded in the report, it is simply the fallback     value.   - If a tier is lost the block data is erased for that tier and will be     set if/when the tier is regained to the new block.   - If the historical block information is not available the report MAY     return `0x00000000` for all held tiers.   - Tiers that are lost or have never been held MUST return `0xFFFFFFFF`. - SHOULD implement `setTier`.   - Contracts SHOULD revert with `SET_TIER` error if they cannot     meaningfully set a tier directly.     For example a contract that can only derive a membership tier by     reading the state of an external contract cannot set tiers.   - Contracts implementing `setTier` SHOULD error with `SET_ZERO_TIER`     if `Tier.ZERO` is being set. - MUST emit `TierChange` when `setTier` successfully writes a new tier.   - Contracts that cannot meaningfully set a tier are exempt.\",\"kind\":\"dev\",\"methods\":{\"report(address)\":{\"details\":\"Returns the earliest block the account has held each tier for continuously. This is encoded as a uint256 with blocks represented as 8x concatenated uint32. I.e. Each 4 bytes of the uint256 represents a u32 tier start time. The low bits represent low tiers and high bits the high tiers. Implementing contracts should return 0xFFFFFFFF for lost & never-held tiers.\",\"params\":{\"account\":\"Account to get the report for.\"},\"returns\":{\"_0\":\"The report blocks encoded as a uint256.\"}},\"setTier(address,uint8,bytes)\":{\"details\":\"Updates the tier of an account. The implementing contract is responsible for all checks and state changes required to set the tier. For example, taking/refunding funds/NFTs etc. Contracts may disallow directly setting tiers, preferring to derive reports from other onchain data. In this case they should `revert(\\\"SET_TIER\\\");`.\",\"params\":{\"account\":\"Account to change the tier for.\",\"data\":\"Arbitrary input to disambiguate ownership (e.g. NFTs to lock).\",\"endTier\":\"Tier after the change.\"}}},\"title\":\"ITier\",\"version\":1},\"userdoc\":{\"events\":{\"TierChange(address,uint8,uint8)\":{\"notice\":\"Every time a Tier changes we log start and end Tier against the account. This MAY NOT be emitted if reports are being read from the state of an external contract.\"}},\"kind\":\"user\",\"methods\":{\"report(address)\":{\"notice\":\"A tier report is a `uint256` that contains each of the block numbers each tier has been held continously since as a `uint32`. There are 9 possible tier, starting with `Tier.ZERO` for `0` offset or \\\"never held any tier\\\" then working up through 8x 4 byte offsets to the full 256 bits. Low bits = Lower tier. In hexadecimal every 8 characters = one tier, starting at `Tier.EIGHT` from high bits and working down to `Tier.ONE`. `uint32` should be plenty for any blockchain that measures block times in seconds, but reconsider if deploying to an environment with significantly sub-second block times. ~135 years of 1 second blocks fit into `uint32`. `2^8 / (365 * 24 * 60 * 60)` When a user INCREASES their tier they keep all the block numbers they already had, and get new block times for each increased tiers they have earned. When a user DECREASES their tier they return to `0xFFFFFFFF` (never) for every tier level they remove, but keep their block numbers for the remaining tiers. GUIs are encouraged to make this dynamic very clear for users as round-tripping to a lower status and back is a DESTRUCTIVE operation for block times. The intent is that downstream code can provide additional benefits for members who have maintained a certain tier for/since a long time. These benefits can be provided by inspecting the report, and by on-chain contracts directly, rather than needing to work with snapshots etc.\"},\"setTier(address,uint8,bytes)\":{\"notice\":\"Users can set their own tier by calling `setTier`. The contract that implements `ITier` is responsible for checking eligibility and/or taking actions required to set the tier. For example, the contract must take/refund any tokens relevant to changing the tier. Obviously the user is responsible for any approvals for this action prior to calling `setTier`. When the tier is changed a `TierChange` event will be emmited as: ``` event TierChange(address account, Tier startTier, Tier endTier); ``` The `setTier` function includes arbitrary data as the third parameter. This can be used to disambiguate in the case that there may be many possible options for a user to achieve some tier. For example, consider the case where `Tier.THREE` can be achieved by EITHER locking 1x rare NFT or 3x uncommon NFTs. A user with both could use `data` to explicitly state their intent. NOTE however that _any_ address can call `setTier` for any other address. If you implement `data` or anything that changes state then be very careful to avoid griefing attacks. The `data` parameter can also be ignored by the contract implementing `ITier`. For example, ERC20 tokens are fungible so only the balance approved by the user is relevant to a tier change. The `setTier` function SHOULD prevent users from reassigning `Tier.ZERO` to themselves. The `Tier.ZERO` status represents never having any status.\"}},\"notice\":\"`ITier` is a simple interface that contracts can implement to provide membership lists for other contracts. There are many use-cases for a time-preserving, conditional membership list. Some examples include: - Self-serve whitelist to participate in fundraising - Lists of users who can claim airdrops and perks - Pooling resources with implied governance/reward tiers - POAP style attendance proofs allowing access to future exclusive events\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"./contracts/tier/ITier.sol\":\"ITier\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"./contracts/tier/ITier.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\n\\npragma solidity 0.6.12;\\n\\n/// @title ITier\\n/// @notice `ITier` is a simple interface that contracts can\\n/// implement to provide membership lists for other contracts.\\n///\\n/// There are many use-cases for a time-preserving,\\n/// conditional membership list.\\n///\\n/// Some examples include:\\n///\\n/// - Self-serve whitelist to participate in fundraising\\n/// - Lists of users who can claim airdrops and perks\\n/// - Pooling resources with implied governance/reward tiers\\n/// - POAP style attendance proofs allowing access to future exclusive events\\n///\\n/// @dev Standard interface to a tiered membership.\\n///\\n/// A \\\"membership\\\" can represent many things:\\n/// - Exclusive access.\\n/// - Participation in some event or process.\\n/// - KYC completion.\\n/// - Combination of sub-memberships.\\n/// - Etc.\\n///\\n/// The high level requirements for a contract implementing `ITier`:\\n/// - MUST represent held tiers with the `Tier` enum.\\n/// - MUST implement `report`.\\n///   - The report is a `uint256` that SHOULD represent the block each tier has\\n///     been continuously held since encoded as `uint32`.\\n///   - The encoded tiers start at ONE; ZERO is implied if no tier has ever\\n///     been held.\\n///   - `Tier.ZERO` is NOT encoded in the report, it is simply the fallback\\n///     value.\\n///   - If a tier is lost the block data is erased for that tier and will be\\n///     set if/when the tier is regained to the new block.\\n///   - If the historical block information is not available the report MAY\\n///     return `0x00000000` for all held tiers.\\n///   - Tiers that are lost or have never been held MUST return `0xFFFFFFFF`.\\n/// - SHOULD implement `setTier`.\\n///   - Contracts SHOULD revert with `SET_TIER` error if they cannot\\n///     meaningfully set a tier directly.\\n///     For example a contract that can only derive a membership tier by\\n///     reading the state of an external contract cannot set tiers.\\n///   - Contracts implementing `setTier` SHOULD error with `SET_ZERO_TIER`\\n///     if `Tier.ZERO` is being set.\\n/// - MUST emit `TierChange` when `setTier` successfully writes a new tier.\\n///   - Contracts that cannot meaningfully set a tier are exempt.\\ninterface ITier {\\n    /// 9 Possible tiers.\\n    /// Fits nicely as uint32 in uint256 which is helpful for internal storage\\n    /// concerns.\\n    /// 8 tiers can be achieved, ZERO is the tier when no tier has been\\n    /// achieved.\\n    enum Tier {\\n        ZERO,\\n        ONE,\\n        TWO,\\n        THREE,\\n        FOUR,\\n        FIVE,\\n        SIX,\\n        SEVEN,\\n        EIGHT\\n    }\\n\\n    /// Every time a Tier changes we log start and end Tier against the\\n    /// account.\\n    /// This MAY NOT be emitted if reports are being read from the state of an\\n    /// external contract.\\n    event TierChange(\\n        address indexed account,\\n        Tier indexed startTier,\\n        Tier indexed endTier\\n    );\\n\\n    /// @notice Users can set their own tier by calling `setTier`.\\n    ///\\n    /// The contract that implements `ITier` is responsible for checking\\n    /// eligibility and/or taking actions required to set the tier.\\n    ///\\n    /// For example, the contract must take/refund any tokens relevant to\\n    /// changing the tier.\\n    ///\\n    /// Obviously the user is responsible for any approvals for this action\\n    /// prior to calling `setTier`.\\n    ///\\n    /// When the tier is changed a `TierChange` event will be emmited as:\\n    /// ```\\n    /// event TierChange(address account, Tier startTier, Tier endTier);\\n    /// ```\\n    ///\\n    /// The `setTier` function includes arbitrary data as the third\\n    /// parameter. This can be used to disambiguate in the case that\\n    /// there may be many possible options for a user to achieve some tier.\\n    ///\\n    /// For example, consider the case where `Tier.THREE` can be achieved\\n    /// by EITHER locking 1x rare NFT or 3x uncommon NFTs. A user with both\\n    /// could use `data` to explicitly state their intent.\\n    ///\\n    /// NOTE however that _any_ address can call `setTier` for any other\\n    /// address.\\n    ///\\n    /// If you implement `data` or anything that changes state then be very\\n    /// careful to avoid griefing attacks.\\n    ///\\n    /// The `data` parameter can also be ignored by the contract implementing\\n    /// `ITier`. For example, ERC20 tokens are fungible so only the balance\\n    /// approved by the user is relevant to a tier change.\\n    ///\\n    /// The `setTier` function SHOULD prevent users from reassigning\\n    /// `Tier.ZERO` to themselves.\\n    ///\\n    /// The `Tier.ZERO` status represents never having any status.\\n    /// @dev Updates the tier of an account.\\n    ///\\n    /// The implementing contract is responsible for all checks and state\\n    /// changes required to set the tier. For example, taking/refunding\\n    /// funds/NFTs etc.\\n    ///\\n    /// Contracts may disallow directly setting tiers, preferring to derive\\n    /// reports from other onchain data.\\n    /// In this case they should `revert(\\\"SET_TIER\\\");`.\\n    ///\\n    /// @param account Account to change the tier for.\\n    /// @param endTier Tier after the change.\\n    /// @param data Arbitrary input to disambiguate ownership\\n    /// (e.g. NFTs to lock).\\n    function setTier(\\n        address account,\\n        Tier endTier,\\n        bytes memory data\\n    )\\n        external;\\n\\n    /// @notice A tier report is a `uint256` that contains each of the block\\n    /// numbers each tier has been held continously since as a `uint32`.\\n    /// There are 9 possible tier, starting with `Tier.ZERO` for `0` offset or\\n    /// \\\"never held any tier\\\" then working up through 8x 4 byte offsets to the\\n    /// full 256 bits.\\n    ///\\n    /// Low bits = Lower tier.\\n    ///\\n    /// In hexadecimal every 8 characters = one tier, starting at `Tier.EIGHT`\\n    /// from high bits and working down to `Tier.ONE`.\\n    ///\\n    /// `uint32` should be plenty for any blockchain that measures block times\\n    /// in seconds, but reconsider if deploying to an environment with\\n    /// significantly sub-second block times.\\n    ///\\n    /// ~135 years of 1 second blocks fit into `uint32`.\\n    ///\\n    /// `2^8 / (365 * 24 * 60 * 60)`\\n    ///\\n    /// When a user INCREASES their tier they keep all the block numbers they\\n    /// already had, and get new block times for each increased tiers they have\\n    /// earned.\\n    ///\\n    /// When a user DECREASES their tier they return to `0xFFFFFFFF` (never)\\n    /// for every tier level they remove, but keep their block numbers for the\\n    /// remaining tiers.\\n    ///\\n    /// GUIs are encouraged to make this dynamic very clear for users as\\n    /// round-tripping to a lower status and back is a DESTRUCTIVE operation\\n    /// for block times.\\n    ///\\n    /// The intent is that downstream code can provide additional benefits for\\n    /// members who have maintained a certain tier for/since a long time.\\n    /// These benefits can be provided by inspecting the report, and by\\n    /// on-chain contracts directly,\\n    /// rather than needing to work with snapshots etc.\\n    /// @dev Returns the earliest block the account has held each tier for\\n    /// continuously.\\n    /// This is encoded as a uint256 with blocks represented as 8x\\n    /// concatenated uint32.\\n    /// I.e. Each 4 bytes of the uint256 represents a u32 tier start time.\\n    /// The low bits represent low tiers and high bits the high tiers.\\n    /// Implementing contracts should return 0xFFFFFFFF for lost &\\n    /// never-held tiers.\\n    ///\\n    /// @param account Account to get the report for.\\n    /// @return The report blocks encoded as a uint256.\\n    function report(address account) external view returns (uint256);\\n}\",\"keccak256\":\"0xb123bebe59fee5e8f6faf1236c3f2f2d8adc1fbf7e4f6732a1a94863ae217baa\",\"license\":\"CAL\"}},\"version\":1}"
}