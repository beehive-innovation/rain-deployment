/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface RightsManagerInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_CAN_ADD_REMOVE_TOKENS()": FunctionFragment;
    "DEFAULT_CAN_CHANGE_CAP()": FunctionFragment;
    "DEFAULT_CAN_CHANGE_SWAP_FEE()": FunctionFragment;
    "DEFAULT_CAN_CHANGE_WEIGHTS()": FunctionFragment;
    "DEFAULT_CAN_PAUSE_SWAPPING()": FunctionFragment;
    "DEFAULT_CAN_WHITELIST_LPS()": FunctionFragment;
    "constructRights(bool[])": FunctionFragment;
    "convertRights(tuple)": FunctionFragment;
    "hasPermission(tuple,uint8)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_CAN_ADD_REMOVE_TOKENS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_CAN_CHANGE_CAP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_CAN_CHANGE_SWAP_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_CAN_CHANGE_WEIGHTS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_CAN_PAUSE_SWAPPING",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_CAN_WHITELIST_LPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "constructRights",
    values: [boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "convertRights",
    values: [
      {
        canPauseSwapping: boolean;
        canChangeSwapFee: boolean;
        canChangeWeights: boolean;
        canAddRemoveTokens: boolean;
        canWhitelistLPs: boolean;
        canChangeCap: boolean;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hasPermission",
    values: [
      {
        canPauseSwapping: boolean;
        canChangeSwapFee: boolean;
        canChangeWeights: boolean;
        canAddRemoveTokens: boolean;
        canWhitelistLPs: boolean;
        canChangeCap: boolean;
      },
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_CAN_ADD_REMOVE_TOKENS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_CAN_CHANGE_CAP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_CAN_CHANGE_SWAP_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_CAN_CHANGE_WEIGHTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_CAN_PAUSE_SWAPPING",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_CAN_WHITELIST_LPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "constructRights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertRights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasPermission",
    data: BytesLike
  ): Result;

  events: {};
}

export class RightsManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RightsManagerInterface;

  functions: {
    DEFAULT_CAN_ADD_REMOVE_TOKENS(
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    DEFAULT_CAN_CHANGE_CAP(overrides?: CallOverrides): Promise<[boolean]>;

    DEFAULT_CAN_CHANGE_SWAP_FEE(overrides?: CallOverrides): Promise<[boolean]>;

    DEFAULT_CAN_CHANGE_WEIGHTS(overrides?: CallOverrides): Promise<[boolean]>;

    DEFAULT_CAN_PAUSE_SWAPPING(overrides?: CallOverrides): Promise<[boolean]>;

    DEFAULT_CAN_WHITELIST_LPS(overrides?: CallOverrides): Promise<[boolean]>;

    constructRights(
      a: boolean[],
      overrides?: CallOverrides
    ): Promise<
      [
        [boolean, boolean, boolean, boolean, boolean, boolean] & {
          canPauseSwapping: boolean;
          canChangeSwapFee: boolean;
          canChangeWeights: boolean;
          canAddRemoveTokens: boolean;
          canWhitelistLPs: boolean;
          canChangeCap: boolean;
        }
      ]
    >;

    convertRights(
      rights: {
        canPauseSwapping: boolean;
        canChangeSwapFee: boolean;
        canChangeWeights: boolean;
        canAddRemoveTokens: boolean;
        canWhitelistLPs: boolean;
        canChangeCap: boolean;
      },
      overrides?: CallOverrides
    ): Promise<[boolean[]]>;

    hasPermission(
      self: {
        canPauseSwapping: boolean;
        canChangeSwapFee: boolean;
        canChangeWeights: boolean;
        canAddRemoveTokens: boolean;
        canWhitelistLPs: boolean;
        canChangeCap: boolean;
      },
      permission: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  DEFAULT_CAN_ADD_REMOVE_TOKENS(overrides?: CallOverrides): Promise<boolean>;

  DEFAULT_CAN_CHANGE_CAP(overrides?: CallOverrides): Promise<boolean>;

  DEFAULT_CAN_CHANGE_SWAP_FEE(overrides?: CallOverrides): Promise<boolean>;

  DEFAULT_CAN_CHANGE_WEIGHTS(overrides?: CallOverrides): Promise<boolean>;

  DEFAULT_CAN_PAUSE_SWAPPING(overrides?: CallOverrides): Promise<boolean>;

  DEFAULT_CAN_WHITELIST_LPS(overrides?: CallOverrides): Promise<boolean>;

  constructRights(
    a: boolean[],
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, boolean, boolean, boolean, boolean] & {
      canPauseSwapping: boolean;
      canChangeSwapFee: boolean;
      canChangeWeights: boolean;
      canAddRemoveTokens: boolean;
      canWhitelistLPs: boolean;
      canChangeCap: boolean;
    }
  >;

  convertRights(
    rights: {
      canPauseSwapping: boolean;
      canChangeSwapFee: boolean;
      canChangeWeights: boolean;
      canAddRemoveTokens: boolean;
      canWhitelistLPs: boolean;
      canChangeCap: boolean;
    },
    overrides?: CallOverrides
  ): Promise<boolean[]>;

  hasPermission(
    self: {
      canPauseSwapping: boolean;
      canChangeSwapFee: boolean;
      canChangeWeights: boolean;
      canAddRemoveTokens: boolean;
      canWhitelistLPs: boolean;
      canChangeCap: boolean;
    },
    permission: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    DEFAULT_CAN_ADD_REMOVE_TOKENS(overrides?: CallOverrides): Promise<boolean>;

    DEFAULT_CAN_CHANGE_CAP(overrides?: CallOverrides): Promise<boolean>;

    DEFAULT_CAN_CHANGE_SWAP_FEE(overrides?: CallOverrides): Promise<boolean>;

    DEFAULT_CAN_CHANGE_WEIGHTS(overrides?: CallOverrides): Promise<boolean>;

    DEFAULT_CAN_PAUSE_SWAPPING(overrides?: CallOverrides): Promise<boolean>;

    DEFAULT_CAN_WHITELIST_LPS(overrides?: CallOverrides): Promise<boolean>;

    constructRights(
      a: boolean[],
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, boolean, boolean, boolean, boolean] & {
        canPauseSwapping: boolean;
        canChangeSwapFee: boolean;
        canChangeWeights: boolean;
        canAddRemoveTokens: boolean;
        canWhitelistLPs: boolean;
        canChangeCap: boolean;
      }
    >;

    convertRights(
      rights: {
        canPauseSwapping: boolean;
        canChangeSwapFee: boolean;
        canChangeWeights: boolean;
        canAddRemoveTokens: boolean;
        canWhitelistLPs: boolean;
        canChangeCap: boolean;
      },
      overrides?: CallOverrides
    ): Promise<boolean[]>;

    hasPermission(
      self: {
        canPauseSwapping: boolean;
        canChangeSwapFee: boolean;
        canChangeWeights: boolean;
        canAddRemoveTokens: boolean;
        canWhitelistLPs: boolean;
        canChangeCap: boolean;
      },
      permission: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    DEFAULT_CAN_ADD_REMOVE_TOKENS(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    DEFAULT_CAN_CHANGE_CAP(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_CAN_CHANGE_SWAP_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_CAN_CHANGE_WEIGHTS(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_CAN_PAUSE_SWAPPING(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_CAN_WHITELIST_LPS(overrides?: CallOverrides): Promise<BigNumber>;

    constructRights(
      a: boolean[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertRights(
      rights: {
        canPauseSwapping: boolean;
        canChangeSwapFee: boolean;
        canChangeWeights: boolean;
        canAddRemoveTokens: boolean;
        canWhitelistLPs: boolean;
        canChangeCap: boolean;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasPermission(
      self: {
        canPauseSwapping: boolean;
        canChangeSwapFee: boolean;
        canChangeWeights: boolean;
        canAddRemoveTokens: boolean;
        canWhitelistLPs: boolean;
        canChangeCap: boolean;
      },
      permission: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_CAN_ADD_REMOVE_TOKENS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEFAULT_CAN_CHANGE_CAP(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEFAULT_CAN_CHANGE_SWAP_FEE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEFAULT_CAN_CHANGE_WEIGHTS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEFAULT_CAN_PAUSE_SWAPPING(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEFAULT_CAN_WHITELIST_LPS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    constructRights(
      a: boolean[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convertRights(
      rights: {
        canPauseSwapping: boolean;
        canChangeSwapFee: boolean;
        canChangeWeights: boolean;
        canAddRemoveTokens: boolean;
        canWhitelistLPs: boolean;
        canChangeCap: boolean;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasPermission(
      self: {
        canPauseSwapping: boolean;
        canChangeSwapFee: boolean;
        canChangeWeights: boolean;
        canAddRemoveTokens: boolean;
        canWhitelistLPs: boolean;
        canChangeCap: boolean;
      },
      permission: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
