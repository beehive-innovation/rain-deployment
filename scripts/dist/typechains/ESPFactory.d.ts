/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ESPFactoryInterface extends ethers.utils.Interface {
  functions: {
    "isEsp(address)": FunctionFragment;
    "newEsp(address,tuple,tuple)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "isEsp", values: [string]): string;
  encodeFunctionData(
    functionFragment: "newEsp",
    values: [
      string,
      {
        poolTokenSymbol: string;
        poolTokenName: string;
        constituentTokens: string[];
        tokenBalances: BigNumberish[];
        tokenWeights: BigNumberish[];
        swapFee: BigNumberish;
      },
      {
        canPauseSwapping: boolean;
        canChangeSwapFee: boolean;
        canChangeWeights: boolean;
        canAddRemoveTokens: boolean;
        canWhitelistLPs: boolean;
        canChangeCap: boolean;
      }
    ]
  ): string;

  decodeFunctionResult(functionFragment: "isEsp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "newEsp", data: BytesLike): Result;

  events: {
    "LogNewEsp(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogNewEsp"): EventFragment;
}

export type LogNewEspEvent = TypedEvent<
  [string, string] & { caller: string; pool: string }
>;

export class ESPFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ESPFactoryInterface;

  functions: {
    isEsp(addr: string, overrides?: CallOverrides): Promise<[boolean]>;

    newEsp(
      factoryAddress: string,
      poolParams: {
        poolTokenSymbol: string;
        poolTokenName: string;
        constituentTokens: string[];
        tokenBalances: BigNumberish[];
        tokenWeights: BigNumberish[];
        swapFee: BigNumberish;
      },
      rights: {
        canPauseSwapping: boolean;
        canChangeSwapFee: boolean;
        canChangeWeights: boolean;
        canAddRemoveTokens: boolean;
        canWhitelistLPs: boolean;
        canChangeCap: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  isEsp(addr: string, overrides?: CallOverrides): Promise<boolean>;

  newEsp(
    factoryAddress: string,
    poolParams: {
      poolTokenSymbol: string;
      poolTokenName: string;
      constituentTokens: string[];
      tokenBalances: BigNumberish[];
      tokenWeights: BigNumberish[];
      swapFee: BigNumberish;
    },
    rights: {
      canPauseSwapping: boolean;
      canChangeSwapFee: boolean;
      canChangeWeights: boolean;
      canAddRemoveTokens: boolean;
      canWhitelistLPs: boolean;
      canChangeCap: boolean;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    isEsp(addr: string, overrides?: CallOverrides): Promise<boolean>;

    newEsp(
      factoryAddress: string,
      poolParams: {
        poolTokenSymbol: string;
        poolTokenName: string;
        constituentTokens: string[];
        tokenBalances: BigNumberish[];
        tokenWeights: BigNumberish[];
        swapFee: BigNumberish;
      },
      rights: {
        canPauseSwapping: boolean;
        canChangeSwapFee: boolean;
        canChangeWeights: boolean;
        canAddRemoveTokens: boolean;
        canWhitelistLPs: boolean;
        canChangeCap: boolean;
      },
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "LogNewEsp(address,address)"(
      caller?: string | null,
      pool?: string | null
    ): TypedEventFilter<[string, string], { caller: string; pool: string }>;

    LogNewEsp(
      caller?: string | null,
      pool?: string | null
    ): TypedEventFilter<[string, string], { caller: string; pool: string }>;
  };

  estimateGas: {
    isEsp(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    newEsp(
      factoryAddress: string,
      poolParams: {
        poolTokenSymbol: string;
        poolTokenName: string;
        constituentTokens: string[];
        tokenBalances: BigNumberish[];
        tokenWeights: BigNumberish[];
        swapFee: BigNumberish;
      },
      rights: {
        canPauseSwapping: boolean;
        canChangeSwapFee: boolean;
        canChangeWeights: boolean;
        canAddRemoveTokens: boolean;
        canWhitelistLPs: boolean;
        canChangeCap: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    isEsp(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    newEsp(
      factoryAddress: string,
      poolParams: {
        poolTokenSymbol: string;
        poolTokenName: string;
        constituentTokens: string[];
        tokenBalances: BigNumberish[];
        tokenWeights: BigNumberish[];
        swapFee: BigNumberish;
      },
      rights: {
        canPauseSwapping: boolean;
        canChangeSwapFee: boolean;
        canChangeWeights: boolean;
        canAddRemoveTokens: boolean;
        canWhitelistLPs: boolean;
        canChangeCap: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
