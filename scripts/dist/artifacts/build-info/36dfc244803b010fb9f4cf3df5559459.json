{
  "id": "36dfc244803b010fb9f4cf3df5559459",
  "_format": "hh-sol-build-info-1",
  "solcVersion": "0.6.12",
  "solcLongVersion": "0.6.12+commit.27d51765",
  "input": {
    "language": "Solidity",
    "sources": {
      "contracts/configurable-rights-pool/libraries/RightsManager.sol": {
        "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.6.12;\n\n// Needed to handle structures externally\npragma experimental ABIEncoderV2;\n\n/**\n * @author Balancer Labs\n * @title Manage Configurable Rights for the smart pool\n *      canPauseSwapping - can setPublicSwap back to false after turning it on\n *                         by default, it is off on initialization and can only be turned on\n *      canChangeSwapFee - can setSwapFee after initialization (by default, it is fixed at create time)\n *      canChangeWeights - can bind new token weights (allowed by default in base pool)\n *      canAddRemoveTokens - can bind/unbind tokens (allowed by default in base pool)\n *      canWhitelistLPs - can limit liquidity providers to a given set of addresses\n *      canChangeCap - can change the BSP cap (max # of pool tokens)\n */\nlibrary RightsManager {\n\n    // Type declarations\n\n    enum Permissions { PAUSE_SWAPPING,\n                       CHANGE_SWAP_FEE,\n                       CHANGE_WEIGHTS,\n                       ADD_REMOVE_TOKENS,\n                       WHITELIST_LPS,\n                       CHANGE_CAP }\n\n    struct Rights {\n        bool canPauseSwapping;\n        bool canChangeSwapFee;\n        bool canChangeWeights;\n        bool canAddRemoveTokens;\n        bool canWhitelistLPs;\n        bool canChangeCap;\n    }\n\n    // State variables (can only be constants in a library)\n    bool public constant DEFAULT_CAN_PAUSE_SWAPPING = false;\n    bool public constant DEFAULT_CAN_CHANGE_SWAP_FEE = true;\n    bool public constant DEFAULT_CAN_CHANGE_WEIGHTS = true;\n    bool public constant DEFAULT_CAN_ADD_REMOVE_TOKENS = false;\n    bool public constant DEFAULT_CAN_WHITELIST_LPS = false;\n    bool public constant DEFAULT_CAN_CHANGE_CAP = false;\n\n    // Functions\n\n    /**\n     * @notice create a struct from an array (or return defaults)\n     * @dev If you pass an empty array, it will construct it using the defaults\n     * @param a - array input\n     * @return Rights struct\n     */ \n    function constructRights(bool[] calldata a) external pure returns (Rights memory) {\n        if (a.length == 0) {\n            return Rights(DEFAULT_CAN_PAUSE_SWAPPING,\n                          DEFAULT_CAN_CHANGE_SWAP_FEE,\n                          DEFAULT_CAN_CHANGE_WEIGHTS,\n                          DEFAULT_CAN_ADD_REMOVE_TOKENS,\n                          DEFAULT_CAN_WHITELIST_LPS,\n                          DEFAULT_CAN_CHANGE_CAP);\n        }\n        else {\n            return Rights(a[0], a[1], a[2], a[3], a[4], a[5]);\n        }\n    }\n\n    /**\n     * @notice Convert rights struct to an array (e.g., for events, GUI)\n     * @dev avoids multiple calls to hasPermission\n     * @param rights - the rights struct to convert\n     * @return boolean array containing the rights settings\n     */\n    function convertRights(Rights calldata rights) external pure returns (bool[] memory) {\n        bool[] memory result = new bool[](6);\n\n        result[0] = rights.canPauseSwapping;\n        result[1] = rights.canChangeSwapFee;\n        result[2] = rights.canChangeWeights;\n        result[3] = rights.canAddRemoveTokens;\n        result[4] = rights.canWhitelistLPs;\n        result[5] = rights.canChangeCap;\n\n        return result;\n    }\n\n    // Though it is actually simple, the number of branches triggers code-complexity\n    /* solhint-disable code-complexity */\n\n    /**\n     * @notice Externally check permissions using the Enum\n     * @param self - Rights struct containing the permissions\n     * @param permission - The permission to check\n     * @return Boolean true if it has the permission\n     */\n    function hasPermission(Rights calldata self, Permissions permission) external pure returns (bool) {\n        if (Permissions.PAUSE_SWAPPING == permission) {\n            return self.canPauseSwapping;\n        }\n        else if (Permissions.CHANGE_SWAP_FEE == permission) {\n            return self.canChangeSwapFee;\n        }\n        else if (Permissions.CHANGE_WEIGHTS == permission) {\n            return self.canChangeWeights;\n        }\n        else if (Permissions.ADD_REMOVE_TOKENS == permission) {\n            return self.canAddRemoveTokens;\n        }\n        else if (Permissions.WHITELIST_LPS == permission) {\n            return self.canWhitelistLPs;\n        }\n        else if (Permissions.CHANGE_CAP == permission) {\n            return self.canChangeCap;\n        }\n    }\n\n    /* solhint-enable code-complexity */\n}\n"
      }
    },
    "settings": {
      "metadata": {
        "useLiteralContent": true
      },
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "evmVersion": "istanbul",
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ],
          "": [
            "ast"
          ]
        }
      }
    }
  },
  "output": {
    "contracts": {
      "contracts/configurable-rights-pool/libraries/RightsManager.sol": {
        "RightsManager": {
          "abi": [
            {
              "inputs": [],
              "name": "DEFAULT_CAN_ADD_REMOVE_TOKENS",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "DEFAULT_CAN_CHANGE_CAP",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "DEFAULT_CAN_CHANGE_SWAP_FEE",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "DEFAULT_CAN_CHANGE_WEIGHTS",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "DEFAULT_CAN_PAUSE_SWAPPING",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "DEFAULT_CAN_WHITELIST_LPS",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bool[]",
                  "name": "a",
                  "type": "bool[]"
                }
              ],
              "name": "constructRights",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "canPauseSwapping",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "canChangeSwapFee",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "canChangeWeights",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "canAddRemoveTokens",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "canWhitelistLPs",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "canChangeCap",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct RightsManager.Rights",
                  "name": "",
                  "type": "tuple"
                }
              ],
              "stateMutability": "pure",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "canPauseSwapping",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "canChangeSwapFee",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "canChangeWeights",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "canAddRemoveTokens",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "canWhitelistLPs",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "canChangeCap",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct RightsManager.Rights",
                  "name": "rights",
                  "type": "tuple"
                }
              ],
              "name": "convertRights",
              "outputs": [
                {
                  "internalType": "bool[]",
                  "name": "",
                  "type": "bool[]"
                }
              ],
              "stateMutability": "pure",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "canPauseSwapping",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "canChangeSwapFee",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "canChangeWeights",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "canAddRemoveTokens",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "canWhitelistLPs",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "canChangeCap",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct RightsManager.Rights",
                  "name": "self",
                  "type": "tuple"
                },
                {
                  "internalType": "enum RightsManager.Permissions",
                  "name": "permission",
                  "type": "RightsManager.Permissions"
                }
              ],
              "name": "hasPermission",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "pure",
              "type": "function"
            }
          ],
          "evm": {
            "bytecode": {
              "linkReferences": {},
              "object": "610696610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061009d5760003560e01c80634583544a116100705780634583544a146100c8578063710a51c2146100db578063c08473fc146100fb578063cb0d28f6146100c0578063dccf54e7146100a25761009d565b806308395a34146100a257806321bb04ae146100c05780632cc0c346146100a25780633d027b9d146100a2575b600080fd5b6100aa61011b565b6040516100b79190610605565b60405180910390f35b6100aa610120565b6100aa6100d6366004610585565b610125565b6100ee6100e936600461056a565b610205565b6040516100b791906105bf565b61010e6101093660046104d4565b61033b565b6040516100b79190610610565b600081565b600181565b600081600581111561013357fe5b61014b576101446020840184610543565b90506101ff565b81600581111561015757fe5b6001141561016f576101446040840160208501610543565b81600581111561017b57fe5b60021415610193576101446060840160408501610543565b81600581111561019f57fe5b600314156101b7576101446080840160608501610543565b8160058111156101c357fe5b600414156101db5761014460a0840160808501610543565b8160058111156101e757fe5b600514156101ff5761014460c0840160a08501610543565b92915050565b60408051600680825260e082019092526060918291906020820160c0803683370190505090506102386020840184610543565b8160008151811061024557fe5b9115156020928302919091018201526102649060408501908501610543565b8160018151811061027157fe5b911515602092830291909101909101526102916060840160408501610543565b8160028151811061029e57fe5b911515602092830291909101909101526102be6080840160608501610543565b816003815181106102cb57fe5b911515602092830291909101909101526102eb60a0840160808501610543565b816004815181106102f857fe5b9115156020928302919091019091015261031860c0840160a08501610543565b8160058151811061032557fe5b9115156020928302919091019091015292915050565b610343610488565b8161038357506040805160c081018252600080825260016020830181905292820192909252606081018290526080810182905260a08101919091526101ff565b6040518060c001604052808484600081811061039b57fe5b90506020020160208101906103b09190610543565b15158152602001848460018181106103c457fe5b90506020020160208101906103d99190610543565b15158152602001848460028181106103ed57fe5b90506020020160208101906104029190610543565b151581526020018484600381811061041657fe5b905060200201602081019061042b9190610543565b151581526020018484600481811061043f57fe5b90506020020160208101906104549190610543565b151581526020018484600581811061046857fe5b905060200201602081019061047d9190610543565b1515905290506101ff565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b600060c082840312156104ce578081fd5b50919050565b600080602083850312156104e6578182fd5b823567ffffffffffffffff808211156104fd578384fd5b818501915085601f830112610510578384fd5b81358181111561051e578485fd5b8660208083028501011115610531578485fd5b60209290920196919550909350505050565b600060208284031215610554578081fd5b81358015158114610563578182fd5b9392505050565b600060c0828403121561057b578081fd5b61056383836104bd565b60008060e08385031215610597578182fd5b6105a184846104bd565b915060c0830135600681106105b4578182fd5b809150509250929050565b6020808252825182820181905260009190848201906040850190845b818110156105f95783511515835292840192918401916001016105db565b50909695505050505050565b901515815260200190565b600060c08201905082511515825260208301511515602083015260408301511515604083015260608301511515606083015260808301511515608083015260a0830151151560a08301529291505056fea2646970667358221220346e35deadd9c20b73a4637b49645dddab90b5e9380f7b7bdc259fc7d3c0d48e64736f6c634300060c0033",
              "opcodes": "PUSH2 0x696 PUSH2 0x26 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH2 0x19 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x9D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x4583544A GT PUSH2 0x70 JUMPI DUP1 PUSH4 0x4583544A EQ PUSH2 0xC8 JUMPI DUP1 PUSH4 0x710A51C2 EQ PUSH2 0xDB JUMPI DUP1 PUSH4 0xC08473FC EQ PUSH2 0xFB JUMPI DUP1 PUSH4 0xCB0D28F6 EQ PUSH2 0xC0 JUMPI DUP1 PUSH4 0xDCCF54E7 EQ PUSH2 0xA2 JUMPI PUSH2 0x9D JUMP JUMPDEST DUP1 PUSH4 0x8395A34 EQ PUSH2 0xA2 JUMPI DUP1 PUSH4 0x21BB04AE EQ PUSH2 0xC0 JUMPI DUP1 PUSH4 0x2CC0C346 EQ PUSH2 0xA2 JUMPI DUP1 PUSH4 0x3D027B9D EQ PUSH2 0xA2 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAA PUSH2 0x11B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB7 SWAP2 SWAP1 PUSH2 0x605 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xAA PUSH2 0x120 JUMP JUMPDEST PUSH2 0xAA PUSH2 0xD6 CALLDATASIZE PUSH1 0x4 PUSH2 0x585 JUMP JUMPDEST PUSH2 0x125 JUMP JUMPDEST PUSH2 0xEE PUSH2 0xE9 CALLDATASIZE PUSH1 0x4 PUSH2 0x56A JUMP JUMPDEST PUSH2 0x205 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB7 SWAP2 SWAP1 PUSH2 0x5BF JUMP JUMPDEST PUSH2 0x10E PUSH2 0x109 CALLDATASIZE PUSH1 0x4 PUSH2 0x4D4 JUMP JUMPDEST PUSH2 0x33B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB7 SWAP2 SWAP1 PUSH2 0x610 JUMP JUMPDEST PUSH1 0x0 DUP2 JUMP JUMPDEST PUSH1 0x1 DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x5 DUP2 GT ISZERO PUSH2 0x133 JUMPI INVALID JUMPDEST PUSH2 0x14B JUMPI PUSH2 0x144 PUSH1 0x20 DUP5 ADD DUP5 PUSH2 0x543 JUMP JUMPDEST SWAP1 POP PUSH2 0x1FF JUMP JUMPDEST DUP2 PUSH1 0x5 DUP2 GT ISZERO PUSH2 0x157 JUMPI INVALID JUMPDEST PUSH1 0x1 EQ ISZERO PUSH2 0x16F JUMPI PUSH2 0x144 PUSH1 0x40 DUP5 ADD PUSH1 0x20 DUP6 ADD PUSH2 0x543 JUMP JUMPDEST DUP2 PUSH1 0x5 DUP2 GT ISZERO PUSH2 0x17B JUMPI INVALID JUMPDEST PUSH1 0x2 EQ ISZERO PUSH2 0x193 JUMPI PUSH2 0x144 PUSH1 0x60 DUP5 ADD PUSH1 0x40 DUP6 ADD PUSH2 0x543 JUMP JUMPDEST DUP2 PUSH1 0x5 DUP2 GT ISZERO PUSH2 0x19F JUMPI INVALID JUMPDEST PUSH1 0x3 EQ ISZERO PUSH2 0x1B7 JUMPI PUSH2 0x144 PUSH1 0x80 DUP5 ADD PUSH1 0x60 DUP6 ADD PUSH2 0x543 JUMP JUMPDEST DUP2 PUSH1 0x5 DUP2 GT ISZERO PUSH2 0x1C3 JUMPI INVALID JUMPDEST PUSH1 0x4 EQ ISZERO PUSH2 0x1DB JUMPI PUSH2 0x144 PUSH1 0xA0 DUP5 ADD PUSH1 0x80 DUP6 ADD PUSH2 0x543 JUMP JUMPDEST DUP2 PUSH1 0x5 DUP2 GT ISZERO PUSH2 0x1E7 JUMPI INVALID JUMPDEST PUSH1 0x5 EQ ISZERO PUSH2 0x1FF JUMPI PUSH2 0x144 PUSH1 0xC0 DUP5 ADD PUSH1 0xA0 DUP6 ADD PUSH2 0x543 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x6 DUP1 DUP3 MSTORE PUSH1 0xE0 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 DUP3 SWAP2 SWAP1 PUSH1 0x20 DUP3 ADD PUSH1 0xC0 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP PUSH2 0x238 PUSH1 0x20 DUP5 ADD DUP5 PUSH2 0x543 JUMP JUMPDEST DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x245 JUMPI INVALID JUMPDEST SWAP2 ISZERO ISZERO PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD DUP3 ADD MSTORE PUSH2 0x264 SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP6 ADD PUSH2 0x543 JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x271 JUMPI INVALID JUMPDEST SWAP2 ISZERO ISZERO PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH2 0x291 PUSH1 0x60 DUP5 ADD PUSH1 0x40 DUP6 ADD PUSH2 0x543 JUMP JUMPDEST DUP2 PUSH1 0x2 DUP2 MLOAD DUP2 LT PUSH2 0x29E JUMPI INVALID JUMPDEST SWAP2 ISZERO ISZERO PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH2 0x2BE PUSH1 0x80 DUP5 ADD PUSH1 0x60 DUP6 ADD PUSH2 0x543 JUMP JUMPDEST DUP2 PUSH1 0x3 DUP2 MLOAD DUP2 LT PUSH2 0x2CB JUMPI INVALID JUMPDEST SWAP2 ISZERO ISZERO PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH2 0x2EB PUSH1 0xA0 DUP5 ADD PUSH1 0x80 DUP6 ADD PUSH2 0x543 JUMP JUMPDEST DUP2 PUSH1 0x4 DUP2 MLOAD DUP2 LT PUSH2 0x2F8 JUMPI INVALID JUMPDEST SWAP2 ISZERO ISZERO PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH2 0x318 PUSH1 0xC0 DUP5 ADD PUSH1 0xA0 DUP6 ADD PUSH2 0x543 JUMP JUMPDEST DUP2 PUSH1 0x5 DUP2 MLOAD DUP2 LT PUSH2 0x325 JUMPI INVALID JUMPDEST SWAP2 ISZERO ISZERO PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x343 PUSH2 0x488 JUMP JUMPDEST DUP2 PUSH2 0x383 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x1 PUSH1 0x20 DUP4 ADD DUP2 SWAP1 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x1FF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE DUP1 DUP5 DUP5 PUSH1 0x0 DUP2 DUP2 LT PUSH2 0x39B JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x3B0 SWAP2 SWAP1 PUSH2 0x543 JUMP JUMPDEST ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP5 PUSH1 0x1 DUP2 DUP2 LT PUSH2 0x3C4 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x3D9 SWAP2 SWAP1 PUSH2 0x543 JUMP JUMPDEST ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP5 PUSH1 0x2 DUP2 DUP2 LT PUSH2 0x3ED JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x402 SWAP2 SWAP1 PUSH2 0x543 JUMP JUMPDEST ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP5 PUSH1 0x3 DUP2 DUP2 LT PUSH2 0x416 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x42B SWAP2 SWAP1 PUSH2 0x543 JUMP JUMPDEST ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP5 PUSH1 0x4 DUP2 DUP2 LT PUSH2 0x43F JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x454 SWAP2 SWAP1 PUSH2 0x543 JUMP JUMPDEST ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP5 PUSH1 0x5 DUP2 DUP2 LT PUSH2 0x468 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x47D SWAP2 SWAP1 PUSH2 0x543 JUMP JUMPDEST ISZERO ISZERO SWAP1 MSTORE SWAP1 POP PUSH2 0x1FF JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4CE JUMPI DUP1 DUP2 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4E6 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x4FD JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x510 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x51E JUMPI DUP5 DUP6 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP1 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x531 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x554 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x563 JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x57B JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x563 DUP4 DUP4 PUSH2 0x4BD JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0xE0 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x597 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x5A1 DUP5 DUP5 PUSH2 0x4BD JUMP JUMPDEST SWAP2 POP PUSH1 0xC0 DUP4 ADD CALLDATALOAD PUSH1 0x6 DUP2 LT PUSH2 0x5B4 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x5F9 JUMPI DUP4 MLOAD ISZERO ISZERO DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x5DB JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC0 DUP3 ADD SWAP1 POP DUP3 MLOAD ISZERO ISZERO DUP3 MSTORE PUSH1 0x20 DUP4 ADD MLOAD ISZERO ISZERO PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD ISZERO ISZERO PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD ISZERO ISZERO PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD ISZERO ISZERO PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP4 ADD MLOAD ISZERO ISZERO PUSH1 0xA0 DUP4 ADD MSTORE SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLVALUE PUSH15 0x35DEADD9C20B73A4637B49645DDDAB SWAP1 0xB5 0xE9 CODESIZE 0xF PUSH28 0x7BDC259FC7D3C0D48E64736F6C634300060C00330000000000000000 ",
              "sourceMap": "839:3585:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
              "immutableReferences": {},
              "linkReferences": {},
              "object": "730000000000000000000000000000000000000000301460806040526004361061009d5760003560e01c80634583544a116100705780634583544a146100c8578063710a51c2146100db578063c08473fc146100fb578063cb0d28f6146100c0578063dccf54e7146100a25761009d565b806308395a34146100a257806321bb04ae146100c05780632cc0c346146100a25780633d027b9d146100a2575b600080fd5b6100aa61011b565b6040516100b79190610605565b60405180910390f35b6100aa610120565b6100aa6100d6366004610585565b610125565b6100ee6100e936600461056a565b610205565b6040516100b791906105bf565b61010e6101093660046104d4565b61033b565b6040516100b79190610610565b600081565b600181565b600081600581111561013357fe5b61014b576101446020840184610543565b90506101ff565b81600581111561015757fe5b6001141561016f576101446040840160208501610543565b81600581111561017b57fe5b60021415610193576101446060840160408501610543565b81600581111561019f57fe5b600314156101b7576101446080840160608501610543565b8160058111156101c357fe5b600414156101db5761014460a0840160808501610543565b8160058111156101e757fe5b600514156101ff5761014460c0840160a08501610543565b92915050565b60408051600680825260e082019092526060918291906020820160c0803683370190505090506102386020840184610543565b8160008151811061024557fe5b9115156020928302919091018201526102649060408501908501610543565b8160018151811061027157fe5b911515602092830291909101909101526102916060840160408501610543565b8160028151811061029e57fe5b911515602092830291909101909101526102be6080840160608501610543565b816003815181106102cb57fe5b911515602092830291909101909101526102eb60a0840160808501610543565b816004815181106102f857fe5b9115156020928302919091019091015261031860c0840160a08501610543565b8160058151811061032557fe5b9115156020928302919091019091015292915050565b610343610488565b8161038357506040805160c081018252600080825260016020830181905292820192909252606081018290526080810182905260a08101919091526101ff565b6040518060c001604052808484600081811061039b57fe5b90506020020160208101906103b09190610543565b15158152602001848460018181106103c457fe5b90506020020160208101906103d99190610543565b15158152602001848460028181106103ed57fe5b90506020020160208101906104029190610543565b151581526020018484600381811061041657fe5b905060200201602081019061042b9190610543565b151581526020018484600481811061043f57fe5b90506020020160208101906104549190610543565b151581526020018484600581811061046857fe5b905060200201602081019061047d9190610543565b1515905290506101ff565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b600060c082840312156104ce578081fd5b50919050565b600080602083850312156104e6578182fd5b823567ffffffffffffffff808211156104fd578384fd5b818501915085601f830112610510578384fd5b81358181111561051e578485fd5b8660208083028501011115610531578485fd5b60209290920196919550909350505050565b600060208284031215610554578081fd5b81358015158114610563578182fd5b9392505050565b600060c0828403121561057b578081fd5b61056383836104bd565b60008060e08385031215610597578182fd5b6105a184846104bd565b915060c0830135600681106105b4578182fd5b809150509250929050565b6020808252825182820181905260009190848201906040850190845b818110156105f95783511515835292840192918401916001016105db565b50909695505050505050565b901515815260200190565b600060c08201905082511515825260208301511515602083015260408301511515604083015260608301511515606083015260808301511515608083015260a0830151151560a08301529291505056fea2646970667358221220346e35deadd9c20b73a4637b49645dddab90b5e9380f7b7bdc259fc7d3c0d48e64736f6c634300060c0033",
              "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x9D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x4583544A GT PUSH2 0x70 JUMPI DUP1 PUSH4 0x4583544A EQ PUSH2 0xC8 JUMPI DUP1 PUSH4 0x710A51C2 EQ PUSH2 0xDB JUMPI DUP1 PUSH4 0xC08473FC EQ PUSH2 0xFB JUMPI DUP1 PUSH4 0xCB0D28F6 EQ PUSH2 0xC0 JUMPI DUP1 PUSH4 0xDCCF54E7 EQ PUSH2 0xA2 JUMPI PUSH2 0x9D JUMP JUMPDEST DUP1 PUSH4 0x8395A34 EQ PUSH2 0xA2 JUMPI DUP1 PUSH4 0x21BB04AE EQ PUSH2 0xC0 JUMPI DUP1 PUSH4 0x2CC0C346 EQ PUSH2 0xA2 JUMPI DUP1 PUSH4 0x3D027B9D EQ PUSH2 0xA2 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAA PUSH2 0x11B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB7 SWAP2 SWAP1 PUSH2 0x605 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xAA PUSH2 0x120 JUMP JUMPDEST PUSH2 0xAA PUSH2 0xD6 CALLDATASIZE PUSH1 0x4 PUSH2 0x585 JUMP JUMPDEST PUSH2 0x125 JUMP JUMPDEST PUSH2 0xEE PUSH2 0xE9 CALLDATASIZE PUSH1 0x4 PUSH2 0x56A JUMP JUMPDEST PUSH2 0x205 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB7 SWAP2 SWAP1 PUSH2 0x5BF JUMP JUMPDEST PUSH2 0x10E PUSH2 0x109 CALLDATASIZE PUSH1 0x4 PUSH2 0x4D4 JUMP JUMPDEST PUSH2 0x33B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB7 SWAP2 SWAP1 PUSH2 0x610 JUMP JUMPDEST PUSH1 0x0 DUP2 JUMP JUMPDEST PUSH1 0x1 DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x5 DUP2 GT ISZERO PUSH2 0x133 JUMPI INVALID JUMPDEST PUSH2 0x14B JUMPI PUSH2 0x144 PUSH1 0x20 DUP5 ADD DUP5 PUSH2 0x543 JUMP JUMPDEST SWAP1 POP PUSH2 0x1FF JUMP JUMPDEST DUP2 PUSH1 0x5 DUP2 GT ISZERO PUSH2 0x157 JUMPI INVALID JUMPDEST PUSH1 0x1 EQ ISZERO PUSH2 0x16F JUMPI PUSH2 0x144 PUSH1 0x40 DUP5 ADD PUSH1 0x20 DUP6 ADD PUSH2 0x543 JUMP JUMPDEST DUP2 PUSH1 0x5 DUP2 GT ISZERO PUSH2 0x17B JUMPI INVALID JUMPDEST PUSH1 0x2 EQ ISZERO PUSH2 0x193 JUMPI PUSH2 0x144 PUSH1 0x60 DUP5 ADD PUSH1 0x40 DUP6 ADD PUSH2 0x543 JUMP JUMPDEST DUP2 PUSH1 0x5 DUP2 GT ISZERO PUSH2 0x19F JUMPI INVALID JUMPDEST PUSH1 0x3 EQ ISZERO PUSH2 0x1B7 JUMPI PUSH2 0x144 PUSH1 0x80 DUP5 ADD PUSH1 0x60 DUP6 ADD PUSH2 0x543 JUMP JUMPDEST DUP2 PUSH1 0x5 DUP2 GT ISZERO PUSH2 0x1C3 JUMPI INVALID JUMPDEST PUSH1 0x4 EQ ISZERO PUSH2 0x1DB JUMPI PUSH2 0x144 PUSH1 0xA0 DUP5 ADD PUSH1 0x80 DUP6 ADD PUSH2 0x543 JUMP JUMPDEST DUP2 PUSH1 0x5 DUP2 GT ISZERO PUSH2 0x1E7 JUMPI INVALID JUMPDEST PUSH1 0x5 EQ ISZERO PUSH2 0x1FF JUMPI PUSH2 0x144 PUSH1 0xC0 DUP5 ADD PUSH1 0xA0 DUP6 ADD PUSH2 0x543 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x6 DUP1 DUP3 MSTORE PUSH1 0xE0 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 DUP3 SWAP2 SWAP1 PUSH1 0x20 DUP3 ADD PUSH1 0xC0 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP PUSH2 0x238 PUSH1 0x20 DUP5 ADD DUP5 PUSH2 0x543 JUMP JUMPDEST DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x245 JUMPI INVALID JUMPDEST SWAP2 ISZERO ISZERO PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD DUP3 ADD MSTORE PUSH2 0x264 SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP6 ADD PUSH2 0x543 JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x271 JUMPI INVALID JUMPDEST SWAP2 ISZERO ISZERO PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH2 0x291 PUSH1 0x60 DUP5 ADD PUSH1 0x40 DUP6 ADD PUSH2 0x543 JUMP JUMPDEST DUP2 PUSH1 0x2 DUP2 MLOAD DUP2 LT PUSH2 0x29E JUMPI INVALID JUMPDEST SWAP2 ISZERO ISZERO PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH2 0x2BE PUSH1 0x80 DUP5 ADD PUSH1 0x60 DUP6 ADD PUSH2 0x543 JUMP JUMPDEST DUP2 PUSH1 0x3 DUP2 MLOAD DUP2 LT PUSH2 0x2CB JUMPI INVALID JUMPDEST SWAP2 ISZERO ISZERO PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH2 0x2EB PUSH1 0xA0 DUP5 ADD PUSH1 0x80 DUP6 ADD PUSH2 0x543 JUMP JUMPDEST DUP2 PUSH1 0x4 DUP2 MLOAD DUP2 LT PUSH2 0x2F8 JUMPI INVALID JUMPDEST SWAP2 ISZERO ISZERO PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH2 0x318 PUSH1 0xC0 DUP5 ADD PUSH1 0xA0 DUP6 ADD PUSH2 0x543 JUMP JUMPDEST DUP2 PUSH1 0x5 DUP2 MLOAD DUP2 LT PUSH2 0x325 JUMPI INVALID JUMPDEST SWAP2 ISZERO ISZERO PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x343 PUSH2 0x488 JUMP JUMPDEST DUP2 PUSH2 0x383 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x1 PUSH1 0x20 DUP4 ADD DUP2 SWAP1 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x1FF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE DUP1 DUP5 DUP5 PUSH1 0x0 DUP2 DUP2 LT PUSH2 0x39B JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x3B0 SWAP2 SWAP1 PUSH2 0x543 JUMP JUMPDEST ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP5 PUSH1 0x1 DUP2 DUP2 LT PUSH2 0x3C4 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x3D9 SWAP2 SWAP1 PUSH2 0x543 JUMP JUMPDEST ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP5 PUSH1 0x2 DUP2 DUP2 LT PUSH2 0x3ED JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x402 SWAP2 SWAP1 PUSH2 0x543 JUMP JUMPDEST ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP5 PUSH1 0x3 DUP2 DUP2 LT PUSH2 0x416 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x42B SWAP2 SWAP1 PUSH2 0x543 JUMP JUMPDEST ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP5 PUSH1 0x4 DUP2 DUP2 LT PUSH2 0x43F JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x454 SWAP2 SWAP1 PUSH2 0x543 JUMP JUMPDEST ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP5 PUSH1 0x5 DUP2 DUP2 LT PUSH2 0x468 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x47D SWAP2 SWAP1 PUSH2 0x543 JUMP JUMPDEST ISZERO ISZERO SWAP1 MSTORE SWAP1 POP PUSH2 0x1FF JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4CE JUMPI DUP1 DUP2 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4E6 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x4FD JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x510 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x51E JUMPI DUP5 DUP6 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP1 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x531 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x554 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x563 JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x57B JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x563 DUP4 DUP4 PUSH2 0x4BD JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0xE0 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x597 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x5A1 DUP5 DUP5 PUSH2 0x4BD JUMP JUMPDEST SWAP2 POP PUSH1 0xC0 DUP4 ADD CALLDATALOAD PUSH1 0x6 DUP2 LT PUSH2 0x5B4 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x5F9 JUMPI DUP4 MLOAD ISZERO ISZERO DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x5DB JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC0 DUP3 ADD SWAP1 POP DUP3 MLOAD ISZERO ISZERO DUP3 MSTORE PUSH1 0x20 DUP4 ADD MLOAD ISZERO ISZERO PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD ISZERO ISZERO PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD ISZERO ISZERO PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD ISZERO ISZERO PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP4 ADD MLOAD ISZERO ISZERO PUSH1 0xA0 DUP4 ADD MSTORE SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLVALUE PUSH15 0x35DEADD9C20B73A4637B49645DDDAB SWAP1 0xB5 0xE9 CODESIZE 0xF PUSH28 0x7BDC259FC7D3C0D48E64736F6C634300060C00330000000000000000 ",
              "sourceMap": "839:3585:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1705:51;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1521:54;;;:::i;3606:774::-;;;;;;:::i;:::-;;:::i;2801:430::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;2003:540::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;1705:51::-;1751:5;1705:51;:::o;1521:54::-;1571:4;1521:54;:::o;3606:774::-;3698:4;3748:10;3718:40;;;;;;;;3714:660;;3781:21;;;;:4;:21;:::i;:::-;3774:28;;;;3714:660;3862:10;3831:41;;;;;;;;:27;:41;3827:547;;;3895:21;;;;;;;;:::i;3827:547::-;3975:10;3945:40;;;;;;;;:26;:40;3941:433;;;4008:21;;;;;;;;:::i;3941:433::-;4091:10;4058:43;;;;;;;;:29;:43;4054:320;;;4124:23;;;;;;;;:::i;4054:320::-;4205:10;4176:39;;;;;;;;:25;:39;4172:202;;;4238:20;;;;;;;;:::i;4172:202::-;4313:10;4287:36;;;;;;;;:22;:36;4283:91;;;4346:17;;;;;;;;:::i;4283:91::-;3606:774;;;;:::o;2801:430::-;2919:13;;;2930:1;2919:13;;;;;;;;;2871;;;;2919;;;;;;;;;;;-1:-1:-1;;2896:36:0;-1:-1:-1;2955:23:0;;;;:6;:23;:::i;:::-;2943:6;2950:1;2943:9;;;;;;;;:35;;;:9;;;;;;;;;;:35;3000:23;;;;;;;;;:::i;:::-;2988:6;2995:1;2988:9;;;;;;;;:35;;;:9;;;;;;;;;;;:35;3045:23;;;;;;;;:::i;:::-;3033:6;3040:1;3033:9;;;;;;;;:35;;;:9;;;;;;;;;;;:35;3090:25;;;;;;;;:::i;:::-;3078:6;3085:1;3078:9;;;;;;;;:37;;;:9;;;;;;;;;;;:37;3137:22;;;;;;;;:::i;:::-;3125:6;3132:1;3125:9;;;;;;;;:34;;;:9;;;;;;;;;;;:34;3181:19;;;;;;;;:::i;:::-;3169:6;3176:1;3169:9;;;;;;;;:31;;;:9;;;;;;;;;;;:31;3218:6;2801:430;-1:-1:-1;;2801:430:0:o;2003:540::-;2070:13;;:::i;:::-;2099;2095:442;;-1:-1:-1;2135:303:0;;;;;;;;-1:-1:-1;2135:303:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2128:310;;2095:442;2484:42;;;;;;;;2491:1;;2493;2491:4;;;;;;;;;;;;;;;;;;;;:::i;:::-;2484:42;;;;;;2497:1;;2499;2497:4;;;;;;;;;;;;;;;;;;;;:::i;:::-;2484:42;;;;;;2503:1;;2505;2503:4;;;;;;;;;;;;;;;;;;;;:::i;:::-;2484:42;;;;;;2509:1;;2511;2509:4;;;;;;;;;;;;;;;;;;;;:::i;:::-;2484:42;;;;;;2515:1;;2517;2515:4;;;;;;;;;;;;;;;;;;;;:::i;:::-;2484:42;;;;;;2521:1;;2523;2521:4;;;;;;;;;;;;;;;;;;;;:::i;:::-;2484:42;;;;2477:49;-1:-1:-1;2477:49:0;;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;709:156::-;;817:3;808:6;803:3;799:16;795:26;792:2;;;-1:-1;;824:12;792:2;-1:-1;844:15;785:80;-1:-1;785:80::o;872:391::-;;;1008:2;996:9;987:7;983:23;979:32;976:2;;;-1:-1;;1014:12;976:2;1072:17;1059:31;1110:18;;1102:6;1099:30;1096:2;;;-1:-1;;1132:12;1096:2;1230:6;1219:9;1215:22;;;147:3;140:4;132:6;128:17;124:27;114:2;;-1:-1;;155:12;114:2;198:6;185:20;1110:18;217:6;214:30;211:2;;;-1:-1;;247:12;211:2;342:3;1008:2;;326:6;322:17;283:6;308:32;;305:41;302:2;;;-1:-1;;349:12;302:2;1008;279:17;;;;;1152:95;;-1:-1;970:293;;-1:-1;;;;970:293::o;1270:235::-;;1371:2;1359:9;1350:7;1346:23;1342:32;1339:2;;;-1:-1;;1377:12;1339:2;454:6;441:20;6365:5;6258:13;6251:21;6343:5;6340:32;6330:2;;-1:-1;;6376:12;6330:2;1429:60;1333:172;-1:-1;;;1333:172::o;1512:290::-;;1640:3;1628:9;1619:7;1615:23;1611:33;1608:2;;;-1:-1;;1647:12;1608:2;1709:77;1778:7;1754:22;1709:77;:::i;1809:444::-;;;1968:3;1956:9;1947:7;1943:23;1939:33;1936:2;;;-1:-1;;1975:12;1936:2;2037:77;2106:7;2082:22;2037:77;:::i;:::-;2027:87;;2151:3;2209:9;2205:22;589:20;6485:1;6478:5;6475:12;6465:2;;-1:-1;;6491:12;6465:2;2160:77;;;;1930:323;;;;;:::o;4644:374::-;4823:2;4837:47;;;5847:12;;4808:18;;;6124:19;;;4644:374;;4823:2;5704:14;;;;6164;;;;4644:374;2880:259;2905:6;2902:1;2899:13;2880:259;;;2966:13;;6258;6251:21;3242:34;;5974:14;;;;2418;;;;2927:1;2920:9;2880:259;;;-1:-1;4890:118;;4794:224;-1:-1;;;;;;4794:224::o;5025:226::-;6258:13;;6251:21;3242:34;;5154:2;5139:18;;5125:126::o;5258:327::-;;5437:3;5426:9;5422:19;5414:27;;3691:16;3685:23;6258:13;6251:21;3249:3;3242:34;3870:4;3863:5;3859:16;3853:23;6258:13;6251:21;3870:4;3936:3;3932:14;3242:34;4038:4;4031:5;4027:16;4021:23;6258:13;6251:21;4038:4;4104:3;4100:14;3242:34;4208:4;4201:5;4197:16;4191:23;6258:13;6251:21;4208:4;4274:3;4270:14;3242:34;4375:4;4368:5;4364:16;4358:23;6258:13;6251:21;4375:4;4441:3;4437:14;3242:34;4539:4;4532:5;4528:16;4522:23;6258:13;6251:21;4539:4;4605:3;4601:14;3242:34;5408:177;;;;:::o"
            },
            "methodIdentifiers": {
              "DEFAULT_CAN_ADD_REMOVE_TOKENS()": "3d027b9d",
              "DEFAULT_CAN_CHANGE_CAP()": "08395a34",
              "DEFAULT_CAN_CHANGE_SWAP_FEE()": "cb0d28f6",
              "DEFAULT_CAN_CHANGE_WEIGHTS()": "21bb04ae",
              "DEFAULT_CAN_PAUSE_SWAPPING()": "2cc0c346",
              "DEFAULT_CAN_WHITELIST_LPS()": "dccf54e7",
              "constructRights(bool[])": "c08473fc",
              "convertRights(RightsManager.Rights)": "710a51c2",
              "hasPermission(RightsManager.Rights,RightsManager.Permissions)": "4583544a"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DEFAULT_CAN_ADD_REMOVE_TOKENS\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_CAN_CHANGE_CAP\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_CAN_CHANGE_SWAP_FEE\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_CAN_CHANGE_WEIGHTS\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_CAN_PAUSE_SWAPPING\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_CAN_WHITELIST_LPS\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool[]\",\"name\":\"a\",\"type\":\"bool[]\"}],\"name\":\"constructRights\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"canPauseSwapping\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canChangeSwapFee\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canChangeWeights\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canAddRemoveTokens\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canWhitelistLPs\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canChangeCap\",\"type\":\"bool\"}],\"internalType\":\"struct RightsManager.Rights\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"canPauseSwapping\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canChangeSwapFee\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canChangeWeights\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canAddRemoveTokens\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canWhitelistLPs\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canChangeCap\",\"type\":\"bool\"}],\"internalType\":\"struct RightsManager.Rights\",\"name\":\"rights\",\"type\":\"tuple\"}],\"name\":\"convertRights\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"canPauseSwapping\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canChangeSwapFee\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canChangeWeights\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canAddRemoveTokens\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canWhitelistLPs\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canChangeCap\",\"type\":\"bool\"}],\"internalType\":\"struct RightsManager.Rights\",\"name\":\"self\",\"type\":\"tuple\"},{\"internalType\":\"enum RightsManager.Permissions\",\"name\":\"permission\",\"type\":\"RightsManager.Permissions\"}],\"name\":\"hasPermission\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Balancer Labs\",\"kind\":\"dev\",\"methods\":{\"constructRights(bool[])\":{\"details\":\"If you pass an empty array, it will construct it using the defaults\",\"params\":{\"a\":\"- array input\"},\"returns\":{\"_0\":\"Rights struct\"}},\"convertRights(RightsManager.Rights)\":{\"details\":\"avoids multiple calls to hasPermission\",\"params\":{\"rights\":\"- the rights struct to convert\"},\"returns\":{\"_0\":\"boolean array containing the rights settings\"}},\"hasPermission(RightsManager.Rights,RightsManager.Permissions)\":{\"params\":{\"permission\":\"- The permission to check\",\"self\":\"- Rights struct containing the permissions\"},\"returns\":{\"_0\":\"Boolean true if it has the permission\"}}},\"title\":\"Manage Configurable Rights for the smart pool      canPauseSwapping - can setPublicSwap back to false after turning it on                         by default, it is off on initialization and can only be turned on      canChangeSwapFee - can setSwapFee after initialization (by default, it is fixed at create time)      canChangeWeights - can bind new token weights (allowed by default in base pool)      canAddRemoveTokens - can bind/unbind tokens (allowed by default in base pool)      canWhitelistLPs - can limit liquidity providers to a given set of addresses      canChangeCap - can change the BSP cap (max # of pool tokens)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructRights(bool[])\":{\"notice\":\"create a struct from an array (or return defaults)\"},\"convertRights(RightsManager.Rights)\":{\"notice\":\"Convert rights struct to an array (e.g., for events, GUI)\"},\"hasPermission(RightsManager.Rights,RightsManager.Permissions)\":{\"notice\":\"Externally check permissions using the Enum\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/configurable-rights-pool/libraries/RightsManager.sol\":\"RightsManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/configurable-rights-pool/libraries/RightsManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Needed to handle structures externally\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @author Balancer Labs\\n * @title Manage Configurable Rights for the smart pool\\n *      canPauseSwapping - can setPublicSwap back to false after turning it on\\n *                         by default, it is off on initialization and can only be turned on\\n *      canChangeSwapFee - can setSwapFee after initialization (by default, it is fixed at create time)\\n *      canChangeWeights - can bind new token weights (allowed by default in base pool)\\n *      canAddRemoveTokens - can bind/unbind tokens (allowed by default in base pool)\\n *      canWhitelistLPs - can limit liquidity providers to a given set of addresses\\n *      canChangeCap - can change the BSP cap (max # of pool tokens)\\n */\\nlibrary RightsManager {\\n\\n    // Type declarations\\n\\n    enum Permissions { PAUSE_SWAPPING,\\n                       CHANGE_SWAP_FEE,\\n                       CHANGE_WEIGHTS,\\n                       ADD_REMOVE_TOKENS,\\n                       WHITELIST_LPS,\\n                       CHANGE_CAP }\\n\\n    struct Rights {\\n        bool canPauseSwapping;\\n        bool canChangeSwapFee;\\n        bool canChangeWeights;\\n        bool canAddRemoveTokens;\\n        bool canWhitelistLPs;\\n        bool canChangeCap;\\n    }\\n\\n    // State variables (can only be constants in a library)\\n    bool public constant DEFAULT_CAN_PAUSE_SWAPPING = false;\\n    bool public constant DEFAULT_CAN_CHANGE_SWAP_FEE = true;\\n    bool public constant DEFAULT_CAN_CHANGE_WEIGHTS = true;\\n    bool public constant DEFAULT_CAN_ADD_REMOVE_TOKENS = false;\\n    bool public constant DEFAULT_CAN_WHITELIST_LPS = false;\\n    bool public constant DEFAULT_CAN_CHANGE_CAP = false;\\n\\n    // Functions\\n\\n    /**\\n     * @notice create a struct from an array (or return defaults)\\n     * @dev If you pass an empty array, it will construct it using the defaults\\n     * @param a - array input\\n     * @return Rights struct\\n     */ \\n    function constructRights(bool[] calldata a) external pure returns (Rights memory) {\\n        if (a.length == 0) {\\n            return Rights(DEFAULT_CAN_PAUSE_SWAPPING,\\n                          DEFAULT_CAN_CHANGE_SWAP_FEE,\\n                          DEFAULT_CAN_CHANGE_WEIGHTS,\\n                          DEFAULT_CAN_ADD_REMOVE_TOKENS,\\n                          DEFAULT_CAN_WHITELIST_LPS,\\n                          DEFAULT_CAN_CHANGE_CAP);\\n        }\\n        else {\\n            return Rights(a[0], a[1], a[2], a[3], a[4], a[5]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Convert rights struct to an array (e.g., for events, GUI)\\n     * @dev avoids multiple calls to hasPermission\\n     * @param rights - the rights struct to convert\\n     * @return boolean array containing the rights settings\\n     */\\n    function convertRights(Rights calldata rights) external pure returns (bool[] memory) {\\n        bool[] memory result = new bool[](6);\\n\\n        result[0] = rights.canPauseSwapping;\\n        result[1] = rights.canChangeSwapFee;\\n        result[2] = rights.canChangeWeights;\\n        result[3] = rights.canAddRemoveTokens;\\n        result[4] = rights.canWhitelistLPs;\\n        result[5] = rights.canChangeCap;\\n\\n        return result;\\n    }\\n\\n    // Though it is actually simple, the number of branches triggers code-complexity\\n    /* solhint-disable code-complexity */\\n\\n    /**\\n     * @notice Externally check permissions using the Enum\\n     * @param self - Rights struct containing the permissions\\n     * @param permission - The permission to check\\n     * @return Boolean true if it has the permission\\n     */\\n    function hasPermission(Rights calldata self, Permissions permission) external pure returns (bool) {\\n        if (Permissions.PAUSE_SWAPPING == permission) {\\n            return self.canPauseSwapping;\\n        }\\n        else if (Permissions.CHANGE_SWAP_FEE == permission) {\\n            return self.canChangeSwapFee;\\n        }\\n        else if (Permissions.CHANGE_WEIGHTS == permission) {\\n            return self.canChangeWeights;\\n        }\\n        else if (Permissions.ADD_REMOVE_TOKENS == permission) {\\n            return self.canAddRemoveTokens;\\n        }\\n        else if (Permissions.WHITELIST_LPS == permission) {\\n            return self.canWhitelistLPs;\\n        }\\n        else if (Permissions.CHANGE_CAP == permission) {\\n            return self.canChangeCap;\\n        }\\n    }\\n\\n    /* solhint-enable code-complexity */\\n}\\n\",\"keccak256\":\"0xfde5e523cad34e49de6d1a61697ee56671273b95d765f1ead68276f1ceb7a610\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}"
        }
      }
    },
    "sources": {
      "contracts/configurable-rights-pool/libraries/RightsManager.sol": {
        "ast": {
          "absolutePath": "contracts/configurable-rights-pool/libraries/RightsManager.sol",
          "exportedSymbols": {
            "RightsManager": [
              219
            ]
          },
          "id": 220,
          "license": "GPL-3.0-or-later",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1,
              "literals": [
                "solidity",
                "0.6",
                ".12"
              ],
              "nodeType": "PragmaDirective",
              "src": "45:23:0"
            },
            {
              "id": 2,
              "literals": [
                "experimental",
                "ABIEncoderV2"
              ],
              "nodeType": "PragmaDirective",
              "src": "112:33:0"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "library",
              "documentation": {
                "id": 3,
                "nodeType": "StructuredDocumentation",
                "src": "147:691:0",
                "text": " @author Balancer Labs\n @title Manage Configurable Rights for the smart pool\n      canPauseSwapping - can setPublicSwap back to false after turning it on\n                         by default, it is off on initialization and can only be turned on\n      canChangeSwapFee - can setSwapFee after initialization (by default, it is fixed at create time)\n      canChangeWeights - can bind new token weights (allowed by default in base pool)\n      canAddRemoveTokens - can bind/unbind tokens (allowed by default in base pool)\n      canWhitelistLPs - can limit liquidity providers to a given set of addresses\n      canChangeCap - can change the BSP cap (max # of pool tokens)"
              },
              "fullyImplemented": true,
              "id": 219,
              "linearizedBaseContracts": [
                219
              ],
              "name": "RightsManager",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "canonicalName": "RightsManager.Permissions",
                  "id": 10,
                  "members": [
                    {
                      "id": 4,
                      "name": "PAUSE_SWAPPING",
                      "nodeType": "EnumValue",
                      "src": "913:14:0"
                    },
                    {
                      "id": 5,
                      "name": "CHANGE_SWAP_FEE",
                      "nodeType": "EnumValue",
                      "src": "952:15:0"
                    },
                    {
                      "id": 6,
                      "name": "CHANGE_WEIGHTS",
                      "nodeType": "EnumValue",
                      "src": "992:14:0"
                    },
                    {
                      "id": 7,
                      "name": "ADD_REMOVE_TOKENS",
                      "nodeType": "EnumValue",
                      "src": "1031:17:0"
                    },
                    {
                      "id": 8,
                      "name": "WHITELIST_LPS",
                      "nodeType": "EnumValue",
                      "src": "1073:13:0"
                    },
                    {
                      "id": 9,
                      "name": "CHANGE_CAP",
                      "nodeType": "EnumValue",
                      "src": "1111:10:0"
                    }
                  ],
                  "name": "Permissions",
                  "nodeType": "EnumDefinition",
                  "src": "894:229:0"
                },
                {
                  "canonicalName": "RightsManager.Rights",
                  "id": 23,
                  "members": [
                    {
                      "constant": false,
                      "id": 12,
                      "mutability": "mutable",
                      "name": "canPauseSwapping",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 23,
                      "src": "1153:21:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 11,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "1153:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 14,
                      "mutability": "mutable",
                      "name": "canChangeSwapFee",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 23,
                      "src": "1184:21:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 13,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "1184:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 16,
                      "mutability": "mutable",
                      "name": "canChangeWeights",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 23,
                      "src": "1215:21:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 15,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "1215:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 18,
                      "mutability": "mutable",
                      "name": "canAddRemoveTokens",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 23,
                      "src": "1246:23:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 17,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "1246:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 20,
                      "mutability": "mutable",
                      "name": "canWhitelistLPs",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 23,
                      "src": "1279:20:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 19,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "1279:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 22,
                      "mutability": "mutable",
                      "name": "canChangeCap",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 23,
                      "src": "1309:17:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 21,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "1309:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "name": "Rights",
                  "nodeType": "StructDefinition",
                  "scope": 219,
                  "src": "1129:204:0",
                  "visibility": "public"
                },
                {
                  "constant": true,
                  "functionSelector": "2cc0c346",
                  "id": 26,
                  "mutability": "constant",
                  "name": "DEFAULT_CAN_PAUSE_SWAPPING",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 219,
                  "src": "1399:55:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 24,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1399:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": {
                    "argumentTypes": null,
                    "hexValue": "66616c7365",
                    "id": 25,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1449:5:0",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "false"
                  },
                  "visibility": "public"
                },
                {
                  "constant": true,
                  "functionSelector": "cb0d28f6",
                  "id": 29,
                  "mutability": "constant",
                  "name": "DEFAULT_CAN_CHANGE_SWAP_FEE",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 219,
                  "src": "1460:55:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 27,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1460:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": {
                    "argumentTypes": null,
                    "hexValue": "74727565",
                    "id": 28,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1511:4:0",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "visibility": "public"
                },
                {
                  "constant": true,
                  "functionSelector": "21bb04ae",
                  "id": 32,
                  "mutability": "constant",
                  "name": "DEFAULT_CAN_CHANGE_WEIGHTS",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 219,
                  "src": "1521:54:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 30,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1521:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": {
                    "argumentTypes": null,
                    "hexValue": "74727565",
                    "id": 31,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1571:4:0",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "visibility": "public"
                },
                {
                  "constant": true,
                  "functionSelector": "3d027b9d",
                  "id": 35,
                  "mutability": "constant",
                  "name": "DEFAULT_CAN_ADD_REMOVE_TOKENS",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 219,
                  "src": "1581:58:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 33,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1581:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": {
                    "argumentTypes": null,
                    "hexValue": "66616c7365",
                    "id": 34,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1634:5:0",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "false"
                  },
                  "visibility": "public"
                },
                {
                  "constant": true,
                  "functionSelector": "dccf54e7",
                  "id": 38,
                  "mutability": "constant",
                  "name": "DEFAULT_CAN_WHITELIST_LPS",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 219,
                  "src": "1645:54:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 36,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1645:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": {
                    "argumentTypes": null,
                    "hexValue": "66616c7365",
                    "id": 37,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1694:5:0",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "false"
                  },
                  "visibility": "public"
                },
                {
                  "constant": true,
                  "functionSelector": "08395a34",
                  "id": 41,
                  "mutability": "constant",
                  "name": "DEFAULT_CAN_CHANGE_CAP",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 219,
                  "src": "1705:51:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 39,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1705:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": {
                    "argumentTypes": null,
                    "hexValue": "66616c7365",
                    "id": 40,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1751:5:0",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "false"
                  },
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 87,
                    "nodeType": "Block",
                    "src": "2085:458:0",
                    "statements": [
                      {
                        "condition": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 53,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 50,
                              "name": "a",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 45,
                              "src": "2099:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_bool_$dyn_calldata_ptr",
                                "typeString": "bool[] calldata"
                              }
                            },
                            "id": 51,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "2099:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "argumentTypes": null,
                            "hexValue": "30",
                            "id": 52,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2111:1:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "2099:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "id": 85,
                          "nodeType": "Block",
                          "src": "2463:74:0",
                          "statements": [
                            {
                              "expression": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "baseExpression": {
                                      "argumentTypes": null,
                                      "id": 65,
                                      "name": "a",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 45,
                                      "src": "2491:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_bool_$dyn_calldata_ptr",
                                        "typeString": "bool[] calldata"
                                      }
                                    },
                                    "id": 67,
                                    "indexExpression": {
                                      "argumentTypes": null,
                                      "hexValue": "30",
                                      "id": 66,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "2493:1:0",
                                      "subdenomination": null,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      },
                                      "value": "0"
                                    },
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "2491:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  {
                                    "argumentTypes": null,
                                    "baseExpression": {
                                      "argumentTypes": null,
                                      "id": 68,
                                      "name": "a",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 45,
                                      "src": "2497:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_bool_$dyn_calldata_ptr",
                                        "typeString": "bool[] calldata"
                                      }
                                    },
                                    "id": 70,
                                    "indexExpression": {
                                      "argumentTypes": null,
                                      "hexValue": "31",
                                      "id": 69,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "2499:1:0",
                                      "subdenomination": null,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_1_by_1",
                                        "typeString": "int_const 1"
                                      },
                                      "value": "1"
                                    },
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "2497:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  {
                                    "argumentTypes": null,
                                    "baseExpression": {
                                      "argumentTypes": null,
                                      "id": 71,
                                      "name": "a",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 45,
                                      "src": "2503:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_bool_$dyn_calldata_ptr",
                                        "typeString": "bool[] calldata"
                                      }
                                    },
                                    "id": 73,
                                    "indexExpression": {
                                      "argumentTypes": null,
                                      "hexValue": "32",
                                      "id": 72,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "2505:1:0",
                                      "subdenomination": null,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_2_by_1",
                                        "typeString": "int_const 2"
                                      },
                                      "value": "2"
                                    },
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "2503:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  {
                                    "argumentTypes": null,
                                    "baseExpression": {
                                      "argumentTypes": null,
                                      "id": 74,
                                      "name": "a",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 45,
                                      "src": "2509:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_bool_$dyn_calldata_ptr",
                                        "typeString": "bool[] calldata"
                                      }
                                    },
                                    "id": 76,
                                    "indexExpression": {
                                      "argumentTypes": null,
                                      "hexValue": "33",
                                      "id": 75,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "2511:1:0",
                                      "subdenomination": null,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_3_by_1",
                                        "typeString": "int_const 3"
                                      },
                                      "value": "3"
                                    },
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "2509:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  {
                                    "argumentTypes": null,
                                    "baseExpression": {
                                      "argumentTypes": null,
                                      "id": 77,
                                      "name": "a",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 45,
                                      "src": "2515:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_bool_$dyn_calldata_ptr",
                                        "typeString": "bool[] calldata"
                                      }
                                    },
                                    "id": 79,
                                    "indexExpression": {
                                      "argumentTypes": null,
                                      "hexValue": "34",
                                      "id": 78,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "2517:1:0",
                                      "subdenomination": null,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_4_by_1",
                                        "typeString": "int_const 4"
                                      },
                                      "value": "4"
                                    },
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "2515:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  {
                                    "argumentTypes": null,
                                    "baseExpression": {
                                      "argumentTypes": null,
                                      "id": 80,
                                      "name": "a",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 45,
                                      "src": "2521:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_bool_$dyn_calldata_ptr",
                                        "typeString": "bool[] calldata"
                                      }
                                    },
                                    "id": 82,
                                    "indexExpression": {
                                      "argumentTypes": null,
                                      "hexValue": "35",
                                      "id": 81,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "2523:1:0",
                                      "subdenomination": null,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_5_by_1",
                                        "typeString": "int_const 5"
                                      },
                                      "value": "5"
                                    },
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "2521:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    },
                                    {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    },
                                    {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    },
                                    {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    },
                                    {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    },
                                    {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  ],
                                  "id": 64,
                                  "name": "Rights",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 23,
                                  "src": "2484:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_struct$_Rights_$23_storage_ptr_$",
                                    "typeString": "type(struct RightsManager.Rights storage pointer)"
                                  }
                                },
                                "id": 83,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "structConstructorCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "2484:42:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Rights_$23_memory_ptr",
                                  "typeString": "struct RightsManager.Rights memory"
                                }
                              },
                              "functionReturnParameters": 49,
                              "id": 84,
                              "nodeType": "Return",
                              "src": "2477:49:0"
                            }
                          ]
                        },
                        "id": 86,
                        "nodeType": "IfStatement",
                        "src": "2095:442:0",
                        "trueBody": {
                          "id": 63,
                          "nodeType": "Block",
                          "src": "2114:335:0",
                          "statements": [
                            {
                              "expression": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "id": 55,
                                    "name": "DEFAULT_CAN_PAUSE_SWAPPING",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 26,
                                    "src": "2142:26:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  {
                                    "argumentTypes": null,
                                    "id": 56,
                                    "name": "DEFAULT_CAN_CHANGE_SWAP_FEE",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 29,
                                    "src": "2196:27:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  {
                                    "argumentTypes": null,
                                    "id": 57,
                                    "name": "DEFAULT_CAN_CHANGE_WEIGHTS",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 32,
                                    "src": "2251:26:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  {
                                    "argumentTypes": null,
                                    "id": 58,
                                    "name": "DEFAULT_CAN_ADD_REMOVE_TOKENS",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 35,
                                    "src": "2305:29:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  {
                                    "argumentTypes": null,
                                    "id": 59,
                                    "name": "DEFAULT_CAN_WHITELIST_LPS",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 38,
                                    "src": "2362:25:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  {
                                    "argumentTypes": null,
                                    "id": 60,
                                    "name": "DEFAULT_CAN_CHANGE_CAP",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 41,
                                    "src": "2415:22:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    },
                                    {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    },
                                    {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    },
                                    {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    },
                                    {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    },
                                    {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  ],
                                  "id": 54,
                                  "name": "Rights",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 23,
                                  "src": "2135:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_struct$_Rights_$23_storage_ptr_$",
                                    "typeString": "type(struct RightsManager.Rights storage pointer)"
                                  }
                                },
                                "id": 61,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "structConstructorCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "2135:303:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Rights_$23_memory_ptr",
                                  "typeString": "struct RightsManager.Rights memory"
                                }
                              },
                              "functionReturnParameters": 49,
                              "id": 62,
                              "nodeType": "Return",
                              "src": "2128:310:0"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "documentation": {
                    "id": 42,
                    "nodeType": "StructuredDocumentation",
                    "src": "1781:216:0",
                    "text": " @notice create a struct from an array (or return defaults)\n @dev If you pass an empty array, it will construct it using the defaults\n @param a - array input\n @return Rights struct"
                  },
                  "functionSelector": "c08473fc",
                  "id": 88,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "constructRights",
                  "nodeType": "FunctionDefinition",
                  "overrides": null,
                  "parameters": {
                    "id": 46,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 45,
                        "mutability": "mutable",
                        "name": "a",
                        "nodeType": "VariableDeclaration",
                        "overrides": null,
                        "scope": 88,
                        "src": "2028:17:0",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bool_$dyn_calldata_ptr",
                          "typeString": "bool[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 43,
                            "name": "bool",
                            "nodeType": "ElementaryTypeName",
                            "src": "2028:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "id": 44,
                          "length": null,
                          "nodeType": "ArrayTypeName",
                          "src": "2028:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_bool_$dyn_storage_ptr",
                            "typeString": "bool[]"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "2027:19:0"
                  },
                  "returnParameters": {
                    "id": 49,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 48,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "overrides": null,
                        "scope": 88,
                        "src": "2070:13:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Rights_$23_memory_ptr",
                          "typeString": "struct RightsManager.Rights"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 47,
                          "name": "Rights",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 23,
                          "src": "2070:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Rights_$23_storage_ptr",
                            "typeString": "struct RightsManager.Rights"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "2069:15:0"
                  },
                  "scope": 219,
                  "src": "2003:540:0",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 152,
                    "nodeType": "Block",
                    "src": "2886:345:0",
                    "statements": [
                      {
                        "assignments": [
                          101
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 101,
                            "mutability": "mutable",
                            "name": "result",
                            "nodeType": "VariableDeclaration",
                            "overrides": null,
                            "scope": 152,
                            "src": "2896:20:0",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
                              "typeString": "bool[]"
                            },
                            "typeName": {
                              "baseType": {
                                "id": 99,
                                "name": "bool",
                                "nodeType": "ElementaryTypeName",
                                "src": "2896:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 100,
                              "length": null,
                              "nodeType": "ArrayTypeName",
                              "src": "2896:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_bool_$dyn_storage_ptr",
                                "typeString": "bool[]"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 107,
                        "initialValue": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "hexValue": "36",
                              "id": 105,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2930:1:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_6_by_1",
                                "typeString": "int_const 6"
                              },
                              "value": "6"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_6_by_1",
                                "typeString": "int_const 6"
                              }
                            ],
                            "id": 104,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "NewExpression",
                            "src": "2919:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bool_$dyn_memory_ptr_$",
                              "typeString": "function (uint256) pure returns (bool[] memory)"
                            },
                            "typeName": {
                              "baseType": {
                                "id": 102,
                                "name": "bool",
                                "nodeType": "ElementaryTypeName",
                                "src": "2923:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 103,
                              "length": null,
                              "nodeType": "ArrayTypeName",
                              "src": "2923:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_bool_$dyn_storage_ptr",
                                "typeString": "bool[]"
                              }
                            }
                          },
                          "id": 106,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2919:13:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
                            "typeString": "bool[] memory"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2896:36:0"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 113,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 108,
                              "name": "result",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 101,
                              "src": "2943:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
                                "typeString": "bool[] memory"
                              }
                            },
                            "id": 110,
                            "indexExpression": {
                              "argumentTypes": null,
                              "hexValue": "30",
                              "id": 109,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2950:1:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "2943:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 111,
                              "name": "rights",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 91,
                              "src": "2955:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Rights_$23_calldata_ptr",
                                "typeString": "struct RightsManager.Rights calldata"
                              }
                            },
                            "id": 112,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "canPauseSwapping",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 12,
                            "src": "2955:23:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "2943:35:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 114,
                        "nodeType": "ExpressionStatement",
                        "src": "2943:35:0"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 120,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 115,
                              "name": "result",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 101,
                              "src": "2988:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
                                "typeString": "bool[] memory"
                              }
                            },
                            "id": 117,
                            "indexExpression": {
                              "argumentTypes": null,
                              "hexValue": "31",
                              "id": 116,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2995:1:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_1_by_1",
                                "typeString": "int_const 1"
                              },
                              "value": "1"
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "2988:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 118,
                              "name": "rights",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 91,
                              "src": "3000:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Rights_$23_calldata_ptr",
                                "typeString": "struct RightsManager.Rights calldata"
                              }
                            },
                            "id": 119,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "canChangeSwapFee",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 14,
                            "src": "3000:23:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "2988:35:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 121,
                        "nodeType": "ExpressionStatement",
                        "src": "2988:35:0"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 127,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 122,
                              "name": "result",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 101,
                              "src": "3033:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
                                "typeString": "bool[] memory"
                              }
                            },
                            "id": 124,
                            "indexExpression": {
                              "argumentTypes": null,
                              "hexValue": "32",
                              "id": 123,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3040:1:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_2_by_1",
                                "typeString": "int_const 2"
                              },
                              "value": "2"
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "3033:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 125,
                              "name": "rights",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 91,
                              "src": "3045:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Rights_$23_calldata_ptr",
                                "typeString": "struct RightsManager.Rights calldata"
                              }
                            },
                            "id": 126,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "canChangeWeights",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 16,
                            "src": "3045:23:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "3033:35:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 128,
                        "nodeType": "ExpressionStatement",
                        "src": "3033:35:0"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 134,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 129,
                              "name": "result",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 101,
                              "src": "3078:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
                                "typeString": "bool[] memory"
                              }
                            },
                            "id": 131,
                            "indexExpression": {
                              "argumentTypes": null,
                              "hexValue": "33",
                              "id": 130,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3085:1:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_3_by_1",
                                "typeString": "int_const 3"
                              },
                              "value": "3"
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "3078:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 132,
                              "name": "rights",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 91,
                              "src": "3090:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Rights_$23_calldata_ptr",
                                "typeString": "struct RightsManager.Rights calldata"
                              }
                            },
                            "id": 133,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "canAddRemoveTokens",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 18,
                            "src": "3090:25:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "3078:37:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 135,
                        "nodeType": "ExpressionStatement",
                        "src": "3078:37:0"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 141,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 136,
                              "name": "result",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 101,
                              "src": "3125:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
                                "typeString": "bool[] memory"
                              }
                            },
                            "id": 138,
                            "indexExpression": {
                              "argumentTypes": null,
                              "hexValue": "34",
                              "id": 137,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3132:1:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_4_by_1",
                                "typeString": "int_const 4"
                              },
                              "value": "4"
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "3125:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 139,
                              "name": "rights",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 91,
                              "src": "3137:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Rights_$23_calldata_ptr",
                                "typeString": "struct RightsManager.Rights calldata"
                              }
                            },
                            "id": 140,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "canWhitelistLPs",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 20,
                            "src": "3137:22:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "3125:34:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 142,
                        "nodeType": "ExpressionStatement",
                        "src": "3125:34:0"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 148,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 143,
                              "name": "result",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 101,
                              "src": "3169:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
                                "typeString": "bool[] memory"
                              }
                            },
                            "id": 145,
                            "indexExpression": {
                              "argumentTypes": null,
                              "hexValue": "35",
                              "id": 144,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3176:1:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_5_by_1",
                                "typeString": "int_const 5"
                              },
                              "value": "5"
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "3169:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 146,
                              "name": "rights",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 91,
                              "src": "3181:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Rights_$23_calldata_ptr",
                                "typeString": "struct RightsManager.Rights calldata"
                              }
                            },
                            "id": 147,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "canChangeCap",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 22,
                            "src": "3181:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "3169:31:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 149,
                        "nodeType": "ExpressionStatement",
                        "src": "3169:31:0"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 150,
                          "name": "result",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 101,
                          "src": "3218:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
                            "typeString": "bool[] memory"
                          }
                        },
                        "functionReturnParameters": 96,
                        "id": 151,
                        "nodeType": "Return",
                        "src": "3211:13:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 89,
                    "nodeType": "StructuredDocumentation",
                    "src": "2549:247:0",
                    "text": " @notice Convert rights struct to an array (e.g., for events, GUI)\n @dev avoids multiple calls to hasPermission\n @param rights - the rights struct to convert\n @return boolean array containing the rights settings"
                  },
                  "functionSelector": "710a51c2",
                  "id": 153,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "convertRights",
                  "nodeType": "FunctionDefinition",
                  "overrides": null,
                  "parameters": {
                    "id": 92,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 91,
                        "mutability": "mutable",
                        "name": "rights",
                        "nodeType": "VariableDeclaration",
                        "overrides": null,
                        "scope": 153,
                        "src": "2824:22:0",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Rights_$23_calldata_ptr",
                          "typeString": "struct RightsManager.Rights"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 90,
                          "name": "Rights",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 23,
                          "src": "2824:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Rights_$23_storage_ptr",
                            "typeString": "struct RightsManager.Rights"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "2823:24:0"
                  },
                  "returnParameters": {
                    "id": 96,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 95,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "overrides": null,
                        "scope": 153,
                        "src": "2871:13:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
                          "typeString": "bool[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 93,
                            "name": "bool",
                            "nodeType": "ElementaryTypeName",
                            "src": "2871:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "id": 94,
                          "length": null,
                          "nodeType": "ArrayTypeName",
                          "src": "2871:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_bool_$dyn_storage_ptr",
                            "typeString": "bool[]"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "2870:15:0"
                  },
                  "scope": 219,
                  "src": "2801:430:0",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 217,
                    "nodeType": "Block",
                    "src": "3704:676:0",
                    "statements": [
                      {
                        "condition": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_enum$_Permissions_$10",
                            "typeString": "enum RightsManager.Permissions"
                          },
                          "id": 166,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 163,
                              "name": "Permissions",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 10,
                              "src": "3718:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_enum$_Permissions_$10_$",
                                "typeString": "type(enum RightsManager.Permissions)"
                              }
                            },
                            "id": 164,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberName": "PAUSE_SWAPPING",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "3718:26:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_Permissions_$10",
                              "typeString": "enum RightsManager.Permissions"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "argumentTypes": null,
                            "id": 165,
                            "name": "permission",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 158,
                            "src": "3748:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_Permissions_$10",
                              "typeString": "enum RightsManager.Permissions"
                            }
                          },
                          "src": "3718:40:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "condition": {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_enum$_Permissions_$10",
                              "typeString": "enum RightsManager.Permissions"
                            },
                            "id": 174,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 171,
                                "name": "Permissions",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 10,
                                "src": "3831:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_enum$_Permissions_$10_$",
                                  "typeString": "type(enum RightsManager.Permissions)"
                                }
                              },
                              "id": 172,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberName": "CHANGE_SWAP_FEE",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "3831:27:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_Permissions_$10",
                                "typeString": "enum RightsManager.Permissions"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "argumentTypes": null,
                              "id": 173,
                              "name": "permission",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 158,
                              "src": "3862:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_Permissions_$10",
                                "typeString": "enum RightsManager.Permissions"
                              }
                            },
                            "src": "3831:41:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "falseBody": {
                            "condition": {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_enum$_Permissions_$10",
                                "typeString": "enum RightsManager.Permissions"
                              },
                              "id": 182,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 179,
                                  "name": "Permissions",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 10,
                                  "src": "3945:11:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_enum$_Permissions_$10_$",
                                    "typeString": "type(enum RightsManager.Permissions)"
                                  }
                                },
                                "id": 180,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberName": "CHANGE_WEIGHTS",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "3945:26:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_Permissions_$10",
                                  "typeString": "enum RightsManager.Permissions"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "argumentTypes": null,
                                "id": 181,
                                "name": "permission",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 158,
                                "src": "3975:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_Permissions_$10",
                                  "typeString": "enum RightsManager.Permissions"
                                }
                              },
                              "src": "3945:40:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "falseBody": {
                              "condition": {
                                "argumentTypes": null,
                                "commonType": {
                                  "typeIdentifier": "t_enum$_Permissions_$10",
                                  "typeString": "enum RightsManager.Permissions"
                                },
                                "id": 190,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 187,
                                    "name": "Permissions",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 10,
                                    "src": "4058:11:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_enum$_Permissions_$10_$",
                                      "typeString": "type(enum RightsManager.Permissions)"
                                    }
                                  },
                                  "id": 188,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "memberName": "ADD_REMOVE_TOKENS",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": null,
                                  "src": "4058:29:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_enum$_Permissions_$10",
                                    "typeString": "enum RightsManager.Permissions"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "==",
                                "rightExpression": {
                                  "argumentTypes": null,
                                  "id": 189,
                                  "name": "permission",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 158,
                                  "src": "4091:10:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_enum$_Permissions_$10",
                                    "typeString": "enum RightsManager.Permissions"
                                  }
                                },
                                "src": "4058:43:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "falseBody": {
                                "condition": {
                                  "argumentTypes": null,
                                  "commonType": {
                                    "typeIdentifier": "t_enum$_Permissions_$10",
                                    "typeString": "enum RightsManager.Permissions"
                                  },
                                  "id": 198,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "argumentTypes": null,
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 195,
                                      "name": "Permissions",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 10,
                                      "src": "4176:11:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_enum$_Permissions_$10_$",
                                        "typeString": "type(enum RightsManager.Permissions)"
                                      }
                                    },
                                    "id": 196,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "memberName": "WHITELIST_LPS",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": null,
                                    "src": "4176:25:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_enum$_Permissions_$10",
                                      "typeString": "enum RightsManager.Permissions"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "==",
                                  "rightExpression": {
                                    "argumentTypes": null,
                                    "id": 197,
                                    "name": "permission",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 158,
                                    "src": "4205:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_enum$_Permissions_$10",
                                      "typeString": "enum RightsManager.Permissions"
                                    }
                                  },
                                  "src": "4176:39:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "falseBody": {
                                  "condition": {
                                    "argumentTypes": null,
                                    "commonType": {
                                      "typeIdentifier": "t_enum$_Permissions_$10",
                                      "typeString": "enum RightsManager.Permissions"
                                    },
                                    "id": 206,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "argumentTypes": null,
                                      "expression": {
                                        "argumentTypes": null,
                                        "id": 203,
                                        "name": "Permissions",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 10,
                                        "src": "4287:11:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_enum$_Permissions_$10_$",
                                          "typeString": "type(enum RightsManager.Permissions)"
                                        }
                                      },
                                      "id": 204,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "memberName": "CHANGE_CAP",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": null,
                                      "src": "4287:22:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_enum$_Permissions_$10",
                                        "typeString": "enum RightsManager.Permissions"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "==",
                                    "rightExpression": {
                                      "argumentTypes": null,
                                      "id": 205,
                                      "name": "permission",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 158,
                                      "src": "4313:10:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_enum$_Permissions_$10",
                                        "typeString": "enum RightsManager.Permissions"
                                      }
                                    },
                                    "src": "4287:36:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "falseBody": null,
                                  "id": 211,
                                  "nodeType": "IfStatement",
                                  "src": "4283:91:0",
                                  "trueBody": {
                                    "id": 210,
                                    "nodeType": "Block",
                                    "src": "4325:49:0",
                                    "statements": [
                                      {
                                        "expression": {
                                          "argumentTypes": null,
                                          "expression": {
                                            "argumentTypes": null,
                                            "id": 207,
                                            "name": "self",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 156,
                                            "src": "4346:4:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_struct$_Rights_$23_calldata_ptr",
                                              "typeString": "struct RightsManager.Rights calldata"
                                            }
                                          },
                                          "id": 208,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberName": "canChangeCap",
                                          "nodeType": "MemberAccess",
                                          "referencedDeclaration": 22,
                                          "src": "4346:17:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bool",
                                            "typeString": "bool"
                                          }
                                        },
                                        "functionReturnParameters": 162,
                                        "id": 209,
                                        "nodeType": "Return",
                                        "src": "4339:24:0"
                                      }
                                    ]
                                  }
                                },
                                "id": 212,
                                "nodeType": "IfStatement",
                                "src": "4172:202:0",
                                "trueBody": {
                                  "id": 202,
                                  "nodeType": "Block",
                                  "src": "4217:52:0",
                                  "statements": [
                                    {
                                      "expression": {
                                        "argumentTypes": null,
                                        "expression": {
                                          "argumentTypes": null,
                                          "id": 199,
                                          "name": "self",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 156,
                                          "src": "4238:4:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_struct$_Rights_$23_calldata_ptr",
                                            "typeString": "struct RightsManager.Rights calldata"
                                          }
                                        },
                                        "id": 200,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "canWhitelistLPs",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 20,
                                        "src": "4238:20:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        }
                                      },
                                      "functionReturnParameters": 162,
                                      "id": 201,
                                      "nodeType": "Return",
                                      "src": "4231:27:0"
                                    }
                                  ]
                                }
                              },
                              "id": 213,
                              "nodeType": "IfStatement",
                              "src": "4054:320:0",
                              "trueBody": {
                                "id": 194,
                                "nodeType": "Block",
                                "src": "4103:55:0",
                                "statements": [
                                  {
                                    "expression": {
                                      "argumentTypes": null,
                                      "expression": {
                                        "argumentTypes": null,
                                        "id": 191,
                                        "name": "self",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 156,
                                        "src": "4124:4:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_Rights_$23_calldata_ptr",
                                          "typeString": "struct RightsManager.Rights calldata"
                                        }
                                      },
                                      "id": 192,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "canAddRemoveTokens",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 18,
                                      "src": "4124:23:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "functionReturnParameters": 162,
                                    "id": 193,
                                    "nodeType": "Return",
                                    "src": "4117:30:0"
                                  }
                                ]
                              }
                            },
                            "id": 214,
                            "nodeType": "IfStatement",
                            "src": "3941:433:0",
                            "trueBody": {
                              "id": 186,
                              "nodeType": "Block",
                              "src": "3987:53:0",
                              "statements": [
                                {
                                  "expression": {
                                    "argumentTypes": null,
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 183,
                                      "name": "self",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 156,
                                      "src": "4008:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_Rights_$23_calldata_ptr",
                                        "typeString": "struct RightsManager.Rights calldata"
                                      }
                                    },
                                    "id": 184,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "canChangeWeights",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 16,
                                    "src": "4008:21:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "functionReturnParameters": 162,
                                  "id": 185,
                                  "nodeType": "Return",
                                  "src": "4001:28:0"
                                }
                              ]
                            }
                          },
                          "id": 215,
                          "nodeType": "IfStatement",
                          "src": "3827:547:0",
                          "trueBody": {
                            "id": 178,
                            "nodeType": "Block",
                            "src": "3874:53:0",
                            "statements": [
                              {
                                "expression": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 175,
                                    "name": "self",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 156,
                                    "src": "3895:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_Rights_$23_calldata_ptr",
                                      "typeString": "struct RightsManager.Rights calldata"
                                    }
                                  },
                                  "id": 176,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "canChangeSwapFee",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 14,
                                  "src": "3895:21:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "functionReturnParameters": 162,
                                "id": 177,
                                "nodeType": "Return",
                                "src": "3888:28:0"
                              }
                            ]
                          }
                        },
                        "id": 216,
                        "nodeType": "IfStatement",
                        "src": "3714:660:0",
                        "trueBody": {
                          "id": 170,
                          "nodeType": "Block",
                          "src": "3760:53:0",
                          "statements": [
                            {
                              "expression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 167,
                                  "name": "self",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 156,
                                  "src": "3781:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_Rights_$23_calldata_ptr",
                                    "typeString": "struct RightsManager.Rights calldata"
                                  }
                                },
                                "id": 168,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "canPauseSwapping",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 12,
                                "src": "3781:21:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "functionReturnParameters": 162,
                              "id": 169,
                              "nodeType": "Return",
                              "src": "3774:28:0"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "documentation": {
                    "id": 154,
                    "nodeType": "StructuredDocumentation",
                    "src": "3365:236:0",
                    "text": " @notice Externally check permissions using the Enum\n @param self - Rights struct containing the permissions\n @param permission - The permission to check\n @return Boolean true if it has the permission"
                  },
                  "functionSelector": "4583544a",
                  "id": 218,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "hasPermission",
                  "nodeType": "FunctionDefinition",
                  "overrides": null,
                  "parameters": {
                    "id": 159,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 156,
                        "mutability": "mutable",
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "overrides": null,
                        "scope": 218,
                        "src": "3629:20:0",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Rights_$23_calldata_ptr",
                          "typeString": "struct RightsManager.Rights"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 155,
                          "name": "Rights",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 23,
                          "src": "3629:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Rights_$23_storage_ptr",
                            "typeString": "struct RightsManager.Rights"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 158,
                        "mutability": "mutable",
                        "name": "permission",
                        "nodeType": "VariableDeclaration",
                        "overrides": null,
                        "scope": 218,
                        "src": "3651:22:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Permissions_$10",
                          "typeString": "enum RightsManager.Permissions"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 157,
                          "name": "Permissions",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 10,
                          "src": "3651:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Permissions_$10",
                            "typeString": "enum RightsManager.Permissions"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "3628:46:0"
                  },
                  "returnParameters": {
                    "id": 162,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 161,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "overrides": null,
                        "scope": 218,
                        "src": "3698:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 160,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "3698:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "3697:6:0"
                  },
                  "scope": 219,
                  "src": "3606:774:0",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 220,
              "src": "839:3585:0"
            }
          ],
          "src": "45:4380:0"
        },
        "id": 0
      }
    }
  }
}
