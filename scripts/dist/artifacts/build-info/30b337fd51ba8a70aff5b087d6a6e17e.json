{
  "id": "30b337fd51ba8a70aff5b087d6a6e17e",
  "_format": "hh-sol-build-info-1",
  "solcVersion": "0.6.12",
  "solcLongVersion": "0.6.12+commit.27d51765",
  "input": {
    "language": "Solidity",
    "sources": {
      "contracts/rain-protocol/contracts/test/TierByConstructionTest.sol": {
        "content": "// SPDX-License-Identifier: CAL\n\npragma solidity 0.6.12;\n\nimport { ITier } from \"../tier/ITier.sol\";\nimport { TierByConstruction } from \"../tier/TierByConstruction.sol\";\n\n/// @title TierByConstructionTest\n/// An empty contract that facilitates tests enumerating behaviour of the\n/// modifiers at each tier.\ncontract TierByConstructionTest is TierByConstruction {\n\n    /// @param tier_ The tier contract for `TierByConstruction`.\n    constructor(ITier tier_)\n        public\n        TierByConstruction(tier_) { } // solhint-disable-line no-empty-blocks\n\n    /// External function with no modifier to use as a control for testing.\n    function unlimited()\n        external\n        view\n    { } // solhint-disable-line no-empty-blocks\n\n    /// Requires `Tier.ZERO` to call.\n    function ifZero()\n        external\n        view\n        onlyTier(msg.sender, ITier.Tier.ZERO)\n    { } // solhint-disable-line no-empty-blocks\n\n    /// Requires `Tier.ONE` to call.\n    function ifOne()\n        external\n        view\n        onlyTier(msg.sender, ITier.Tier.ONE)\n    { } // solhint-disable-line no-empty-blocks\n\n    /// Requires `Tier.TWO` to call.\n    function ifTwo()\n        external\n        view\n        onlyTier(msg.sender, ITier.Tier.TWO)\n    { } // solhint-disable-line no-empty-blocks\n\n    /// Requires `Tier.THREE` to call.\n    function ifThree()\n        external\n        view\n        onlyTier(msg.sender, ITier.Tier.THREE)\n    { } // solhint-disable-line no-empty-blocks\n\n    /// Requires `Tier.FOUR` to call.\n    function ifFour()\n        external\n        view\n        onlyTier(msg.sender, ITier.Tier.FOUR)\n    { } // solhint-disable-line no-empty-blocks\n\n    /// Requires `Tier.FIVE` to call.\n    function ifFive()\n        external\n        view\n        onlyTier(msg.sender, ITier.Tier.FIVE)\n    { } // solhint-disable-line no-empty-blocks\n\n    /// Requires `Tier.SIX` to call.\n    function ifSix()\n        external\n        view\n        onlyTier(msg.sender, ITier.Tier.SIX)\n    { } // solhint-disable-line no-empty-blocks\n\n    /// Requires `Tier.SEVEN` to call.\n    function ifSeven()\n        external\n        view\n        onlyTier(msg.sender, ITier.Tier.SEVEN)\n    { } // solhint-disable-line no-empty-blocks\n\n    /// Requires `Tier.EIGHT` to call.\n    function ifEight()\n        external\n        view\n        onlyTier(msg.sender, ITier.Tier.EIGHT)\n    { } // solhint-disable-line no-empty-blocks\n}"
      },
      "contracts/rain-protocol/contracts/tier/ITier.sol": {
        "content": "// SPDX-License-Identifier: CAL\n\npragma solidity 0.6.12;\n\n/// @title ITier\n/// @notice `ITier` is a simple interface that contracts can\n/// implement to provide membership lists for other contracts.\n///\n/// There are many use-cases for a time-preserving,\n/// conditional membership list.\n///\n/// Some examples include:\n///\n/// - Self-serve whitelist to participate in fundraising\n/// - Lists of users who can claim airdrops and perks\n/// - Pooling resources with implied governance/reward tiers\n/// - POAP style attendance proofs allowing access to future exclusive events\n///\n/// @dev Standard interface to a tiered membership.\n///\n/// A \"membership\" can represent many things:\n/// - Exclusive access.\n/// - Participation in some event or process.\n/// - KYC completion.\n/// - Combination of sub-memberships.\n/// - Etc.\n///\n/// The high level requirements for a contract implementing `ITier`:\n/// - MUST represent held tiers with the `Tier` enum.\n/// - MUST implement `report`.\n///   - The report is a `uint256` that SHOULD represent the block each tier has\n///     been continuously held since encoded as `uint32`.\n///   - The encoded tiers start at ONE; ZERO is implied if no tier has ever\n///     been held.\n///   - `Tier.ZERO` is NOT encoded in the report, it is simply the fallback\n///     value.\n///   - If a tier is lost the block data is erased for that tier and will be\n///     set if/when the tier is regained to the new block.\n///   - If the historical block information is not available the report MAY\n///     return `0x00000000` for all held tiers.\n///   - Tiers that are lost or have never been held MUST return `0xFFFFFFFF`.\n/// - SHOULD implement `setTier`.\n///   - Contracts SHOULD revert with `SET_TIER` error if they cannot\n///     meaningfully set a tier directly.\n///     For example a contract that can only derive a membership tier by\n///     reading the state of an external contract cannot set tiers.\n///   - Contracts implementing `setTier` SHOULD error with `SET_ZERO_TIER`\n///     if `Tier.ZERO` is being set.\n/// - MUST emit `TierChange` when `setTier` successfully writes a new tier.\n///   - Contracts that cannot meaningfully set a tier are exempt.\ninterface ITier {\n    /// 9 Possible tiers.\n    /// Fits nicely as uint32 in uint256 which is helpful for internal storage\n    /// concerns.\n    /// 8 tiers can be achieved, ZERO is the tier when no tier has been\n    /// achieved.\n    enum Tier {\n        ZERO,\n        ONE,\n        TWO,\n        THREE,\n        FOUR,\n        FIVE,\n        SIX,\n        SEVEN,\n        EIGHT\n    }\n\n    /// Every time a Tier changes we log start and end Tier against the\n    /// account.\n    /// This MAY NOT be emitted if reports are being read from the state of an\n    /// external contract.\n    event TierChange(\n        address indexed account,\n        Tier indexed startTier,\n        Tier indexed endTier\n    );\n\n    /// @notice Users can set their own tier by calling `setTier`.\n    ///\n    /// The contract that implements `ITier` is responsible for checking\n    /// eligibility and/or taking actions required to set the tier.\n    ///\n    /// For example, the contract must take/refund any tokens relevant to\n    /// changing the tier.\n    ///\n    /// Obviously the user is responsible for any approvals for this action\n    /// prior to calling `setTier`.\n    ///\n    /// When the tier is changed a `TierChange` event will be emmited as:\n    /// ```\n    /// event TierChange(address account, Tier startTier, Tier endTier);\n    /// ```\n    ///\n    /// The `setTier` function includes arbitrary data as the third\n    /// parameter. This can be used to disambiguate in the case that\n    /// there may be many possible options for a user to achieve some tier.\n    ///\n    /// For example, consider the case where `Tier.THREE` can be achieved\n    /// by EITHER locking 1x rare NFT or 3x uncommon NFTs. A user with both\n    /// could use `data` to explicitly state their intent.\n    ///\n    /// NOTE however that _any_ address can call `setTier` for any other\n    /// address.\n    ///\n    /// If you implement `data` or anything that changes state then be very\n    /// careful to avoid griefing attacks.\n    ///\n    /// The `data` parameter can also be ignored by the contract implementing\n    /// `ITier`. For example, ERC20 tokens are fungible so only the balance\n    /// approved by the user is relevant to a tier change.\n    ///\n    /// The `setTier` function SHOULD prevent users from reassigning\n    /// `Tier.ZERO` to themselves.\n    ///\n    /// The `Tier.ZERO` status represents never having any status.\n    /// @dev Updates the tier of an account.\n    ///\n    /// The implementing contract is responsible for all checks and state\n    /// changes required to set the tier. For example, taking/refunding\n    /// funds/NFTs etc.\n    ///\n    /// Contracts may disallow directly setting tiers, preferring to derive\n    /// reports from other onchain data.\n    /// In this case they should `revert(\"SET_TIER\");`.\n    ///\n    /// @param account Account to change the tier for.\n    /// @param endTier Tier after the change.\n    /// @param data Arbitrary input to disambiguate ownership\n    /// (e.g. NFTs to lock).\n    function setTier(\n        address account,\n        Tier endTier,\n        bytes memory data\n    )\n        external;\n\n    /// @notice A tier report is a `uint256` that contains each of the block\n    /// numbers each tier has been held continously since as a `uint32`.\n    /// There are 9 possible tier, starting with `Tier.ZERO` for `0` offset or\n    /// \"never held any tier\" then working up through 8x 4 byte offsets to the\n    /// full 256 bits.\n    ///\n    /// Low bits = Lower tier.\n    ///\n    /// In hexadecimal every 8 characters = one tier, starting at `Tier.EIGHT`\n    /// from high bits and working down to `Tier.ONE`.\n    ///\n    /// `uint32` should be plenty for any blockchain that measures block times\n    /// in seconds, but reconsider if deploying to an environment with\n    /// significantly sub-second block times.\n    ///\n    /// ~135 years of 1 second blocks fit into `uint32`.\n    ///\n    /// `2^8 / (365 * 24 * 60 * 60)`\n    ///\n    /// When a user INCREASES their tier they keep all the block numbers they\n    /// already had, and get new block times for each increased tiers they have\n    /// earned.\n    ///\n    /// When a user DECREASES their tier they return to `0xFFFFFFFF` (never)\n    /// for every tier level they remove, but keep their block numbers for the\n    /// remaining tiers.\n    ///\n    /// GUIs are encouraged to make this dynamic very clear for users as\n    /// round-tripping to a lower status and back is a DESTRUCTIVE operation\n    /// for block times.\n    ///\n    /// The intent is that downstream code can provide additional benefits for\n    /// members who have maintained a certain tier for/since a long time.\n    /// These benefits can be provided by inspecting the report, and by\n    /// on-chain contracts directly,\n    /// rather than needing to work with snapshots etc.\n    /// @dev Returns the earliest block the account has held each tier for\n    /// continuously.\n    /// This is encoded as a uint256 with blocks represented as 8x\n    /// concatenated uint32.\n    /// I.e. Each 4 bytes of the uint256 represents a u32 tier start time.\n    /// The low bits represent low tiers and high bits the high tiers.\n    /// Implementing contracts should return 0xFFFFFFFF for lost &\n    /// never-held tiers.\n    ///\n    /// @param account Account to get the report for.\n    /// @return The report blocks encoded as a uint256.\n    function report(address account) external view returns (uint256);\n}"
      },
      "contracts/rain-protocol/contracts/tier/TierByConstruction.sol": {
        "content": "// SPDX-License-Identifier: CAL\n\npragma solidity 0.6.12;\n\nimport { TierUtil } from \"../libraries/TierUtil.sol\";\nimport { ITier } from \"./ITier.sol\";\n\n/// @title TierByConstruction\n/// @notice `TierByConstruction` is a base contract for other\n/// contracts to inherit from.\n///\n/// It exposes `isTier` and the corresponding modifier `onlyTier`.\n///\n/// This ensures that the address has held at least the given tier\n/// since the contract was constructed.\n///\n/// We check against the construction time of the contract rather\n/// than the current block to avoid various exploits.\n///\n/// Users should not be able to gain a tier for a single block, claim\n/// benefits then remove the tier within the same block.\n///\n/// The construction block provides a simple and generic reference\n/// point that is difficult to manipulate/predict.\n///\n/// Note that `ReadOnlyTier` contracts must carefully consider use\n/// with `TierByConstruction` as they tend to return `0x00000000` for\n/// any/all tiers held. There needs to be additional safeguards to\n/// mitigate \"flash tier\" attacks.\n///\n/// Note that an account COULD be `TierByConstruction` then lower/\n/// remove a tier, then no longer be eligible when they regain the\n/// tier. Only _continuously held_ tiers are valid against the\n/// construction block check as this is native behaviour of the\n/// `report` function in `ITier`.\n///\n/// Technically the `ITier` could re-enter the `TierByConstruction`\n/// so the `onlyTier` modifier runs AFTER the modified function.\n///\n/// @dev Enforces tiers held by contract contruction block.\n/// The construction block is compared against the blocks returned by `report`.\n/// The `ITier` contract is paramaterised and set during construction.\ncontract TierByConstruction {\n    ITier public tierContract;\n    uint256 public constructionBlock;\n\n    constructor(ITier tierContract_) public {\n        tierContract = tierContract_;\n        constructionBlock = block.number;\n    }\n\n    /// Check if an account has held AT LEAST the given tier according to\n    /// `tierContract` since construction.\n    /// The account MUST have held the tier continuously from construction\n    /// until the \"current\" state according to `report`.\n    /// Note that `report` PROBABLY is current as at the block this function is\n    /// called but MAYBE NOT.\n    /// The `ITier` contract is free to manage reports however makes sense.\n    ///\n    /// @param account_ Account to check status of.\n    /// @param minimumTier_ Minimum tier for the account.\n    /// @return True if the status is currently held.\n    function isTier(address account_, ITier.Tier minimumTier_)\n        public\n        view\n        returns (bool)\n    {\n        return constructionBlock >= TierUtil.tierBlock(\n            tierContract.report(account_),\n            minimumTier_\n        );\n    }\n\n    /// Modifier that restricts access to functions depending on the tier\n    /// required by the function.\n    ///\n    /// `isTier` involves an external call to tierContract.report.\n    /// `require` happens AFTER the modified function to avoid rentrant\n    /// `ITier` code.\n    /// Also `report` from `ITier` is `view` so the compiler will error on\n    /// attempted state modification.\n    // solhint-disable-next-line max-line-length\n    /// https://consensys.github.io/smart-contract-best-practices/recommendations/#use-modifiers-only-for-checks\n    ///\n    /// Do NOT use this to guard setting the tier on an `ITier` contract.\n    /// The initial tier would be checked AFTER it has already been\n    /// modified which is unsafe.\n    ///\n    /// @param account_ Account to enforce tier of.\n    /// @param minimumTier_ Minimum tier for the account.\n    modifier onlyTier(address account_, ITier.Tier minimumTier_) {\n        _;\n        require(\n            isTier(account_, minimumTier_),\n            \"MINIMUM_TIER\"\n        );\n    }\n}"
      },
      "contracts/rain-protocol/contracts/libraries/TierUtil.sol": {
        "content": "// SPDX-License-Identifier: CAL\n\npragma solidity 0.6.12;\n\nimport { ITier } from \"../tier/ITier.sol\";\n\n/// @title TierUtil\n/// @notice `TierUtil` implements several pure functions that can be\n/// used to interface with reports.\n/// - `tierAtBlockFromReport`: Returns the highest status achieved relative to\n/// a block number and report. Statuses gained after that block are ignored.\n/// - `tierBlock`: Returns the block that a given tier has been held\n/// since according to a report.\n/// - `truncateTiersAbove`: Resets all the tiers above the reference tier.\n/// - `updateBlocksForTierRange`: Updates a report with a block\n/// number for every tier in a range.\n/// - `updateReportWithTierAtBlock`: Updates a report to a new tier.\n/// @dev Utilities to consistently read, write and manipulate tiers in reports.\n/// The low-level bit shifting can be difficult to get right so this factors\n/// that out.\nlibrary TierUtil {\n\n    /// UNINITIALIZED report is 0xFF.. as no tier has been held.\n    uint256 constant public UNINITIALIZED = uint256(-1);\n\n    /// Returns the highest tier achieved relative to a block number\n    /// and report.\n    ///\n    /// Note that typically the report will be from the _current_ contract\n    /// state, i.e. `block.number` but not always. Tiers gained after the\n    /// reference block are ignored.\n    ///\n    /// When the `report` comes from a later block than the `blockNumber` this\n    /// means the user must have held the tier continuously from `blockNumber`\n    /// _through_ to the report block.\n    /// I.e. NOT a snapshot.\n    ///\n    /// @param report_ A report as per `ITier`.\n    /// @param blockNumber_ The block number to check the tiers against.\n    /// @return The highest tier held since `blockNumber` as per `report`.\n    function tierAtBlockFromReport(\n        uint256 report_,\n        uint256 blockNumber_\n    )\n        internal pure returns (ITier.Tier)\n    {\n        for (uint256 i_ = 0; i_ < 8; i_++) {\n            if (uint32(uint256(report_ >> (i_*32))) > uint32(blockNumber_)) {\n                return ITier.Tier(i_);\n            }\n        }\n        return ITier.Tier(8);\n    }\n\n    /// Returns the block that a given tier has been held since from a report.\n    ///\n    /// The report MUST encode \"never\" as 0xFFFFFFFF. This ensures\n    /// compatibility with `tierAtBlockFromReport`.\n    ///\n    /// @param report_ The report to read a block number from.\n    /// @param tier_ The Tier to read the block number for.\n    /// @return The block number this has been held since.\n    function tierBlock(uint256 report_, ITier.Tier tier_)\n        internal\n        pure\n        returns (uint256)\n    {\n        // ZERO is a special case. Everyone has always been at least ZERO,\n        // since block 0.\n        if (tier_ == ITier.Tier.ZERO) { return 0; }\n\n        uint256 offset_ = (uint256(tier_) - 1) * 32;\n        return uint256(uint32(\n            uint256(\n                report_ >> offset_\n            )\n        ));\n    }\n\n    /// Resets all the tiers above the reference tier to 0xFFFFFFFF.\n    ///\n    /// @param report_ Report to truncate with high bit 1s.\n    /// @param tier_ Tier to truncate above (exclusive).\n    /// @return Truncated report.\n    function truncateTiersAbove(uint256 report_, ITier.Tier tier_)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 offset_ = uint256(tier_) * 32;\n        uint256 mask_ = (UNINITIALIZED >> offset_) << offset_;\n        return report_ | mask_;\n    }\n\n    /// Updates a report with a block number for every status integer in a\n    /// range.\n    ///\n    /// Does nothing if the end status is equal or less than the start status.\n    /// @param report_ The report to update.\n    /// @param startTier_ The `Tier` at the start of the range (exclusive).\n    /// @param endTier_ The `Tier` at the end of the range (inclusive).\n    /// @param blockNumber_ The block number to set for every status\n    /// in the range.\n    /// @return The updated report.\n    function updateBlocksForTierRange(\n        uint256 report_,\n        ITier.Tier startTier_,\n        ITier.Tier endTier_,\n        uint256 blockNumber_\n    )\n        internal pure returns (uint256)\n    {\n        uint256 offset_;\n        for (uint256 i_ = uint256(startTier_); i_ < uint256(endTier_); i_++) {\n            offset_ = i_ * 32;\n            report_ =\n                (report_ & ~uint256(uint256(uint32(UNINITIALIZED)) << offset_))\n                | uint256(blockNumber_ << offset_);\n        }\n        return report_;\n    }\n\n    /// Updates a report to a new status.\n    ///\n    /// Internally dispatches to `truncateTiersAbove` and\n    /// `updateBlocksForTierRange`.\n    /// The dispatch is based on whether the new tier is above or below the\n    /// current tier.\n    /// The `startTier_` MUST match the result of `tierAtBlockFromReport`.\n    /// It is expected the caller will know the current tier when\n    /// calling this function and need to do other things in the calling scope\n    /// with it.\n    ///\n    /// @param report_ The report to update.\n    /// @param startTier_ The tier to start updating relative to. Data above\n    /// this tier WILL BE LOST so probably should be the current tier.\n    /// @param endTier_ The new highest tier held, at the given block number.\n    /// @param blockNumber_ The block number to update the highest tier to, and\n    /// intermediate tiers from `startTier_`.\n    /// @return The updated report.\n    function updateReportWithTierAtBlock(\n        uint256 report_,\n        ITier.Tier startTier_,\n        ITier.Tier endTier_,\n        uint256 blockNumber_\n    )\n        internal pure returns (uint256)\n    {\n        return endTier_ < startTier_\n            ? truncateTiersAbove(report_, endTier_)\n            : updateBlocksForTierRange(\n                report_,\n                startTier_,\n                endTier_,\n                blockNumber_\n            );\n    }\n\n}"
      }
    },
    "settings": {
      "metadata": {
        "useLiteralContent": true
      },
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "evmVersion": "istanbul",
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ],
          "": [
            "ast"
          ]
        }
      }
    }
  },
  "output": {
    "contracts": {
      "contracts/rain-protocol/contracts/libraries/TierUtil.sol": {
        "TierUtil": {
          "abi": [
            {
              "inputs": [],
              "name": "UNINITIALIZED",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "evm": {
            "bytecode": {
              "linkReferences": {},
              "object": "608c610024600b82828239805160001a607314601757fe5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c806381e45d9a146038575b600080fd5b603e6050565b60408051918252519081900360200190f35b6000198156fea2646970667358221220b1e3287d0d0a12cc3468474d7c6e797d643f024a541aa699401016f634657f2c64736f6c634300060c0033",
              "opcodes": "PUSH1 0x8C PUSH2 0x24 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x17 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH1 0x33 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x81E45D9A EQ PUSH1 0x38 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x3E PUSH1 0x50 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH1 0x0 NOT DUP2 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB1 0xE3 0x28 PUSH30 0xD0A12CC3468474D7C6E797D643F024A541AA699401016F634657F2C6473 PUSH16 0x6C634300060C00330000000000000000 ",
              "sourceMap": "902:5001:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
              "immutableReferences": {},
              "linkReferences": {},
              "object": "730000000000000000000000000000000000000000301460806040526004361060335760003560e01c806381e45d9a146038575b600080fd5b603e6050565b60408051918252519081900360200190f35b6000198156fea2646970667358221220b1e3287d0d0a12cc3468474d7c6e797d643f024a541aa699401016f634657f2c64736f6c634300060c0033",
              "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH1 0x33 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x81E45D9A EQ PUSH1 0x38 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x3E PUSH1 0x50 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH1 0x0 NOT DUP2 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB1 0xE3 0x28 PUSH30 0xD0A12CC3468474D7C6E797D643F024A541AA699401016F634657F2C6473 PUSH16 0x6C634300060C00330000000000000000 ",
              "sourceMap": "902:5001:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;991:51;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;;991:51:0;:::o"
            },
            "methodIdentifiers": {
              "UNINITIALIZED()": "81e45d9a"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"UNINITIALIZED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Utilities to consistently read, write and manipulate tiers in reports. The low-level bit shifting can be difficult to get right so this factors that out.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"TierUtil\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"UNINITIALIZED()\":{\"notice\":\"UNINITIALIZED report is 0xFF.. as no tier has been held.\"}},\"notice\":\"`TierUtil` implements several pure functions that can be used to interface with reports. - `tierAtBlockFromReport`: Returns the highest status achieved relative to a block number and report. Statuses gained after that block are ignored. - `tierBlock`: Returns the block that a given tier has been held since according to a report. - `truncateTiersAbove`: Resets all the tiers above the reference tier. - `updateBlocksForTierRange`: Updates a report with a block number for every tier in a range. - `updateReportWithTierAtBlock`: Updates a report to a new tier.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/rain-protocol/contracts/libraries/TierUtil.sol\":\"TierUtil\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/rain-protocol/contracts/libraries/TierUtil.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\n\\npragma solidity 0.6.12;\\n\\nimport { ITier } from \\\"../tier/ITier.sol\\\";\\n\\n/// @title TierUtil\\n/// @notice `TierUtil` implements several pure functions that can be\\n/// used to interface with reports.\\n/// - `tierAtBlockFromReport`: Returns the highest status achieved relative to\\n/// a block number and report. Statuses gained after that block are ignored.\\n/// - `tierBlock`: Returns the block that a given tier has been held\\n/// since according to a report.\\n/// - `truncateTiersAbove`: Resets all the tiers above the reference tier.\\n/// - `updateBlocksForTierRange`: Updates a report with a block\\n/// number for every tier in a range.\\n/// - `updateReportWithTierAtBlock`: Updates a report to a new tier.\\n/// @dev Utilities to consistently read, write and manipulate tiers in reports.\\n/// The low-level bit shifting can be difficult to get right so this factors\\n/// that out.\\nlibrary TierUtil {\\n\\n    /// UNINITIALIZED report is 0xFF.. as no tier has been held.\\n    uint256 constant public UNINITIALIZED = uint256(-1);\\n\\n    /// Returns the highest tier achieved relative to a block number\\n    /// and report.\\n    ///\\n    /// Note that typically the report will be from the _current_ contract\\n    /// state, i.e. `block.number` but not always. Tiers gained after the\\n    /// reference block are ignored.\\n    ///\\n    /// When the `report` comes from a later block than the `blockNumber` this\\n    /// means the user must have held the tier continuously from `blockNumber`\\n    /// _through_ to the report block.\\n    /// I.e. NOT a snapshot.\\n    ///\\n    /// @param report_ A report as per `ITier`.\\n    /// @param blockNumber_ The block number to check the tiers against.\\n    /// @return The highest tier held since `blockNumber` as per `report`.\\n    function tierAtBlockFromReport(\\n        uint256 report_,\\n        uint256 blockNumber_\\n    )\\n        internal pure returns (ITier.Tier)\\n    {\\n        for (uint256 i_ = 0; i_ < 8; i_++) {\\n            if (uint32(uint256(report_ >> (i_*32))) > uint32(blockNumber_)) {\\n                return ITier.Tier(i_);\\n            }\\n        }\\n        return ITier.Tier(8);\\n    }\\n\\n    /// Returns the block that a given tier has been held since from a report.\\n    ///\\n    /// The report MUST encode \\\"never\\\" as 0xFFFFFFFF. This ensures\\n    /// compatibility with `tierAtBlockFromReport`.\\n    ///\\n    /// @param report_ The report to read a block number from.\\n    /// @param tier_ The Tier to read the block number for.\\n    /// @return The block number this has been held since.\\n    function tierBlock(uint256 report_, ITier.Tier tier_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // ZERO is a special case. Everyone has always been at least ZERO,\\n        // since block 0.\\n        if (tier_ == ITier.Tier.ZERO) { return 0; }\\n\\n        uint256 offset_ = (uint256(tier_) - 1) * 32;\\n        return uint256(uint32(\\n            uint256(\\n                report_ >> offset_\\n            )\\n        ));\\n    }\\n\\n    /// Resets all the tiers above the reference tier to 0xFFFFFFFF.\\n    ///\\n    /// @param report_ Report to truncate with high bit 1s.\\n    /// @param tier_ Tier to truncate above (exclusive).\\n    /// @return Truncated report.\\n    function truncateTiersAbove(uint256 report_, ITier.Tier tier_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 offset_ = uint256(tier_) * 32;\\n        uint256 mask_ = (UNINITIALIZED >> offset_) << offset_;\\n        return report_ | mask_;\\n    }\\n\\n    /// Updates a report with a block number for every status integer in a\\n    /// range.\\n    ///\\n    /// Does nothing if the end status is equal or less than the start status.\\n    /// @param report_ The report to update.\\n    /// @param startTier_ The `Tier` at the start of the range (exclusive).\\n    /// @param endTier_ The `Tier` at the end of the range (inclusive).\\n    /// @param blockNumber_ The block number to set for every status\\n    /// in the range.\\n    /// @return The updated report.\\n    function updateBlocksForTierRange(\\n        uint256 report_,\\n        ITier.Tier startTier_,\\n        ITier.Tier endTier_,\\n        uint256 blockNumber_\\n    )\\n        internal pure returns (uint256)\\n    {\\n        uint256 offset_;\\n        for (uint256 i_ = uint256(startTier_); i_ < uint256(endTier_); i_++) {\\n            offset_ = i_ * 32;\\n            report_ =\\n                (report_ & ~uint256(uint256(uint32(UNINITIALIZED)) << offset_))\\n                | uint256(blockNumber_ << offset_);\\n        }\\n        return report_;\\n    }\\n\\n    /// Updates a report to a new status.\\n    ///\\n    /// Internally dispatches to `truncateTiersAbove` and\\n    /// `updateBlocksForTierRange`.\\n    /// The dispatch is based on whether the new tier is above or below the\\n    /// current tier.\\n    /// The `startTier_` MUST match the result of `tierAtBlockFromReport`.\\n    /// It is expected the caller will know the current tier when\\n    /// calling this function and need to do other things in the calling scope\\n    /// with it.\\n    ///\\n    /// @param report_ The report to update.\\n    /// @param startTier_ The tier to start updating relative to. Data above\\n    /// this tier WILL BE LOST so probably should be the current tier.\\n    /// @param endTier_ The new highest tier held, at the given block number.\\n    /// @param blockNumber_ The block number to update the highest tier to, and\\n    /// intermediate tiers from `startTier_`.\\n    /// @return The updated report.\\n    function updateReportWithTierAtBlock(\\n        uint256 report_,\\n        ITier.Tier startTier_,\\n        ITier.Tier endTier_,\\n        uint256 blockNumber_\\n    )\\n        internal pure returns (uint256)\\n    {\\n        return endTier_ < startTier_\\n            ? truncateTiersAbove(report_, endTier_)\\n            : updateBlocksForTierRange(\\n                report_,\\n                startTier_,\\n                endTier_,\\n                blockNumber_\\n            );\\n    }\\n\\n}\",\"keccak256\":\"0x0398aaf4ab30e84402def1987e050e7ad45082039a58d33bf6a99c5f3ebd42a7\",\"license\":\"CAL\"},\"contracts/rain-protocol/contracts/tier/ITier.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\n\\npragma solidity 0.6.12;\\n\\n/// @title ITier\\n/// @notice `ITier` is a simple interface that contracts can\\n/// implement to provide membership lists for other contracts.\\n///\\n/// There are many use-cases for a time-preserving,\\n/// conditional membership list.\\n///\\n/// Some examples include:\\n///\\n/// - Self-serve whitelist to participate in fundraising\\n/// - Lists of users who can claim airdrops and perks\\n/// - Pooling resources with implied governance/reward tiers\\n/// - POAP style attendance proofs allowing access to future exclusive events\\n///\\n/// @dev Standard interface to a tiered membership.\\n///\\n/// A \\\"membership\\\" can represent many things:\\n/// - Exclusive access.\\n/// - Participation in some event or process.\\n/// - KYC completion.\\n/// - Combination of sub-memberships.\\n/// - Etc.\\n///\\n/// The high level requirements for a contract implementing `ITier`:\\n/// - MUST represent held tiers with the `Tier` enum.\\n/// - MUST implement `report`.\\n///   - The report is a `uint256` that SHOULD represent the block each tier has\\n///     been continuously held since encoded as `uint32`.\\n///   - The encoded tiers start at ONE; ZERO is implied if no tier has ever\\n///     been held.\\n///   - `Tier.ZERO` is NOT encoded in the report, it is simply the fallback\\n///     value.\\n///   - If a tier is lost the block data is erased for that tier and will be\\n///     set if/when the tier is regained to the new block.\\n///   - If the historical block information is not available the report MAY\\n///     return `0x00000000` for all held tiers.\\n///   - Tiers that are lost or have never been held MUST return `0xFFFFFFFF`.\\n/// - SHOULD implement `setTier`.\\n///   - Contracts SHOULD revert with `SET_TIER` error if they cannot\\n///     meaningfully set a tier directly.\\n///     For example a contract that can only derive a membership tier by\\n///     reading the state of an external contract cannot set tiers.\\n///   - Contracts implementing `setTier` SHOULD error with `SET_ZERO_TIER`\\n///     if `Tier.ZERO` is being set.\\n/// - MUST emit `TierChange` when `setTier` successfully writes a new tier.\\n///   - Contracts that cannot meaningfully set a tier are exempt.\\ninterface ITier {\\n    /// 9 Possible tiers.\\n    /// Fits nicely as uint32 in uint256 which is helpful for internal storage\\n    /// concerns.\\n    /// 8 tiers can be achieved, ZERO is the tier when no tier has been\\n    /// achieved.\\n    enum Tier {\\n        ZERO,\\n        ONE,\\n        TWO,\\n        THREE,\\n        FOUR,\\n        FIVE,\\n        SIX,\\n        SEVEN,\\n        EIGHT\\n    }\\n\\n    /// Every time a Tier changes we log start and end Tier against the\\n    /// account.\\n    /// This MAY NOT be emitted if reports are being read from the state of an\\n    /// external contract.\\n    event TierChange(\\n        address indexed account,\\n        Tier indexed startTier,\\n        Tier indexed endTier\\n    );\\n\\n    /// @notice Users can set their own tier by calling `setTier`.\\n    ///\\n    /// The contract that implements `ITier` is responsible for checking\\n    /// eligibility and/or taking actions required to set the tier.\\n    ///\\n    /// For example, the contract must take/refund any tokens relevant to\\n    /// changing the tier.\\n    ///\\n    /// Obviously the user is responsible for any approvals for this action\\n    /// prior to calling `setTier`.\\n    ///\\n    /// When the tier is changed a `TierChange` event will be emmited as:\\n    /// ```\\n    /// event TierChange(address account, Tier startTier, Tier endTier);\\n    /// ```\\n    ///\\n    /// The `setTier` function includes arbitrary data as the third\\n    /// parameter. This can be used to disambiguate in the case that\\n    /// there may be many possible options for a user to achieve some tier.\\n    ///\\n    /// For example, consider the case where `Tier.THREE` can be achieved\\n    /// by EITHER locking 1x rare NFT or 3x uncommon NFTs. A user with both\\n    /// could use `data` to explicitly state their intent.\\n    ///\\n    /// NOTE however that _any_ address can call `setTier` for any other\\n    /// address.\\n    ///\\n    /// If you implement `data` or anything that changes state then be very\\n    /// careful to avoid griefing attacks.\\n    ///\\n    /// The `data` parameter can also be ignored by the contract implementing\\n    /// `ITier`. For example, ERC20 tokens are fungible so only the balance\\n    /// approved by the user is relevant to a tier change.\\n    ///\\n    /// The `setTier` function SHOULD prevent users from reassigning\\n    /// `Tier.ZERO` to themselves.\\n    ///\\n    /// The `Tier.ZERO` status represents never having any status.\\n    /// @dev Updates the tier of an account.\\n    ///\\n    /// The implementing contract is responsible for all checks and state\\n    /// changes required to set the tier. For example, taking/refunding\\n    /// funds/NFTs etc.\\n    ///\\n    /// Contracts may disallow directly setting tiers, preferring to derive\\n    /// reports from other onchain data.\\n    /// In this case they should `revert(\\\"SET_TIER\\\");`.\\n    ///\\n    /// @param account Account to change the tier for.\\n    /// @param endTier Tier after the change.\\n    /// @param data Arbitrary input to disambiguate ownership\\n    /// (e.g. NFTs to lock).\\n    function setTier(\\n        address account,\\n        Tier endTier,\\n        bytes memory data\\n    )\\n        external;\\n\\n    /// @notice A tier report is a `uint256` that contains each of the block\\n    /// numbers each tier has been held continously since as a `uint32`.\\n    /// There are 9 possible tier, starting with `Tier.ZERO` for `0` offset or\\n    /// \\\"never held any tier\\\" then working up through 8x 4 byte offsets to the\\n    /// full 256 bits.\\n    ///\\n    /// Low bits = Lower tier.\\n    ///\\n    /// In hexadecimal every 8 characters = one tier, starting at `Tier.EIGHT`\\n    /// from high bits and working down to `Tier.ONE`.\\n    ///\\n    /// `uint32` should be plenty for any blockchain that measures block times\\n    /// in seconds, but reconsider if deploying to an environment with\\n    /// significantly sub-second block times.\\n    ///\\n    /// ~135 years of 1 second blocks fit into `uint32`.\\n    ///\\n    /// `2^8 / (365 * 24 * 60 * 60)`\\n    ///\\n    /// When a user INCREASES their tier they keep all the block numbers they\\n    /// already had, and get new block times for each increased tiers they have\\n    /// earned.\\n    ///\\n    /// When a user DECREASES their tier they return to `0xFFFFFFFF` (never)\\n    /// for every tier level they remove, but keep their block numbers for the\\n    /// remaining tiers.\\n    ///\\n    /// GUIs are encouraged to make this dynamic very clear for users as\\n    /// round-tripping to a lower status and back is a DESTRUCTIVE operation\\n    /// for block times.\\n    ///\\n    /// The intent is that downstream code can provide additional benefits for\\n    /// members who have maintained a certain tier for/since a long time.\\n    /// These benefits can be provided by inspecting the report, and by\\n    /// on-chain contracts directly,\\n    /// rather than needing to work with snapshots etc.\\n    /// @dev Returns the earliest block the account has held each tier for\\n    /// continuously.\\n    /// This is encoded as a uint256 with blocks represented as 8x\\n    /// concatenated uint32.\\n    /// I.e. Each 4 bytes of the uint256 represents a u32 tier start time.\\n    /// The low bits represent low tiers and high bits the high tiers.\\n    /// Implementing contracts should return 0xFFFFFFFF for lost &\\n    /// never-held tiers.\\n    ///\\n    /// @param account Account to get the report for.\\n    /// @return The report blocks encoded as a uint256.\\n    function report(address account) external view returns (uint256);\\n}\",\"keccak256\":\"0xb123bebe59fee5e8f6faf1236c3f2f2d8adc1fbf7e4f6732a1a94863ae217baa\",\"license\":\"CAL\"}},\"version\":1}"
        }
      },
      "contracts/rain-protocol/contracts/test/TierByConstructionTest.sol": {
        "TierByConstructionTest": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "contract ITier",
                  "name": "tier_",
                  "type": "address"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "inputs": [],
              "name": "constructionBlock",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "ifEight",
              "outputs": [],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "ifFive",
              "outputs": [],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "ifFour",
              "outputs": [],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "ifOne",
              "outputs": [],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "ifSeven",
              "outputs": [],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "ifSix",
              "outputs": [],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "ifThree",
              "outputs": [],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "ifTwo",
              "outputs": [],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "ifZero",
              "outputs": [],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "account_",
                  "type": "address"
                },
                {
                  "internalType": "enum ITier.Tier",
                  "name": "minimumTier_",
                  "type": "uint8"
                }
              ],
              "name": "isTier",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "tierContract",
              "outputs": [
                {
                  "internalType": "contract ITier",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "unlimited",
              "outputs": [],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "evm": {
            "bytecode": {
              "linkReferences": {},
              "object": "608060405234801561001057600080fd5b506040516103eb3803806103eb8339818101604052602081101561003357600080fd5b5051600080546001600160a01b039092166001600160a01b031990921691909117905543600155610382806100696000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80637922deb51161008c578063cb457d4711610066578063cb457d4714610187578063d1abd2de1461018f578063d78aafde14610197578063e149ceb51461019f576100cf565b80637922deb5146101535780637bcd3dc51461015b578063a30872db14610163576100cf565b80630f0af57f146100d45780631fb3d151146100ee5780633f152251146100f85780636bdfcec61461010057806375bf27871461010857806377544f3314610110575b600080fd5b6100dc6101a7565b60408051918252519081900360200190f35b6100f66101ad565b005b6100f66101fe565b6100f661020b565b6100f6610218565b61013f6004803603604081101561012657600080fd5b5080356001600160a01b0316906020013560ff16610221565b604080519115158252519081900360200190f35b6100f66102b4565b6100f66102c1565b61016b6102ce565b604080516001600160a01b039092168252519081900360200190f35b6100f66102dd565b6100f66102df565b6100f66102ec565b6100f66102f9565b60015481565b3360086101ba8282610221565b6101fa576040805162461bcd60e51b815260206004820152600c60248201526b26a4a724a6aaa6afaa24a2a960a11b604482015290519081900360640190fd5b5050565b3360046101ba8282610221565b3360066101ba8282610221565b3360036101ba82825b600080546040805163e053ea3160e01b81526001600160a01b03868116600483015291516102a693929092169163e053ea3191602480820192602092909190829003018186803b15801561027457600080fd5b505afa158015610288573d6000803e3d6000fd5b505050506040513d602081101561029e57600080fd5b505183610306565b600154101590505b92915050565b3360076101ba8282610221565b3360006101ba8282610221565b6000546001600160a01b031681565b565b3360016101ba8282610221565b3360056101ba8282610221565b3360026101ba8282610221565b60008082600881111561031557fe5b1415610323575060006102ae565b6000600183600881111561033357fe5b0360200290508084901c63ffffffff169150509291505056fea26469706673582212200b616f96bcb70093082ff712203c4ed8789a23dfc2ee7dcd59917002590af2e364736f6c634300060c0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x3EB CODESIZE SUB DUP1 PUSH2 0x3EB DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x33 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE NUMBER PUSH1 0x1 SSTORE PUSH2 0x382 DUP1 PUSH2 0x69 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7922DEB5 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xCB457D47 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xCB457D47 EQ PUSH2 0x187 JUMPI DUP1 PUSH4 0xD1ABD2DE EQ PUSH2 0x18F JUMPI DUP1 PUSH4 0xD78AAFDE EQ PUSH2 0x197 JUMPI DUP1 PUSH4 0xE149CEB5 EQ PUSH2 0x19F JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x7922DEB5 EQ PUSH2 0x153 JUMPI DUP1 PUSH4 0x7BCD3DC5 EQ PUSH2 0x15B JUMPI DUP1 PUSH4 0xA30872DB EQ PUSH2 0x163 JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0xF0AF57F EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x1FB3D151 EQ PUSH2 0xEE JUMPI DUP1 PUSH4 0x3F152251 EQ PUSH2 0xF8 JUMPI DUP1 PUSH4 0x6BDFCEC6 EQ PUSH2 0x100 JUMPI DUP1 PUSH4 0x75BF2787 EQ PUSH2 0x108 JUMPI DUP1 PUSH4 0x77544F33 EQ PUSH2 0x110 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDC PUSH2 0x1A7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0xF6 PUSH2 0x1AD JUMP JUMPDEST STOP JUMPDEST PUSH2 0xF6 PUSH2 0x1FE JUMP JUMPDEST PUSH2 0xF6 PUSH2 0x20B JUMP JUMPDEST PUSH2 0xF6 PUSH2 0x218 JUMP JUMPDEST PUSH2 0x13F PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x126 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH1 0xFF AND PUSH2 0x221 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0xF6 PUSH2 0x2B4 JUMP JUMPDEST PUSH2 0xF6 PUSH2 0x2C1 JUMP JUMPDEST PUSH2 0x16B PUSH2 0x2CE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0xF6 PUSH2 0x2DD JUMP JUMPDEST PUSH2 0xF6 PUSH2 0x2DF JUMP JUMPDEST PUSH2 0xF6 PUSH2 0x2EC JUMP JUMPDEST PUSH2 0xF6 PUSH2 0x2F9 JUMP JUMPDEST PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST CALLER PUSH1 0x8 PUSH2 0x1BA DUP3 DUP3 PUSH2 0x221 JUMP JUMPDEST PUSH2 0x1FA JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH12 0x26A4A724A6AAA6AFAA24A2A9 PUSH1 0xA1 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST CALLER PUSH1 0x4 PUSH2 0x1BA DUP3 DUP3 PUSH2 0x221 JUMP JUMPDEST CALLER PUSH1 0x6 PUSH2 0x1BA DUP3 DUP3 PUSH2 0x221 JUMP JUMPDEST CALLER PUSH1 0x3 PUSH2 0x1BA DUP3 DUP3 JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0xE053EA31 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 MLOAD PUSH2 0x2A6 SWAP4 SWAP3 SWAP1 SWAP3 AND SWAP2 PUSH4 0xE053EA31 SWAP2 PUSH1 0x24 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x274 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x288 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x29E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD DUP4 PUSH2 0x306 JUMP JUMPDEST PUSH1 0x1 SLOAD LT ISZERO SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST CALLER PUSH1 0x7 PUSH2 0x1BA DUP3 DUP3 PUSH2 0x221 JUMP JUMPDEST CALLER PUSH1 0x0 PUSH2 0x1BA DUP3 DUP3 PUSH2 0x221 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST JUMP JUMPDEST CALLER PUSH1 0x1 PUSH2 0x1BA DUP3 DUP3 PUSH2 0x221 JUMP JUMPDEST CALLER PUSH1 0x5 PUSH2 0x1BA DUP3 DUP3 PUSH2 0x221 JUMP JUMPDEST CALLER PUSH1 0x2 PUSH2 0x1BA DUP3 DUP3 PUSH2 0x221 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x315 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x323 JUMPI POP PUSH1 0x0 PUSH2 0x2AE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP4 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x333 JUMPI INVALID JUMPDEST SUB PUSH1 0x20 MUL SWAP1 POP DUP1 DUP5 SWAP1 SHR PUSH4 0xFFFFFFFF AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SIGNEXTEND PUSH2 0x6F96 0xBC 0xB7 STOP SWAP4 ADDMOD 0x2F 0xF7 SLT KECCAK256 EXTCODECOPY 0x4E 0xD8 PUSH25 0x9A23DFC2EE7DCD59917002590AF2E364736F6C634300060C00 CALLER ",
              "sourceMap": "307:2090:1:-:0;;;433:77;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;433:77:1;1880:12:3;:28;;-1:-1:-1;;;;;1880:28:3;;;-1:-1:-1;;;;;;1880:28:3;;;;;;;;;1938:12;1880:28;1918:32;307:2090:1;;;;;;"
            },
            "deployedBytecode": {
              "immutableReferences": {},
              "linkReferences": {},
              "object": "608060405234801561001057600080fd5b50600436106100cf5760003560e01c80637922deb51161008c578063cb457d4711610066578063cb457d4714610187578063d1abd2de1461018f578063d78aafde14610197578063e149ceb51461019f576100cf565b80637922deb5146101535780637bcd3dc51461015b578063a30872db14610163576100cf565b80630f0af57f146100d45780631fb3d151146100ee5780633f152251146100f85780636bdfcec61461010057806375bf27871461010857806377544f3314610110575b600080fd5b6100dc6101a7565b60408051918252519081900360200190f35b6100f66101ad565b005b6100f66101fe565b6100f661020b565b6100f6610218565b61013f6004803603604081101561012657600080fd5b5080356001600160a01b0316906020013560ff16610221565b604080519115158252519081900360200190f35b6100f66102b4565b6100f66102c1565b61016b6102ce565b604080516001600160a01b039092168252519081900360200190f35b6100f66102dd565b6100f66102df565b6100f66102ec565b6100f66102f9565b60015481565b3360086101ba8282610221565b6101fa576040805162461bcd60e51b815260206004820152600c60248201526b26a4a724a6aaa6afaa24a2a960a11b604482015290519081900360640190fd5b5050565b3360046101ba8282610221565b3360066101ba8282610221565b3360036101ba82825b600080546040805163e053ea3160e01b81526001600160a01b03868116600483015291516102a693929092169163e053ea3191602480820192602092909190829003018186803b15801561027457600080fd5b505afa158015610288573d6000803e3d6000fd5b505050506040513d602081101561029e57600080fd5b505183610306565b600154101590505b92915050565b3360076101ba8282610221565b3360006101ba8282610221565b6000546001600160a01b031681565b565b3360016101ba8282610221565b3360056101ba8282610221565b3360026101ba8282610221565b60008082600881111561031557fe5b1415610323575060006102ae565b6000600183600881111561033357fe5b0360200290508084901c63ffffffff169150509291505056fea26469706673582212200b616f96bcb70093082ff712203c4ed8789a23dfc2ee7dcd59917002590af2e364736f6c634300060c0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7922DEB5 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xCB457D47 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xCB457D47 EQ PUSH2 0x187 JUMPI DUP1 PUSH4 0xD1ABD2DE EQ PUSH2 0x18F JUMPI DUP1 PUSH4 0xD78AAFDE EQ PUSH2 0x197 JUMPI DUP1 PUSH4 0xE149CEB5 EQ PUSH2 0x19F JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x7922DEB5 EQ PUSH2 0x153 JUMPI DUP1 PUSH4 0x7BCD3DC5 EQ PUSH2 0x15B JUMPI DUP1 PUSH4 0xA30872DB EQ PUSH2 0x163 JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0xF0AF57F EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x1FB3D151 EQ PUSH2 0xEE JUMPI DUP1 PUSH4 0x3F152251 EQ PUSH2 0xF8 JUMPI DUP1 PUSH4 0x6BDFCEC6 EQ PUSH2 0x100 JUMPI DUP1 PUSH4 0x75BF2787 EQ PUSH2 0x108 JUMPI DUP1 PUSH4 0x77544F33 EQ PUSH2 0x110 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDC PUSH2 0x1A7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0xF6 PUSH2 0x1AD JUMP JUMPDEST STOP JUMPDEST PUSH2 0xF6 PUSH2 0x1FE JUMP JUMPDEST PUSH2 0xF6 PUSH2 0x20B JUMP JUMPDEST PUSH2 0xF6 PUSH2 0x218 JUMP JUMPDEST PUSH2 0x13F PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x126 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH1 0xFF AND PUSH2 0x221 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0xF6 PUSH2 0x2B4 JUMP JUMPDEST PUSH2 0xF6 PUSH2 0x2C1 JUMP JUMPDEST PUSH2 0x16B PUSH2 0x2CE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0xF6 PUSH2 0x2DD JUMP JUMPDEST PUSH2 0xF6 PUSH2 0x2DF JUMP JUMPDEST PUSH2 0xF6 PUSH2 0x2EC JUMP JUMPDEST PUSH2 0xF6 PUSH2 0x2F9 JUMP JUMPDEST PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST CALLER PUSH1 0x8 PUSH2 0x1BA DUP3 DUP3 PUSH2 0x221 JUMP JUMPDEST PUSH2 0x1FA JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH12 0x26A4A724A6AAA6AFAA24A2A9 PUSH1 0xA1 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST CALLER PUSH1 0x4 PUSH2 0x1BA DUP3 DUP3 PUSH2 0x221 JUMP JUMPDEST CALLER PUSH1 0x6 PUSH2 0x1BA DUP3 DUP3 PUSH2 0x221 JUMP JUMPDEST CALLER PUSH1 0x3 PUSH2 0x1BA DUP3 DUP3 JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0xE053EA31 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 MLOAD PUSH2 0x2A6 SWAP4 SWAP3 SWAP1 SWAP3 AND SWAP2 PUSH4 0xE053EA31 SWAP2 PUSH1 0x24 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x274 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x288 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x29E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD DUP4 PUSH2 0x306 JUMP JUMPDEST PUSH1 0x1 SLOAD LT ISZERO SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST CALLER PUSH1 0x7 PUSH2 0x1BA DUP3 DUP3 PUSH2 0x221 JUMP JUMPDEST CALLER PUSH1 0x0 PUSH2 0x1BA DUP3 DUP3 PUSH2 0x221 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST JUMP JUMPDEST CALLER PUSH1 0x1 PUSH2 0x1BA DUP3 DUP3 PUSH2 0x221 JUMP JUMPDEST CALLER PUSH1 0x5 PUSH2 0x1BA DUP3 DUP3 PUSH2 0x221 JUMP JUMPDEST CALLER PUSH1 0x2 PUSH2 0x1BA DUP3 DUP3 PUSH2 0x221 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x315 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x323 JUMPI POP PUSH1 0x0 PUSH2 0x2AE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP4 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x333 JUMPI INVALID JUMPDEST SUB PUSH1 0x20 MUL SWAP1 POP DUP1 DUP5 SWAP1 SHR PUSH4 0xFFFFFFFF AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SIGNEXTEND PUSH2 0x6F96 0xBC 0xB7 STOP SWAP4 ADDMOD 0x2F 0xF7 SLT KECCAK256 EXTCODECOPY 0x4E 0xD8 PUSH25 0x9A23DFC2EE7DCD59917002590AF2E364736F6C634300060C00 CALLER ",
              "sourceMap": "307:2090:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1791:32:3;;;:::i;:::-;;;;;;;;;;;;;;;;2252:103:1;;;:::i;:::-;;1511:101;;;:::i;1880:99::-;;;:::i;1324:103::-;;;:::i;2570:256:3:-;;;;;;;;;;;;;;;;-1:-1:-1;2570:256:3;;-1:-1:-1;;;;;2570:256:3;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;2064:103:1;;;:::i;774:101::-;;;:::i;1760:25:3:-;;;:::i;:::-;;;;-1:-1:-1;;;;;1760:25:3;;;;;;;;;;;;;;632:58:1;;;:::i;958:99::-;;;:::i;1696:101::-;;;:::i;1140:99::-;;;:::i;1791:32:3:-;;;;:::o;2252:103:1:-;2318:10;2330:16;3789:30:3;3796:8;3806:12;3789:6;:30::i;:::-;3768:89;;;;;-1:-1:-1;;;3768:89:3;;;;;;;;;;;;-1:-1:-1;;;3768:89:3;;;;;;;;;;;;;;;2252:103:1;;:::o;1511:101::-;1576:10;1588:15;3789:30:3;3796:8;3806:12;3789:6;:30::i;1880:99:1:-;1944:10;1956:14;3789:30:3;3796:8;3806:12;3789:6;:30::i;1324:103:1:-;1390:10;1402:16;3789:30:3;3796:8;3806:12;2570:256;2674:4;2754:12;;:29;;;-1:-1:-1;;;2754:29:3;;-1:-1:-1;;;;;2754:29:3;;;;;;;;;2722:97;;2754:12;;;;;:19;;:29;;;;;;;;;;;;;;;:12;:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2754:29:3;2797:12;2722:18;:97::i;:::-;2701:17;;:118;;2694:125;;2570:256;;;;;:::o;2064:103:1:-;2130:10;2142:16;3789:30:3;3796:8;3806:12;3789:6;:30::i;774:101:1:-;839:10;851:15;3789:30:3;3796:8;3806:12;3789:6;:30::i;1760:25::-;;;-1:-1:-1;;;;;1760:25:3;;:::o;632:58:1:-;:::o;958:99::-;1022:10;1034:14;3789:30:3;3796:8;3806:12;3789:6;:30::i;1696:101:1:-;1761:10;1773:15;3789:30:3;3796:8;3806:12;3789:6;:30::i;1140:99:1:-;1204:10;1216:14;3789:30:3;3796:8;3806:12;3789:6;:30::i;2534:441:0:-;2635:7;;2763:5;:24;;;;;;;;;2759:43;;;-1:-1:-1;2798:1:0;2791:8;;2759:43;2812:15;2848:1;2839:5;2831:14;;;;;;;;:18;2853:2;2830:25;2812:43;;2936:7;2925;:18;;2872:96;;2865:103;;;2534:441;;;;:::o"
            },
            "methodIdentifiers": {
              "constructionBlock()": "0f0af57f",
              "ifEight()": "1fb3d151",
              "ifFive()": "d78aafde",
              "ifFour()": "3f152251",
              "ifOne()": "d1abd2de",
              "ifSeven()": "7922deb5",
              "ifSix()": "6bdfcec6",
              "ifThree()": "75bf2787",
              "ifTwo()": "e149ceb5",
              "ifZero()": "7bcd3dc5",
              "isTier(address,uint8)": "77544f33",
              "tierContract()": "a30872db",
              "unlimited()": "cb457d47"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ITier\",\"name\":\"tier_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"constructionBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ifEight\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ifFive\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ifFour\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ifOne\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ifSeven\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ifSix\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ifThree\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ifTwo\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ifZero\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"},{\"internalType\":\"enum ITier.Tier\",\"name\":\"minimumTier_\",\"type\":\"uint8\"}],\"name\":\"isTier\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tierContract\",\"outputs\":[{\"internalType\":\"contract ITier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlimited\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"tier_\":\"The tier contract for `TierByConstruction`.\"}},\"isTier(address,uint8)\":{\"params\":{\"account_\":\"Account to check status of.\",\"minimumTier_\":\"Minimum tier for the account.\"},\"returns\":{\"_0\":\"True if the status is currently held.\"}}},\"title\":\"TierByConstructionTest An empty contract that facilitates tests enumerating behaviour of the modifiers at each tier.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"ifEight()\":{\"notice\":\"Requires `Tier.EIGHT` to call.\"},\"ifFive()\":{\"notice\":\"Requires `Tier.FIVE` to call.\"},\"ifFour()\":{\"notice\":\"Requires `Tier.FOUR` to call.\"},\"ifOne()\":{\"notice\":\"Requires `Tier.ONE` to call.\"},\"ifSeven()\":{\"notice\":\"Requires `Tier.SEVEN` to call.\"},\"ifSix()\":{\"notice\":\"Requires `Tier.SIX` to call.\"},\"ifThree()\":{\"notice\":\"Requires `Tier.THREE` to call.\"},\"ifTwo()\":{\"notice\":\"Requires `Tier.TWO` to call.\"},\"ifZero()\":{\"notice\":\"Requires `Tier.ZERO` to call.\"},\"isTier(address,uint8)\":{\"notice\":\"Check if an account has held AT LEAST the given tier according to `tierContract` since construction. The account MUST have held the tier continuously from construction until the \\\"current\\\" state according to `report`. Note that `report` PROBABLY is current as at the block this function is called but MAYBE NOT. The `ITier` contract is free to manage reports however makes sense.\"},\"unlimited()\":{\"notice\":\"External function with no modifier to use as a control for testing.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/rain-protocol/contracts/test/TierByConstructionTest.sol\":\"TierByConstructionTest\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/rain-protocol/contracts/libraries/TierUtil.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\n\\npragma solidity 0.6.12;\\n\\nimport { ITier } from \\\"../tier/ITier.sol\\\";\\n\\n/// @title TierUtil\\n/// @notice `TierUtil` implements several pure functions that can be\\n/// used to interface with reports.\\n/// - `tierAtBlockFromReport`: Returns the highest status achieved relative to\\n/// a block number and report. Statuses gained after that block are ignored.\\n/// - `tierBlock`: Returns the block that a given tier has been held\\n/// since according to a report.\\n/// - `truncateTiersAbove`: Resets all the tiers above the reference tier.\\n/// - `updateBlocksForTierRange`: Updates a report with a block\\n/// number for every tier in a range.\\n/// - `updateReportWithTierAtBlock`: Updates a report to a new tier.\\n/// @dev Utilities to consistently read, write and manipulate tiers in reports.\\n/// The low-level bit shifting can be difficult to get right so this factors\\n/// that out.\\nlibrary TierUtil {\\n\\n    /// UNINITIALIZED report is 0xFF.. as no tier has been held.\\n    uint256 constant public UNINITIALIZED = uint256(-1);\\n\\n    /// Returns the highest tier achieved relative to a block number\\n    /// and report.\\n    ///\\n    /// Note that typically the report will be from the _current_ contract\\n    /// state, i.e. `block.number` but not always. Tiers gained after the\\n    /// reference block are ignored.\\n    ///\\n    /// When the `report` comes from a later block than the `blockNumber` this\\n    /// means the user must have held the tier continuously from `blockNumber`\\n    /// _through_ to the report block.\\n    /// I.e. NOT a snapshot.\\n    ///\\n    /// @param report_ A report as per `ITier`.\\n    /// @param blockNumber_ The block number to check the tiers against.\\n    /// @return The highest tier held since `blockNumber` as per `report`.\\n    function tierAtBlockFromReport(\\n        uint256 report_,\\n        uint256 blockNumber_\\n    )\\n        internal pure returns (ITier.Tier)\\n    {\\n        for (uint256 i_ = 0; i_ < 8; i_++) {\\n            if (uint32(uint256(report_ >> (i_*32))) > uint32(blockNumber_)) {\\n                return ITier.Tier(i_);\\n            }\\n        }\\n        return ITier.Tier(8);\\n    }\\n\\n    /// Returns the block that a given tier has been held since from a report.\\n    ///\\n    /// The report MUST encode \\\"never\\\" as 0xFFFFFFFF. This ensures\\n    /// compatibility with `tierAtBlockFromReport`.\\n    ///\\n    /// @param report_ The report to read a block number from.\\n    /// @param tier_ The Tier to read the block number for.\\n    /// @return The block number this has been held since.\\n    function tierBlock(uint256 report_, ITier.Tier tier_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // ZERO is a special case. Everyone has always been at least ZERO,\\n        // since block 0.\\n        if (tier_ == ITier.Tier.ZERO) { return 0; }\\n\\n        uint256 offset_ = (uint256(tier_) - 1) * 32;\\n        return uint256(uint32(\\n            uint256(\\n                report_ >> offset_\\n            )\\n        ));\\n    }\\n\\n    /// Resets all the tiers above the reference tier to 0xFFFFFFFF.\\n    ///\\n    /// @param report_ Report to truncate with high bit 1s.\\n    /// @param tier_ Tier to truncate above (exclusive).\\n    /// @return Truncated report.\\n    function truncateTiersAbove(uint256 report_, ITier.Tier tier_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 offset_ = uint256(tier_) * 32;\\n        uint256 mask_ = (UNINITIALIZED >> offset_) << offset_;\\n        return report_ | mask_;\\n    }\\n\\n    /// Updates a report with a block number for every status integer in a\\n    /// range.\\n    ///\\n    /// Does nothing if the end status is equal or less than the start status.\\n    /// @param report_ The report to update.\\n    /// @param startTier_ The `Tier` at the start of the range (exclusive).\\n    /// @param endTier_ The `Tier` at the end of the range (inclusive).\\n    /// @param blockNumber_ The block number to set for every status\\n    /// in the range.\\n    /// @return The updated report.\\n    function updateBlocksForTierRange(\\n        uint256 report_,\\n        ITier.Tier startTier_,\\n        ITier.Tier endTier_,\\n        uint256 blockNumber_\\n    )\\n        internal pure returns (uint256)\\n    {\\n        uint256 offset_;\\n        for (uint256 i_ = uint256(startTier_); i_ < uint256(endTier_); i_++) {\\n            offset_ = i_ * 32;\\n            report_ =\\n                (report_ & ~uint256(uint256(uint32(UNINITIALIZED)) << offset_))\\n                | uint256(blockNumber_ << offset_);\\n        }\\n        return report_;\\n    }\\n\\n    /// Updates a report to a new status.\\n    ///\\n    /// Internally dispatches to `truncateTiersAbove` and\\n    /// `updateBlocksForTierRange`.\\n    /// The dispatch is based on whether the new tier is above or below the\\n    /// current tier.\\n    /// The `startTier_` MUST match the result of `tierAtBlockFromReport`.\\n    /// It is expected the caller will know the current tier when\\n    /// calling this function and need to do other things in the calling scope\\n    /// with it.\\n    ///\\n    /// @param report_ The report to update.\\n    /// @param startTier_ The tier to start updating relative to. Data above\\n    /// this tier WILL BE LOST so probably should be the current tier.\\n    /// @param endTier_ The new highest tier held, at the given block number.\\n    /// @param blockNumber_ The block number to update the highest tier to, and\\n    /// intermediate tiers from `startTier_`.\\n    /// @return The updated report.\\n    function updateReportWithTierAtBlock(\\n        uint256 report_,\\n        ITier.Tier startTier_,\\n        ITier.Tier endTier_,\\n        uint256 blockNumber_\\n    )\\n        internal pure returns (uint256)\\n    {\\n        return endTier_ < startTier_\\n            ? truncateTiersAbove(report_, endTier_)\\n            : updateBlocksForTierRange(\\n                report_,\\n                startTier_,\\n                endTier_,\\n                blockNumber_\\n            );\\n    }\\n\\n}\",\"keccak256\":\"0x0398aaf4ab30e84402def1987e050e7ad45082039a58d33bf6a99c5f3ebd42a7\",\"license\":\"CAL\"},\"contracts/rain-protocol/contracts/test/TierByConstructionTest.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\n\\npragma solidity 0.6.12;\\n\\nimport { ITier } from \\\"../tier/ITier.sol\\\";\\nimport { TierByConstruction } from \\\"../tier/TierByConstruction.sol\\\";\\n\\n/// @title TierByConstructionTest\\n/// An empty contract that facilitates tests enumerating behaviour of the\\n/// modifiers at each tier.\\ncontract TierByConstructionTest is TierByConstruction {\\n\\n    /// @param tier_ The tier contract for `TierByConstruction`.\\n    constructor(ITier tier_)\\n        public\\n        TierByConstruction(tier_) { } // solhint-disable-line no-empty-blocks\\n\\n    /// External function with no modifier to use as a control for testing.\\n    function unlimited()\\n        external\\n        view\\n    { } // solhint-disable-line no-empty-blocks\\n\\n    /// Requires `Tier.ZERO` to call.\\n    function ifZero()\\n        external\\n        view\\n        onlyTier(msg.sender, ITier.Tier.ZERO)\\n    { } // solhint-disable-line no-empty-blocks\\n\\n    /// Requires `Tier.ONE` to call.\\n    function ifOne()\\n        external\\n        view\\n        onlyTier(msg.sender, ITier.Tier.ONE)\\n    { } // solhint-disable-line no-empty-blocks\\n\\n    /// Requires `Tier.TWO` to call.\\n    function ifTwo()\\n        external\\n        view\\n        onlyTier(msg.sender, ITier.Tier.TWO)\\n    { } // solhint-disable-line no-empty-blocks\\n\\n    /// Requires `Tier.THREE` to call.\\n    function ifThree()\\n        external\\n        view\\n        onlyTier(msg.sender, ITier.Tier.THREE)\\n    { } // solhint-disable-line no-empty-blocks\\n\\n    /// Requires `Tier.FOUR` to call.\\n    function ifFour()\\n        external\\n        view\\n        onlyTier(msg.sender, ITier.Tier.FOUR)\\n    { } // solhint-disable-line no-empty-blocks\\n\\n    /// Requires `Tier.FIVE` to call.\\n    function ifFive()\\n        external\\n        view\\n        onlyTier(msg.sender, ITier.Tier.FIVE)\\n    { } // solhint-disable-line no-empty-blocks\\n\\n    /// Requires `Tier.SIX` to call.\\n    function ifSix()\\n        external\\n        view\\n        onlyTier(msg.sender, ITier.Tier.SIX)\\n    { } // solhint-disable-line no-empty-blocks\\n\\n    /// Requires `Tier.SEVEN` to call.\\n    function ifSeven()\\n        external\\n        view\\n        onlyTier(msg.sender, ITier.Tier.SEVEN)\\n    { } // solhint-disable-line no-empty-blocks\\n\\n    /// Requires `Tier.EIGHT` to call.\\n    function ifEight()\\n        external\\n        view\\n        onlyTier(msg.sender, ITier.Tier.EIGHT)\\n    { } // solhint-disable-line no-empty-blocks\\n}\",\"keccak256\":\"0x4b6c85e6a490b352d6c1bf4d94a6195d37c3b98c599eddca21cfd63ff1800f2f\",\"license\":\"CAL\"},\"contracts/rain-protocol/contracts/tier/ITier.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\n\\npragma solidity 0.6.12;\\n\\n/// @title ITier\\n/// @notice `ITier` is a simple interface that contracts can\\n/// implement to provide membership lists for other contracts.\\n///\\n/// There are many use-cases for a time-preserving,\\n/// conditional membership list.\\n///\\n/// Some examples include:\\n///\\n/// - Self-serve whitelist to participate in fundraising\\n/// - Lists of users who can claim airdrops and perks\\n/// - Pooling resources with implied governance/reward tiers\\n/// - POAP style attendance proofs allowing access to future exclusive events\\n///\\n/// @dev Standard interface to a tiered membership.\\n///\\n/// A \\\"membership\\\" can represent many things:\\n/// - Exclusive access.\\n/// - Participation in some event or process.\\n/// - KYC completion.\\n/// - Combination of sub-memberships.\\n/// - Etc.\\n///\\n/// The high level requirements for a contract implementing `ITier`:\\n/// - MUST represent held tiers with the `Tier` enum.\\n/// - MUST implement `report`.\\n///   - The report is a `uint256` that SHOULD represent the block each tier has\\n///     been continuously held since encoded as `uint32`.\\n///   - The encoded tiers start at ONE; ZERO is implied if no tier has ever\\n///     been held.\\n///   - `Tier.ZERO` is NOT encoded in the report, it is simply the fallback\\n///     value.\\n///   - If a tier is lost the block data is erased for that tier and will be\\n///     set if/when the tier is regained to the new block.\\n///   - If the historical block information is not available the report MAY\\n///     return `0x00000000` for all held tiers.\\n///   - Tiers that are lost or have never been held MUST return `0xFFFFFFFF`.\\n/// - SHOULD implement `setTier`.\\n///   - Contracts SHOULD revert with `SET_TIER` error if they cannot\\n///     meaningfully set a tier directly.\\n///     For example a contract that can only derive a membership tier by\\n///     reading the state of an external contract cannot set tiers.\\n///   - Contracts implementing `setTier` SHOULD error with `SET_ZERO_TIER`\\n///     if `Tier.ZERO` is being set.\\n/// - MUST emit `TierChange` when `setTier` successfully writes a new tier.\\n///   - Contracts that cannot meaningfully set a tier are exempt.\\ninterface ITier {\\n    /// 9 Possible tiers.\\n    /// Fits nicely as uint32 in uint256 which is helpful for internal storage\\n    /// concerns.\\n    /// 8 tiers can be achieved, ZERO is the tier when no tier has been\\n    /// achieved.\\n    enum Tier {\\n        ZERO,\\n        ONE,\\n        TWO,\\n        THREE,\\n        FOUR,\\n        FIVE,\\n        SIX,\\n        SEVEN,\\n        EIGHT\\n    }\\n\\n    /// Every time a Tier changes we log start and end Tier against the\\n    /// account.\\n    /// This MAY NOT be emitted if reports are being read from the state of an\\n    /// external contract.\\n    event TierChange(\\n        address indexed account,\\n        Tier indexed startTier,\\n        Tier indexed endTier\\n    );\\n\\n    /// @notice Users can set their own tier by calling `setTier`.\\n    ///\\n    /// The contract that implements `ITier` is responsible for checking\\n    /// eligibility and/or taking actions required to set the tier.\\n    ///\\n    /// For example, the contract must take/refund any tokens relevant to\\n    /// changing the tier.\\n    ///\\n    /// Obviously the user is responsible for any approvals for this action\\n    /// prior to calling `setTier`.\\n    ///\\n    /// When the tier is changed a `TierChange` event will be emmited as:\\n    /// ```\\n    /// event TierChange(address account, Tier startTier, Tier endTier);\\n    /// ```\\n    ///\\n    /// The `setTier` function includes arbitrary data as the third\\n    /// parameter. This can be used to disambiguate in the case that\\n    /// there may be many possible options for a user to achieve some tier.\\n    ///\\n    /// For example, consider the case where `Tier.THREE` can be achieved\\n    /// by EITHER locking 1x rare NFT or 3x uncommon NFTs. A user with both\\n    /// could use `data` to explicitly state their intent.\\n    ///\\n    /// NOTE however that _any_ address can call `setTier` for any other\\n    /// address.\\n    ///\\n    /// If you implement `data` or anything that changes state then be very\\n    /// careful to avoid griefing attacks.\\n    ///\\n    /// The `data` parameter can also be ignored by the contract implementing\\n    /// `ITier`. For example, ERC20 tokens are fungible so only the balance\\n    /// approved by the user is relevant to a tier change.\\n    ///\\n    /// The `setTier` function SHOULD prevent users from reassigning\\n    /// `Tier.ZERO` to themselves.\\n    ///\\n    /// The `Tier.ZERO` status represents never having any status.\\n    /// @dev Updates the tier of an account.\\n    ///\\n    /// The implementing contract is responsible for all checks and state\\n    /// changes required to set the tier. For example, taking/refunding\\n    /// funds/NFTs etc.\\n    ///\\n    /// Contracts may disallow directly setting tiers, preferring to derive\\n    /// reports from other onchain data.\\n    /// In this case they should `revert(\\\"SET_TIER\\\");`.\\n    ///\\n    /// @param account Account to change the tier for.\\n    /// @param endTier Tier after the change.\\n    /// @param data Arbitrary input to disambiguate ownership\\n    /// (e.g. NFTs to lock).\\n    function setTier(\\n        address account,\\n        Tier endTier,\\n        bytes memory data\\n    )\\n        external;\\n\\n    /// @notice A tier report is a `uint256` that contains each of the block\\n    /// numbers each tier has been held continously since as a `uint32`.\\n    /// There are 9 possible tier, starting with `Tier.ZERO` for `0` offset or\\n    /// \\\"never held any tier\\\" then working up through 8x 4 byte offsets to the\\n    /// full 256 bits.\\n    ///\\n    /// Low bits = Lower tier.\\n    ///\\n    /// In hexadecimal every 8 characters = one tier, starting at `Tier.EIGHT`\\n    /// from high bits and working down to `Tier.ONE`.\\n    ///\\n    /// `uint32` should be plenty for any blockchain that measures block times\\n    /// in seconds, but reconsider if deploying to an environment with\\n    /// significantly sub-second block times.\\n    ///\\n    /// ~135 years of 1 second blocks fit into `uint32`.\\n    ///\\n    /// `2^8 / (365 * 24 * 60 * 60)`\\n    ///\\n    /// When a user INCREASES their tier they keep all the block numbers they\\n    /// already had, and get new block times for each increased tiers they have\\n    /// earned.\\n    ///\\n    /// When a user DECREASES their tier they return to `0xFFFFFFFF` (never)\\n    /// for every tier level they remove, but keep their block numbers for the\\n    /// remaining tiers.\\n    ///\\n    /// GUIs are encouraged to make this dynamic very clear for users as\\n    /// round-tripping to a lower status and back is a DESTRUCTIVE operation\\n    /// for block times.\\n    ///\\n    /// The intent is that downstream code can provide additional benefits for\\n    /// members who have maintained a certain tier for/since a long time.\\n    /// These benefits can be provided by inspecting the report, and by\\n    /// on-chain contracts directly,\\n    /// rather than needing to work with snapshots etc.\\n    /// @dev Returns the earliest block the account has held each tier for\\n    /// continuously.\\n    /// This is encoded as a uint256 with blocks represented as 8x\\n    /// concatenated uint32.\\n    /// I.e. Each 4 bytes of the uint256 represents a u32 tier start time.\\n    /// The low bits represent low tiers and high bits the high tiers.\\n    /// Implementing contracts should return 0xFFFFFFFF for lost &\\n    /// never-held tiers.\\n    ///\\n    /// @param account Account to get the report for.\\n    /// @return The report blocks encoded as a uint256.\\n    function report(address account) external view returns (uint256);\\n}\",\"keccak256\":\"0xb123bebe59fee5e8f6faf1236c3f2f2d8adc1fbf7e4f6732a1a94863ae217baa\",\"license\":\"CAL\"},\"contracts/rain-protocol/contracts/tier/TierByConstruction.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\n\\npragma solidity 0.6.12;\\n\\nimport { TierUtil } from \\\"../libraries/TierUtil.sol\\\";\\nimport { ITier } from \\\"./ITier.sol\\\";\\n\\n/// @title TierByConstruction\\n/// @notice `TierByConstruction` is a base contract for other\\n/// contracts to inherit from.\\n///\\n/// It exposes `isTier` and the corresponding modifier `onlyTier`.\\n///\\n/// This ensures that the address has held at least the given tier\\n/// since the contract was constructed.\\n///\\n/// We check against the construction time of the contract rather\\n/// than the current block to avoid various exploits.\\n///\\n/// Users should not be able to gain a tier for a single block, claim\\n/// benefits then remove the tier within the same block.\\n///\\n/// The construction block provides a simple and generic reference\\n/// point that is difficult to manipulate/predict.\\n///\\n/// Note that `ReadOnlyTier` contracts must carefully consider use\\n/// with `TierByConstruction` as they tend to return `0x00000000` for\\n/// any/all tiers held. There needs to be additional safeguards to\\n/// mitigate \\\"flash tier\\\" attacks.\\n///\\n/// Note that an account COULD be `TierByConstruction` then lower/\\n/// remove a tier, then no longer be eligible when they regain the\\n/// tier. Only _continuously held_ tiers are valid against the\\n/// construction block check as this is native behaviour of the\\n/// `report` function in `ITier`.\\n///\\n/// Technically the `ITier` could re-enter the `TierByConstruction`\\n/// so the `onlyTier` modifier runs AFTER the modified function.\\n///\\n/// @dev Enforces tiers held by contract contruction block.\\n/// The construction block is compared against the blocks returned by `report`.\\n/// The `ITier` contract is paramaterised and set during construction.\\ncontract TierByConstruction {\\n    ITier public tierContract;\\n    uint256 public constructionBlock;\\n\\n    constructor(ITier tierContract_) public {\\n        tierContract = tierContract_;\\n        constructionBlock = block.number;\\n    }\\n\\n    /// Check if an account has held AT LEAST the given tier according to\\n    /// `tierContract` since construction.\\n    /// The account MUST have held the tier continuously from construction\\n    /// until the \\\"current\\\" state according to `report`.\\n    /// Note that `report` PROBABLY is current as at the block this function is\\n    /// called but MAYBE NOT.\\n    /// The `ITier` contract is free to manage reports however makes sense.\\n    ///\\n    /// @param account_ Account to check status of.\\n    /// @param minimumTier_ Minimum tier for the account.\\n    /// @return True if the status is currently held.\\n    function isTier(address account_, ITier.Tier minimumTier_)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return constructionBlock >= TierUtil.tierBlock(\\n            tierContract.report(account_),\\n            minimumTier_\\n        );\\n    }\\n\\n    /// Modifier that restricts access to functions depending on the tier\\n    /// required by the function.\\n    ///\\n    /// `isTier` involves an external call to tierContract.report.\\n    /// `require` happens AFTER the modified function to avoid rentrant\\n    /// `ITier` code.\\n    /// Also `report` from `ITier` is `view` so the compiler will error on\\n    /// attempted state modification.\\n    // solhint-disable-next-line max-line-length\\n    /// https://consensys.github.io/smart-contract-best-practices/recommendations/#use-modifiers-only-for-checks\\n    ///\\n    /// Do NOT use this to guard setting the tier on an `ITier` contract.\\n    /// The initial tier would be checked AFTER it has already been\\n    /// modified which is unsafe.\\n    ///\\n    /// @param account_ Account to enforce tier of.\\n    /// @param minimumTier_ Minimum tier for the account.\\n    modifier onlyTier(address account_, ITier.Tier minimumTier_) {\\n        _;\\n        require(\\n            isTier(account_, minimumTier_),\\n            \\\"MINIMUM_TIER\\\"\\n        );\\n    }\\n}\",\"keccak256\":\"0x000493fc4b78d7366e0111d75b2cca56e992a8fc07fbb012b3f35d3ed650a9c4\",\"license\":\"CAL\"}},\"version\":1}"
        }
      },
      "contracts/rain-protocol/contracts/tier/ITier.sol": {
        "ITier": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "enum ITier.Tier",
                  "name": "startTier",
                  "type": "uint8"
                },
                {
                  "indexed": true,
                  "internalType": "enum ITier.Tier",
                  "name": "endTier",
                  "type": "uint8"
                }
              ],
              "name": "TierChange",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "report",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "internalType": "enum ITier.Tier",
                  "name": "endTier",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "name": "setTier",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "evm": {
            "bytecode": {
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "report(address)": "e053ea31",
              "setTier(address,uint8,bytes)": "52dab69d"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum ITier.Tier\",\"name\":\"startTier\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"enum ITier.Tier\",\"name\":\"endTier\",\"type\":\"uint8\"}],\"name\":\"TierChange\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"report\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"enum ITier.Tier\",\"name\":\"endTier\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"setTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Standard interface to a tiered membership. A \\\"membership\\\" can represent many things: - Exclusive access. - Participation in some event or process. - KYC completion. - Combination of sub-memberships. - Etc. The high level requirements for a contract implementing `ITier`: - MUST represent held tiers with the `Tier` enum. - MUST implement `report`.   - The report is a `uint256` that SHOULD represent the block each tier has     been continuously held since encoded as `uint32`.   - The encoded tiers start at ONE; ZERO is implied if no tier has ever     been held.   - `Tier.ZERO` is NOT encoded in the report, it is simply the fallback     value.   - If a tier is lost the block data is erased for that tier and will be     set if/when the tier is regained to the new block.   - If the historical block information is not available the report MAY     return `0x00000000` for all held tiers.   - Tiers that are lost or have never been held MUST return `0xFFFFFFFF`. - SHOULD implement `setTier`.   - Contracts SHOULD revert with `SET_TIER` error if they cannot     meaningfully set a tier directly.     For example a contract that can only derive a membership tier by     reading the state of an external contract cannot set tiers.   - Contracts implementing `setTier` SHOULD error with `SET_ZERO_TIER`     if `Tier.ZERO` is being set. - MUST emit `TierChange` when `setTier` successfully writes a new tier.   - Contracts that cannot meaningfully set a tier are exempt.\",\"kind\":\"dev\",\"methods\":{\"report(address)\":{\"details\":\"Returns the earliest block the account has held each tier for continuously. This is encoded as a uint256 with blocks represented as 8x concatenated uint32. I.e. Each 4 bytes of the uint256 represents a u32 tier start time. The low bits represent low tiers and high bits the high tiers. Implementing contracts should return 0xFFFFFFFF for lost & never-held tiers.\",\"params\":{\"account\":\"Account to get the report for.\"},\"returns\":{\"_0\":\"The report blocks encoded as a uint256.\"}},\"setTier(address,uint8,bytes)\":{\"details\":\"Updates the tier of an account. The implementing contract is responsible for all checks and state changes required to set the tier. For example, taking/refunding funds/NFTs etc. Contracts may disallow directly setting tiers, preferring to derive reports from other onchain data. In this case they should `revert(\\\"SET_TIER\\\");`.\",\"params\":{\"account\":\"Account to change the tier for.\",\"data\":\"Arbitrary input to disambiguate ownership (e.g. NFTs to lock).\",\"endTier\":\"Tier after the change.\"}}},\"title\":\"ITier\",\"version\":1},\"userdoc\":{\"events\":{\"TierChange(address,uint8,uint8)\":{\"notice\":\"Every time a Tier changes we log start and end Tier against the account. This MAY NOT be emitted if reports are being read from the state of an external contract.\"}},\"kind\":\"user\",\"methods\":{\"report(address)\":{\"notice\":\"A tier report is a `uint256` that contains each of the block numbers each tier has been held continously since as a `uint32`. There are 9 possible tier, starting with `Tier.ZERO` for `0` offset or \\\"never held any tier\\\" then working up through 8x 4 byte offsets to the full 256 bits. Low bits = Lower tier. In hexadecimal every 8 characters = one tier, starting at `Tier.EIGHT` from high bits and working down to `Tier.ONE`. `uint32` should be plenty for any blockchain that measures block times in seconds, but reconsider if deploying to an environment with significantly sub-second block times. ~135 years of 1 second blocks fit into `uint32`. `2^8 / (365 * 24 * 60 * 60)` When a user INCREASES their tier they keep all the block numbers they already had, and get new block times for each increased tiers they have earned. When a user DECREASES their tier they return to `0xFFFFFFFF` (never) for every tier level they remove, but keep their block numbers for the remaining tiers. GUIs are encouraged to make this dynamic very clear for users as round-tripping to a lower status and back is a DESTRUCTIVE operation for block times. The intent is that downstream code can provide additional benefits for members who have maintained a certain tier for/since a long time. These benefits can be provided by inspecting the report, and by on-chain contracts directly, rather than needing to work with snapshots etc.\"},\"setTier(address,uint8,bytes)\":{\"notice\":\"Users can set their own tier by calling `setTier`. The contract that implements `ITier` is responsible for checking eligibility and/or taking actions required to set the tier. For example, the contract must take/refund any tokens relevant to changing the tier. Obviously the user is responsible for any approvals for this action prior to calling `setTier`. When the tier is changed a `TierChange` event will be emmited as: ``` event TierChange(address account, Tier startTier, Tier endTier); ``` The `setTier` function includes arbitrary data as the third parameter. This can be used to disambiguate in the case that there may be many possible options for a user to achieve some tier. For example, consider the case where `Tier.THREE` can be achieved by EITHER locking 1x rare NFT or 3x uncommon NFTs. A user with both could use `data` to explicitly state their intent. NOTE however that _any_ address can call `setTier` for any other address. If you implement `data` or anything that changes state then be very careful to avoid griefing attacks. The `data` parameter can also be ignored by the contract implementing `ITier`. For example, ERC20 tokens are fungible so only the balance approved by the user is relevant to a tier change. The `setTier` function SHOULD prevent users from reassigning `Tier.ZERO` to themselves. The `Tier.ZERO` status represents never having any status.\"}},\"notice\":\"`ITier` is a simple interface that contracts can implement to provide membership lists for other contracts. There are many use-cases for a time-preserving, conditional membership list. Some examples include: - Self-serve whitelist to participate in fundraising - Lists of users who can claim airdrops and perks - Pooling resources with implied governance/reward tiers - POAP style attendance proofs allowing access to future exclusive events\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/rain-protocol/contracts/tier/ITier.sol\":\"ITier\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/rain-protocol/contracts/tier/ITier.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\n\\npragma solidity 0.6.12;\\n\\n/// @title ITier\\n/// @notice `ITier` is a simple interface that contracts can\\n/// implement to provide membership lists for other contracts.\\n///\\n/// There are many use-cases for a time-preserving,\\n/// conditional membership list.\\n///\\n/// Some examples include:\\n///\\n/// - Self-serve whitelist to participate in fundraising\\n/// - Lists of users who can claim airdrops and perks\\n/// - Pooling resources with implied governance/reward tiers\\n/// - POAP style attendance proofs allowing access to future exclusive events\\n///\\n/// @dev Standard interface to a tiered membership.\\n///\\n/// A \\\"membership\\\" can represent many things:\\n/// - Exclusive access.\\n/// - Participation in some event or process.\\n/// - KYC completion.\\n/// - Combination of sub-memberships.\\n/// - Etc.\\n///\\n/// The high level requirements for a contract implementing `ITier`:\\n/// - MUST represent held tiers with the `Tier` enum.\\n/// - MUST implement `report`.\\n///   - The report is a `uint256` that SHOULD represent the block each tier has\\n///     been continuously held since encoded as `uint32`.\\n///   - The encoded tiers start at ONE; ZERO is implied if no tier has ever\\n///     been held.\\n///   - `Tier.ZERO` is NOT encoded in the report, it is simply the fallback\\n///     value.\\n///   - If a tier is lost the block data is erased for that tier and will be\\n///     set if/when the tier is regained to the new block.\\n///   - If the historical block information is not available the report MAY\\n///     return `0x00000000` for all held tiers.\\n///   - Tiers that are lost or have never been held MUST return `0xFFFFFFFF`.\\n/// - SHOULD implement `setTier`.\\n///   - Contracts SHOULD revert with `SET_TIER` error if they cannot\\n///     meaningfully set a tier directly.\\n///     For example a contract that can only derive a membership tier by\\n///     reading the state of an external contract cannot set tiers.\\n///   - Contracts implementing `setTier` SHOULD error with `SET_ZERO_TIER`\\n///     if `Tier.ZERO` is being set.\\n/// - MUST emit `TierChange` when `setTier` successfully writes a new tier.\\n///   - Contracts that cannot meaningfully set a tier are exempt.\\ninterface ITier {\\n    /// 9 Possible tiers.\\n    /// Fits nicely as uint32 in uint256 which is helpful for internal storage\\n    /// concerns.\\n    /// 8 tiers can be achieved, ZERO is the tier when no tier has been\\n    /// achieved.\\n    enum Tier {\\n        ZERO,\\n        ONE,\\n        TWO,\\n        THREE,\\n        FOUR,\\n        FIVE,\\n        SIX,\\n        SEVEN,\\n        EIGHT\\n    }\\n\\n    /// Every time a Tier changes we log start and end Tier against the\\n    /// account.\\n    /// This MAY NOT be emitted if reports are being read from the state of an\\n    /// external contract.\\n    event TierChange(\\n        address indexed account,\\n        Tier indexed startTier,\\n        Tier indexed endTier\\n    );\\n\\n    /// @notice Users can set their own tier by calling `setTier`.\\n    ///\\n    /// The contract that implements `ITier` is responsible for checking\\n    /// eligibility and/or taking actions required to set the tier.\\n    ///\\n    /// For example, the contract must take/refund any tokens relevant to\\n    /// changing the tier.\\n    ///\\n    /// Obviously the user is responsible for any approvals for this action\\n    /// prior to calling `setTier`.\\n    ///\\n    /// When the tier is changed a `TierChange` event will be emmited as:\\n    /// ```\\n    /// event TierChange(address account, Tier startTier, Tier endTier);\\n    /// ```\\n    ///\\n    /// The `setTier` function includes arbitrary data as the third\\n    /// parameter. This can be used to disambiguate in the case that\\n    /// there may be many possible options for a user to achieve some tier.\\n    ///\\n    /// For example, consider the case where `Tier.THREE` can be achieved\\n    /// by EITHER locking 1x rare NFT or 3x uncommon NFTs. A user with both\\n    /// could use `data` to explicitly state their intent.\\n    ///\\n    /// NOTE however that _any_ address can call `setTier` for any other\\n    /// address.\\n    ///\\n    /// If you implement `data` or anything that changes state then be very\\n    /// careful to avoid griefing attacks.\\n    ///\\n    /// The `data` parameter can also be ignored by the contract implementing\\n    /// `ITier`. For example, ERC20 tokens are fungible so only the balance\\n    /// approved by the user is relevant to a tier change.\\n    ///\\n    /// The `setTier` function SHOULD prevent users from reassigning\\n    /// `Tier.ZERO` to themselves.\\n    ///\\n    /// The `Tier.ZERO` status represents never having any status.\\n    /// @dev Updates the tier of an account.\\n    ///\\n    /// The implementing contract is responsible for all checks and state\\n    /// changes required to set the tier. For example, taking/refunding\\n    /// funds/NFTs etc.\\n    ///\\n    /// Contracts may disallow directly setting tiers, preferring to derive\\n    /// reports from other onchain data.\\n    /// In this case they should `revert(\\\"SET_TIER\\\");`.\\n    ///\\n    /// @param account Account to change the tier for.\\n    /// @param endTier Tier after the change.\\n    /// @param data Arbitrary input to disambiguate ownership\\n    /// (e.g. NFTs to lock).\\n    function setTier(\\n        address account,\\n        Tier endTier,\\n        bytes memory data\\n    )\\n        external;\\n\\n    /// @notice A tier report is a `uint256` that contains each of the block\\n    /// numbers each tier has been held continously since as a `uint32`.\\n    /// There are 9 possible tier, starting with `Tier.ZERO` for `0` offset or\\n    /// \\\"never held any tier\\\" then working up through 8x 4 byte offsets to the\\n    /// full 256 bits.\\n    ///\\n    /// Low bits = Lower tier.\\n    ///\\n    /// In hexadecimal every 8 characters = one tier, starting at `Tier.EIGHT`\\n    /// from high bits and working down to `Tier.ONE`.\\n    ///\\n    /// `uint32` should be plenty for any blockchain that measures block times\\n    /// in seconds, but reconsider if deploying to an environment with\\n    /// significantly sub-second block times.\\n    ///\\n    /// ~135 years of 1 second blocks fit into `uint32`.\\n    ///\\n    /// `2^8 / (365 * 24 * 60 * 60)`\\n    ///\\n    /// When a user INCREASES their tier they keep all the block numbers they\\n    /// already had, and get new block times for each increased tiers they have\\n    /// earned.\\n    ///\\n    /// When a user DECREASES their tier they return to `0xFFFFFFFF` (never)\\n    /// for every tier level they remove, but keep their block numbers for the\\n    /// remaining tiers.\\n    ///\\n    /// GUIs are encouraged to make this dynamic very clear for users as\\n    /// round-tripping to a lower status and back is a DESTRUCTIVE operation\\n    /// for block times.\\n    ///\\n    /// The intent is that downstream code can provide additional benefits for\\n    /// members who have maintained a certain tier for/since a long time.\\n    /// These benefits can be provided by inspecting the report, and by\\n    /// on-chain contracts directly,\\n    /// rather than needing to work with snapshots etc.\\n    /// @dev Returns the earliest block the account has held each tier for\\n    /// continuously.\\n    /// This is encoded as a uint256 with blocks represented as 8x\\n    /// concatenated uint32.\\n    /// I.e. Each 4 bytes of the uint256 represents a u32 tier start time.\\n    /// The low bits represent low tiers and high bits the high tiers.\\n    /// Implementing contracts should return 0xFFFFFFFF for lost &\\n    /// never-held tiers.\\n    ///\\n    /// @param account Account to get the report for.\\n    /// @return The report blocks encoded as a uint256.\\n    function report(address account) external view returns (uint256);\\n}\",\"keccak256\":\"0xb123bebe59fee5e8f6faf1236c3f2f2d8adc1fbf7e4f6732a1a94863ae217baa\",\"license\":\"CAL\"}},\"version\":1}"
        }
      },
      "contracts/rain-protocol/contracts/tier/TierByConstruction.sol": {
        "TierByConstruction": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "contract ITier",
                  "name": "tierContract_",
                  "type": "address"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "inputs": [],
              "name": "constructionBlock",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "account_",
                  "type": "address"
                },
                {
                  "internalType": "enum ITier.Tier",
                  "name": "minimumTier_",
                  "type": "uint8"
                }
              ],
              "name": "isTier",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "tierContract",
              "outputs": [
                {
                  "internalType": "contract ITier",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "evm": {
            "bytecode": {
              "linkReferences": {},
              "object": "608060405234801561001057600080fd5b506040516102543803806102548339818101604052602081101561003357600080fd5b5051600080546001600160a01b039092166001600160a01b0319909216919091179055436001556101eb806100696000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80630f0af57f1461004657806377544f3314610060578063a30872db146100a3575b600080fd5b61004e6100c7565b60408051918252519081900360200190f35b61008f6004803603604081101561007657600080fd5b5080356001600160a01b0316906020013560ff166100cd565b604080519115158252519081900360200190f35b6100ab610160565b604080516001600160a01b039092168252519081900360200190f35b60015481565b600080546040805163e053ea3160e01b81526001600160a01b038681166004830152915161015293929092169163e053ea3191602480820192602092909190829003018186803b15801561012057600080fd5b505afa158015610134573d6000803e3d6000fd5b505050506040513d602081101561014a57600080fd5b50518361016f565b600154101590505b92915050565b6000546001600160a01b031681565b60008082600881111561017e57fe5b141561018c5750600061015a565b6000600183600881111561019c57fe5b0360200290508084901c63ffffffff169150509291505056fea2646970667358221220ab848473d1cc0a2acbdca00554014fd69ec2142c99761341543f0599b1d8bcb964736f6c634300060c0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x254 CODESIZE SUB DUP1 PUSH2 0x254 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x33 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE NUMBER PUSH1 0x1 SSTORE PUSH2 0x1EB DUP1 PUSH2 0x69 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xF0AF57F EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x77544F33 EQ PUSH2 0x60 JUMPI DUP1 PUSH4 0xA30872DB EQ PUSH2 0xA3 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0xC7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x8F PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x76 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH1 0xFF AND PUSH2 0xCD JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0xAB PUSH2 0x160 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0xE053EA31 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 MLOAD PUSH2 0x152 SWAP4 SWAP3 SWAP1 SWAP3 AND SWAP2 PUSH4 0xE053EA31 SWAP2 PUSH1 0x24 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x120 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x134 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x14A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD DUP4 PUSH2 0x16F JUMP JUMPDEST PUSH1 0x1 SLOAD LT ISZERO SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x17E JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x18C JUMPI POP PUSH1 0x0 PUSH2 0x15A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP4 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x19C JUMPI INVALID JUMPDEST SUB PUSH1 0x20 MUL SWAP1 POP DUP1 DUP5 SWAP1 SHR PUSH4 0xFFFFFFFF AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAB DUP5 DUP5 PUSH20 0xD1CC0A2ACBDCA00554014FD69EC2142C99761341 SLOAD EXTCODEHASH SDIV SWAP10 0xB1 0xD8 0xBC 0xB9 PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
              "sourceMap": "1726:2140:3:-:0;;;1830:127;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1830:127:3;1880:12;:28;;-1:-1:-1;;;;;1880:28:3;;;-1:-1:-1;;;;;;1880:28:3;;;;;;;;;1938:12;1880:28;1918:32;1726:2140;;;;;;"
            },
            "deployedBytecode": {
              "immutableReferences": {},
              "linkReferences": {},
              "object": "608060405234801561001057600080fd5b50600436106100415760003560e01c80630f0af57f1461004657806377544f3314610060578063a30872db146100a3575b600080fd5b61004e6100c7565b60408051918252519081900360200190f35b61008f6004803603604081101561007657600080fd5b5080356001600160a01b0316906020013560ff166100cd565b604080519115158252519081900360200190f35b6100ab610160565b604080516001600160a01b039092168252519081900360200190f35b60015481565b600080546040805163e053ea3160e01b81526001600160a01b038681166004830152915161015293929092169163e053ea3191602480820192602092909190829003018186803b15801561012057600080fd5b505afa158015610134573d6000803e3d6000fd5b505050506040513d602081101561014a57600080fd5b50518361016f565b600154101590505b92915050565b6000546001600160a01b031681565b60008082600881111561017e57fe5b141561018c5750600061015a565b6000600183600881111561019c57fe5b0360200290508084901c63ffffffff169150509291505056fea2646970667358221220ab848473d1cc0a2acbdca00554014fd69ec2142c99761341543f0599b1d8bcb964736f6c634300060c0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xF0AF57F EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x77544F33 EQ PUSH2 0x60 JUMPI DUP1 PUSH4 0xA30872DB EQ PUSH2 0xA3 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0xC7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x8F PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x76 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH1 0xFF AND PUSH2 0xCD JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0xAB PUSH2 0x160 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0xE053EA31 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 MLOAD PUSH2 0x152 SWAP4 SWAP3 SWAP1 SWAP3 AND SWAP2 PUSH4 0xE053EA31 SWAP2 PUSH1 0x24 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x120 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x134 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x14A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD DUP4 PUSH2 0x16F JUMP JUMPDEST PUSH1 0x1 SLOAD LT ISZERO SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x17E JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x18C JUMPI POP PUSH1 0x0 PUSH2 0x15A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP4 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x19C JUMPI INVALID JUMPDEST SUB PUSH1 0x20 MUL SWAP1 POP DUP1 DUP5 SWAP1 SHR PUSH4 0xFFFFFFFF AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAB DUP5 DUP5 PUSH20 0xD1CC0A2ACBDCA00554014FD69EC2142C99761341 SLOAD EXTCODEHASH SDIV SWAP10 0xB1 0xD8 0xBC 0xB9 PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
              "sourceMap": "1726:2140:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1791:32;;;:::i;:::-;;;;;;;;;;;;;;;;2570:256;;;;;;;;;;;;;;;;-1:-1:-1;2570:256:3;;-1:-1:-1;;;;;2570:256:3;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;1760:25;;;:::i;:::-;;;;-1:-1:-1;;;;;1760:25:3;;;;;;;;;;;;;;1791:32;;;;:::o;2570:256::-;2674:4;2754:12;;:29;;;-1:-1:-1;;;2754:29:3;;-1:-1:-1;;;;;2754:29:3;;;;;;;;;2722:97;;2754:12;;;;;:19;;:29;;;;;;;;;;;;;;;:12;:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2754:29:3;2797:12;2722:18;:97::i;:::-;2701:17;;:118;;2694:125;;2570:256;;;;;:::o;1760:25::-;;;-1:-1:-1;;;;;1760:25:3;;:::o;2534:441:0:-;2635:7;;2763:5;:24;;;;;;;;;2759:43;;;-1:-1:-1;2798:1:0;2791:8;;2759:43;2812:15;2848:1;2839:5;2831:14;;;;;;;;:18;2853:2;2830:25;2812:43;;2936:7;2925;:18;;2872:96;;2865:103;;;2534:441;;;;:::o"
            },
            "methodIdentifiers": {
              "constructionBlock()": "0f0af57f",
              "isTier(address,uint8)": "77544f33",
              "tierContract()": "a30872db"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ITier\",\"name\":\"tierContract_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"constructionBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"},{\"internalType\":\"enum ITier.Tier\",\"name\":\"minimumTier_\",\"type\":\"uint8\"}],\"name\":\"isTier\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tierContract\",\"outputs\":[{\"internalType\":\"contract ITier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Enforces tiers held by contract contruction block. The construction block is compared against the blocks returned by `report`. The `ITier` contract is paramaterised and set during construction.\",\"kind\":\"dev\",\"methods\":{\"isTier(address,uint8)\":{\"params\":{\"account_\":\"Account to check status of.\",\"minimumTier_\":\"Minimum tier for the account.\"},\"returns\":{\"_0\":\"True if the status is currently held.\"}}},\"title\":\"TierByConstruction\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isTier(address,uint8)\":{\"notice\":\"Check if an account has held AT LEAST the given tier according to `tierContract` since construction. The account MUST have held the tier continuously from construction until the \\\"current\\\" state according to `report`. Note that `report` PROBABLY is current as at the block this function is called but MAYBE NOT. The `ITier` contract is free to manage reports however makes sense.\"}},\"notice\":\"`TierByConstruction` is a base contract for other contracts to inherit from. It exposes `isTier` and the corresponding modifier `onlyTier`. This ensures that the address has held at least the given tier since the contract was constructed. We check against the construction time of the contract rather than the current block to avoid various exploits. Users should not be able to gain a tier for a single block, claim benefits then remove the tier within the same block. The construction block provides a simple and generic reference point that is difficult to manipulate/predict. Note that `ReadOnlyTier` contracts must carefully consider use with `TierByConstruction` as they tend to return `0x00000000` for any/all tiers held. There needs to be additional safeguards to mitigate \\\"flash tier\\\" attacks. Note that an account COULD be `TierByConstruction` then lower/ remove a tier, then no longer be eligible when they regain the tier. Only _continuously held_ tiers are valid against the construction block check as this is native behaviour of the `report` function in `ITier`. Technically the `ITier` could re-enter the `TierByConstruction` so the `onlyTier` modifier runs AFTER the modified function.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/rain-protocol/contracts/tier/TierByConstruction.sol\":\"TierByConstruction\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/rain-protocol/contracts/libraries/TierUtil.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\n\\npragma solidity 0.6.12;\\n\\nimport { ITier } from \\\"../tier/ITier.sol\\\";\\n\\n/// @title TierUtil\\n/// @notice `TierUtil` implements several pure functions that can be\\n/// used to interface with reports.\\n/// - `tierAtBlockFromReport`: Returns the highest status achieved relative to\\n/// a block number and report. Statuses gained after that block are ignored.\\n/// - `tierBlock`: Returns the block that a given tier has been held\\n/// since according to a report.\\n/// - `truncateTiersAbove`: Resets all the tiers above the reference tier.\\n/// - `updateBlocksForTierRange`: Updates a report with a block\\n/// number for every tier in a range.\\n/// - `updateReportWithTierAtBlock`: Updates a report to a new tier.\\n/// @dev Utilities to consistently read, write and manipulate tiers in reports.\\n/// The low-level bit shifting can be difficult to get right so this factors\\n/// that out.\\nlibrary TierUtil {\\n\\n    /// UNINITIALIZED report is 0xFF.. as no tier has been held.\\n    uint256 constant public UNINITIALIZED = uint256(-1);\\n\\n    /// Returns the highest tier achieved relative to a block number\\n    /// and report.\\n    ///\\n    /// Note that typically the report will be from the _current_ contract\\n    /// state, i.e. `block.number` but not always. Tiers gained after the\\n    /// reference block are ignored.\\n    ///\\n    /// When the `report` comes from a later block than the `blockNumber` this\\n    /// means the user must have held the tier continuously from `blockNumber`\\n    /// _through_ to the report block.\\n    /// I.e. NOT a snapshot.\\n    ///\\n    /// @param report_ A report as per `ITier`.\\n    /// @param blockNumber_ The block number to check the tiers against.\\n    /// @return The highest tier held since `blockNumber` as per `report`.\\n    function tierAtBlockFromReport(\\n        uint256 report_,\\n        uint256 blockNumber_\\n    )\\n        internal pure returns (ITier.Tier)\\n    {\\n        for (uint256 i_ = 0; i_ < 8; i_++) {\\n            if (uint32(uint256(report_ >> (i_*32))) > uint32(blockNumber_)) {\\n                return ITier.Tier(i_);\\n            }\\n        }\\n        return ITier.Tier(8);\\n    }\\n\\n    /// Returns the block that a given tier has been held since from a report.\\n    ///\\n    /// The report MUST encode \\\"never\\\" as 0xFFFFFFFF. This ensures\\n    /// compatibility with `tierAtBlockFromReport`.\\n    ///\\n    /// @param report_ The report to read a block number from.\\n    /// @param tier_ The Tier to read the block number for.\\n    /// @return The block number this has been held since.\\n    function tierBlock(uint256 report_, ITier.Tier tier_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // ZERO is a special case. Everyone has always been at least ZERO,\\n        // since block 0.\\n        if (tier_ == ITier.Tier.ZERO) { return 0; }\\n\\n        uint256 offset_ = (uint256(tier_) - 1) * 32;\\n        return uint256(uint32(\\n            uint256(\\n                report_ >> offset_\\n            )\\n        ));\\n    }\\n\\n    /// Resets all the tiers above the reference tier to 0xFFFFFFFF.\\n    ///\\n    /// @param report_ Report to truncate with high bit 1s.\\n    /// @param tier_ Tier to truncate above (exclusive).\\n    /// @return Truncated report.\\n    function truncateTiersAbove(uint256 report_, ITier.Tier tier_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 offset_ = uint256(tier_) * 32;\\n        uint256 mask_ = (UNINITIALIZED >> offset_) << offset_;\\n        return report_ | mask_;\\n    }\\n\\n    /// Updates a report with a block number for every status integer in a\\n    /// range.\\n    ///\\n    /// Does nothing if the end status is equal or less than the start status.\\n    /// @param report_ The report to update.\\n    /// @param startTier_ The `Tier` at the start of the range (exclusive).\\n    /// @param endTier_ The `Tier` at the end of the range (inclusive).\\n    /// @param blockNumber_ The block number to set for every status\\n    /// in the range.\\n    /// @return The updated report.\\n    function updateBlocksForTierRange(\\n        uint256 report_,\\n        ITier.Tier startTier_,\\n        ITier.Tier endTier_,\\n        uint256 blockNumber_\\n    )\\n        internal pure returns (uint256)\\n    {\\n        uint256 offset_;\\n        for (uint256 i_ = uint256(startTier_); i_ < uint256(endTier_); i_++) {\\n            offset_ = i_ * 32;\\n            report_ =\\n                (report_ & ~uint256(uint256(uint32(UNINITIALIZED)) << offset_))\\n                | uint256(blockNumber_ << offset_);\\n        }\\n        return report_;\\n    }\\n\\n    /// Updates a report to a new status.\\n    ///\\n    /// Internally dispatches to `truncateTiersAbove` and\\n    /// `updateBlocksForTierRange`.\\n    /// The dispatch is based on whether the new tier is above or below the\\n    /// current tier.\\n    /// The `startTier_` MUST match the result of `tierAtBlockFromReport`.\\n    /// It is expected the caller will know the current tier when\\n    /// calling this function and need to do other things in the calling scope\\n    /// with it.\\n    ///\\n    /// @param report_ The report to update.\\n    /// @param startTier_ The tier to start updating relative to. Data above\\n    /// this tier WILL BE LOST so probably should be the current tier.\\n    /// @param endTier_ The new highest tier held, at the given block number.\\n    /// @param blockNumber_ The block number to update the highest tier to, and\\n    /// intermediate tiers from `startTier_`.\\n    /// @return The updated report.\\n    function updateReportWithTierAtBlock(\\n        uint256 report_,\\n        ITier.Tier startTier_,\\n        ITier.Tier endTier_,\\n        uint256 blockNumber_\\n    )\\n        internal pure returns (uint256)\\n    {\\n        return endTier_ < startTier_\\n            ? truncateTiersAbove(report_, endTier_)\\n            : updateBlocksForTierRange(\\n                report_,\\n                startTier_,\\n                endTier_,\\n                blockNumber_\\n            );\\n    }\\n\\n}\",\"keccak256\":\"0x0398aaf4ab30e84402def1987e050e7ad45082039a58d33bf6a99c5f3ebd42a7\",\"license\":\"CAL\"},\"contracts/rain-protocol/contracts/tier/ITier.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\n\\npragma solidity 0.6.12;\\n\\n/// @title ITier\\n/// @notice `ITier` is a simple interface that contracts can\\n/// implement to provide membership lists for other contracts.\\n///\\n/// There are many use-cases for a time-preserving,\\n/// conditional membership list.\\n///\\n/// Some examples include:\\n///\\n/// - Self-serve whitelist to participate in fundraising\\n/// - Lists of users who can claim airdrops and perks\\n/// - Pooling resources with implied governance/reward tiers\\n/// - POAP style attendance proofs allowing access to future exclusive events\\n///\\n/// @dev Standard interface to a tiered membership.\\n///\\n/// A \\\"membership\\\" can represent many things:\\n/// - Exclusive access.\\n/// - Participation in some event or process.\\n/// - KYC completion.\\n/// - Combination of sub-memberships.\\n/// - Etc.\\n///\\n/// The high level requirements for a contract implementing `ITier`:\\n/// - MUST represent held tiers with the `Tier` enum.\\n/// - MUST implement `report`.\\n///   - The report is a `uint256` that SHOULD represent the block each tier has\\n///     been continuously held since encoded as `uint32`.\\n///   - The encoded tiers start at ONE; ZERO is implied if no tier has ever\\n///     been held.\\n///   - `Tier.ZERO` is NOT encoded in the report, it is simply the fallback\\n///     value.\\n///   - If a tier is lost the block data is erased for that tier and will be\\n///     set if/when the tier is regained to the new block.\\n///   - If the historical block information is not available the report MAY\\n///     return `0x00000000` for all held tiers.\\n///   - Tiers that are lost or have never been held MUST return `0xFFFFFFFF`.\\n/// - SHOULD implement `setTier`.\\n///   - Contracts SHOULD revert with `SET_TIER` error if they cannot\\n///     meaningfully set a tier directly.\\n///     For example a contract that can only derive a membership tier by\\n///     reading the state of an external contract cannot set tiers.\\n///   - Contracts implementing `setTier` SHOULD error with `SET_ZERO_TIER`\\n///     if `Tier.ZERO` is being set.\\n/// - MUST emit `TierChange` when `setTier` successfully writes a new tier.\\n///   - Contracts that cannot meaningfully set a tier are exempt.\\ninterface ITier {\\n    /// 9 Possible tiers.\\n    /// Fits nicely as uint32 in uint256 which is helpful for internal storage\\n    /// concerns.\\n    /// 8 tiers can be achieved, ZERO is the tier when no tier has been\\n    /// achieved.\\n    enum Tier {\\n        ZERO,\\n        ONE,\\n        TWO,\\n        THREE,\\n        FOUR,\\n        FIVE,\\n        SIX,\\n        SEVEN,\\n        EIGHT\\n    }\\n\\n    /// Every time a Tier changes we log start and end Tier against the\\n    /// account.\\n    /// This MAY NOT be emitted if reports are being read from the state of an\\n    /// external contract.\\n    event TierChange(\\n        address indexed account,\\n        Tier indexed startTier,\\n        Tier indexed endTier\\n    );\\n\\n    /// @notice Users can set their own tier by calling `setTier`.\\n    ///\\n    /// The contract that implements `ITier` is responsible for checking\\n    /// eligibility and/or taking actions required to set the tier.\\n    ///\\n    /// For example, the contract must take/refund any tokens relevant to\\n    /// changing the tier.\\n    ///\\n    /// Obviously the user is responsible for any approvals for this action\\n    /// prior to calling `setTier`.\\n    ///\\n    /// When the tier is changed a `TierChange` event will be emmited as:\\n    /// ```\\n    /// event TierChange(address account, Tier startTier, Tier endTier);\\n    /// ```\\n    ///\\n    /// The `setTier` function includes arbitrary data as the third\\n    /// parameter. This can be used to disambiguate in the case that\\n    /// there may be many possible options for a user to achieve some tier.\\n    ///\\n    /// For example, consider the case where `Tier.THREE` can be achieved\\n    /// by EITHER locking 1x rare NFT or 3x uncommon NFTs. A user with both\\n    /// could use `data` to explicitly state their intent.\\n    ///\\n    /// NOTE however that _any_ address can call `setTier` for any other\\n    /// address.\\n    ///\\n    /// If you implement `data` or anything that changes state then be very\\n    /// careful to avoid griefing attacks.\\n    ///\\n    /// The `data` parameter can also be ignored by the contract implementing\\n    /// `ITier`. For example, ERC20 tokens are fungible so only the balance\\n    /// approved by the user is relevant to a tier change.\\n    ///\\n    /// The `setTier` function SHOULD prevent users from reassigning\\n    /// `Tier.ZERO` to themselves.\\n    ///\\n    /// The `Tier.ZERO` status represents never having any status.\\n    /// @dev Updates the tier of an account.\\n    ///\\n    /// The implementing contract is responsible for all checks and state\\n    /// changes required to set the tier. For example, taking/refunding\\n    /// funds/NFTs etc.\\n    ///\\n    /// Contracts may disallow directly setting tiers, preferring to derive\\n    /// reports from other onchain data.\\n    /// In this case they should `revert(\\\"SET_TIER\\\");`.\\n    ///\\n    /// @param account Account to change the tier for.\\n    /// @param endTier Tier after the change.\\n    /// @param data Arbitrary input to disambiguate ownership\\n    /// (e.g. NFTs to lock).\\n    function setTier(\\n        address account,\\n        Tier endTier,\\n        bytes memory data\\n    )\\n        external;\\n\\n    /// @notice A tier report is a `uint256` that contains each of the block\\n    /// numbers each tier has been held continously since as a `uint32`.\\n    /// There are 9 possible tier, starting with `Tier.ZERO` for `0` offset or\\n    /// \\\"never held any tier\\\" then working up through 8x 4 byte offsets to the\\n    /// full 256 bits.\\n    ///\\n    /// Low bits = Lower tier.\\n    ///\\n    /// In hexadecimal every 8 characters = one tier, starting at `Tier.EIGHT`\\n    /// from high bits and working down to `Tier.ONE`.\\n    ///\\n    /// `uint32` should be plenty for any blockchain that measures block times\\n    /// in seconds, but reconsider if deploying to an environment with\\n    /// significantly sub-second block times.\\n    ///\\n    /// ~135 years of 1 second blocks fit into `uint32`.\\n    ///\\n    /// `2^8 / (365 * 24 * 60 * 60)`\\n    ///\\n    /// When a user INCREASES their tier they keep all the block numbers they\\n    /// already had, and get new block times for each increased tiers they have\\n    /// earned.\\n    ///\\n    /// When a user DECREASES their tier they return to `0xFFFFFFFF` (never)\\n    /// for every tier level they remove, but keep their block numbers for the\\n    /// remaining tiers.\\n    ///\\n    /// GUIs are encouraged to make this dynamic very clear for users as\\n    /// round-tripping to a lower status and back is a DESTRUCTIVE operation\\n    /// for block times.\\n    ///\\n    /// The intent is that downstream code can provide additional benefits for\\n    /// members who have maintained a certain tier for/since a long time.\\n    /// These benefits can be provided by inspecting the report, and by\\n    /// on-chain contracts directly,\\n    /// rather than needing to work with snapshots etc.\\n    /// @dev Returns the earliest block the account has held each tier for\\n    /// continuously.\\n    /// This is encoded as a uint256 with blocks represented as 8x\\n    /// concatenated uint32.\\n    /// I.e. Each 4 bytes of the uint256 represents a u32 tier start time.\\n    /// The low bits represent low tiers and high bits the high tiers.\\n    /// Implementing contracts should return 0xFFFFFFFF for lost &\\n    /// never-held tiers.\\n    ///\\n    /// @param account Account to get the report for.\\n    /// @return The report blocks encoded as a uint256.\\n    function report(address account) external view returns (uint256);\\n}\",\"keccak256\":\"0xb123bebe59fee5e8f6faf1236c3f2f2d8adc1fbf7e4f6732a1a94863ae217baa\",\"license\":\"CAL\"},\"contracts/rain-protocol/contracts/tier/TierByConstruction.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\n\\npragma solidity 0.6.12;\\n\\nimport { TierUtil } from \\\"../libraries/TierUtil.sol\\\";\\nimport { ITier } from \\\"./ITier.sol\\\";\\n\\n/// @title TierByConstruction\\n/// @notice `TierByConstruction` is a base contract for other\\n/// contracts to inherit from.\\n///\\n/// It exposes `isTier` and the corresponding modifier `onlyTier`.\\n///\\n/// This ensures that the address has held at least the given tier\\n/// since the contract was constructed.\\n///\\n/// We check against the construction time of the contract rather\\n/// than the current block to avoid various exploits.\\n///\\n/// Users should not be able to gain a tier for a single block, claim\\n/// benefits then remove the tier within the same block.\\n///\\n/// The construction block provides a simple and generic reference\\n/// point that is difficult to manipulate/predict.\\n///\\n/// Note that `ReadOnlyTier` contracts must carefully consider use\\n/// with `TierByConstruction` as they tend to return `0x00000000` for\\n/// any/all tiers held. There needs to be additional safeguards to\\n/// mitigate \\\"flash tier\\\" attacks.\\n///\\n/// Note that an account COULD be `TierByConstruction` then lower/\\n/// remove a tier, then no longer be eligible when they regain the\\n/// tier. Only _continuously held_ tiers are valid against the\\n/// construction block check as this is native behaviour of the\\n/// `report` function in `ITier`.\\n///\\n/// Technically the `ITier` could re-enter the `TierByConstruction`\\n/// so the `onlyTier` modifier runs AFTER the modified function.\\n///\\n/// @dev Enforces tiers held by contract contruction block.\\n/// The construction block is compared against the blocks returned by `report`.\\n/// The `ITier` contract is paramaterised and set during construction.\\ncontract TierByConstruction {\\n    ITier public tierContract;\\n    uint256 public constructionBlock;\\n\\n    constructor(ITier tierContract_) public {\\n        tierContract = tierContract_;\\n        constructionBlock = block.number;\\n    }\\n\\n    /// Check if an account has held AT LEAST the given tier according to\\n    /// `tierContract` since construction.\\n    /// The account MUST have held the tier continuously from construction\\n    /// until the \\\"current\\\" state according to `report`.\\n    /// Note that `report` PROBABLY is current as at the block this function is\\n    /// called but MAYBE NOT.\\n    /// The `ITier` contract is free to manage reports however makes sense.\\n    ///\\n    /// @param account_ Account to check status of.\\n    /// @param minimumTier_ Minimum tier for the account.\\n    /// @return True if the status is currently held.\\n    function isTier(address account_, ITier.Tier minimumTier_)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return constructionBlock >= TierUtil.tierBlock(\\n            tierContract.report(account_),\\n            minimumTier_\\n        );\\n    }\\n\\n    /// Modifier that restricts access to functions depending on the tier\\n    /// required by the function.\\n    ///\\n    /// `isTier` involves an external call to tierContract.report.\\n    /// `require` happens AFTER the modified function to avoid rentrant\\n    /// `ITier` code.\\n    /// Also `report` from `ITier` is `view` so the compiler will error on\\n    /// attempted state modification.\\n    // solhint-disable-next-line max-line-length\\n    /// https://consensys.github.io/smart-contract-best-practices/recommendations/#use-modifiers-only-for-checks\\n    ///\\n    /// Do NOT use this to guard setting the tier on an `ITier` contract.\\n    /// The initial tier would be checked AFTER it has already been\\n    /// modified which is unsafe.\\n    ///\\n    /// @param account_ Account to enforce tier of.\\n    /// @param minimumTier_ Minimum tier for the account.\\n    modifier onlyTier(address account_, ITier.Tier minimumTier_) {\\n        _;\\n        require(\\n            isTier(account_, minimumTier_),\\n            \\\"MINIMUM_TIER\\\"\\n        );\\n    }\\n}\",\"keccak256\":\"0x000493fc4b78d7366e0111d75b2cca56e992a8fc07fbb012b3f35d3ed650a9c4\",\"license\":\"CAL\"}},\"version\":1}"
        }
      }
    },
    "sources": {
      "contracts/rain-protocol/contracts/libraries/TierUtil.sol": {
        "ast": {
          "absolutePath": "contracts/rain-protocol/contracts/libraries/TierUtil.sol",
          "exportedSymbols": {
            "TierUtil": [
              243
            ]
          },
          "id": 244,
          "license": "CAL",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1,
              "literals": [
                "solidity",
                "0.6",
                ".12"
              ],
              "nodeType": "PragmaDirective",
              "src": "33:23:0"
            },
            {
              "absolutePath": "contracts/rain-protocol/contracts/tier/ITier.sol",
              "file": "../tier/ITier.sol",
              "id": 3,
              "nodeType": "ImportDirective",
              "scope": 244,
              "sourceUnit": 418,
              "src": "58:42:0",
              "symbolAliases": [
                {
                  "foreign": {
                    "argumentTypes": null,
                    "id": 2,
                    "name": "ITier",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": null,
                    "src": "67:5:0",
                    "typeDescriptions": {
                      "typeIdentifier": null,
                      "typeString": null
                    }
                  },
                  "local": null
                }
              ],
              "unitAlias": ""
            },
            {
              "abstract": false,
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "library",
              "documentation": {
                "id": 4,
                "nodeType": "StructuredDocumentation",
                "src": "102:800:0",
                "text": "@title TierUtil\n @notice `TierUtil` implements several pure functions that can be\n used to interface with reports.\n - `tierAtBlockFromReport`: Returns the highest status achieved relative to\n a block number and report. Statuses gained after that block are ignored.\n - `tierBlock`: Returns the block that a given tier has been held\n since according to a report.\n - `truncateTiersAbove`: Resets all the tiers above the reference tier.\n - `updateBlocksForTierRange`: Updates a report with a block\n number for every tier in a range.\n - `updateReportWithTierAtBlock`: Updates a report to a new tier.\n @dev Utilities to consistently read, write and manipulate tiers in reports.\n The low-level bit shifting can be difficult to get right so this factors\n that out."
              },
              "fullyImplemented": true,
              "id": 243,
              "linearizedBaseContracts": [
                243
              ],
              "name": "TierUtil",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": true,
                  "documentation": {
                    "id": 5,
                    "nodeType": "StructuredDocumentation",
                    "src": "926:60:0",
                    "text": "UNINITIALIZED report is 0xFF.. as no tier has been held."
                  },
                  "functionSelector": "81e45d9a",
                  "id": 12,
                  "mutability": "constant",
                  "name": "UNINITIALIZED",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 243,
                  "src": "991:51:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 6,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "991:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 10,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "-",
                        "prefix": true,
                        "src": "1039:2:0",
                        "subExpression": {
                          "argumentTypes": null,
                          "hexValue": "31",
                          "id": 9,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1040:1:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_1_by_1",
                            "typeString": "int_const 1"
                          },
                          "value": "1"
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_minus_1_by_1",
                          "typeString": "int_const -1"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_rational_minus_1_by_1",
                          "typeString": "int_const -1"
                        }
                      ],
                      "id": 8,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "1031:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_uint256_$",
                        "typeString": "type(uint256)"
                      },
                      "typeName": {
                        "id": 7,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1031:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": null,
                          "typeString": null
                        }
                      }
                    },
                    "id": 11,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1031:11:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 63,
                    "nodeType": "Block",
                    "src": "1909:223:0",
                    "statements": [
                      {
                        "body": {
                          "id": 56,
                          "nodeType": "Block",
                          "src": "1954:142:0",
                          "statements": [
                            {
                              "condition": {
                                "argumentTypes": null,
                                "commonType": {
                                  "typeIdentifier": "t_uint32",
                                  "typeString": "uint32"
                                },
                                "id": 48,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "argumentTypes": null,
                                  "arguments": [
                                    {
                                      "argumentTypes": null,
                                      "arguments": [
                                        {
                                          "argumentTypes": null,
                                          "commonType": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          },
                                          "id": 41,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "leftExpression": {
                                            "argumentTypes": null,
                                            "id": 36,
                                            "name": "report_",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 15,
                                            "src": "1987:7:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "nodeType": "BinaryOperation",
                                          "operator": ">>",
                                          "rightExpression": {
                                            "argumentTypes": null,
                                            "components": [
                                              {
                                                "argumentTypes": null,
                                                "commonType": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                },
                                                "id": 39,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "leftExpression": {
                                                  "argumentTypes": null,
                                                  "id": 37,
                                                  "name": "i_",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 23,
                                                  "src": "1999:2:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_uint256",
                                                    "typeString": "uint256"
                                                  }
                                                },
                                                "nodeType": "BinaryOperation",
                                                "operator": "*",
                                                "rightExpression": {
                                                  "argumentTypes": null,
                                                  "hexValue": "3332",
                                                  "id": 38,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": true,
                                                  "kind": "number",
                                                  "lValueRequested": false,
                                                  "nodeType": "Literal",
                                                  "src": "2002:2:0",
                                                  "subdenomination": null,
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_rational_32_by_1",
                                                    "typeString": "int_const 32"
                                                  },
                                                  "value": "32"
                                                },
                                                "src": "1999:5:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                }
                                              }
                                            ],
                                            "id": 40,
                                            "isConstant": false,
                                            "isInlineArray": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "nodeType": "TupleExpression",
                                            "src": "1998:7:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "src": "1987:18:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        ],
                                        "id": 35,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "lValueRequested": false,
                                        "nodeType": "ElementaryTypeNameExpression",
                                        "src": "1979:7:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_uint256_$",
                                          "typeString": "type(uint256)"
                                        },
                                        "typeName": {
                                          "id": 34,
                                          "name": "uint256",
                                          "nodeType": "ElementaryTypeName",
                                          "src": "1979:7:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": null,
                                            "typeString": null
                                          }
                                        }
                                      },
                                      "id": 42,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "typeConversion",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "1979:27:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "id": 33,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "1972:6:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_uint32_$",
                                      "typeString": "type(uint32)"
                                    },
                                    "typeName": {
                                      "id": 32,
                                      "name": "uint32",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "1972:6:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": null,
                                        "typeString": null
                                      }
                                    }
                                  },
                                  "id": 43,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "1972:35:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint32",
                                    "typeString": "uint32"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": ">",
                                "rightExpression": {
                                  "argumentTypes": null,
                                  "arguments": [
                                    {
                                      "argumentTypes": null,
                                      "id": 46,
                                      "name": "blockNumber_",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 17,
                                      "src": "2017:12:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "id": 45,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "2010:6:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_uint32_$",
                                      "typeString": "type(uint32)"
                                    },
                                    "typeName": {
                                      "id": 44,
                                      "name": "uint32",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "2010:6:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": null,
                                        "typeString": null
                                      }
                                    }
                                  },
                                  "id": 47,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "2010:20:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint32",
                                    "typeString": "uint32"
                                  }
                                },
                                "src": "1972:58:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "falseBody": null,
                              "id": 55,
                              "nodeType": "IfStatement",
                              "src": "1968:118:0",
                              "trueBody": {
                                "id": 54,
                                "nodeType": "Block",
                                "src": "2032:54:0",
                                "statements": [
                                  {
                                    "expression": {
                                      "argumentTypes": null,
                                      "arguments": [
                                        {
                                          "argumentTypes": null,
                                          "id": 51,
                                          "name": "i_",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 23,
                                          "src": "2068:2:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        ],
                                        "expression": {
                                          "argumentTypes": null,
                                          "id": 49,
                                          "name": "ITier",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 417,
                                          "src": "2057:5:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_type$_t_contract$_ITier_$417_$",
                                            "typeString": "type(contract ITier)"
                                          }
                                        },
                                        "id": 50,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "Tier",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 389,
                                        "src": "2057:10:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_enum$_Tier_$389_$",
                                          "typeString": "type(enum ITier.Tier)"
                                        }
                                      },
                                      "id": 52,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "typeConversion",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "2057:14:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_enum$_Tier_$389",
                                        "typeString": "enum ITier.Tier"
                                      }
                                    },
                                    "functionReturnParameters": 21,
                                    "id": 53,
                                    "nodeType": "Return",
                                    "src": "2050:21:0"
                                  }
                                ]
                              }
                            }
                          ]
                        },
                        "condition": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 28,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 26,
                            "name": "i_",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 23,
                            "src": "1940:2:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "argumentTypes": null,
                            "hexValue": "38",
                            "id": 27,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1945:1:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_8_by_1",
                              "typeString": "int_const 8"
                            },
                            "value": "8"
                          },
                          "src": "1940:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 57,
                        "initializationExpression": {
                          "assignments": [
                            23
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 23,
                              "mutability": "mutable",
                              "name": "i_",
                              "nodeType": "VariableDeclaration",
                              "overrides": null,
                              "scope": 57,
                              "src": "1924:10:0",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "typeName": {
                                "id": 22,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "1924:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "value": null,
                              "visibility": "internal"
                            }
                          ],
                          "id": 25,
                          "initialValue": {
                            "argumentTypes": null,
                            "hexValue": "30",
                            "id": 24,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1937:1:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "1924:14:0"
                        },
                        "loopExpression": {
                          "expression": {
                            "argumentTypes": null,
                            "id": 30,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "++",
                            "prefix": false,
                            "src": "1948:4:0",
                            "subExpression": {
                              "argumentTypes": null,
                              "id": 29,
                              "name": "i_",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 23,
                              "src": "1948:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 31,
                          "nodeType": "ExpressionStatement",
                          "src": "1948:4:0"
                        },
                        "nodeType": "ForStatement",
                        "src": "1919:177:0"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "hexValue": "38",
                              "id": 60,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2123:1:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_8_by_1",
                                "typeString": "int_const 8"
                              },
                              "value": "8"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_8_by_1",
                                "typeString": "int_const 8"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 58,
                              "name": "ITier",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 417,
                              "src": "2112:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_ITier_$417_$",
                                "typeString": "type(contract ITier)"
                              }
                            },
                            "id": 59,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "Tier",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 389,
                            "src": "2112:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_Tier_$389_$",
                              "typeString": "type(enum ITier.Tier)"
                            }
                          },
                          "id": 61,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2112:13:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$389",
                            "typeString": "enum ITier.Tier"
                          }
                        },
                        "functionReturnParameters": 21,
                        "id": 62,
                        "nodeType": "Return",
                        "src": "2105:20:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 13,
                    "nodeType": "StructuredDocumentation",
                    "src": "1049:716:0",
                    "text": "Returns the highest tier achieved relative to a block number\n and report.\n Note that typically the report will be from the _current_ contract\n state, i.e. `block.number` but not always. Tiers gained after the\n reference block are ignored.\n When the `report` comes from a later block than the `blockNumber` this\n means the user must have held the tier continuously from `blockNumber`\n _through_ to the report block.\n I.e. NOT a snapshot.\n @param report_ A report as per `ITier`.\n @param blockNumber_ The block number to check the tiers against.\n @return The highest tier held since `blockNumber` as per `report`."
                  },
                  "id": 64,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "tierAtBlockFromReport",
                  "nodeType": "FunctionDefinition",
                  "overrides": null,
                  "parameters": {
                    "id": 18,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 15,
                        "mutability": "mutable",
                        "name": "report_",
                        "nodeType": "VariableDeclaration",
                        "overrides": null,
                        "scope": 64,
                        "src": "1810:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 14,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1810:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 17,
                        "mutability": "mutable",
                        "name": "blockNumber_",
                        "nodeType": "VariableDeclaration",
                        "overrides": null,
                        "scope": 64,
                        "src": "1835:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 16,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1835:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "1800:61:0"
                  },
                  "returnParameters": {
                    "id": 21,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 20,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "overrides": null,
                        "scope": 64,
                        "src": "1893:10:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Tier_$389",
                          "typeString": "enum ITier.Tier"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 19,
                          "name": "ITier.Tier",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 389,
                          "src": "1893:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$389",
                            "typeString": "enum ITier.Tier"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "1892:12:0"
                  },
                  "scope": 243,
                  "src": "1770:362:0",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 108,
                    "nodeType": "Block",
                    "src": "2648:327:0",
                    "statements": [
                      {
                        "condition": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_enum$_Tier_$389",
                            "typeString": "enum ITier.Tier"
                          },
                          "id": 78,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 74,
                            "name": "tier_",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 69,
                            "src": "2763:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_Tier_$389",
                              "typeString": "enum ITier.Tier"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 75,
                                "name": "ITier",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 417,
                                "src": "2772:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_ITier_$417_$",
                                  "typeString": "type(contract ITier)"
                                }
                              },
                              "id": 76,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "Tier",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 389,
                              "src": "2772:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_enum$_Tier_$389_$",
                                "typeString": "type(enum ITier.Tier)"
                              }
                            },
                            "id": 77,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberName": "ZERO",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "2772:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_Tier_$389",
                              "typeString": "enum ITier.Tier"
                            }
                          },
                          "src": "2763:24:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": null,
                        "id": 82,
                        "nodeType": "IfStatement",
                        "src": "2759:43:0",
                        "trueBody": {
                          "id": 81,
                          "nodeType": "Block",
                          "src": "2789:13:0",
                          "statements": [
                            {
                              "expression": {
                                "argumentTypes": null,
                                "hexValue": "30",
                                "id": 79,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "2798:1:0",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "functionReturnParameters": 73,
                              "id": 80,
                              "nodeType": "Return",
                              "src": "2791:8:0"
                            }
                          ]
                        }
                      },
                      {
                        "assignments": [
                          84
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 84,
                            "mutability": "mutable",
                            "name": "offset_",
                            "nodeType": "VariableDeclaration",
                            "overrides": null,
                            "scope": 108,
                            "src": "2812:15:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 83,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "2812:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 94,
                        "initialValue": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 93,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "components": [
                              {
                                "argumentTypes": null,
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 90,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "argumentTypes": null,
                                  "arguments": [
                                    {
                                      "argumentTypes": null,
                                      "id": 87,
                                      "name": "tier_",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 69,
                                      "src": "2839:5:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_enum$_Tier_$389",
                                        "typeString": "enum ITier.Tier"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_enum$_Tier_$389",
                                        "typeString": "enum ITier.Tier"
                                      }
                                    ],
                                    "id": 86,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "2831:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_uint256_$",
                                      "typeString": "type(uint256)"
                                    },
                                    "typeName": {
                                      "id": 85,
                                      "name": "uint256",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "2831:7:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": null,
                                        "typeString": null
                                      }
                                    }
                                  },
                                  "id": 88,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "2831:14:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "-",
                                "rightExpression": {
                                  "argumentTypes": null,
                                  "hexValue": "31",
                                  "id": 89,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "2848:1:0",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_1_by_1",
                                    "typeString": "int_const 1"
                                  },
                                  "value": "1"
                                },
                                "src": "2831:18:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "id": 91,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "2830:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "*",
                          "rightExpression": {
                            "argumentTypes": null,
                            "hexValue": "3332",
                            "id": 92,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2853:2:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_32_by_1",
                              "typeString": "int_const 32"
                            },
                            "value": "32"
                          },
                          "src": "2830:25:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2812:43:0"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "arguments": [
                                    {
                                      "argumentTypes": null,
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 103,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "argumentTypes": null,
                                        "id": 101,
                                        "name": "report_",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 67,
                                        "src": "2925:7:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": ">>",
                                      "rightExpression": {
                                        "argumentTypes": null,
                                        "id": 102,
                                        "name": "offset_",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 84,
                                        "src": "2936:7:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "2925:18:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "id": 100,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "2900:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_uint256_$",
                                      "typeString": "type(uint256)"
                                    },
                                    "typeName": {
                                      "id": 99,
                                      "name": "uint256",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "2900:7:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": null,
                                        "typeString": null
                                      }
                                    }
                                  },
                                  "id": 104,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "2900:57:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "id": 98,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "2880:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_uint32_$",
                                  "typeString": "type(uint32)"
                                },
                                "typeName": {
                                  "id": 97,
                                  "name": "uint32",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "2880:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": null,
                                    "typeString": null
                                  }
                                }
                              },
                              "id": 105,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2880:87:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            ],
                            "id": 96,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "2872:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_uint256_$",
                              "typeString": "type(uint256)"
                            },
                            "typeName": {
                              "id": 95,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "2872:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": null,
                                "typeString": null
                              }
                            }
                          },
                          "id": 106,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2872:96:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 73,
                        "id": 107,
                        "nodeType": "Return",
                        "src": "2865:103:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 65,
                    "nodeType": "StructuredDocumentation",
                    "src": "2138:391:0",
                    "text": "Returns the block that a given tier has been held since from a report.\n The report MUST encode \"never\" as 0xFFFFFFFF. This ensures\n compatibility with `tierAtBlockFromReport`.\n @param report_ The report to read a block number from.\n @param tier_ The Tier to read the block number for.\n @return The block number this has been held since."
                  },
                  "id": 109,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "tierBlock",
                  "nodeType": "FunctionDefinition",
                  "overrides": null,
                  "parameters": {
                    "id": 70,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 67,
                        "mutability": "mutable",
                        "name": "report_",
                        "nodeType": "VariableDeclaration",
                        "overrides": null,
                        "scope": 109,
                        "src": "2553:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 66,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2553:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 69,
                        "mutability": "mutable",
                        "name": "tier_",
                        "nodeType": "VariableDeclaration",
                        "overrides": null,
                        "scope": 109,
                        "src": "2570:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Tier_$389",
                          "typeString": "enum ITier.Tier"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 68,
                          "name": "ITier.Tier",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 389,
                          "src": "2570:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$389",
                            "typeString": "enum ITier.Tier"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "2552:35:0"
                  },
                  "returnParameters": {
                    "id": 73,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 72,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "overrides": null,
                        "scope": 109,
                        "src": "2635:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 71,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2635:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "2634:9:0"
                  },
                  "scope": 243,
                  "src": "2534:441:0",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 141,
                    "nodeType": "Block",
                    "src": "3332:149:0",
                    "statements": [
                      {
                        "assignments": [
                          120
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 120,
                            "mutability": "mutable",
                            "name": "offset_",
                            "nodeType": "VariableDeclaration",
                            "overrides": null,
                            "scope": 141,
                            "src": "3342:15:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 119,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "3342:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 127,
                        "initialValue": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 126,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 123,
                                "name": "tier_",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 114,
                                "src": "3368:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_Tier_$389",
                                  "typeString": "enum ITier.Tier"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_enum$_Tier_$389",
                                  "typeString": "enum ITier.Tier"
                                }
                              ],
                              "id": 122,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "3360:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_uint256_$",
                                "typeString": "type(uint256)"
                              },
                              "typeName": {
                                "id": 121,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "3360:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": null,
                                  "typeString": null
                                }
                              }
                            },
                            "id": 124,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3360:14:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "*",
                          "rightExpression": {
                            "argumentTypes": null,
                            "hexValue": "3332",
                            "id": 125,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3377:2:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_32_by_1",
                              "typeString": "int_const 32"
                            },
                            "value": "32"
                          },
                          "src": "3360:19:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "3342:37:0"
                      },
                      {
                        "assignments": [
                          129
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 129,
                            "mutability": "mutable",
                            "name": "mask_",
                            "nodeType": "VariableDeclaration",
                            "overrides": null,
                            "scope": 141,
                            "src": "3389:13:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 128,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "3389:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 136,
                        "initialValue": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 135,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "components": [
                              {
                                "argumentTypes": null,
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 132,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "argumentTypes": null,
                                  "id": 130,
                                  "name": "UNINITIALIZED",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 12,
                                  "src": "3406:13:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": ">>",
                                "rightExpression": {
                                  "argumentTypes": null,
                                  "id": 131,
                                  "name": "offset_",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 120,
                                  "src": "3423:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "3406:24:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "id": 133,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "3405:26:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<<",
                          "rightExpression": {
                            "argumentTypes": null,
                            "id": 134,
                            "name": "offset_",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 120,
                            "src": "3435:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "3405:37:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "3389:53:0"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 139,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 137,
                            "name": "report_",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 112,
                            "src": "3459:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "|",
                          "rightExpression": {
                            "argumentTypes": null,
                            "id": 138,
                            "name": "mask_",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 129,
                            "src": "3469:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "3459:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 118,
                        "id": 140,
                        "nodeType": "Return",
                        "src": "3452:22:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 110,
                    "nodeType": "StructuredDocumentation",
                    "src": "2981:223:0",
                    "text": "Resets all the tiers above the reference tier to 0xFFFFFFFF.\n @param report_ Report to truncate with high bit 1s.\n @param tier_ Tier to truncate above (exclusive).\n @return Truncated report."
                  },
                  "id": 142,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "truncateTiersAbove",
                  "nodeType": "FunctionDefinition",
                  "overrides": null,
                  "parameters": {
                    "id": 115,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 112,
                        "mutability": "mutable",
                        "name": "report_",
                        "nodeType": "VariableDeclaration",
                        "overrides": null,
                        "scope": 142,
                        "src": "3237:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 111,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3237:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 114,
                        "mutability": "mutable",
                        "name": "tier_",
                        "nodeType": "VariableDeclaration",
                        "overrides": null,
                        "scope": 142,
                        "src": "3254:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Tier_$389",
                          "typeString": "enum ITier.Tier"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 113,
                          "name": "ITier.Tier",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 389,
                          "src": "3254:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$389",
                            "typeString": "enum ITier.Tier"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "3236:35:0"
                  },
                  "returnParameters": {
                    "id": 118,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 117,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "overrides": null,
                        "scope": 142,
                        "src": "3319:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 116,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3319:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "3318:9:0"
                  },
                  "scope": 243,
                  "src": "3209:272:0",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 211,
                    "nodeType": "Block",
                    "src": "4183:330:0",
                    "statements": [
                      {
                        "assignments": [
                          157
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 157,
                            "mutability": "mutable",
                            "name": "offset_",
                            "nodeType": "VariableDeclaration",
                            "overrides": null,
                            "scope": 211,
                            "src": "4193:15:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 156,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "4193:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 158,
                        "initialValue": null,
                        "nodeType": "VariableDeclarationStatement",
                        "src": "4193:15:0"
                      },
                      {
                        "body": {
                          "id": 207,
                          "nodeType": "Block",
                          "src": "4287:196:0",
                          "statements": [
                            {
                              "expression": {
                                "argumentTypes": null,
                                "id": 179,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "argumentTypes": null,
                                  "id": 175,
                                  "name": "offset_",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 157,
                                  "src": "4301:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "argumentTypes": null,
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 178,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "argumentTypes": null,
                                    "id": 176,
                                    "name": "i_",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 160,
                                    "src": "4311:2:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "*",
                                  "rightExpression": {
                                    "argumentTypes": null,
                                    "hexValue": "3332",
                                    "id": 177,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "4316:2:0",
                                    "subdenomination": null,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_32_by_1",
                                      "typeString": "int_const 32"
                                    },
                                    "value": "32"
                                  },
                                  "src": "4311:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "4301:17:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 180,
                              "nodeType": "ExpressionStatement",
                              "src": "4301:17:0"
                            },
                            {
                              "expression": {
                                "argumentTypes": null,
                                "id": 205,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "argumentTypes": null,
                                  "id": 181,
                                  "name": "report_",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 145,
                                  "src": "4332:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "argumentTypes": null,
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 204,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "argumentTypes": null,
                                    "components": [
                                      {
                                        "argumentTypes": null,
                                        "commonType": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "id": 196,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "argumentTypes": null,
                                          "id": 182,
                                          "name": "report_",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 145,
                                          "src": "4359:7:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "&",
                                        "rightExpression": {
                                          "argumentTypes": null,
                                          "id": 195,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "nodeType": "UnaryOperation",
                                          "operator": "~",
                                          "prefix": true,
                                          "src": "4369:51:0",
                                          "subExpression": {
                                            "argumentTypes": null,
                                            "arguments": [
                                              {
                                                "argumentTypes": null,
                                                "commonType": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                },
                                                "id": 193,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "leftExpression": {
                                                  "argumentTypes": null,
                                                  "arguments": [
                                                    {
                                                      "argumentTypes": null,
                                                      "arguments": [
                                                        {
                                                          "argumentTypes": null,
                                                          "id": 189,
                                                          "name": "UNINITIALIZED",
                                                          "nodeType": "Identifier",
                                                          "overloadedDeclarations": [],
                                                          "referencedDeclaration": 12,
                                                          "src": "4393:13:0",
                                                          "typeDescriptions": {
                                                            "typeIdentifier": "t_uint256",
                                                            "typeString": "uint256"
                                                          }
                                                        }
                                                      ],
                                                      "expression": {
                                                        "argumentTypes": [
                                                          {
                                                            "typeIdentifier": "t_uint256",
                                                            "typeString": "uint256"
                                                          }
                                                        ],
                                                        "id": 188,
                                                        "isConstant": false,
                                                        "isLValue": false,
                                                        "isPure": true,
                                                        "lValueRequested": false,
                                                        "nodeType": "ElementaryTypeNameExpression",
                                                        "src": "4386:6:0",
                                                        "typeDescriptions": {
                                                          "typeIdentifier": "t_type$_t_uint32_$",
                                                          "typeString": "type(uint32)"
                                                        },
                                                        "typeName": {
                                                          "id": 187,
                                                          "name": "uint32",
                                                          "nodeType": "ElementaryTypeName",
                                                          "src": "4386:6:0",
                                                          "typeDescriptions": {
                                                            "typeIdentifier": null,
                                                            "typeString": null
                                                          }
                                                        }
                                                      },
                                                      "id": 190,
                                                      "isConstant": false,
                                                      "isLValue": false,
                                                      "isPure": true,
                                                      "kind": "typeConversion",
                                                      "lValueRequested": false,
                                                      "names": [],
                                                      "nodeType": "FunctionCall",
                                                      "src": "4386:21:0",
                                                      "tryCall": false,
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_uint32",
                                                        "typeString": "uint32"
                                                      }
                                                    }
                                                  ],
                                                  "expression": {
                                                    "argumentTypes": [
                                                      {
                                                        "typeIdentifier": "t_uint32",
                                                        "typeString": "uint32"
                                                      }
                                                    ],
                                                    "id": 186,
                                                    "isConstant": false,
                                                    "isLValue": false,
                                                    "isPure": true,
                                                    "lValueRequested": false,
                                                    "nodeType": "ElementaryTypeNameExpression",
                                                    "src": "4378:7:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_type$_t_uint256_$",
                                                      "typeString": "type(uint256)"
                                                    },
                                                    "typeName": {
                                                      "id": 185,
                                                      "name": "uint256",
                                                      "nodeType": "ElementaryTypeName",
                                                      "src": "4378:7:0",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": null,
                                                        "typeString": null
                                                      }
                                                    }
                                                  },
                                                  "id": 191,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": true,
                                                  "kind": "typeConversion",
                                                  "lValueRequested": false,
                                                  "names": [],
                                                  "nodeType": "FunctionCall",
                                                  "src": "4378:30:0",
                                                  "tryCall": false,
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_uint256",
                                                    "typeString": "uint256"
                                                  }
                                                },
                                                "nodeType": "BinaryOperation",
                                                "operator": "<<",
                                                "rightExpression": {
                                                  "argumentTypes": null,
                                                  "id": 192,
                                                  "name": "offset_",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 157,
                                                  "src": "4412:7:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_uint256",
                                                    "typeString": "uint256"
                                                  }
                                                },
                                                "src": "4378:41:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                }
                                              }
                                            ],
                                            "expression": {
                                              "argumentTypes": [
                                                {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                }
                                              ],
                                              "id": 184,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "lValueRequested": false,
                                              "nodeType": "ElementaryTypeNameExpression",
                                              "src": "4370:7:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_type$_t_uint256_$",
                                                "typeString": "type(uint256)"
                                              },
                                              "typeName": {
                                                "id": 183,
                                                "name": "uint256",
                                                "nodeType": "ElementaryTypeName",
                                                "src": "4370:7:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": null,
                                                  "typeString": null
                                                }
                                              }
                                            },
                                            "id": 194,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "kind": "typeConversion",
                                            "lValueRequested": false,
                                            "names": [],
                                            "nodeType": "FunctionCall",
                                            "src": "4370:50:0",
                                            "tryCall": false,
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "src": "4359:61:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      }
                                    ],
                                    "id": 197,
                                    "isConstant": false,
                                    "isInlineArray": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "TupleExpression",
                                    "src": "4358:63:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "|",
                                  "rightExpression": {
                                    "argumentTypes": null,
                                    "arguments": [
                                      {
                                        "argumentTypes": null,
                                        "commonType": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "id": 202,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "argumentTypes": null,
                                          "id": 200,
                                          "name": "blockNumber_",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 151,
                                          "src": "4448:12:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "<<",
                                        "rightExpression": {
                                          "argumentTypes": null,
                                          "id": 201,
                                          "name": "offset_",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 157,
                                          "src": "4464:7:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "src": "4448:23:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      ],
                                      "id": 199,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "nodeType": "ElementaryTypeNameExpression",
                                      "src": "4440:7:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_uint256_$",
                                        "typeString": "type(uint256)"
                                      },
                                      "typeName": {
                                        "id": 198,
                                        "name": "uint256",
                                        "nodeType": "ElementaryTypeName",
                                        "src": "4440:7:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": null,
                                          "typeString": null
                                        }
                                      }
                                    },
                                    "id": 203,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "typeConversion",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "4440:32:0",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "4358:114:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "4332:140:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 206,
                              "nodeType": "ExpressionStatement",
                              "src": "4332:140:0"
                            }
                          ]
                        },
                        "condition": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 171,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 166,
                            "name": "i_",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 160,
                            "src": "4257:2:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 169,
                                "name": "endTier_",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 149,
                                "src": "4270:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_Tier_$389",
                                  "typeString": "enum ITier.Tier"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_enum$_Tier_$389",
                                  "typeString": "enum ITier.Tier"
                                }
                              ],
                              "id": 168,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "4262:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_uint256_$",
                                "typeString": "type(uint256)"
                              },
                              "typeName": {
                                "id": 167,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "4262:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": null,
                                  "typeString": null
                                }
                              }
                            },
                            "id": 170,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4262:17:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "4257:22:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 208,
                        "initializationExpression": {
                          "assignments": [
                            160
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 160,
                              "mutability": "mutable",
                              "name": "i_",
                              "nodeType": "VariableDeclaration",
                              "overrides": null,
                              "scope": 208,
                              "src": "4223:10:0",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "typeName": {
                                "id": 159,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "4223:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "value": null,
                              "visibility": "internal"
                            }
                          ],
                          "id": 165,
                          "initialValue": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 163,
                                "name": "startTier_",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 147,
                                "src": "4244:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_Tier_$389",
                                  "typeString": "enum ITier.Tier"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_enum$_Tier_$389",
                                  "typeString": "enum ITier.Tier"
                                }
                              ],
                              "id": 162,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "4236:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_uint256_$",
                                "typeString": "type(uint256)"
                              },
                              "typeName": {
                                "id": 161,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "4236:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": null,
                                  "typeString": null
                                }
                              }
                            },
                            "id": 164,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4236:19:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "4223:32:0"
                        },
                        "loopExpression": {
                          "expression": {
                            "argumentTypes": null,
                            "id": 173,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "++",
                            "prefix": false,
                            "src": "4281:4:0",
                            "subExpression": {
                              "argumentTypes": null,
                              "id": 172,
                              "name": "i_",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 160,
                              "src": "4281:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 174,
                          "nodeType": "ExpressionStatement",
                          "src": "4281:4:0"
                        },
                        "nodeType": "ForStatement",
                        "src": "4218:265:0"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 209,
                          "name": "report_",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 145,
                          "src": "4499:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 155,
                        "id": 210,
                        "nodeType": "Return",
                        "src": "4492:14:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 143,
                    "nodeType": "StructuredDocumentation",
                    "src": "3487:492:0",
                    "text": "Updates a report with a block number for every status integer in a\n range.\n Does nothing if the end status is equal or less than the start status.\n @param report_ The report to update.\n @param startTier_ The `Tier` at the start of the range (exclusive).\n @param endTier_ The `Tier` at the end of the range (inclusive).\n @param blockNumber_ The block number to set for every status\n in the range.\n @return The updated report."
                  },
                  "id": 212,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "updateBlocksForTierRange",
                  "nodeType": "FunctionDefinition",
                  "overrides": null,
                  "parameters": {
                    "id": 152,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 145,
                        "mutability": "mutable",
                        "name": "report_",
                        "nodeType": "VariableDeclaration",
                        "overrides": null,
                        "scope": 212,
                        "src": "4027:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 144,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4027:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 147,
                        "mutability": "mutable",
                        "name": "startTier_",
                        "nodeType": "VariableDeclaration",
                        "overrides": null,
                        "scope": 212,
                        "src": "4052:21:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Tier_$389",
                          "typeString": "enum ITier.Tier"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 146,
                          "name": "ITier.Tier",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 389,
                          "src": "4052:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$389",
                            "typeString": "enum ITier.Tier"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 149,
                        "mutability": "mutable",
                        "name": "endTier_",
                        "nodeType": "VariableDeclaration",
                        "overrides": null,
                        "scope": 212,
                        "src": "4083:19:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Tier_$389",
                          "typeString": "enum ITier.Tier"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 148,
                          "name": "ITier.Tier",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 389,
                          "src": "4083:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$389",
                            "typeString": "enum ITier.Tier"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 151,
                        "mutability": "mutable",
                        "name": "blockNumber_",
                        "nodeType": "VariableDeclaration",
                        "overrides": null,
                        "scope": 212,
                        "src": "4112:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 150,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4112:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "4017:121:0"
                  },
                  "returnParameters": {
                    "id": 155,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 154,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "overrides": null,
                        "scope": 212,
                        "src": "4170:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 153,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4170:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "4169:9:0"
                  },
                  "scope": 243,
                  "src": "3984:529:0",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 241,
                    "nodeType": "Block",
                    "src": "5641:259:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "condition": {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_enum$_Tier_$389",
                              "typeString": "enum ITier.Tier"
                            },
                            "id": 228,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 226,
                              "name": "endTier_",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 219,
                              "src": "5658:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_Tier_$389",
                                "typeString": "enum ITier.Tier"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "<",
                            "rightExpression": {
                              "argumentTypes": null,
                              "id": 227,
                              "name": "startTier_",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 217,
                              "src": "5669:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_Tier_$389",
                                "typeString": "enum ITier.Tier"
                              }
                            },
                            "src": "5658:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "falseExpression": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 234,
                                "name": "report_",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 215,
                                "src": "5788:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "argumentTypes": null,
                                "id": 235,
                                "name": "startTier_",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 217,
                                "src": "5813:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_Tier_$389",
                                  "typeString": "enum ITier.Tier"
                                }
                              },
                              {
                                "argumentTypes": null,
                                "id": 236,
                                "name": "endTier_",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 219,
                                "src": "5841:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_Tier_$389",
                                  "typeString": "enum ITier.Tier"
                                }
                              },
                              {
                                "argumentTypes": null,
                                "id": 237,
                                "name": "blockNumber_",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 221,
                                "src": "5867:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_enum$_Tier_$389",
                                  "typeString": "enum ITier.Tier"
                                },
                                {
                                  "typeIdentifier": "t_enum$_Tier_$389",
                                  "typeString": "enum ITier.Tier"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 233,
                              "name": "updateBlocksForTierRange",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 212,
                              "src": "5746:24:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_enum$_Tier_$389_$_t_enum$_Tier_$389_$_t_uint256_$returns$_t_uint256_$",
                                "typeString": "function (uint256,enum ITier.Tier,enum ITier.Tier,uint256) pure returns (uint256)"
                              }
                            },
                            "id": 238,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "5746:147:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 239,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "Conditional",
                          "src": "5658:235:0",
                          "trueExpression": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 230,
                                "name": "report_",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 215,
                                "src": "5713:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "argumentTypes": null,
                                "id": 231,
                                "name": "endTier_",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 219,
                                "src": "5722:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_Tier_$389",
                                  "typeString": "enum ITier.Tier"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_enum$_Tier_$389",
                                  "typeString": "enum ITier.Tier"
                                }
                              ],
                              "id": 229,
                              "name": "truncateTiersAbove",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 142,
                              "src": "5694:18:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_enum$_Tier_$389_$returns$_t_uint256_$",
                                "typeString": "function (uint256,enum ITier.Tier) pure returns (uint256)"
                              }
                            },
                            "id": 232,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "5694:37:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 225,
                        "id": 240,
                        "nodeType": "Return",
                        "src": "5651:242:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 213,
                    "nodeType": "StructuredDocumentation",
                    "src": "4519:915:0",
                    "text": "Updates a report to a new status.\n Internally dispatches to `truncateTiersAbove` and\n `updateBlocksForTierRange`.\n The dispatch is based on whether the new tier is above or below the\n current tier.\n The `startTier_` MUST match the result of `tierAtBlockFromReport`.\n It is expected the caller will know the current tier when\n calling this function and need to do other things in the calling scope\n with it.\n @param report_ The report to update.\n @param startTier_ The tier to start updating relative to. Data above\n this tier WILL BE LOST so probably should be the current tier.\n @param endTier_ The new highest tier held, at the given block number.\n @param blockNumber_ The block number to update the highest tier to, and\n intermediate tiers from `startTier_`.\n @return The updated report."
                  },
                  "id": 242,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "updateReportWithTierAtBlock",
                  "nodeType": "FunctionDefinition",
                  "overrides": null,
                  "parameters": {
                    "id": 222,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 215,
                        "mutability": "mutable",
                        "name": "report_",
                        "nodeType": "VariableDeclaration",
                        "overrides": null,
                        "scope": 242,
                        "src": "5485:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 214,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "5485:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 217,
                        "mutability": "mutable",
                        "name": "startTier_",
                        "nodeType": "VariableDeclaration",
                        "overrides": null,
                        "scope": 242,
                        "src": "5510:21:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Tier_$389",
                          "typeString": "enum ITier.Tier"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 216,
                          "name": "ITier.Tier",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 389,
                          "src": "5510:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$389",
                            "typeString": "enum ITier.Tier"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 219,
                        "mutability": "mutable",
                        "name": "endTier_",
                        "nodeType": "VariableDeclaration",
                        "overrides": null,
                        "scope": 242,
                        "src": "5541:19:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Tier_$389",
                          "typeString": "enum ITier.Tier"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 218,
                          "name": "ITier.Tier",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 389,
                          "src": "5541:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$389",
                            "typeString": "enum ITier.Tier"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 221,
                        "mutability": "mutable",
                        "name": "blockNumber_",
                        "nodeType": "VariableDeclaration",
                        "overrides": null,
                        "scope": 242,
                        "src": "5570:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 220,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "5570:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "5475:121:0"
                  },
                  "returnParameters": {
                    "id": 225,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 224,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "overrides": null,
                        "scope": 242,
                        "src": "5628:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 223,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "5628:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "5627:9:0"
                  },
                  "scope": 243,
                  "src": "5439:461:0",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                }
              ],
              "scope": 244,
              "src": "902:5001:0"
            }
          ],
          "src": "33:5870:0"
        },
        "id": 0
      },
      "contracts/rain-protocol/contracts/test/TierByConstructionTest.sol": {
        "ast": {
          "absolutePath": "contracts/rain-protocol/contracts/test/TierByConstructionTest.sol",
          "exportedSymbols": {
            "TierByConstructionTest": [
              376
            ]
          },
          "id": 377,
          "license": "CAL",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 245,
              "literals": [
                "solidity",
                "0.6",
                ".12"
              ],
              "nodeType": "PragmaDirective",
              "src": "33:23:1"
            },
            {
              "absolutePath": "contracts/rain-protocol/contracts/tier/ITier.sol",
              "file": "../tier/ITier.sol",
              "id": 247,
              "nodeType": "ImportDirective",
              "scope": 377,
              "sourceUnit": 418,
              "src": "58:42:1",
              "symbolAliases": [
                {
                  "foreign": {
                    "argumentTypes": null,
                    "id": 246,
                    "name": "ITier",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": null,
                    "src": "67:5:1",
                    "typeDescriptions": {
                      "typeIdentifier": null,
                      "typeString": null
                    }
                  },
                  "local": null
                }
              ],
              "unitAlias": ""
            },
            {
              "absolutePath": "contracts/rain-protocol/contracts/tier/TierByConstruction.sol",
              "file": "../tier/TierByConstruction.sol",
              "id": 249,
              "nodeType": "ImportDirective",
              "scope": 377,
              "sourceUnit": 484,
              "src": "101:68:1",
              "symbolAliases": [
                {
                  "foreign": {
                    "argumentTypes": null,
                    "id": 248,
                    "name": "TierByConstruction",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": null,
                    "src": "110:18:1",
                    "typeDescriptions": {
                      "typeIdentifier": null,
                      "typeString": null
                    }
                  },
                  "local": null
                }
              ],
              "unitAlias": ""
            },
            {
              "abstract": false,
              "baseContracts": [
                {
                  "arguments": null,
                  "baseName": {
                    "contractScope": null,
                    "id": 251,
                    "name": "TierByConstruction",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 483,
                    "src": "342:18:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_TierByConstruction_$483",
                      "typeString": "contract TierByConstruction"
                    }
                  },
                  "id": 252,
                  "nodeType": "InheritanceSpecifier",
                  "src": "342:18:1"
                }
              ],
              "contractDependencies": [
                483
              ],
              "contractKind": "contract",
              "documentation": {
                "id": 250,
                "nodeType": "StructuredDocumentation",
                "src": "171:136:1",
                "text": "@title TierByConstructionTest\n An empty contract that facilitates tests enumerating behaviour of the\n modifiers at each tier."
              },
              "fullyImplemented": true,
              "id": 376,
              "linearizedBaseContracts": [
                376,
                483
              ],
              "name": "TierByConstructionTest",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "body": {
                    "id": 261,
                    "nodeType": "Block",
                    "src": "507:3:1",
                    "statements": []
                  },
                  "documentation": {
                    "id": 253,
                    "nodeType": "StructuredDocumentation",
                    "src": "368:60:1",
                    "text": "@param tier_ The tier contract for `TierByConstruction`."
                  },
                  "id": 262,
                  "implemented": true,
                  "kind": "constructor",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 258,
                          "name": "tier_",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 255,
                          "src": "500:5:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_ITier_$417",
                            "typeString": "contract ITier"
                          }
                        }
                      ],
                      "id": 259,
                      "modifierName": {
                        "argumentTypes": null,
                        "id": 257,
                        "name": "TierByConstruction",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 483,
                        "src": "481:18:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_TierByConstruction_$483_$",
                          "typeString": "type(contract TierByConstruction)"
                        }
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "481:25:1"
                    }
                  ],
                  "name": "",
                  "nodeType": "FunctionDefinition",
                  "overrides": null,
                  "parameters": {
                    "id": 256,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 255,
                        "mutability": "mutable",
                        "name": "tier_",
                        "nodeType": "VariableDeclaration",
                        "overrides": null,
                        "scope": 262,
                        "src": "445:11:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_ITier_$417",
                          "typeString": "contract ITier"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 254,
                          "name": "ITier",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 417,
                          "src": "445:5:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_ITier_$417",
                            "typeString": "contract ITier"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "444:13:1"
                  },
                  "returnParameters": {
                    "id": 260,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "507:0:1"
                  },
                  "scope": 376,
                  "src": "433:77:1",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 266,
                    "nodeType": "Block",
                    "src": "687:3:1",
                    "statements": []
                  },
                  "documentation": {
                    "id": 263,
                    "nodeType": "StructuredDocumentation",
                    "src": "556:71:1",
                    "text": "External function with no modifier to use as a control for testing."
                  },
                  "functionSelector": "cb457d47",
                  "id": 267,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "unlimited",
                  "nodeType": "FunctionDefinition",
                  "overrides": null,
                  "parameters": {
                    "id": 264,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "650:2:1"
                  },
                  "returnParameters": {
                    "id": 265,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "687:0:1"
                  },
                  "scope": 376,
                  "src": "632:58:1",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 278,
                    "nodeType": "Block",
                    "src": "872:3:1",
                    "statements": []
                  },
                  "documentation": {
                    "id": 268,
                    "nodeType": "StructuredDocumentation",
                    "src": "736:33:1",
                    "text": "Requires `Tier.ZERO` to call."
                  },
                  "functionSelector": "7bcd3dc5",
                  "id": 279,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 271,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "839:3:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 272,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "839:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 273,
                              "name": "ITier",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 417,
                              "src": "851:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_ITier_$417_$",
                                "typeString": "type(contract ITier)"
                              }
                            },
                            "id": 274,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "Tier",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 389,
                            "src": "851:10:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_Tier_$389_$",
                              "typeString": "type(enum ITier.Tier)"
                            }
                          },
                          "id": 275,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "ZERO",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "851:15:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$389",
                            "typeString": "enum ITier.Tier"
                          }
                        }
                      ],
                      "id": 276,
                      "modifierName": {
                        "argumentTypes": null,
                        "id": 270,
                        "name": "onlyTier",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 482,
                        "src": "830:8:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_modifier$_t_address_$_t_enum$_Tier_$389_$",
                          "typeString": "modifier (address,enum ITier.Tier)"
                        }
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "830:37:1"
                    }
                  ],
                  "name": "ifZero",
                  "nodeType": "FunctionDefinition",
                  "overrides": null,
                  "parameters": {
                    "id": 269,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "789:2:1"
                  },
                  "returnParameters": {
                    "id": 277,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "872:0:1"
                  },
                  "scope": 376,
                  "src": "774:101:1",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 290,
                    "nodeType": "Block",
                    "src": "1054:3:1",
                    "statements": []
                  },
                  "documentation": {
                    "id": 280,
                    "nodeType": "StructuredDocumentation",
                    "src": "921:32:1",
                    "text": "Requires `Tier.ONE` to call."
                  },
                  "functionSelector": "d1abd2de",
                  "id": 291,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 283,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1022:3:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 284,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "1022:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 285,
                              "name": "ITier",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 417,
                              "src": "1034:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_ITier_$417_$",
                                "typeString": "type(contract ITier)"
                              }
                            },
                            "id": 286,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "Tier",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 389,
                            "src": "1034:10:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_Tier_$389_$",
                              "typeString": "type(enum ITier.Tier)"
                            }
                          },
                          "id": 287,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "ONE",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "1034:14:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$389",
                            "typeString": "enum ITier.Tier"
                          }
                        }
                      ],
                      "id": 288,
                      "modifierName": {
                        "argumentTypes": null,
                        "id": 282,
                        "name": "onlyTier",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 482,
                        "src": "1013:8:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_modifier$_t_address_$_t_enum$_Tier_$389_$",
                          "typeString": "modifier (address,enum ITier.Tier)"
                        }
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "1013:36:1"
                    }
                  ],
                  "name": "ifOne",
                  "nodeType": "FunctionDefinition",
                  "overrides": null,
                  "parameters": {
                    "id": 281,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "972:2:1"
                  },
                  "returnParameters": {
                    "id": 289,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1054:0:1"
                  },
                  "scope": 376,
                  "src": "958:99:1",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 302,
                    "nodeType": "Block",
                    "src": "1236:3:1",
                    "statements": []
                  },
                  "documentation": {
                    "id": 292,
                    "nodeType": "StructuredDocumentation",
                    "src": "1103:32:1",
                    "text": "Requires `Tier.TWO` to call."
                  },
                  "functionSelector": "e149ceb5",
                  "id": 303,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 295,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1204:3:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 296,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "1204:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 297,
                              "name": "ITier",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 417,
                              "src": "1216:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_ITier_$417_$",
                                "typeString": "type(contract ITier)"
                              }
                            },
                            "id": 298,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "Tier",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 389,
                            "src": "1216:10:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_Tier_$389_$",
                              "typeString": "type(enum ITier.Tier)"
                            }
                          },
                          "id": 299,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "TWO",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "1216:14:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$389",
                            "typeString": "enum ITier.Tier"
                          }
                        }
                      ],
                      "id": 300,
                      "modifierName": {
                        "argumentTypes": null,
                        "id": 294,
                        "name": "onlyTier",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 482,
                        "src": "1195:8:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_modifier$_t_address_$_t_enum$_Tier_$389_$",
                          "typeString": "modifier (address,enum ITier.Tier)"
                        }
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "1195:36:1"
                    }
                  ],
                  "name": "ifTwo",
                  "nodeType": "FunctionDefinition",
                  "overrides": null,
                  "parameters": {
                    "id": 293,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1154:2:1"
                  },
                  "returnParameters": {
                    "id": 301,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1236:0:1"
                  },
                  "scope": 376,
                  "src": "1140:99:1",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 314,
                    "nodeType": "Block",
                    "src": "1424:3:1",
                    "statements": []
                  },
                  "documentation": {
                    "id": 304,
                    "nodeType": "StructuredDocumentation",
                    "src": "1285:34:1",
                    "text": "Requires `Tier.THREE` to call."
                  },
                  "functionSelector": "75bf2787",
                  "id": 315,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 307,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1390:3:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 308,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "1390:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 309,
                              "name": "ITier",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 417,
                              "src": "1402:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_ITier_$417_$",
                                "typeString": "type(contract ITier)"
                              }
                            },
                            "id": 310,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "Tier",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 389,
                            "src": "1402:10:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_Tier_$389_$",
                              "typeString": "type(enum ITier.Tier)"
                            }
                          },
                          "id": 311,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "THREE",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "1402:16:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$389",
                            "typeString": "enum ITier.Tier"
                          }
                        }
                      ],
                      "id": 312,
                      "modifierName": {
                        "argumentTypes": null,
                        "id": 306,
                        "name": "onlyTier",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 482,
                        "src": "1381:8:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_modifier$_t_address_$_t_enum$_Tier_$389_$",
                          "typeString": "modifier (address,enum ITier.Tier)"
                        }
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "1381:38:1"
                    }
                  ],
                  "name": "ifThree",
                  "nodeType": "FunctionDefinition",
                  "overrides": null,
                  "parameters": {
                    "id": 305,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1340:2:1"
                  },
                  "returnParameters": {
                    "id": 313,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1424:0:1"
                  },
                  "scope": 376,
                  "src": "1324:103:1",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 326,
                    "nodeType": "Block",
                    "src": "1609:3:1",
                    "statements": []
                  },
                  "documentation": {
                    "id": 316,
                    "nodeType": "StructuredDocumentation",
                    "src": "1473:33:1",
                    "text": "Requires `Tier.FOUR` to call."
                  },
                  "functionSelector": "3f152251",
                  "id": 327,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 319,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1576:3:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 320,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "1576:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 321,
                              "name": "ITier",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 417,
                              "src": "1588:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_ITier_$417_$",
                                "typeString": "type(contract ITier)"
                              }
                            },
                            "id": 322,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "Tier",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 389,
                            "src": "1588:10:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_Tier_$389_$",
                              "typeString": "type(enum ITier.Tier)"
                            }
                          },
                          "id": 323,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "FOUR",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "1588:15:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$389",
                            "typeString": "enum ITier.Tier"
                          }
                        }
                      ],
                      "id": 324,
                      "modifierName": {
                        "argumentTypes": null,
                        "id": 318,
                        "name": "onlyTier",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 482,
                        "src": "1567:8:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_modifier$_t_address_$_t_enum$_Tier_$389_$",
                          "typeString": "modifier (address,enum ITier.Tier)"
                        }
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "1567:37:1"
                    }
                  ],
                  "name": "ifFour",
                  "nodeType": "FunctionDefinition",
                  "overrides": null,
                  "parameters": {
                    "id": 317,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1526:2:1"
                  },
                  "returnParameters": {
                    "id": 325,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1609:0:1"
                  },
                  "scope": 376,
                  "src": "1511:101:1",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 338,
                    "nodeType": "Block",
                    "src": "1794:3:1",
                    "statements": []
                  },
                  "documentation": {
                    "id": 328,
                    "nodeType": "StructuredDocumentation",
                    "src": "1658:33:1",
                    "text": "Requires `Tier.FIVE` to call."
                  },
                  "functionSelector": "d78aafde",
                  "id": 339,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 331,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1761:3:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 332,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "1761:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 333,
                              "name": "ITier",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 417,
                              "src": "1773:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_ITier_$417_$",
                                "typeString": "type(contract ITier)"
                              }
                            },
                            "id": 334,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "Tier",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 389,
                            "src": "1773:10:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_Tier_$389_$",
                              "typeString": "type(enum ITier.Tier)"
                            }
                          },
                          "id": 335,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "FIVE",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "1773:15:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$389",
                            "typeString": "enum ITier.Tier"
                          }
                        }
                      ],
                      "id": 336,
                      "modifierName": {
                        "argumentTypes": null,
                        "id": 330,
                        "name": "onlyTier",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 482,
                        "src": "1752:8:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_modifier$_t_address_$_t_enum$_Tier_$389_$",
                          "typeString": "modifier (address,enum ITier.Tier)"
                        }
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "1752:37:1"
                    }
                  ],
                  "name": "ifFive",
                  "nodeType": "FunctionDefinition",
                  "overrides": null,
                  "parameters": {
                    "id": 329,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1711:2:1"
                  },
                  "returnParameters": {
                    "id": 337,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1794:0:1"
                  },
                  "scope": 376,
                  "src": "1696:101:1",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 350,
                    "nodeType": "Block",
                    "src": "1976:3:1",
                    "statements": []
                  },
                  "documentation": {
                    "id": 340,
                    "nodeType": "StructuredDocumentation",
                    "src": "1843:32:1",
                    "text": "Requires `Tier.SIX` to call."
                  },
                  "functionSelector": "6bdfcec6",
                  "id": 351,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 343,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1944:3:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 344,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "1944:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 345,
                              "name": "ITier",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 417,
                              "src": "1956:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_ITier_$417_$",
                                "typeString": "type(contract ITier)"
                              }
                            },
                            "id": 346,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "Tier",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 389,
                            "src": "1956:10:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_Tier_$389_$",
                              "typeString": "type(enum ITier.Tier)"
                            }
                          },
                          "id": 347,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "SIX",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "1956:14:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$389",
                            "typeString": "enum ITier.Tier"
                          }
                        }
                      ],
                      "id": 348,
                      "modifierName": {
                        "argumentTypes": null,
                        "id": 342,
                        "name": "onlyTier",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 482,
                        "src": "1935:8:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_modifier$_t_address_$_t_enum$_Tier_$389_$",
                          "typeString": "modifier (address,enum ITier.Tier)"
                        }
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "1935:36:1"
                    }
                  ],
                  "name": "ifSix",
                  "nodeType": "FunctionDefinition",
                  "overrides": null,
                  "parameters": {
                    "id": 341,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1894:2:1"
                  },
                  "returnParameters": {
                    "id": 349,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1976:0:1"
                  },
                  "scope": 376,
                  "src": "1880:99:1",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 362,
                    "nodeType": "Block",
                    "src": "2164:3:1",
                    "statements": []
                  },
                  "documentation": {
                    "id": 352,
                    "nodeType": "StructuredDocumentation",
                    "src": "2025:34:1",
                    "text": "Requires `Tier.SEVEN` to call."
                  },
                  "functionSelector": "7922deb5",
                  "id": 363,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 355,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "2130:3:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 356,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "2130:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 357,
                              "name": "ITier",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 417,
                              "src": "2142:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_ITier_$417_$",
                                "typeString": "type(contract ITier)"
                              }
                            },
                            "id": 358,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "Tier",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 389,
                            "src": "2142:10:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_Tier_$389_$",
                              "typeString": "type(enum ITier.Tier)"
                            }
                          },
                          "id": 359,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "SEVEN",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "2142:16:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$389",
                            "typeString": "enum ITier.Tier"
                          }
                        }
                      ],
                      "id": 360,
                      "modifierName": {
                        "argumentTypes": null,
                        "id": 354,
                        "name": "onlyTier",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 482,
                        "src": "2121:8:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_modifier$_t_address_$_t_enum$_Tier_$389_$",
                          "typeString": "modifier (address,enum ITier.Tier)"
                        }
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "2121:38:1"
                    }
                  ],
                  "name": "ifSeven",
                  "nodeType": "FunctionDefinition",
                  "overrides": null,
                  "parameters": {
                    "id": 353,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2080:2:1"
                  },
                  "returnParameters": {
                    "id": 361,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2164:0:1"
                  },
                  "scope": 376,
                  "src": "2064:103:1",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 374,
                    "nodeType": "Block",
                    "src": "2352:3:1",
                    "statements": []
                  },
                  "documentation": {
                    "id": 364,
                    "nodeType": "StructuredDocumentation",
                    "src": "2213:34:1",
                    "text": "Requires `Tier.EIGHT` to call."
                  },
                  "functionSelector": "1fb3d151",
                  "id": 375,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 367,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "2318:3:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 368,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "2318:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 369,
                              "name": "ITier",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 417,
                              "src": "2330:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_ITier_$417_$",
                                "typeString": "type(contract ITier)"
                              }
                            },
                            "id": 370,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "Tier",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 389,
                            "src": "2330:10:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_Tier_$389_$",
                              "typeString": "type(enum ITier.Tier)"
                            }
                          },
                          "id": 371,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "EIGHT",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "2330:16:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$389",
                            "typeString": "enum ITier.Tier"
                          }
                        }
                      ],
                      "id": 372,
                      "modifierName": {
                        "argumentTypes": null,
                        "id": 366,
                        "name": "onlyTier",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 482,
                        "src": "2309:8:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_modifier$_t_address_$_t_enum$_Tier_$389_$",
                          "typeString": "modifier (address,enum ITier.Tier)"
                        }
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "2309:38:1"
                    }
                  ],
                  "name": "ifEight",
                  "nodeType": "FunctionDefinition",
                  "overrides": null,
                  "parameters": {
                    "id": 365,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2268:2:1"
                  },
                  "returnParameters": {
                    "id": 373,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2352:0:1"
                  },
                  "scope": 376,
                  "src": "2252:103:1",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 377,
              "src": "307:2090:1"
            }
          ],
          "src": "33:2364:1"
        },
        "id": 1
      },
      "contracts/rain-protocol/contracts/tier/ITier.sol": {
        "ast": {
          "absolutePath": "contracts/rain-protocol/contracts/tier/ITier.sol",
          "exportedSymbols": {
            "ITier": [
              417
            ]
          },
          "id": 418,
          "license": "CAL",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 378,
              "literals": [
                "solidity",
                "0.6",
                ".12"
              ],
              "nodeType": "PragmaDirective",
              "src": "33:23:2"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "interface",
              "documentation": {
                "id": 379,
                "nodeType": "StructuredDocumentation",
                "src": "58:2122:2",
                "text": "@title ITier\n @notice `ITier` is a simple interface that contracts can\n implement to provide membership lists for other contracts.\n There are many use-cases for a time-preserving,\n conditional membership list.\n Some examples include:\n - Self-serve whitelist to participate in fundraising\n - Lists of users who can claim airdrops and perks\n - Pooling resources with implied governance/reward tiers\n - POAP style attendance proofs allowing access to future exclusive events\n @dev Standard interface to a tiered membership.\n A \"membership\" can represent many things:\n - Exclusive access.\n - Participation in some event or process.\n - KYC completion.\n - Combination of sub-memberships.\n - Etc.\n The high level requirements for a contract implementing `ITier`:\n - MUST represent held tiers with the `Tier` enum.\n - MUST implement `report`.\n   - The report is a `uint256` that SHOULD represent the block each tier has\n     been continuously held since encoded as `uint32`.\n   - The encoded tiers start at ONE; ZERO is implied if no tier has ever\n     been held.\n   - `Tier.ZERO` is NOT encoded in the report, it is simply the fallback\n     value.\n   - If a tier is lost the block data is erased for that tier and will be\n     set if/when the tier is regained to the new block.\n   - If the historical block information is not available the report MAY\n     return `0x00000000` for all held tiers.\n   - Tiers that are lost or have never been held MUST return `0xFFFFFFFF`.\n - SHOULD implement `setTier`.\n   - Contracts SHOULD revert with `SET_TIER` error if they cannot\n     meaningfully set a tier directly.\n     For example a contract that can only derive a membership tier by\n     reading the state of an external contract cannot set tiers.\n   - Contracts implementing `setTier` SHOULD error with `SET_ZERO_TIER`\n     if `Tier.ZERO` is being set.\n - MUST emit `TierChange` when `setTier` successfully writes a new tier.\n   - Contracts that cannot meaningfully set a tier are exempt."
              },
              "fullyImplemented": false,
              "id": 417,
              "linearizedBaseContracts": [
                417
              ],
              "name": "ITier",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "canonicalName": "ITier.Tier",
                  "id": 389,
                  "members": [
                    {
                      "id": 380,
                      "name": "ZERO",
                      "nodeType": "EnumValue",
                      "src": "2435:4:2"
                    },
                    {
                      "id": 381,
                      "name": "ONE",
                      "nodeType": "EnumValue",
                      "src": "2449:3:2"
                    },
                    {
                      "id": 382,
                      "name": "TWO",
                      "nodeType": "EnumValue",
                      "src": "2462:3:2"
                    },
                    {
                      "id": 383,
                      "name": "THREE",
                      "nodeType": "EnumValue",
                      "src": "2475:5:2"
                    },
                    {
                      "id": 384,
                      "name": "FOUR",
                      "nodeType": "EnumValue",
                      "src": "2490:4:2"
                    },
                    {
                      "id": 385,
                      "name": "FIVE",
                      "nodeType": "EnumValue",
                      "src": "2504:4:2"
                    },
                    {
                      "id": 386,
                      "name": "SIX",
                      "nodeType": "EnumValue",
                      "src": "2518:3:2"
                    },
                    {
                      "id": 387,
                      "name": "SEVEN",
                      "nodeType": "EnumValue",
                      "src": "2531:5:2"
                    },
                    {
                      "id": 388,
                      "name": "EIGHT",
                      "nodeType": "EnumValue",
                      "src": "2546:5:2"
                    }
                  ],
                  "name": "Tier",
                  "nodeType": "EnumDefinition",
                  "src": "2415:142:2"
                },
                {
                  "anonymous": false,
                  "documentation": {
                    "id": 390,
                    "nodeType": "StructuredDocumentation",
                    "src": "2563:190:2",
                    "text": "Every time a Tier changes we log start and end Tier against the\n account.\n This MAY NOT be emitted if reports are being read from the state of an\n external contract."
                  },
                  "id": 398,
                  "name": "TierChange",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 397,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 392,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "account",
                        "nodeType": "VariableDeclaration",
                        "overrides": null,
                        "scope": 398,
                        "src": "2784:23:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 391,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2784:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 394,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "startTier",
                        "nodeType": "VariableDeclaration",
                        "overrides": null,
                        "scope": 398,
                        "src": "2817:22:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Tier_$389",
                          "typeString": "enum ITier.Tier"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 393,
                          "name": "Tier",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 389,
                          "src": "2817:4:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$389",
                            "typeString": "enum ITier.Tier"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 396,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "endTier",
                        "nodeType": "VariableDeclaration",
                        "overrides": null,
                        "scope": 398,
                        "src": "2849:20:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Tier_$389",
                          "typeString": "enum ITier.Tier"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 395,
                          "name": "Tier",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 389,
                          "src": "2849:4:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$389",
                            "typeString": "enum ITier.Tier"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "2774:101:2"
                  },
                  "src": "2758:118:2"
                },
                {
                  "body": null,
                  "documentation": {
                    "id": 399,
                    "nodeType": "StructuredDocumentation",
                    "src": "2882:2294:2",
                    "text": "@notice Users can set their own tier by calling `setTier`.\n The contract that implements `ITier` is responsible for checking\n eligibility and/or taking actions required to set the tier.\n For example, the contract must take/refund any tokens relevant to\n changing the tier.\n Obviously the user is responsible for any approvals for this action\n prior to calling `setTier`.\n When the tier is changed a `TierChange` event will be emmited as:\n ```\n event TierChange(address account, Tier startTier, Tier endTier);\n ```\n The `setTier` function includes arbitrary data as the third\n parameter. This can be used to disambiguate in the case that\n there may be many possible options for a user to achieve some tier.\n For example, consider the case where `Tier.THREE` can be achieved\n by EITHER locking 1x rare NFT or 3x uncommon NFTs. A user with both\n could use `data` to explicitly state their intent.\n NOTE however that _any_ address can call `setTier` for any other\n address.\n If you implement `data` or anything that changes state then be very\n careful to avoid griefing attacks.\n The `data` parameter can also be ignored by the contract implementing\n `ITier`. For example, ERC20 tokens are fungible so only the balance\n approved by the user is relevant to a tier change.\n The `setTier` function SHOULD prevent users from reassigning\n `Tier.ZERO` to themselves.\n The `Tier.ZERO` status represents never having any status.\n @dev Updates the tier of an account.\n The implementing contract is responsible for all checks and state\n changes required to set the tier. For example, taking/refunding\n funds/NFTs etc.\n Contracts may disallow directly setting tiers, preferring to derive\n reports from other onchain data.\n In this case they should `revert(\"SET_TIER\");`.\n @param account Account to change the tier for.\n @param endTier Tier after the change.\n @param data Arbitrary input to disambiguate ownership\n (e.g. NFTs to lock)."
                  },
                  "functionSelector": "52dab69d",
                  "id": 408,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "setTier",
                  "nodeType": "FunctionDefinition",
                  "overrides": null,
                  "parameters": {
                    "id": 406,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 401,
                        "mutability": "mutable",
                        "name": "account",
                        "nodeType": "VariableDeclaration",
                        "overrides": null,
                        "scope": 408,
                        "src": "5207:15:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 400,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5207:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 403,
                        "mutability": "mutable",
                        "name": "endTier",
                        "nodeType": "VariableDeclaration",
                        "overrides": null,
                        "scope": 408,
                        "src": "5232:12:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Tier_$389",
                          "typeString": "enum ITier.Tier"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 402,
                          "name": "Tier",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 389,
                          "src": "5232:4:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$389",
                            "typeString": "enum ITier.Tier"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 405,
                        "mutability": "mutable",
                        "name": "data",
                        "nodeType": "VariableDeclaration",
                        "overrides": null,
                        "scope": 408,
                        "src": "5254:17:2",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 404,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "5254:5:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "5197:80:2"
                  },
                  "returnParameters": {
                    "id": 407,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "5294:0:2"
                  },
                  "scope": 417,
                  "src": "5181:114:2",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": null,
                  "documentation": {
                    "id": 409,
                    "nodeType": "StructuredDocumentation",
                    "src": "5301:2251:2",
                    "text": "@notice A tier report is a `uint256` that contains each of the block\n numbers each tier has been held continously since as a `uint32`.\n There are 9 possible tier, starting with `Tier.ZERO` for `0` offset or\n \"never held any tier\" then working up through 8x 4 byte offsets to the\n full 256 bits.\n Low bits = Lower tier.\n In hexadecimal every 8 characters = one tier, starting at `Tier.EIGHT`\n from high bits and working down to `Tier.ONE`.\n `uint32` should be plenty for any blockchain that measures block times\n in seconds, but reconsider if deploying to an environment with\n significantly sub-second block times.\n ~135 years of 1 second blocks fit into `uint32`.\n `2^8 / (365 * 24 * 60 * 60)`\n When a user INCREASES their tier they keep all the block numbers they\n already had, and get new block times for each increased tiers they have\n earned.\n When a user DECREASES their tier they return to `0xFFFFFFFF` (never)\n for every tier level they remove, but keep their block numbers for the\n remaining tiers.\n GUIs are encouraged to make this dynamic very clear for users as\n round-tripping to a lower status and back is a DESTRUCTIVE operation\n for block times.\n The intent is that downstream code can provide additional benefits for\n members who have maintained a certain tier for/since a long time.\n These benefits can be provided by inspecting the report, and by\n on-chain contracts directly,\n rather than needing to work with snapshots etc.\n @dev Returns the earliest block the account has held each tier for\n continuously.\n This is encoded as a uint256 with blocks represented as 8x\n concatenated uint32.\n I.e. Each 4 bytes of the uint256 represents a u32 tier start time.\n The low bits represent low tiers and high bits the high tiers.\n Implementing contracts should return 0xFFFFFFFF for lost &\n never-held tiers.\n @param account Account to get the report for.\n @return The report blocks encoded as a uint256."
                  },
                  "functionSelector": "e053ea31",
                  "id": 416,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "report",
                  "nodeType": "FunctionDefinition",
                  "overrides": null,
                  "parameters": {
                    "id": 412,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 411,
                        "mutability": "mutable",
                        "name": "account",
                        "nodeType": "VariableDeclaration",
                        "overrides": null,
                        "scope": 416,
                        "src": "7573:15:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 410,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "7573:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "7572:17:2"
                  },
                  "returnParameters": {
                    "id": 415,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 414,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "overrides": null,
                        "scope": 416,
                        "src": "7613:7:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 413,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "7613:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "7612:9:2"
                  },
                  "scope": 417,
                  "src": "7557:65:2",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 418,
              "src": "2180:5444:2"
            }
          ],
          "src": "33:7591:2"
        },
        "id": 2
      },
      "contracts/rain-protocol/contracts/tier/TierByConstruction.sol": {
        "ast": {
          "absolutePath": "contracts/rain-protocol/contracts/tier/TierByConstruction.sol",
          "exportedSymbols": {
            "TierByConstruction": [
              483
            ]
          },
          "id": 484,
          "license": "CAL",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 419,
              "literals": [
                "solidity",
                "0.6",
                ".12"
              ],
              "nodeType": "PragmaDirective",
              "src": "33:23:3"
            },
            {
              "absolutePath": "contracts/rain-protocol/contracts/libraries/TierUtil.sol",
              "file": "../libraries/TierUtil.sol",
              "id": 421,
              "nodeType": "ImportDirective",
              "scope": 484,
              "sourceUnit": 244,
              "src": "58:53:3",
              "symbolAliases": [
                {
                  "foreign": {
                    "argumentTypes": null,
                    "id": 420,
                    "name": "TierUtil",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": null,
                    "src": "67:8:3",
                    "typeDescriptions": {
                      "typeIdentifier": null,
                      "typeString": null
                    }
                  },
                  "local": null
                }
              ],
              "unitAlias": ""
            },
            {
              "absolutePath": "contracts/rain-protocol/contracts/tier/ITier.sol",
              "file": "./ITier.sol",
              "id": 423,
              "nodeType": "ImportDirective",
              "scope": 484,
              "sourceUnit": 418,
              "src": "112:36:3",
              "symbolAliases": [
                {
                  "foreign": {
                    "argumentTypes": null,
                    "id": 422,
                    "name": "ITier",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": null,
                    "src": "121:5:3",
                    "typeDescriptions": {
                      "typeIdentifier": null,
                      "typeString": null
                    }
                  },
                  "local": null
                }
              ],
              "unitAlias": ""
            },
            {
              "abstract": false,
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "contract",
              "documentation": {
                "id": 424,
                "nodeType": "StructuredDocumentation",
                "src": "150:1576:3",
                "text": "@title TierByConstruction\n @notice `TierByConstruction` is a base contract for other\n contracts to inherit from.\n It exposes `isTier` and the corresponding modifier `onlyTier`.\n This ensures that the address has held at least the given tier\n since the contract was constructed.\n We check against the construction time of the contract rather\n than the current block to avoid various exploits.\n Users should not be able to gain a tier for a single block, claim\n benefits then remove the tier within the same block.\n The construction block provides a simple and generic reference\n point that is difficult to manipulate/predict.\n Note that `ReadOnlyTier` contracts must carefully consider use\n with `TierByConstruction` as they tend to return `0x00000000` for\n any/all tiers held. There needs to be additional safeguards to\n mitigate \"flash tier\" attacks.\n Note that an account COULD be `TierByConstruction` then lower/\n remove a tier, then no longer be eligible when they regain the\n tier. Only _continuously held_ tiers are valid against the\n construction block check as this is native behaviour of the\n `report` function in `ITier`.\n Technically the `ITier` could re-enter the `TierByConstruction`\n so the `onlyTier` modifier runs AFTER the modified function.\n @dev Enforces tiers held by contract contruction block.\n The construction block is compared against the blocks returned by `report`.\n The `ITier` contract is paramaterised and set during construction."
              },
              "fullyImplemented": true,
              "id": 483,
              "linearizedBaseContracts": [
                483
              ],
              "name": "TierByConstruction",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": false,
                  "functionSelector": "a30872db",
                  "id": 426,
                  "mutability": "mutable",
                  "name": "tierContract",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 483,
                  "src": "1760:25:3",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ITier_$417",
                    "typeString": "contract ITier"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 425,
                    "name": "ITier",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 417,
                    "src": "1760:5:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ITier_$417",
                      "typeString": "contract ITier"
                    }
                  },
                  "value": null,
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "0f0af57f",
                  "id": 428,
                  "mutability": "mutable",
                  "name": "constructionBlock",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 483,
                  "src": "1791:32:3",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 427,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1791:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 442,
                    "nodeType": "Block",
                    "src": "1870:87:3",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 435,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "id": 433,
                            "name": "tierContract",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 426,
                            "src": "1880:12:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_ITier_$417",
                              "typeString": "contract ITier"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "id": 434,
                            "name": "tierContract_",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 430,
                            "src": "1895:13:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_ITier_$417",
                              "typeString": "contract ITier"
                            }
                          },
                          "src": "1880:28:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_ITier_$417",
                            "typeString": "contract ITier"
                          }
                        },
                        "id": 436,
                        "nodeType": "ExpressionStatement",
                        "src": "1880:28:3"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 440,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "id": 437,
                            "name": "constructionBlock",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 428,
                            "src": "1918:17:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 438,
                              "name": "block",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -4,
                              "src": "1938:5:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_block",
                                "typeString": "block"
                              }
                            },
                            "id": 439,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "number",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "1938:12:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1918:32:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 441,
                        "nodeType": "ExpressionStatement",
                        "src": "1918:32:3"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 443,
                  "implemented": true,
                  "kind": "constructor",
                  "modifiers": [],
                  "name": "",
                  "nodeType": "FunctionDefinition",
                  "overrides": null,
                  "parameters": {
                    "id": 431,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 430,
                        "mutability": "mutable",
                        "name": "tierContract_",
                        "nodeType": "VariableDeclaration",
                        "overrides": null,
                        "scope": 443,
                        "src": "1842:19:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_ITier_$417",
                          "typeString": "contract ITier"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 429,
                          "name": "ITier",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 417,
                          "src": "1842:5:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_ITier_$417",
                            "typeString": "contract ITier"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "1841:21:3"
                  },
                  "returnParameters": {
                    "id": 432,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1870:0:3"
                  },
                  "scope": 483,
                  "src": "1830:127:3",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 464,
                    "nodeType": "Block",
                    "src": "2684:142:3",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 462,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 453,
                            "name": "constructionBlock",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 428,
                            "src": "2701:17:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">=",
                          "rightExpression": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "id": 458,
                                    "name": "account_",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 446,
                                    "src": "2774:8:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 456,
                                    "name": "tierContract",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 426,
                                    "src": "2754:12:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_ITier_$417",
                                      "typeString": "contract ITier"
                                    }
                                  },
                                  "id": 457,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "report",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 416,
                                  "src": "2754:19:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                                    "typeString": "function (address) view external returns (uint256)"
                                  }
                                },
                                "id": 459,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "2754:29:3",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "argumentTypes": null,
                                "id": 460,
                                "name": "minimumTier_",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 448,
                                "src": "2797:12:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_Tier_$389",
                                  "typeString": "enum ITier.Tier"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_enum$_Tier_$389",
                                  "typeString": "enum ITier.Tier"
                                }
                              ],
                              "expression": {
                                "argumentTypes": null,
                                "id": 454,
                                "name": "TierUtil",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 243,
                                "src": "2722:8:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_TierUtil_$243_$",
                                  "typeString": "type(library TierUtil)"
                                }
                              },
                              "id": 455,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "tierBlock",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 109,
                              "src": "2722:18:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_enum$_Tier_$389_$returns$_t_uint256_$",
                                "typeString": "function (uint256,enum ITier.Tier) pure returns (uint256)"
                              }
                            },
                            "id": 461,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2722:97:3",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "2701:118:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 452,
                        "id": 463,
                        "nodeType": "Return",
                        "src": "2694:125:3"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 444,
                    "nodeType": "StructuredDocumentation",
                    "src": "1963:602:3",
                    "text": "Check if an account has held AT LEAST the given tier according to\n `tierContract` since construction.\n The account MUST have held the tier continuously from construction\n until the \"current\" state according to `report`.\n Note that `report` PROBABLY is current as at the block this function is\n called but MAYBE NOT.\n The `ITier` contract is free to manage reports however makes sense.\n @param account_ Account to check status of.\n @param minimumTier_ Minimum tier for the account.\n @return True if the status is currently held."
                  },
                  "functionSelector": "77544f33",
                  "id": 465,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "isTier",
                  "nodeType": "FunctionDefinition",
                  "overrides": null,
                  "parameters": {
                    "id": 449,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 446,
                        "mutability": "mutable",
                        "name": "account_",
                        "nodeType": "VariableDeclaration",
                        "overrides": null,
                        "scope": 465,
                        "src": "2586:16:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 445,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2586:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 448,
                        "mutability": "mutable",
                        "name": "minimumTier_",
                        "nodeType": "VariableDeclaration",
                        "overrides": null,
                        "scope": 465,
                        "src": "2604:23:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Tier_$389",
                          "typeString": "enum ITier.Tier"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 447,
                          "name": "ITier.Tier",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 389,
                          "src": "2604:10:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$389",
                            "typeString": "enum ITier.Tier"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "2585:43:3"
                  },
                  "returnParameters": {
                    "id": 452,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 451,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "overrides": null,
                        "scope": 465,
                        "src": "2674:4:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 450,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "2674:4:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "2673:6:3"
                  },
                  "scope": 483,
                  "src": "2570:256:3",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 481,
                    "nodeType": "Block",
                    "src": "3747:117:3",
                    "statements": [
                      {
                        "id": 472,
                        "nodeType": "PlaceholderStatement",
                        "src": "3757:1:3"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "id": 475,
                                  "name": "account_",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 468,
                                  "src": "3796:8:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "argumentTypes": null,
                                  "id": 476,
                                  "name": "minimumTier_",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 470,
                                  "src": "3806:12:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_enum$_Tier_$389",
                                    "typeString": "enum ITier.Tier"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_enum$_Tier_$389",
                                    "typeString": "enum ITier.Tier"
                                  }
                                ],
                                "id": 474,
                                "name": "isTier",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 465,
                                "src": "3789:6:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$_t_address_$_t_enum$_Tier_$389_$returns$_t_bool_$",
                                  "typeString": "function (address,enum ITier.Tier) view returns (bool)"
                                }
                              },
                              "id": 477,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "3789:30:3",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "hexValue": "4d494e494d554d5f54494552",
                              "id": 478,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3833:14:3",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_0e7b139056d213f6cf6aafa2ba85187741039eeb8f0d68e3be041110713a1740",
                                "typeString": "literal_string \"MINIMUM_TIER\""
                              },
                              "value": "MINIMUM_TIER"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_0e7b139056d213f6cf6aafa2ba85187741039eeb8f0d68e3be041110713a1740",
                                "typeString": "literal_string \"MINIMUM_TIER\""
                              }
                            ],
                            "id": 473,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "3768:7:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 479,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3768:89:3",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 480,
                        "nodeType": "ExpressionStatement",
                        "src": "3768:89:3"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 466,
                    "nodeType": "StructuredDocumentation",
                    "src": "3271:410:3",
                    "text": "https://consensys.github.io/smart-contract-best-practices/recommendations/#use-modifiers-only-for-checks\n Do NOT use this to guard setting the tier on an `ITier` contract.\n The initial tier would be checked AFTER it has already been\n modified which is unsafe.\n @param account_ Account to enforce tier of.\n @param minimumTier_ Minimum tier for the account."
                  },
                  "id": 482,
                  "name": "onlyTier",
                  "nodeType": "ModifierDefinition",
                  "overrides": null,
                  "parameters": {
                    "id": 471,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 468,
                        "mutability": "mutable",
                        "name": "account_",
                        "nodeType": "VariableDeclaration",
                        "overrides": null,
                        "scope": 482,
                        "src": "3704:16:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 467,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3704:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 470,
                        "mutability": "mutable",
                        "name": "minimumTier_",
                        "nodeType": "VariableDeclaration",
                        "overrides": null,
                        "scope": 482,
                        "src": "3722:23:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Tier_$389",
                          "typeString": "enum ITier.Tier"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 469,
                          "name": "ITier.Tier",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 389,
                          "src": "3722:10:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$389",
                            "typeString": "enum ITier.Tier"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "3703:43:3"
                  },
                  "src": "3686:178:3",
                  "virtual": false,
                  "visibility": "internal"
                }
              ],
              "scope": 484,
              "src": "1726:2140:3"
            }
          ],
          "src": "33:3833:3"
        },
        "id": 3
      }
    }
  }
}
