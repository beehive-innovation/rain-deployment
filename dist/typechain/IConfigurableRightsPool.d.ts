/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IConfigurableRightsPoolInterface extends ethers.utils.Interface {
  functions: {
    "bFactory()": FunctionFragment;
    "bPool()": FunctionFragment;
    "createPool(uint256,uint256,uint256)": FunctionFragment;
    "exitPool(uint256,uint256[])": FunctionFragment;
    "updateWeightsGradually(uint256[],uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "bFactory", values?: undefined): string;
  encodeFunctionData(functionFragment: "bPool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createPool",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exitPool",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateWeightsGradually",
    values: [BigNumberish[], BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "bFactory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exitPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateWeightsGradually",
    data: BytesLike
  ): Result;

  events: {};
}

export class IConfigurableRightsPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IConfigurableRightsPoolInterface;

  functions: {
    bFactory(overrides?: CallOverrides): Promise<[string]>;

    bPool(overrides?: CallOverrides): Promise<[string]>;

    createPool(
      initialSupply: BigNumberish,
      minimumWeightChangeBlockPeriodParam: BigNumberish,
      addTokenTimeLockInBlocksParam: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exitPool(
      poolAmountIn: BigNumberish,
      minAmountsOut: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateWeightsGradually(
      newWeights: BigNumberish[],
      startBlock: BigNumberish,
      endBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  bFactory(overrides?: CallOverrides): Promise<string>;

  bPool(overrides?: CallOverrides): Promise<string>;

  createPool(
    initialSupply: BigNumberish,
    minimumWeightChangeBlockPeriodParam: BigNumberish,
    addTokenTimeLockInBlocksParam: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exitPool(
    poolAmountIn: BigNumberish,
    minAmountsOut: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateWeightsGradually(
    newWeights: BigNumberish[],
    startBlock: BigNumberish,
    endBlock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bFactory(overrides?: CallOverrides): Promise<string>;

    bPool(overrides?: CallOverrides): Promise<string>;

    createPool(
      initialSupply: BigNumberish,
      minimumWeightChangeBlockPeriodParam: BigNumberish,
      addTokenTimeLockInBlocksParam: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    exitPool(
      poolAmountIn: BigNumberish,
      minAmountsOut: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateWeightsGradually(
      newWeights: BigNumberish[],
      startBlock: BigNumberish,
      endBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    bFactory(overrides?: CallOverrides): Promise<BigNumber>;

    bPool(overrides?: CallOverrides): Promise<BigNumber>;

    createPool(
      initialSupply: BigNumberish,
      minimumWeightChangeBlockPeriodParam: BigNumberish,
      addTokenTimeLockInBlocksParam: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exitPool(
      poolAmountIn: BigNumberish,
      minAmountsOut: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateWeightsGradually(
      newWeights: BigNumberish[],
      startBlock: BigNumberish,
      endBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createPool(
      initialSupply: BigNumberish,
      minimumWeightChangeBlockPeriodParam: BigNumberish,
      addTokenTimeLockInBlocksParam: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exitPool(
      poolAmountIn: BigNumberish,
      minAmountsOut: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateWeightsGradually(
      newWeights: BigNumberish[],
      startBlock: BigNumberish,
      endBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
