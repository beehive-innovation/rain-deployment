/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TierByConstructionTestInterface extends ethers.utils.Interface {
  functions: {
    "constructionBlock()": FunctionFragment;
    "ifEight()": FunctionFragment;
    "ifFive()": FunctionFragment;
    "ifFour()": FunctionFragment;
    "ifOne()": FunctionFragment;
    "ifSeven()": FunctionFragment;
    "ifSix()": FunctionFragment;
    "ifThree()": FunctionFragment;
    "ifTwo()": FunctionFragment;
    "ifZero()": FunctionFragment;
    "isTier(address,uint8)": FunctionFragment;
    "tierContract()": FunctionFragment;
    "unlimited()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "constructionBlock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ifEight", values?: undefined): string;
  encodeFunctionData(functionFragment: "ifFive", values?: undefined): string;
  encodeFunctionData(functionFragment: "ifFour", values?: undefined): string;
  encodeFunctionData(functionFragment: "ifOne", values?: undefined): string;
  encodeFunctionData(functionFragment: "ifSeven", values?: undefined): string;
  encodeFunctionData(functionFragment: "ifSix", values?: undefined): string;
  encodeFunctionData(functionFragment: "ifThree", values?: undefined): string;
  encodeFunctionData(functionFragment: "ifTwo", values?: undefined): string;
  encodeFunctionData(functionFragment: "ifZero", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isTier",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tierContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unlimited", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "constructionBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ifEight", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ifFive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ifFour", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ifOne", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ifSeven", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ifSix", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ifThree", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ifTwo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ifZero", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isTier", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tierContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlimited", data: BytesLike): Result;

  events: {};
}

export class TierByConstructionTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TierByConstructionTestInterface;

  functions: {
    constructionBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    ifEight(overrides?: CallOverrides): Promise<[void]>;

    ifFive(overrides?: CallOverrides): Promise<[void]>;

    ifFour(overrides?: CallOverrides): Promise<[void]>;

    ifOne(overrides?: CallOverrides): Promise<[void]>;

    ifSeven(overrides?: CallOverrides): Promise<[void]>;

    ifSix(overrides?: CallOverrides): Promise<[void]>;

    ifThree(overrides?: CallOverrides): Promise<[void]>;

    ifTwo(overrides?: CallOverrides): Promise<[void]>;

    ifZero(overrides?: CallOverrides): Promise<[void]>;

    isTier(
      account_: string,
      minimumTier_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    tierContract(overrides?: CallOverrides): Promise<[string]>;

    unlimited(overrides?: CallOverrides): Promise<[void]>;
  };

  constructionBlock(overrides?: CallOverrides): Promise<BigNumber>;

  ifEight(overrides?: CallOverrides): Promise<void>;

  ifFive(overrides?: CallOverrides): Promise<void>;

  ifFour(overrides?: CallOverrides): Promise<void>;

  ifOne(overrides?: CallOverrides): Promise<void>;

  ifSeven(overrides?: CallOverrides): Promise<void>;

  ifSix(overrides?: CallOverrides): Promise<void>;

  ifThree(overrides?: CallOverrides): Promise<void>;

  ifTwo(overrides?: CallOverrides): Promise<void>;

  ifZero(overrides?: CallOverrides): Promise<void>;

  isTier(
    account_: string,
    minimumTier_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tierContract(overrides?: CallOverrides): Promise<string>;

  unlimited(overrides?: CallOverrides): Promise<void>;

  callStatic: {
    constructionBlock(overrides?: CallOverrides): Promise<BigNumber>;

    ifEight(overrides?: CallOverrides): Promise<void>;

    ifFive(overrides?: CallOverrides): Promise<void>;

    ifFour(overrides?: CallOverrides): Promise<void>;

    ifOne(overrides?: CallOverrides): Promise<void>;

    ifSeven(overrides?: CallOverrides): Promise<void>;

    ifSix(overrides?: CallOverrides): Promise<void>;

    ifThree(overrides?: CallOverrides): Promise<void>;

    ifTwo(overrides?: CallOverrides): Promise<void>;

    ifZero(overrides?: CallOverrides): Promise<void>;

    isTier(
      account_: string,
      minimumTier_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tierContract(overrides?: CallOverrides): Promise<string>;

    unlimited(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    constructionBlock(overrides?: CallOverrides): Promise<BigNumber>;

    ifEight(overrides?: CallOverrides): Promise<BigNumber>;

    ifFive(overrides?: CallOverrides): Promise<BigNumber>;

    ifFour(overrides?: CallOverrides): Promise<BigNumber>;

    ifOne(overrides?: CallOverrides): Promise<BigNumber>;

    ifSeven(overrides?: CallOverrides): Promise<BigNumber>;

    ifSix(overrides?: CallOverrides): Promise<BigNumber>;

    ifThree(overrides?: CallOverrides): Promise<BigNumber>;

    ifTwo(overrides?: CallOverrides): Promise<BigNumber>;

    ifZero(overrides?: CallOverrides): Promise<BigNumber>;

    isTier(
      account_: string,
      minimumTier_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tierContract(overrides?: CallOverrides): Promise<BigNumber>;

    unlimited(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    constructionBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ifEight(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ifFive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ifFour(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ifOne(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ifSeven(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ifSix(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ifThree(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ifTwo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ifZero(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isTier(
      account_: string,
      minimumTier_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tierContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unlimited(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
