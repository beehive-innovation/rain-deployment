/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  SeedERC20ForceSendEther,
  SeedERC20ForceSendEtherInterface,
} from "../SeedERC20ForceSendEther";

const _abi = [
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [
      {
        internalType: "contract SeedERC20",
        name: "seedERC20Contract_",
        type: "address",
      },
    ],
    name: "destroy",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b5060ac8061001e6000396000f3fe608060405260043610601c5760003560e01c8062f55d9d14602457005b36602257005b005b348015602f57600080fd5b506022603b3660046048565b806001600160a01b038116ff5b600060208284031215605957600080fd5b81356001600160a01b0381168114606f57600080fd5b939250505056fea2646970667358221220f924efc1f1be3cf9ef37a0a0230f6351fa36c3ad1d9b4e286e09332b477c87c064736f6c634300080a0033";

export class SeedERC20ForceSendEther__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SeedERC20ForceSendEther> {
    return super.deploy(overrides || {}) as Promise<SeedERC20ForceSendEther>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): SeedERC20ForceSendEther {
    return super.attach(address) as SeedERC20ForceSendEther;
  }
  connect(signer: Signer): SeedERC20ForceSendEther__factory {
    return super.connect(signer) as SeedERC20ForceSendEther__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SeedERC20ForceSendEtherInterface {
    return new utils.Interface(_abi) as SeedERC20ForceSendEtherInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SeedERC20ForceSendEther {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as SeedERC20ForceSendEther;
  }
}
