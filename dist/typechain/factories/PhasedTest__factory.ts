/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PhasedTest, PhasedTestInterface } from "../PhasedTest";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint32",
        name: "newPhaseBlock_",
        type: "uint32",
      },
    ],
    name: "PhaseShiftScheduled",
    type: "event",
  },
  {
    inputs: [],
    name: "UNINITIALIZED",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32[8]",
        name: "phaseBlocks_",
        type: "uint32[8]",
      },
      {
        internalType: "enum Phase",
        name: "phase_",
        type: "uint8",
      },
    ],
    name: "blockNumberForPhase",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "currentPhase",
    outputs: [
      {
        internalType: "enum Phase",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "hookCondition",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32[8]",
        name: "phaseBlocks_",
        type: "uint32[8]",
      },
      {
        internalType: "uint32",
        name: "blockNumber_",
        type: "uint32",
      },
    ],
    name: "phaseAtBlockNumber",
    outputs: [
      {
        internalType: "enum Phase",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "phaseBlocks",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum Phase",
        name: "phase_",
        type: "uint8",
      },
    ],
    name: "runsOnlyAtLeastPhase",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum Phase",
        name: "phase_",
        type: "uint8",
      },
    ],
    name: "runsOnlyPhase",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "nextPhaseBlock_",
        type: "uint32",
      },
    ],
    name: "testScheduleNextPhase",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "toggleHookCondition",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526001805460ff19168117905534801561001c57600080fd5b5060005b600881101561007d5763ffffffff6000826008811061004157610041610083565b600891828204019190066004026101000a81548163ffffffff021916908363ffffffff160217905550808061007590610099565b915050610020565b506100c2565b634e487b7160e01b600052603260045260246000fd5b60006000198214156100bb57634e487b7160e01b600052601160045260246000fd5b5060010190565b6107ff806100d16000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80636932f6b7116100665780636932f6b714610134578063791f211f1461014757806381e45d9a1461015e5780639923c94b14610169578063abec2f811461017c57600080fd5b8063055ad42e146100a357806334c1df75146100c15780633bd126dc146100d457806345bdfa8a146100e957806348a8b7df14610111575b600080fd5b6100ab610189565b6040516100b891906105e5565b60405180910390f35b6100ab6100cf36600461063c565b6101f3565b6100e76100e23660046106d1565b610263565b005b6100fc6100f73660046106fb565b61026f565b60405163ffffffff90911681526020016100b8565b61012461011f366004610737565b6102d2565b60405190151581526020016100b8565b610124610142366004610737565b610347565b6100e76001805460ff19811660ff90911615179055565b6100fc63ffffffff81565b6100fc610177366004610752565b6103af565b6001546101249060ff1681565b604080516101008101918290526000916101ee919083906008908280855b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116101a75790505050505050436101f3565b905090565b6000805b6008811015610256578381600881106102125761021261076b565b602002015163ffffffff168363ffffffff1610156102445780600881111561023c5761023c6105cf565b91505061025d565b8061024e81610797565b9150506101f7565b5060085b90505b92915050565b61026c816103df565b50565b600080826008811115610284576102846105cf565b1161029057600061025a565b8260018360088111156102a5576102a56105cf565b6102af91906107b2565b600881106102bf576102bf61076b565b60200201602081019061025a91906106d1565b6000818060088111156102e7576102e76105cf565b6102ef610189565b6008811115610300576103006105cf565b1461033e5760405162461bcd60e51b81526020600482015260096024820152684241445f504841534560b81b60448201526064015b60405180910390fd5b50600192915050565b60008180600881111561035c5761035c6105cf565b610364610189565b6008811115610375576103756105cf565b101561033e5760405162461bcd60e51b81526020600482015260096024820152684d494e5f504841534560b81b6044820152606401610335565b600081600881106103bf57600080fd5b60089182820401919006600402915054906101000a900463ffffffff1681565b8063ffffffff164363ffffffff16111561042d5760405162461bcd60e51b815260206004820152600f60248201526e1391561517d09313d0d2d7d41054d5608a1b6044820152606401610335565b63ffffffff818116106104825760405162461bcd60e51b815260206004820152601860248201527f4e4558545f424c4f434b5f554e494e495449414c495a454400000000000000006044820152606401610335565b600061048c610189565b600881111561049d5761049d6105cf565b9050600081600881106104b2576104b261076b565b60088104919091015460079091166004026101000a900463ffffffff9081161461050f5760405162461bcd60e51b815260206004820152600e60248201526d1391561517d09313d0d2d7d4d15560921b6044820152606401610335565b6105188261058c565b816000826008811061052c5761052c61076b565b600891828204019190066004026101000a81548163ffffffff021916908363ffffffff1602179055508163ffffffff167f260aac5b840edc27b89fdf50e91311a413363a400959466e1049e6d071b8cee260405160405180910390a25050565b60015460ff1661026c5760405162461bcd60e51b815260206004820152600e60248201526d2427a7a5afa1a7a72224aa24a7a760911b6044820152606401610335565b634e487b7160e01b600052602160045260246000fd5b602081016009831061060757634e487b7160e01b600052602160045260246000fd5b91905290565b634e487b7160e01b600052604160045260246000fd5b803563ffffffff8116811461063757600080fd5b919050565b600080610120838503121561065057600080fd5b83601f84011261065f57600080fd5b60405161010080820182811067ffffffffffffffff821117156106845761068461060d565b6040528401818682111561069757600080fd5b855b828110156106b8576106aa81610623565b825260209182019101610699565b50508193506106c681610623565b925050509250929050565b6000602082840312156106e357600080fd5b61025a82610623565b80356009811061063757600080fd5b600080610120838503121561070f57600080fd5b61010083018481111561072157600080fd5b83925061072d816106ec565b9150509250929050565b60006020828403121561074957600080fd5b61025a826106ec565b60006020828403121561076457600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156107ab576107ab610781565b5060010190565b6000828210156107c4576107c4610781565b50039056fea264697066735822122016474704a1e837fba367dfa96954aa305d9e78da46576577f4f23a2f632145b664736f6c634300080a0033";

export class PhasedTest__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<PhasedTest> {
    return super.deploy(overrides || {}) as Promise<PhasedTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): PhasedTest {
    return super.attach(address) as PhasedTest;
  }
  connect(signer: Signer): PhasedTest__factory {
    return super.connect(signer) as PhasedTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PhasedTestInterface {
    return new utils.Interface(_abi) as PhasedTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PhasedTest {
    return new Contract(address, _abi, signerOrProvider) as PhasedTest;
  }
}
