/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ReadWriteTier, ReadWriteTierInterface } from "../ReadWriteTier";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: true,
        internalType: "enum ITier.Tier",
        name: "startTier",
        type: "uint8",
      },
      {
        indexed: true,
        internalType: "enum ITier.Tier",
        name: "endTier",
        type: "uint8",
      },
    ],
    name: "TierChange",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account_",
        type: "address",
      },
    ],
    name: "report",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "reports",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account_",
        type: "address",
      },
      {
        internalType: "enum ITier.Tier",
        name: "endTier_",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "data_",
        type: "bytes",
      },
    ],
    name: "setTier",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061063b806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063252210e31461004657806352dab69d14610078578063e053ea311461008d575b600080fd5b6100666100543660046103f1565b60006020819052908152604090205481565b60405190815260200160405180910390f35b61008b61008636600461043b565b6100a0565b005b61006661009b3660046103f1565b6101d9565b60008260088111156100b4576100b4610531565b1415610120576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f5345545f5a45524f5f5449455200000000000000000000000000000000000000604482015260640160405180910390fd5b600061012b846101d9565b905060006101398243610256565b9050610147828286436102bb565b73ffffffffffffffffffffffffffffffffffffffff861660009081526020819052604090205583600881111561017f5761017f610531565b81600881111561019157610191610531565b60405173ffffffffffffffffffffffffffffffffffffffff8816907fc47100edc32c382b56a1def2d144f6ab67d8f50be6efa18b329d2e82ee875db290600090a45050505050565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260208190526040812054610229577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610250565b73ffffffffffffffffffffffffffffffffffffffff82166000908152602081905260409020545b92915050565b6000805b60088110156102b05763ffffffff831661027582602061058f565b85901c63ffffffff16111561029e5780600881111561029657610296610531565b915050610250565b806102a8816105cc565b91505061025a565b5060085b9392505050565b60008360088111156102cf576102cf610531565b8360088111156102e1576102e1610531565b106102f7576102f28585858561030a565b610301565b6103018584610378565b95945050505050565b600080600085600881111561032157610321610531565b90505b84600881111561033657610336610531565b81101561036d5761034881602061058f565b63ffffffff811b199790971684881b1796915080610365816105cc565b915050610324565b509495945050505050565b60008082600881111561038d5761038d610531565b61039890602061058f565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811c901b841791505092915050565b803573ffffffffffffffffffffffffffffffffffffffff811681146103ec57600080fd5b919050565b60006020828403121561040357600080fd5b6102b4826103c8565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008060006060848603121561045057600080fd5b610459846103c8565b925060208401356009811061046d57600080fd5b9150604084013567ffffffffffffffff8082111561048a57600080fd5b818601915086601f83011261049e57600080fd5b8135818111156104b0576104b061040c565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156104f6576104f661040c565b8160405282815289602084870101111561050f57600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156105c7576105c7610560565b500290565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156105fe576105fe610560565b506001019056fea26469706673582212206b5d394d5880af196012a959a55ab93a8de1efb8b20b989193880283dd4f503a64736f6c634300080a0033";

export class ReadWriteTier__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ReadWriteTier> {
    return super.deploy(overrides || {}) as Promise<ReadWriteTier>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ReadWriteTier {
    return super.attach(address) as ReadWriteTier;
  }
  connect(signer: Signer): ReadWriteTier__factory {
    return super.connect(signer) as ReadWriteTier__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ReadWriteTierInterface {
    return new utils.Interface(_abi) as ReadWriteTierInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ReadWriteTier {
    return new Contract(address, _abi, signerOrProvider) as ReadWriteTier;
  }
}
