/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "BBronze",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BBronze__factory>;
    getContractFactory(
      name: "BColor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BColor__factory>;
    getContractFactory(
      name: "BConst",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BConst__factory>;
    getContractFactory(
      name: "BFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BFactory__factory>;
    getContractFactory(
      name: "BMath",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BMath__factory>;
    getContractFactory(
      name: "BNum",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BNum__factory>;
    getContractFactory(
      name: "BPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BPool__factory>;
    getContractFactory(
      name: "BToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BToken__factory>;
    getContractFactory(
      name: "BTokenBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BTokenBase__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ConfigurableRightsPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ConfigurableRightsPool__factory>;
    getContractFactory(
      name: "CRPFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CRPFactory__factory>;
    getContractFactory(
      name: "IBFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBFactory__factory>;
    getContractFactory(
      name: "IBPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBPool__factory>;
    getContractFactory(
      name: "PCToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PCToken__factory>;
    getContractFactory(
      name: "BalancerOwnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BalancerOwnable__factory>;
    getContractFactory(
      name: "IConfigurableRightsPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IConfigurableRightsPool__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "BalancerConstants",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BalancerConstants__factory>;
    getContractFactory(
      name: "RightsManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RightsManager__factory>;
    getContractFactory(
      name: "SmartPoolManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SmartPoolManager__factory>;
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "ERC1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155__factory>;
    getContractFactory(
      name: "IERC1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155__factory>;
    getContractFactory(
      name: "IERC1155MetadataURI",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155MetadataURI__factory>;
    getContractFactory(
      name: "IERC1155Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Receiver__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Burnable__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "TierByConstructionClaim",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TierByConstructionClaim__factory>;
    getContractFactory(
      name: "Cooldown",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Cooldown__factory>;
    getContractFactory(
      name: "Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Factory__factory>;
    getContractFactory(
      name: "IFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFactory__factory>;
    getContractFactory(
      name: "TierUtil",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TierUtil__factory>;
    getContractFactory(
      name: "Phased",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Phased__factory>;
    getContractFactory(
      name: "IBalancerConstants",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBalancerConstants__factory>;
    getContractFactory(
      name: "IConfigurableRightsPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IConfigurableRightsPool__factory>;
    getContractFactory(
      name: "ICRPFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICRPFactory__factory>;
    getContractFactory(
      name: "RedeemableERC20Pool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RedeemableERC20Pool__factory>;
    getContractFactory(
      name: "RedeemableERC20PoolFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RedeemableERC20PoolFactory__factory>;
    getContractFactory(
      name: "RedeemableERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RedeemableERC20__factory>;
    getContractFactory(
      name: "RedeemableERC20Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RedeemableERC20Factory__factory>;
    getContractFactory(
      name: "SeedERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SeedERC20__factory>;
    getContractFactory(
      name: "SeedERC20Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SeedERC20Factory__factory>;
    getContractFactory(
      name: "ClaimERC1155Test",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ClaimERC1155Test__factory>;
    getContractFactory(
      name: "PhasedScheduleTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PhasedScheduleTest__factory>;
    getContractFactory(
      name: "PhasedTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PhasedTest__factory>;
    getContractFactory(
      name: "RedeemableERC20Reentrant",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RedeemableERC20Reentrant__factory>;
    getContractFactory(
      name: "ReserveToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReserveToken__factory>;
    getContractFactory(
      name: "ReserveTokenTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReserveTokenTest__factory>;
    getContractFactory(
      name: "SeedERC20ForceSendEther",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SeedERC20ForceSendEther__factory>;
    getContractFactory(
      name: "SeedERC20Reentrant",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SeedERC20Reentrant__factory>;
    getContractFactory(
      name: "TierByConstructionClaimTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TierByConstructionClaimTest__factory>;
    getContractFactory(
      name: "TierByConstructionTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TierByConstructionTest__factory>;
    getContractFactory(
      name: "TierUtilTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TierUtilTest__factory>;
    getContractFactory(
      name: "TrustReentrant",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TrustReentrant__factory>;
    getContractFactory(
      name: "ValueTierTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ValueTierTest__factory>;
    getContractFactory(
      name: "AlwaysTier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AlwaysTier__factory>;
    getContractFactory(
      name: "ERC20BalanceTier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20BalanceTier__factory>;
    getContractFactory(
      name: "ERC20TransferTier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20TransferTier__factory>;
    getContractFactory(
      name: "ITier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITier__factory>;
    getContractFactory(
      name: "NeverTier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NeverTier__factory>;
    getContractFactory(
      name: "ReadOnlyTier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReadOnlyTier__factory>;
    getContractFactory(
      name: "ReadWriteTier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReadWriteTier__factory>;
    getContractFactory(
      name: "TierByConstruction",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TierByConstruction__factory>;
    getContractFactory(
      name: "ValueTier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ValueTier__factory>;
    getContractFactory(
      name: "VerifyTier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VerifyTier__factory>;
    getContractFactory(
      name: "Trust",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Trust__factory>;
    getContractFactory(
      name: "TrustFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TrustFactory__factory>;
    getContractFactory(
      name: "Verify",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Verify__factory>;
    getContractFactory(
      name: "VerifyFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VerifyFactory__factory>;

    getContractAt(
      name: "BBronze",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BBronze>;
    getContractAt(
      name: "BColor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BColor>;
    getContractAt(
      name: "BConst",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BConst>;
    getContractAt(
      name: "BFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BFactory>;
    getContractAt(
      name: "BMath",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BMath>;
    getContractAt(
      name: "BNum",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BNum>;
    getContractAt(
      name: "BPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BPool>;
    getContractAt(
      name: "BToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BToken>;
    getContractAt(
      name: "BTokenBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BTokenBase>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ConfigurableRightsPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ConfigurableRightsPool>;
    getContractAt(
      name: "CRPFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CRPFactory>;
    getContractAt(
      name: "IBFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBFactory>;
    getContractAt(
      name: "IBPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBPool>;
    getContractAt(
      name: "PCToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PCToken>;
    getContractAt(
      name: "BalancerOwnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BalancerOwnable>;
    getContractAt(
      name: "IConfigurableRightsPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IConfigurableRightsPool>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "BalancerConstants",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BalancerConstants>;
    getContractAt(
      name: "RightsManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RightsManager>;
    getContractAt(
      name: "SmartPoolManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SmartPoolManager>;
    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "ERC1155",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155>;
    getContractAt(
      name: "IERC1155",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155>;
    getContractAt(
      name: "IERC1155MetadataURI",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155MetadataURI>;
    getContractAt(
      name: "IERC1155Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Receiver>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Burnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Burnable>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "TierByConstructionClaim",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TierByConstructionClaim>;
    getContractAt(
      name: "Cooldown",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Cooldown>;
    getContractAt(
      name: "Factory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Factory>;
    getContractAt(
      name: "IFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFactory>;
    getContractAt(
      name: "TierUtil",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TierUtil>;
    getContractAt(
      name: "Phased",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Phased>;
    getContractAt(
      name: "IBalancerConstants",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBalancerConstants>;
    getContractAt(
      name: "IConfigurableRightsPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IConfigurableRightsPool>;
    getContractAt(
      name: "ICRPFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICRPFactory>;
    getContractAt(
      name: "RedeemableERC20Pool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RedeemableERC20Pool>;
    getContractAt(
      name: "RedeemableERC20PoolFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RedeemableERC20PoolFactory>;
    getContractAt(
      name: "RedeemableERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RedeemableERC20>;
    getContractAt(
      name: "RedeemableERC20Factory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RedeemableERC20Factory>;
    getContractAt(
      name: "SeedERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SeedERC20>;
    getContractAt(
      name: "SeedERC20Factory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SeedERC20Factory>;
    getContractAt(
      name: "ClaimERC1155Test",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ClaimERC1155Test>;
    getContractAt(
      name: "PhasedScheduleTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PhasedScheduleTest>;
    getContractAt(
      name: "PhasedTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PhasedTest>;
    getContractAt(
      name: "RedeemableERC20Reentrant",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RedeemableERC20Reentrant>;
    getContractAt(
      name: "ReserveToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReserveToken>;
    getContractAt(
      name: "ReserveTokenTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReserveTokenTest>;
    getContractAt(
      name: "SeedERC20ForceSendEther",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SeedERC20ForceSendEther>;
    getContractAt(
      name: "SeedERC20Reentrant",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SeedERC20Reentrant>;
    getContractAt(
      name: "TierByConstructionClaimTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TierByConstructionClaimTest>;
    getContractAt(
      name: "TierByConstructionTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TierByConstructionTest>;
    getContractAt(
      name: "TierUtilTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TierUtilTest>;
    getContractAt(
      name: "TrustReentrant",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TrustReentrant>;
    getContractAt(
      name: "ValueTierTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ValueTierTest>;
    getContractAt(
      name: "AlwaysTier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AlwaysTier>;
    getContractAt(
      name: "ERC20BalanceTier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20BalanceTier>;
    getContractAt(
      name: "ERC20TransferTier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20TransferTier>;
    getContractAt(
      name: "ITier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITier>;
    getContractAt(
      name: "NeverTier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NeverTier>;
    getContractAt(
      name: "ReadOnlyTier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReadOnlyTier>;
    getContractAt(
      name: "ReadWriteTier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReadWriteTier>;
    getContractAt(
      name: "TierByConstruction",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TierByConstruction>;
    getContractAt(
      name: "ValueTier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ValueTier>;
    getContractAt(
      name: "VerifyTier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VerifyTier>;
    getContractAt(
      name: "Trust",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Trust>;
    getContractAt(
      name: "TrustFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TrustFactory>;
    getContractAt(
      name: "Verify",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Verify>;
    getContractAt(
      name: "VerifyFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VerifyFactory>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
