/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TrustInterface extends ethers.utils.Interface {
  functions: {
    "anonEndDistribution()": FunctionFragment;
    "creator()": FunctionFragment;
    "finalBalance()": FunctionFragment;
    "getContracts()": FunctionFragment;
    "getDistributionProgress()": FunctionFragment;
    "getDistributionStatus()": FunctionFragment;
    "minimumCreatorRaise()": FunctionFragment;
    "pool()": FunctionFragment;
    "redeemInit()": FunctionFragment;
    "seedERC20Factory()": FunctionFragment;
    "seeder()": FunctionFragment;
    "seederCooldownDuration()": FunctionFragment;
    "seederFee()": FunctionFragment;
    "seederUnits()": FunctionFragment;
    "sendNotice(bytes)": FunctionFragment;
    "successBalance()": FunctionFragment;
    "token()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "anonEndDistribution",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "creator", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "finalBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDistributionProgress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDistributionStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumCreatorRaise",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeemInit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "seedERC20Factory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "seeder", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "seederCooldownDuration",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "seederFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "seederUnits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendNotice",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "successBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "anonEndDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "creator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finalBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDistributionProgress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDistributionStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumCreatorRaise",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeemInit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "seedERC20Factory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "seeder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "seederCooldownDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "seederFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "seederUnits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sendNotice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "successBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;

  events: {
    "Notice(address,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Notice"): EventFragment;
}

export type NoticeEvent = TypedEvent<
  [string, string] & { sender: string; data: string }
>;

export class Trust extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TrustInterface;

  functions: {
    anonEndDistribution(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    creator(overrides?: CallOverrides): Promise<[string]>;

    finalBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getContracts(
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, string, string, string, string, string] & {
          reserveERC20: string;
          redeemableERC20: string;
          redeemableERC20Pool: string;
          seeder: string;
          tier: string;
          crp: string;
          pool: string;
        }
      ]
    >;

    getDistributionProgress(
      overrides?: CallOverrides
    ): Promise<
      [
        [
          number,
          number,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          distributionStatus: number;
          distributionStartBlock: number;
          distributionEndBlock: number;
          poolReserveBalance: BigNumber;
          poolTokenBalance: BigNumber;
          reserveInit: BigNumber;
          minimumCreatorRaise: BigNumber;
          seederFee: BigNumber;
          redeemInit: BigNumber;
        }
      ]
    >;

    getDistributionStatus(overrides?: CallOverrides): Promise<[number]>;

    minimumCreatorRaise(overrides?: CallOverrides): Promise<[BigNumber]>;

    pool(overrides?: CallOverrides): Promise<[string]>;

    redeemInit(overrides?: CallOverrides): Promise<[BigNumber]>;

    seedERC20Factory(overrides?: CallOverrides): Promise<[string]>;

    seeder(overrides?: CallOverrides): Promise<[string]>;

    seederCooldownDuration(overrides?: CallOverrides): Promise<[number]>;

    seederFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    seederUnits(overrides?: CallOverrides): Promise<[number]>;

    sendNotice(
      data_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    successBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    token(overrides?: CallOverrides): Promise<[string]>;
  };

  anonEndDistribution(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  creator(overrides?: CallOverrides): Promise<string>;

  finalBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getContracts(
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, string, string, string] & {
      reserveERC20: string;
      redeemableERC20: string;
      redeemableERC20Pool: string;
      seeder: string;
      tier: string;
      crp: string;
      pool: string;
    }
  >;

  getDistributionProgress(
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      number,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      distributionStatus: number;
      distributionStartBlock: number;
      distributionEndBlock: number;
      poolReserveBalance: BigNumber;
      poolTokenBalance: BigNumber;
      reserveInit: BigNumber;
      minimumCreatorRaise: BigNumber;
      seederFee: BigNumber;
      redeemInit: BigNumber;
    }
  >;

  getDistributionStatus(overrides?: CallOverrides): Promise<number>;

  minimumCreatorRaise(overrides?: CallOverrides): Promise<BigNumber>;

  pool(overrides?: CallOverrides): Promise<string>;

  redeemInit(overrides?: CallOverrides): Promise<BigNumber>;

  seedERC20Factory(overrides?: CallOverrides): Promise<string>;

  seeder(overrides?: CallOverrides): Promise<string>;

  seederCooldownDuration(overrides?: CallOverrides): Promise<number>;

  seederFee(overrides?: CallOverrides): Promise<BigNumber>;

  seederUnits(overrides?: CallOverrides): Promise<number>;

  sendNotice(
    data_: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  successBalance(overrides?: CallOverrides): Promise<BigNumber>;

  token(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    anonEndDistribution(overrides?: CallOverrides): Promise<void>;

    creator(overrides?: CallOverrides): Promise<string>;

    finalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getContracts(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string, string, string] & {
        reserveERC20: string;
        redeemableERC20: string;
        redeemableERC20Pool: string;
        seeder: string;
        tier: string;
        crp: string;
        pool: string;
      }
    >;

    getDistributionProgress(
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        distributionStatus: number;
        distributionStartBlock: number;
        distributionEndBlock: number;
        poolReserveBalance: BigNumber;
        poolTokenBalance: BigNumber;
        reserveInit: BigNumber;
        minimumCreatorRaise: BigNumber;
        seederFee: BigNumber;
        redeemInit: BigNumber;
      }
    >;

    getDistributionStatus(overrides?: CallOverrides): Promise<number>;

    minimumCreatorRaise(overrides?: CallOverrides): Promise<BigNumber>;

    pool(overrides?: CallOverrides): Promise<string>;

    redeemInit(overrides?: CallOverrides): Promise<BigNumber>;

    seedERC20Factory(overrides?: CallOverrides): Promise<string>;

    seeder(overrides?: CallOverrides): Promise<string>;

    seederCooldownDuration(overrides?: CallOverrides): Promise<number>;

    seederFee(overrides?: CallOverrides): Promise<BigNumber>;

    seederUnits(overrides?: CallOverrides): Promise<number>;

    sendNotice(data_: BytesLike, overrides?: CallOverrides): Promise<void>;

    successBalance(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Notice(address,bytes)"(
      sender?: string | null,
      data?: null
    ): TypedEventFilter<[string, string], { sender: string; data: string }>;

    Notice(
      sender?: string | null,
      data?: null
    ): TypedEventFilter<[string, string], { sender: string; data: string }>;
  };

  estimateGas: {
    anonEndDistribution(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    creator(overrides?: CallOverrides): Promise<BigNumber>;

    finalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getContracts(overrides?: CallOverrides): Promise<BigNumber>;

    getDistributionProgress(overrides?: CallOverrides): Promise<BigNumber>;

    getDistributionStatus(overrides?: CallOverrides): Promise<BigNumber>;

    minimumCreatorRaise(overrides?: CallOverrides): Promise<BigNumber>;

    pool(overrides?: CallOverrides): Promise<BigNumber>;

    redeemInit(overrides?: CallOverrides): Promise<BigNumber>;

    seedERC20Factory(overrides?: CallOverrides): Promise<BigNumber>;

    seeder(overrides?: CallOverrides): Promise<BigNumber>;

    seederCooldownDuration(overrides?: CallOverrides): Promise<BigNumber>;

    seederFee(overrides?: CallOverrides): Promise<BigNumber>;

    seederUnits(overrides?: CallOverrides): Promise<BigNumber>;

    sendNotice(
      data_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    successBalance(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    anonEndDistribution(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    creator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finalBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getContracts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDistributionProgress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDistributionStatus(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minimumCreatorRaise(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeemInit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    seedERC20Factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    seeder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    seederCooldownDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    seederFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    seederUnits(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sendNotice(
      data_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    successBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
