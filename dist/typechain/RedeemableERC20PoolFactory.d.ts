/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface RedeemableERC20PoolFactoryInterface extends ethers.utils.Interface {
  functions: {
    "balancerFactory()": FunctionFragment;
    "createChild(bytes)": FunctionFragment;
    "crpFactory()": FunctionFragment;
    "isChild(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "balancerFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createChild",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "crpFactory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isChild", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "balancerFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createChild",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "crpFactory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isChild", data: BytesLike): Result;

  events: {
    "NewContract(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewContract"): EventFragment;
}

export type NewContractEvent = TypedEvent<[string] & { _contract: string }>;

export class RedeemableERC20PoolFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RedeemableERC20PoolFactoryInterface;

  functions: {
    balancerFactory(overrides?: CallOverrides): Promise<[string]>;

    "createChild(bytes)"(
      data_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "createChild((address,address,uint256,uint256,uint256,uint256))"(
      config_: {
        reserve: string;
        token: string;
        reserveInit: BigNumberish;
        initialValuation: BigNumberish;
        finalValuation: BigNumberish;
        minimumTradingDuration: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    crpFactory(overrides?: CallOverrides): Promise<[string]>;

    isChild(
      maybeChild_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  balancerFactory(overrides?: CallOverrides): Promise<string>;

  "createChild(bytes)"(
    data_: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "createChild((address,address,uint256,uint256,uint256,uint256))"(
    config_: {
      reserve: string;
      token: string;
      reserveInit: BigNumberish;
      initialValuation: BigNumberish;
      finalValuation: BigNumberish;
      minimumTradingDuration: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  crpFactory(overrides?: CallOverrides): Promise<string>;

  isChild(
    maybeChild_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    balancerFactory(overrides?: CallOverrides): Promise<string>;

    "createChild(bytes)"(
      data_: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "createChild((address,address,uint256,uint256,uint256,uint256))"(
      config_: {
        reserve: string;
        token: string;
        reserveInit: BigNumberish;
        initialValuation: BigNumberish;
        finalValuation: BigNumberish;
        minimumTradingDuration: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    crpFactory(overrides?: CallOverrides): Promise<string>;

    isChild(maybeChild_: string, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "NewContract(address)"(
      _contract?: string | null
    ): TypedEventFilter<[string], { _contract: string }>;

    NewContract(
      _contract?: string | null
    ): TypedEventFilter<[string], { _contract: string }>;
  };

  estimateGas: {
    balancerFactory(overrides?: CallOverrides): Promise<BigNumber>;

    "createChild(bytes)"(
      data_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "createChild((address,address,uint256,uint256,uint256,uint256))"(
      config_: {
        reserve: string;
        token: string;
        reserveInit: BigNumberish;
        initialValuation: BigNumberish;
        finalValuation: BigNumberish;
        minimumTradingDuration: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    crpFactory(overrides?: CallOverrides): Promise<BigNumber>;

    isChild(
      maybeChild_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balancerFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "createChild(bytes)"(
      data_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "createChild((address,address,uint256,uint256,uint256,uint256))"(
      config_: {
        reserve: string;
        token: string;
        reserveInit: BigNumberish;
        initialValuation: BigNumberish;
        finalValuation: BigNumberish;
        minimumTradingDuration: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    crpFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isChild(
      maybeChild_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
