{
  "language": "Solidity",
  "sources": {
    "contracts/verify/VerifyFactory.sol": {
      "content": "// SPDX-License-Identifier: CAL\npragma solidity ^0.8.10;\n\nimport { Factory } from \"../factory/Factory.sol\";\nimport { Verify } from \"./Verify.sol\";\n\n/// @title VerifyFactory\n/// @notice Factory for creating and deploying `Verify` contracts.\ncontract VerifyFactory is Factory {\n\n    /// @inheritdoc Factory\n    function _createChild(\n        bytes calldata data_\n    ) internal virtual override returns(address) {\n        (address admin_) = abi.decode(data_, (address));\n        Verify verify_ = new Verify(admin_);\n        return address(verify_);\n    }\n\n    /// Typed wrapper for `createChild` with admin address.\n    /// Use original `Factory` `createChild` function signature if function\n    /// parameters are already encoded.\n    ///\n    /// @param admin_ `address` of the `Verify` admin.\n    /// @return New `Verify` child contract address.\n    function createChild(address admin_) external returns(address) {\n        return this.createChild(abi.encode(admin_));\n    }\n}"
    },
    "contracts/factory/Factory.sol": {
      "content": "// SPDX-License-Identifier: CAL\npragma solidity ^0.8.10;\n\npragma experimental ABIEncoderV2;\n\nimport { IFactory } from \"./IFactory.sol\";\n// solhint-disable-next-line max-line-length\nimport { ReentrancyGuard } from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\n/// @title Factory\n/// @notice Base contract for deploying and registering child contracts.\nabstract contract Factory is IFactory, ReentrancyGuard {\n    mapping(address => bool) private contracts;\n\n    /// Implements `IFactory`.\n    ///\n    /// `_createChild` hook must be overridden to actually create child\n    /// contract.\n    ///\n    /// Implementers may want to overload this function with a typed equivalent\n    /// to expose domain specific structs etc. to the compiled ABI consumed by\n    /// tooling and other scripts. To minimise gas costs for deployment it is\n    /// expected that the tooling will consume the typed ABI, then encode the\n    /// arguments and pass them to this function directly.\n    ///\n    /// @param data_ ABI encoded data to pass to child contract constructor.\n    // Slither false positive. This is intended to overridden.\n    // https://github.com/crytic/slither/issues/929\n    // slither-disable-next-line dead-code\n    function _createChild(bytes calldata data_)\n        internal\n        virtual\n        returns(address)\n    { } // solhint-disable-line no-empty-blocks\n\n    /// Implements `IFactory`.\n    ///\n    /// Calls the _createChild hook, which inheriting contracts must override.\n    /// Registers child contract address such that `isChild` is `true`.\n    /// Emits `NewContract` event.\n    ///\n    /// @param data_ Encoded data to pass down to child contract constructor.\n    /// @return New child contract address.\n    function createChild(bytes calldata data_)\n        external\n        virtual\n        override\n        nonReentrant\n        returns(address) {\n        // Create child contract using hook.\n        address child_ = _createChild(data_);\n        // Register child contract address to `contracts` mapping.\n        contracts[child_] = true;\n        // Emit `NewContract` event with child contract address.\n        emit IFactory.NewContract(child_);\n        return child_;\n    }\n\n    /// Implements `IFactory`.\n    ///\n    /// Checks if address is registered as a child contract of this factory.\n    ///\n    /// @param maybeChild_ Address of child contract to look up.\n    /// @return Returns `true` if address is a contract created by this\n    /// contract factory, otherwise `false`.\n    function isChild(address maybeChild_)\n        external\n        virtual\n        override\n        returns(bool)\n    {\n        return contracts[maybeChild_];\n    }\n}"
    },
    "contracts/factory/IFactory.sol": {
      "content": "// SPDX-License-Identifier: CAL\npragma solidity ^0.8.10;\n\npragma experimental ABIEncoderV2;\n\ninterface IFactory {\n    /// Whenever a new child contract is deployed, a `NewContract` event\n    /// containing the new child contract address MUST be emitted.\n    event NewContract(address indexed _contract);\n\n    /// Creates a new child contract.\n    ///\n    /// @param data_ Domain specific data for the child contract constructor.\n    /// @return New child contract address.\n    function createChild(bytes calldata data_) external returns(address);\n\n    /// Checks if address is registered as a child contract of this factory.\n    ///\n    /// Addresses that were not deployed by `createChild` MUST NOT return\n    /// `true` from `isChild`. This is CRITICAL to the security guarantees for\n    /// any contract implementing `IFactory`.\n    ///\n    /// @param maybeChild_ Address to check registration for.\n    /// @return `true` if address was deployed by this contract factory,\n    /// otherwise `false`.\n    function isChild(address maybeChild_) external returns(bool);\n}"
    },
    "contracts/verify/Verify.sol": {
      "content": "// SPDX-License-Identifier: CAL\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\n\n/// Summary status derived from a `State` by comparing the `xSince` times\n/// against a specific block number.\nenum Status {\n    // Either no Status has ever been held or it was removed.\n    Nil,\n    // The account and associated ID has been added, pending verification.\n    Added,\n    // The associated ID has been reviewed and verified.\n    Approved,\n    // The associated ID has been reviewed and banned.\n    // (even if previously approved)\n    Banned\n}\n\n/// Records the block a verify session reaches each status.\n/// If a status is not reached it is left as UNINITIALIZED, i.e. 0xFFFFFFFF.\n/// Most accounts will never be banned so most accounts will never reach every\n/// status, which is a good thing.\nstruct State {\n    uint32 addedSince;\n    uint32 approvedSince;\n    uint32 bannedSince;\n}\n\n/// @title Verify\n/// Trust-minimised contract to record the state of some verification process.\n/// When some off-chain identity is to be reified on chain there is inherently\n/// some multi-party, multi-faceted trust relationship. For example, the DID\n/// (Decentralized Identifiers) specification from W3C outlines that the\n/// controller and the subject of an identity are two different entities.\n///\n/// This is because self-identification is always problematic to the point of\n/// being uselessly unbelievable.\n///\n/// For example, I can simply say \"I am the queen of England\" and what\n/// onchain mechanism could possibly check, let alone stop me?\n/// The same problem exists in any situation where some priviledge or right is\n/// associated with identity. Consider passports, driver's licenses,\n/// celebrity status, age, health, accredited investor, social media account,\n/// etc. etc.\n///\n/// Typically crypto can't and doesn't want to deal with this issue. The usual\n/// scenario is that some system demands personal information, which leads to:\n///\n/// - Data breaches that put individual's safety at risk. Consider the December\n///   2020 leak from Ledger that dumped 270 000 home addresses and phone\n///   numbers, and another million emails, of hardware wallet owners on a\n///   public forum.\n/// - Discriminatory access, undermining an individual's self-sovereign right\n///   to run a full node, self-host a GUI and broadcast transactions onchain.\n///   Consider the dydx airdrop of 2021 where metadata about a user's access\n///   patterns logged on a server were used to deny access to presumed\n///   Americans over regulatory fears.\n/// - An entrenched supply chain of centralized actors from regulators, to\n///   government databases, through KYC corporations, platforms, etc. each of\n///   which holds an effective monopoly over, and ability to manipulate user's\n///   \"own\" identity.\n///\n/// These examples and others are completely antithetical to and undermine the\n/// safety of an opt-in, permissionless system based on pseudonomous actors\n/// self-signing actions into a shared space.\n///\n/// That said, one can hardly expect a permissionless pseudonomous system\n/// founded on asynchronous value transfers to succeed without at least some\n/// concept of curation and reputation.\n///\n/// Anon, will you invest YOUR money in anon's project?\n///\n/// Clearly for every defi blue chip there are 10 000 scams and nothing onchain\n/// can stop a scam, this MUST happen at the social layer.\n///\n/// Rain protocol is agnostic to how this verification happens. A government\n/// regulator is going to want a government issued ID cross-referenced against\n/// international sanctions. A fan of some social media influencer wants to\n/// see a verified account on that platform. An open source software project\n/// should show a github profile. A security token may need evidence from an\n/// accountant showing accredited investor status. There are so many ways in\n/// which BOTH sides of a fundraise may need to verify something about\n/// themselves to each other via a THIRD PARTY that Rain cannot assume much.\n///\n/// The trust model and process for Rain verification is:\n///\n/// - There are many `Verify` contracts, each represents a specific\n///   verification method with a (hopefully large) set of possible reviewers.\n/// - The verifyee compiles some evidence that can be referenced in some\n///   relevant system. It could be a session ID in a KYC provider's database or\n///   a tweet from a verified account, etc. The evidence is passed to the\n///   `Verify` contract as raw bytes so it is opaque onchain, but visible as an\n///   event to verifiers.\n/// - The verifyee calls `add` _for themselves_ to initialize their state and\n///   emit the evidence for their account, after which they _cannot change_\n///   their submission without appealing to someone who can remove. This costs\n///   gas, so why don't we simply ask the user to sign something and have an\n///   approver verify the signed data? Because we want to leverage both the\n///   censorship resistance and asynchronous nature of the underlying\n///   blockchain. Assuming there are N possible approvers, we want ANY 1 of\n///   those N approvers to be able to review and approve an application. If the\n///   user is forced to submit their application directly to one SPECIFIC\n///   approver we lose this property. In the gasless model the user must then\n///   rely on their specific approver both being online and not to censor the\n///   request. It's also possible that many accounts add the same evidence,\n///   after all it will be public in the event logs, so it is important for\n///   approvers to verify the PAIRING between account and evidence.\n/// - ANY account with the `APPROVER` role can review the evidence by\n///   inspecting the event logs. IF the evidence is valid then the `approve`\n///   function should be called by the approver.\n/// - ANY account with the `BANNER` role can veto either an add OR a prior\n///   approval. In the case of a false positive, i.e. where an account was\n///   mistakenly approved, an appeal can be made to a banner to update the\n///   status. Bad accounts SHOULD BE BANNED NOT REMOVED. When an account is\n///   removed, its onchain state is once again open for the attacker to\n///   resubmit new fraudulent evidence and potentially be reapproved.\n///   Once an account is banned, any attempt by the account holder to change\n///   their status, or an approver to approve will be rejected. Downstream\n///   consumers of a `State` MUST check for an existing ban.\n///   - ANY account with the `REMOVER` role can scrub the `State` from an\n///   account. Of course, this is a blockchain so the state changes are all\n///   still visible to full nodes and indexers in historical data, in both the\n///   onchain history and the event logs for each state change. This allows an\n///   account to appeal to a remover in the case of a MISTAKEN BAN or also in\n///   the case of a MISTAKEN ADD (e.g. mistake in evidence), effecting a\n///   \"hard reset\" at the contract storage level.\n///\n/// Banning some account with an invalid session is NOT required. It is\n/// harmless for an added session to remain as `Status.Added` indefinitely.\n/// For as long as no approver decides to approve some invalid added session it\n/// MUST be treated as equivalent to a ban by downstream contracts. This is\n/// important so that admins are only required to spend gas on useful actions.\n///\n/// In addition to `Approve`, `Ban`, `Remove` there are corresponding events\n/// `RequestApprove`, `RequestBan`, `RequestRemove` that allow for admins to be\n/// notified that some new evidence must be considered that may lead to each\n/// action. `RequestApprove` is automatically submitted as part of the `add`\n/// call, but `RequestBan` and `RequestRemove` must be manually called\n///\n/// Rain uses standard Open Zeppelin `AccessControl` and is agnostic to how the\n/// approver/remover/banner roles and associated admin roles are managed.\n/// Ideally the more credibly neutral qualified parties assigend to each role\n/// for each `Verify` contract the better. This improves the censorship\n/// resistance of the verification process and the responsiveness of the\n/// end-user experience.\n///\n/// Ideally the admin account assigned at deployment would renounce their admin\n/// rights after establishing a more granular and appropriate set of accounts\n/// with each specific role.\ncontract Verify is AccessControl {\n\n    /// Any state never held is UNINITIALIZED.\n    /// Note that as per default evm an unset state is 0 so always check the\n    /// `addedSince` block on a `State` before trusting an equality check on\n    /// any other block number.\n    /// (i.e. removed or never added)\n    uint32 constant public UNINITIALIZED = 0xFFFFFFFF;\n\n    /// Emitted when evidence is first submitted to approve an account.\n    /// The requestor is always the `msg.sender` of the user calling `add`.\n    /// @param account The address that submitted its own evidence.\n    /// @param data The evidence to support an approval.\n    /// NOT written to contract storage.\n    event RequestApprove(\n        address indexed account,\n        bytes data\n    );\n    /// Emitted when a previously added account is approved.\n    /// @param approver The address that approved `account`.\n    /// @param account The address that was approved.\n    /// @param data Any additional data the `approver` deems relevant.\n    /// NOT written to contract storage.\n    event Approve(\n        address indexed approver,\n        address indexed account,\n        bytes data\n    );\n\n    /// Currently approved accounts can request that any account be banned.\n    /// The requestor is expected to provide supporting data for the ban.\n    /// The requestor MAY themselves be banned if vexatious.\n    /// @param requestor The address requesting a ban of `account`.\n    /// @param account The address that `requestor` wants to ban.\n    /// @param data Any additional data the `requestor` feels will strengthen\n    /// its case for the ban. NOT written to contract storage.\n    event RequestBan(\n        address indexed requestor,\n        address indexed account,\n        bytes data\n    );\n    /// Emitted when an added or approved account is banned.\n    /// @param banner The address that banned `account`.\n    /// @param account The address that `banner` has banned.\n    /// @param data The evidence to support a ban.\n    /// NOT written to contract storage.\n    event Ban(\n        address indexed banner,\n        address indexed account,\n        bytes data\n    );\n\n    /// Currently approved accounts can request that any account be removed.\n    /// The requestor is expected to provide supporting data for the removal.\n    /// The requestor MAY themselves be banned if vexatious.\n    /// @param requestor The address requesting a removal of `account`.\n    /// @param account The address that `requestor` wants to ban.\n    /// @param data Any additional data the `requestor` feels will strengthen\n    /// its case for the ban. NOT written to contract storage.\n    event RequestRemove(\n        address indexed requestor,\n        address indexed account,\n        bytes data\n    );\n    /// Emitted when an account is scrubbed from blockchain state.\n    /// @param remover The address that removed `account`.\n    /// @param account The address that `remover` has removed.\n    /// @param data The evidence to support a remove.\n    /// NOT written to contract storage.\n    event Remove(\n        address indexed remover,\n        address indexed account,\n        bytes data\n    );\n\n    /// Admin role for `APPROVER`.\n    bytes32 public constant APPROVER_ADMIN = keccak256(\"APPROVER_ADMIN\");\n    /// Role for `APPROVER`.\n    bytes32 public constant APPROVER = keccak256(\"APPROVER\");\n\n    /// Admin role for `REMOVER`.\n    bytes32 public constant REMOVER_ADMIN = keccak256(\"REMOVER_ADMIN\");\n    /// Role for `REMOVER`.\n    bytes32 public constant REMOVER = keccak256(\"REMOVER\");\n\n    /// Admin role for `BANNER`.\n    bytes32 public constant BANNER_ADMIN = keccak256(\"BANNER_ADMIN\");\n    /// Role for `BANNER`.\n    bytes32 public constant BANNER = keccak256(\"BANNER\");\n\n    // Account => State\n    mapping (address => State) public states;\n\n    /// Defines RBAC logic for each role under Open Zeppelin.\n    /// @param admin_ The address to ASSIGN ALL ADMIN ROLES to initially. This\n    /// address is free and encouraged to delegate fine grained permissions to\n    /// many other sub-admin addresses, then revoke it's own \"root\" access.\n    constructor (address admin_) {\n        // `APPROVER_ADMIN` can admin each other in addition to\n        // `APPROVER` addresses underneath.\n        _setRoleAdmin(APPROVER_ADMIN, APPROVER_ADMIN);\n        _setRoleAdmin(APPROVER, APPROVER_ADMIN);\n\n        // `REMOVER_ADMIN` can admin each other in addition to\n        // `REMOVER` addresses underneath.\n        _setRoleAdmin(REMOVER_ADMIN, REMOVER_ADMIN);\n        _setRoleAdmin(REMOVER, REMOVER_ADMIN);\n\n        // `BANNER_ADMIN` can admin each other in addition to\n        // `BANNER` addresses underneath.\n        _setRoleAdmin(BANNER_ADMIN, BANNER_ADMIN);\n        _setRoleAdmin(BANNER, BANNER_ADMIN);\n\n        // It is STRONGLY RECOMMENDED that the `admin_` delegates specific\n        // admin roles then revokes the `DEFAULT_ADMIN_ROLE` and the `X_ADMIN`\n        // roles.\n        _setupRole(APPROVER_ADMIN, admin_);\n        _setupRole(REMOVER_ADMIN, admin_);\n        _setupRole(BANNER_ADMIN, admin_);\n\n        // This is at the end of the constructor because putting it at the\n        // start seems to break the source map from the compiler \n        require(admin_ != address(0), \"0_ACCOUNT\");\n    }\n\n    /// Typed accessor into states.\n    /// @param account_ The account to return the current `State` for.\n    function state(address account_) external view returns (State memory) {\n        return states[account_];\n    }\n\n    /// Derives a single `Status` from a `State` and a reference block number.\n    /// @param state_ The raw `State` to reduce into a `Status`.\n    /// @param blockNumber_ The block number to compare `State` against.\n    function statusAtBlock(State memory state_, uint32 blockNumber_)\n        public\n        pure\n        returns (Status)\n    {\n        // The state hasn't even been added so is picking up block zero as the\n        // evm fallback value. In this case if we checked other blocks using\n        // a `<=` equality they would incorrectly return `true` always due to\n        // also having a `0` fallback value.\n        if (state_.addedSince == 0) {\n            return Status.Nil;\n        }\n        // Banned takes priority over everything.\n        else if (state_.bannedSince <= blockNumber_) {\n            return Status.Banned;\n        }\n        // Approved takes priority over added.\n        else if (state_.approvedSince <= blockNumber_) {\n            return Status.Approved;\n        }\n        // Added is lowest priority.\n        else if (state_.addedSince <= blockNumber_) {\n            return Status.Added;\n        }\n        // The `addedSince` block is after `blockNumber_` so `Status` is nil\n        // relative to `blockNumber_`.\n        else {\n            return Status.Nil;\n        }\n    }\n\n    /// Requires that `msg.sender` is approved as at the current block.\n    modifier onlyApproved {\n        require(\n            statusAtBlock(states[msg.sender], uint32(block.number))\n                == Status.Approved,\n            \"ONLY_APPROVED\"\n        );\n        _;\n    }\n\n    /// An account adds their own verification evidence.\n    /// Internally `msg.sender` is used; delegated `add` is not supported.\n    /// @param data_ The evidence to support approving the `msg.sender`.\n    function add(bytes calldata data_) external {\n        // Accounts may NOT change their application to be approved.\n        // This restriction is the main reason delegated add is not supported\n        // as it would lead to griefing.\n        // A mistaken add requires an appeal to a REMOVER to restart the\n        // process OR a new `msg.sender` (i.e. different wallet address).\n        // The awkward < 1 here is to silence slither complaining about\n        // equality checks against `0`. The intent is to ensure that\n        // `addedSince` is not already set before we set it.\n        require(states[msg.sender].addedSince < 1, \"PRIOR_ADD\");\n        states[msg.sender] = State(\n            uint32(block.number),\n            UNINITIALIZED,\n            UNINITIALIZED\n        );\n        emit RequestApprove(msg.sender, data_);\n    }\n\n    /// An `APPROVER` can review added evidence and approve the account.\n    /// @param account_ The account to be approved.\n    /// @param data_ Additional evidence provided by the approver.\n    function approve(address account_, bytes calldata data_) external {\n        require(account_ != address(0), \"0_ADDRESS\");\n        require(hasRole(APPROVER, msg.sender), \"ONLY_APPROVER\");\n        // In theory we should also check the `addedSince` is lte the current\n        // `block.number` but in practise no code path produces a future\n        // `addedSince`.\n        require(states[account_].addedSince > 0, \"NOT_ADDED\");\n        require(\n            states[account_].approvedSince == UNINITIALIZED,\n            \"PRIOR_APPROVE\"\n        );\n        require(\n            states[account_].bannedSince == UNINITIALIZED,\n            \"PRIOR_BAN\"\n        );\n        states[account_].approvedSince = uint32(block.number);\n        emit Approve(\n            msg.sender,\n            account_,\n            data_\n        );\n    }\n\n    /// Any approved account can request some account be banned, along with\n    /// supporting evidence. Banners are free to ban the originator of\n    /// vexatious ban requests.\n    /// @param account_ The account to be banned.\n    /// @param data_ The supporting evidence.\n    function requestBan(address account_, bytes calldata data_)\n        external\n        onlyApproved\n    {\n        emit RequestBan(msg.sender, account_, data_);\n    }\n\n    /// A `BANNER` can ban an added OR approved account.\n    /// @param account_ The account to be banned.\n    /// @param data_ Additional evidence provided by the banner.\n    function ban(address account_, bytes calldata data_) external {\n        require(account_ != address(0), \"0_ADDRESS\");\n        require(hasRole(BANNER, msg.sender), \"ONLY_BANNER\");\n        // In theory we should also check the `addedSince` is lte the current\n        // `block.number` but in practise no code path produces a future\n        // `addedSince`.\n        require(states[account_].addedSince > 0, \"NOT_ADDED\");\n        require(\n            states[account_].bannedSince == UNINITIALIZED,\n            \"PRIOR_BAN\"\n        );\n        states[account_].bannedSince = uint32(block.number);\n        emit Ban(\n            msg.sender,\n            account_,\n            data_\n        );\n    }\n\n    /// Any approved account can request some account be removed, along with\n    /// supporting evidence.\n    /// @param account_ The account to be removed.\n    /// @param data_ The supporting evidence.\n    function requestRemove(address account_, bytes calldata data_)\n        external\n        onlyApproved\n    {\n        emit RequestRemove(msg.sender, account_, data_);\n    }\n\n    /// A `REMOVER` can scrub state mapping from an account.\n    /// A malicious account MUST be banned rather than removed.\n    /// Removal is useful to reset the whole process in case of some mistake.\n    /// @param account_ The account to be removed.\n    /// @param data_ Additional evidence provided by the remover.\n    function remove(address account_, bytes calldata data_) external {\n        require(account_ != address(0), \"0_ADDRESS\");\n        require(hasRole(REMOVER, msg.sender), \"ONLY_REMOVER\");\n        delete(states[account_]);\n        emit Remove(\n            msg.sender,\n            account_,\n            data_\n        );\n    }\n}"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    }
  },
  "settings": {
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 100000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers"
        ],
        "": [
          "id",
          "ast"
        ]
      }
    }
  }
}
