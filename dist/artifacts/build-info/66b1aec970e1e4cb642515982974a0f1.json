{
  "id": "66b1aec970e1e4cb642515982974a0f1",
  "_format": "hh-sol-build-info-1",
  "solcVersion": "0.8.10",
  "solcLongVersion": "0.8.10+commit.fc410830",
  "input": {
    "language": "Solidity",
    "sources": {
      "contracts/test/PhasedTest.sol": {
        "content": "// SPDX-License-Identifier: CAL\npragma solidity ^0.8.10;\n\nimport { Phase, Phased } from \"../phased/Phased.sol\";\n\n/// @title PhasedTest\n/// Empty contract for tests enumerating behaviour of the `Phased` modifiers.\ncontract PhasedTest is Phased {\n    /// Custom variable for testing the `_beforeScheduleNextPhase` hook\n    bool public hookCondition = true;\n\n    /// Exposes `scheduleNextPhase` for testing.\n    /// @param nextPhaseBlock_ As per `scheduleNextPhase`.\n    function testScheduleNextPhase(uint32 nextPhaseBlock_) external {\n        scheduleNextPhase(nextPhaseBlock_);\n    }\n\n    /// This function wraps `onlyPhase` modifier, passing phase directly into\n    /// modifier argument.\n    /// @param phase_ Modifier MUST error if current phase is not `phase_`.\n    /// @return Always true if not error.\n    function runsOnlyPhase(Phase phase_)\n        external\n        view\n        onlyPhase(phase_) returns(bool)\n    {\n        return true;\n    }\n\n    /// This function wraps `onlyAtLeastPhase` modifier, passing phase directly\n    /// into modifier argument.\n    /// @param phase_ Modifier MUST error if current phase is not AT LEAST\n    /// `phase_`.\n    /// @return Always true if not error.\n    function runsOnlyAtLeastPhase(Phase phase_)\n        external\n        view\n        onlyAtLeastPhase(phase_) returns(bool)\n    {\n        return true;\n    }\n\n    /// Toggles `hookCondition` for testing phase scheduling hook.\n    function toggleHookCondition() external { hookCondition = !hookCondition; }\n\n    /// @inheritdoc Phased\n    function _beforeScheduleNextPhase(uint32 nextPhaseBlock_)\n        internal\n        virtual\n        override\n    {\n        require(hookCondition, \"HOOK_CONDITION\");\n        super._beforeScheduleNextPhase(nextPhaseBlock_);\n    }\n}"
      },
      "contracts/phased/Phased.sol": {
        "content": "// SPDX-License-Identifier: CAL\npragma solidity ^0.8.10;\n\n/// Defines all possible phases.\n/// `Phased` begins in `Phase.ZERO` and moves through each phase sequentially.\nenum Phase {\n    ZERO,\n    ONE,\n    TWO,\n    THREE,\n    FOUR,\n    FIVE,\n    SIX,\n    SEVEN,\n    EIGHT\n}\n\n/// @title Phased\n/// @notice `Phased` is an abstract contract that defines up to `9` phases that\n/// an implementing contract moves through.\n///\n/// `Phase.ZERO` is always the first phase and does not, and cannot, be set\n/// expicitly. Effectively it is implied that `Phase.ZERO` has been active\n/// since block zero.\n///\n/// Each subsequent phase `Phase.ONE` through `Phase.EIGHT` must be\n/// scheduled sequentially and explicitly at a block number.\n///\n/// Only the immediate next phase can be scheduled with `scheduleNextPhase`,\n/// it is not possible to schedule multiple phases ahead.\n///\n/// Multiple phases can be scheduled in a single block if each scheduled phase\n/// is scheduled for the current block.\n///\n/// Several utility functions and modifiers are provided.\n///\n/// A single hook `_beforeScheduleNextPhase` is provided so contracts can\n/// implement additional phase shift checks.\n///\n/// One event `PhaseShiftScheduled` is emitted each time a phase shift is\n/// scheduled (not when the scheduled phase is reached).\n///\n/// @dev `Phased` contracts have a defined timeline with available\n/// functionality grouped into phases.\n/// Every `Phased` contract starts at `Phase.ZERO` and moves sequentially\n/// through phases `ONE` to `EIGHT`.\n/// Every `Phase` other than `Phase.ZERO` is optional, there is no requirement\n/// that all 9 phases are implemented.\n/// Phases can never be revisited, the inheriting contract always moves through\n/// each achieved phase linearly.\n/// This is enforced by only allowing `scheduleNextPhase` to be called once per\n/// phase.\n/// It is possible to call `scheduleNextPhase` several times in a single block\n/// but the `block.number` for each phase must be reached each time to schedule\n/// the next phase.\n/// Importantly there are events and several modifiers and checks available to\n/// ensure that functionality is limited to the current phase.\n/// The full history of each phase shift block is recorded as a fixed size\n/// array of `uint32`.\nabstract contract Phased {\n    /// Every phase block starts uninitialized.\n    /// Only uninitialized blocks can be set by the phase scheduler.\n    uint32 public constant UNINITIALIZED = 0xFFFFFFFF;\n\n    /// `PhaseShiftScheduled` is emitted when the next phase is scheduled.\n    event PhaseShiftScheduled(uint32 indexed newPhaseBlock_);\n\n    /// 8 phases each as 32 bits to fit a single 32 byte word.\n    uint32[8] public phaseBlocks;\n\n    constructor() {\n        for (uint256 i_ = 0; i_ < 8; i_++) {\n            phaseBlocks[i_] = UNINITIALIZED;\n        }\n    }\n\n    /// Pure function to reduce an array of phase blocks and block number to a\n    /// specific `Phase`.\n    /// The phase will be the highest attained even if several phases have the\n    /// same block number.\n    /// If every phase block is after the block number then `Phase.ZERO` is\n    /// returned.\n    /// If every phase block is before the block number then `Phase.EIGHT` is\n    /// returned.\n    /// @param phaseBlocks_ Fixed array of phase blocks to compare against.\n    /// @param blockNumber_ Determine the relevant phase relative to this block\n    /// number.\n    /// @return The \"current\" phase relative to the block number and phase\n    /// blocks list.\n    function phaseAtBlockNumber(\n        uint32[8] memory phaseBlocks_,\n        uint32 blockNumber_\n    )\n        public\n        pure\n        returns(Phase)\n    {\n        for(uint i_ = 0; i_<8; i_++) {\n            if (blockNumber_ < phaseBlocks_[i_]) {\n                return Phase(i_);\n            }\n        }\n        return Phase(8);\n    }\n\n    /// Pure function to reduce an array of phase blocks and phase to a\n    /// specific block number.\n    /// `Phase.ZERO` will always return block `0`.\n    /// Every other phase will map to a block number in `phaseBlocks_`.\n    /// @param phaseBlocks_ Fixed array of phase blocks to compare against.\n    /// @param phase_ Determine the relevant block number for this phase.\n    /// @return The block number for the phase according to the phase blocks\n    ///         list, as uint32.\n    function blockNumberForPhase(uint32[8] calldata phaseBlocks_, Phase phase_)\n        external\n        pure\n        returns(uint32)\n    {\n        return phase_ > Phase.ZERO ? phaseBlocks_[uint(phase_) - 1] : 0;\n    }\n\n    /// Impure read-only function to return the \"current\" phase from internal\n    /// contract state.\n    /// Simply wraps `phaseAtBlockNumber` for current values of `phaseBlocks`\n    /// and `block.number`.\n    function currentPhase() public view returns (Phase) {\n        return phaseAtBlockNumber(phaseBlocks, uint32(block.number));\n    }\n\n    /// Modifies functions to only be callable in a specific phase.\n    /// @param phase_ Modified functions can only be called during this phase.\n    modifier onlyPhase(Phase phase_) {\n        require(currentPhase() == phase_, \"BAD_PHASE\");\n        _;\n    }\n\n    /// Modifies functions to only be callable in a specific phase OR if the\n    /// specified phase has passed.\n    /// @param phase_ Modified function only callable during or after this\n    /// phase.\n    modifier onlyAtLeastPhase(Phase phase_) {\n        require(currentPhase() >= phase_, \"MIN_PHASE\");\n        _;\n    }\n\n    /// Writes the block for the next phase.\n    /// Only uninitialized blocks can be written to.\n    /// Only the immediate next phase relative to `currentPhase` can be written\n    /// to.\n    /// Emits `PhaseShiftScheduled` with the next phase block.\n    /// @param nextPhaseBlock_ The block for the next phase.\n    function scheduleNextPhase(uint32 nextPhaseBlock_) internal {\n        require(uint32(block.number) <= nextPhaseBlock_, \"NEXT_BLOCK_PAST\");\n        require(nextPhaseBlock_ < UNINITIALIZED, \"NEXT_BLOCK_UNINITIALIZED\");\n\n        // The next index is the current phase because `Phase.ZERO` doesn't\n        // exist as an index.\n        uint nextIndex_ = uint(currentPhase());\n        require(UNINITIALIZED == phaseBlocks[nextIndex_], \"NEXT_BLOCK_SET\");\n\n        _beforeScheduleNextPhase(nextPhaseBlock_);\n        phaseBlocks[nextIndex_] = nextPhaseBlock_;\n\n        emit PhaseShiftScheduled(nextPhaseBlock_);\n    }\n\n    /// Hook called before scheduling the next phase.\n    /// Useful to apply additional constraints or state changes on a phase\n    /// change.\n    /// Note this is called when scheduling the phase change, not on the block\n    /// the phase change occurs.\n    /// This is called before the phase change so that all functionality that\n    /// is behind a phase gate is still available at the moment of applying the\n    /// hook for scheduling the next phase.\n    /// @param nextPhaseBlock_ The block for the next phase.\n    function _beforeScheduleNextPhase(uint32 nextPhaseBlock_)\n        internal\n        virtual\n    { } //solhint-disable-line no-empty-blocks\n}"
      }
    },
    "settings": {
      "metadata": {
        "useLiteralContent": true
      },
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ],
          "": [
            "ast"
          ]
        }
      }
    }
  },
  "output": {
    "contracts": {
      "contracts/phased/Phased.sol": {
        "Phased": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "uint32",
                  "name": "newPhaseBlock_",
                  "type": "uint32"
                }
              ],
              "name": "PhaseShiftScheduled",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "UNINITIALIZED",
              "outputs": [
                {
                  "internalType": "uint32",
                  "name": "",
                  "type": "uint32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint32[8]",
                  "name": "phaseBlocks_",
                  "type": "uint32[8]"
                },
                {
                  "internalType": "enum Phase",
                  "name": "phase_",
                  "type": "uint8"
                }
              ],
              "name": "blockNumberForPhase",
              "outputs": [
                {
                  "internalType": "uint32",
                  "name": "",
                  "type": "uint32"
                }
              ],
              "stateMutability": "pure",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "currentPhase",
              "outputs": [
                {
                  "internalType": "enum Phase",
                  "name": "",
                  "type": "uint8"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint32[8]",
                  "name": "phaseBlocks_",
                  "type": "uint32[8]"
                },
                {
                  "internalType": "uint32",
                  "name": "blockNumber_",
                  "type": "uint32"
                }
              ],
              "name": "phaseAtBlockNumber",
              "outputs": [
                {
                  "internalType": "enum Phase",
                  "name": "",
                  "type": "uint8"
                }
              ],
              "stateMutability": "pure",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "name": "phaseBlocks",
              "outputs": [
                {
                  "internalType": "uint32",
                  "name": "",
                  "type": "uint32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "UNINITIALIZED()": "81e45d9a",
              "blockNumberForPhase(uint32[8],uint8)": "45bdfa8a",
              "currentPhase()": "055ad42e",
              "phaseAtBlockNumber(uint32[8],uint32)": "34c1df75",
              "phaseBlocks(uint256)": "9923c94b"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"newPhaseBlock_\",\"type\":\"uint32\"}],\"name\":\"PhaseShiftScheduled\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UNINITIALIZED\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[8]\",\"name\":\"phaseBlocks_\",\"type\":\"uint32[8]\"},{\"internalType\":\"enum Phase\",\"name\":\"phase_\",\"type\":\"uint8\"}],\"name\":\"blockNumberForPhase\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPhase\",\"outputs\":[{\"internalType\":\"enum Phase\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[8]\",\"name\":\"phaseBlocks_\",\"type\":\"uint32[8]\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber_\",\"type\":\"uint32\"}],\"name\":\"phaseAtBlockNumber\",\"outputs\":[{\"internalType\":\"enum Phase\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"phaseBlocks\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"`Phased` contracts have a defined timeline with available functionality grouped into phases. Every `Phased` contract starts at `Phase.ZERO` and moves sequentially through phases `ONE` to `EIGHT`. Every `Phase` other than `Phase.ZERO` is optional, there is no requirement that all 9 phases are implemented. Phases can never be revisited, the inheriting contract always moves through each achieved phase linearly. This is enforced by only allowing `scheduleNextPhase` to be called once per phase. It is possible to call `scheduleNextPhase` several times in a single block but the `block.number` for each phase must be reached each time to schedule the next phase. Importantly there are events and several modifiers and checks available to ensure that functionality is limited to the current phase. The full history of each phase shift block is recorded as a fixed size array of `uint32`.\",\"kind\":\"dev\",\"methods\":{\"blockNumberForPhase(uint32[8],uint8)\":{\"params\":{\"phaseBlocks_\":\"Fixed array of phase blocks to compare against.\",\"phase_\":\"Determine the relevant block number for this phase.\"},\"returns\":{\"_0\":\"The block number for the phase according to the phase blocks         list, as uint32.\"}},\"phaseAtBlockNumber(uint32[8],uint32)\":{\"params\":{\"blockNumber_\":\"Determine the relevant phase relative to this block number.\",\"phaseBlocks_\":\"Fixed array of phase blocks to compare against.\"},\"returns\":{\"_0\":\"The \\\"current\\\" phase relative to the block number and phase blocks list.\"}}},\"title\":\"Phased\",\"version\":1},\"userdoc\":{\"events\":{\"PhaseShiftScheduled(uint32)\":{\"notice\":\"`PhaseShiftScheduled` is emitted when the next phase is scheduled.\"}},\"kind\":\"user\",\"methods\":{\"UNINITIALIZED()\":{\"notice\":\"Every phase block starts uninitialized. Only uninitialized blocks can be set by the phase scheduler.\"},\"blockNumberForPhase(uint32[8],uint8)\":{\"notice\":\"Pure function to reduce an array of phase blocks and phase to a specific block number. `Phase.ZERO` will always return block `0`. Every other phase will map to a block number in `phaseBlocks_`.\"},\"currentPhase()\":{\"notice\":\"Impure read-only function to return the \\\"current\\\" phase from internal contract state. Simply wraps `phaseAtBlockNumber` for current values of `phaseBlocks` and `block.number`.\"},\"phaseAtBlockNumber(uint32[8],uint32)\":{\"notice\":\"Pure function to reduce an array of phase blocks and block number to a specific `Phase`. The phase will be the highest attained even if several phases have the same block number. If every phase block is after the block number then `Phase.ZERO` is returned. If every phase block is before the block number then `Phase.EIGHT` is returned.\"},\"phaseBlocks(uint256)\":{\"notice\":\"8 phases each as 32 bits to fit a single 32 byte word.\"}},\"notice\":\"`Phased` is an abstract contract that defines up to `9` phases that an implementing contract moves through. `Phase.ZERO` is always the first phase and does not, and cannot, be set expicitly. Effectively it is implied that `Phase.ZERO` has been active since block zero. Each subsequent phase `Phase.ONE` through `Phase.EIGHT` must be scheduled sequentially and explicitly at a block number. Only the immediate next phase can be scheduled with `scheduleNextPhase`, it is not possible to schedule multiple phases ahead. Multiple phases can be scheduled in a single block if each scheduled phase is scheduled for the current block. Several utility functions and modifiers are provided. A single hook `_beforeScheduleNextPhase` is provided so contracts can implement additional phase shift checks. One event `PhaseShiftScheduled` is emitted each time a phase shift is scheduled (not when the scheduled phase is reached).\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/phased/Phased.sol\":\"Phased\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/phased/Phased.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity ^0.8.10;\\n\\n/// Defines all possible phases.\\n/// `Phased` begins in `Phase.ZERO` and moves through each phase sequentially.\\nenum Phase {\\n    ZERO,\\n    ONE,\\n    TWO,\\n    THREE,\\n    FOUR,\\n    FIVE,\\n    SIX,\\n    SEVEN,\\n    EIGHT\\n}\\n\\n/// @title Phased\\n/// @notice `Phased` is an abstract contract that defines up to `9` phases that\\n/// an implementing contract moves through.\\n///\\n/// `Phase.ZERO` is always the first phase and does not, and cannot, be set\\n/// expicitly. Effectively it is implied that `Phase.ZERO` has been active\\n/// since block zero.\\n///\\n/// Each subsequent phase `Phase.ONE` through `Phase.EIGHT` must be\\n/// scheduled sequentially and explicitly at a block number.\\n///\\n/// Only the immediate next phase can be scheduled with `scheduleNextPhase`,\\n/// it is not possible to schedule multiple phases ahead.\\n///\\n/// Multiple phases can be scheduled in a single block if each scheduled phase\\n/// is scheduled for the current block.\\n///\\n/// Several utility functions and modifiers are provided.\\n///\\n/// A single hook `_beforeScheduleNextPhase` is provided so contracts can\\n/// implement additional phase shift checks.\\n///\\n/// One event `PhaseShiftScheduled` is emitted each time a phase shift is\\n/// scheduled (not when the scheduled phase is reached).\\n///\\n/// @dev `Phased` contracts have a defined timeline with available\\n/// functionality grouped into phases.\\n/// Every `Phased` contract starts at `Phase.ZERO` and moves sequentially\\n/// through phases `ONE` to `EIGHT`.\\n/// Every `Phase` other than `Phase.ZERO` is optional, there is no requirement\\n/// that all 9 phases are implemented.\\n/// Phases can never be revisited, the inheriting contract always moves through\\n/// each achieved phase linearly.\\n/// This is enforced by only allowing `scheduleNextPhase` to be called once per\\n/// phase.\\n/// It is possible to call `scheduleNextPhase` several times in a single block\\n/// but the `block.number` for each phase must be reached each time to schedule\\n/// the next phase.\\n/// Importantly there are events and several modifiers and checks available to\\n/// ensure that functionality is limited to the current phase.\\n/// The full history of each phase shift block is recorded as a fixed size\\n/// array of `uint32`.\\nabstract contract Phased {\\n    /// Every phase block starts uninitialized.\\n    /// Only uninitialized blocks can be set by the phase scheduler.\\n    uint32 public constant UNINITIALIZED = 0xFFFFFFFF;\\n\\n    /// `PhaseShiftScheduled` is emitted when the next phase is scheduled.\\n    event PhaseShiftScheduled(uint32 indexed newPhaseBlock_);\\n\\n    /// 8 phases each as 32 bits to fit a single 32 byte word.\\n    uint32[8] public phaseBlocks;\\n\\n    constructor() {\\n        for (uint256 i_ = 0; i_ < 8; i_++) {\\n            phaseBlocks[i_] = UNINITIALIZED;\\n        }\\n    }\\n\\n    /// Pure function to reduce an array of phase blocks and block number to a\\n    /// specific `Phase`.\\n    /// The phase will be the highest attained even if several phases have the\\n    /// same block number.\\n    /// If every phase block is after the block number then `Phase.ZERO` is\\n    /// returned.\\n    /// If every phase block is before the block number then `Phase.EIGHT` is\\n    /// returned.\\n    /// @param phaseBlocks_ Fixed array of phase blocks to compare against.\\n    /// @param blockNumber_ Determine the relevant phase relative to this block\\n    /// number.\\n    /// @return The \\\"current\\\" phase relative to the block number and phase\\n    /// blocks list.\\n    function phaseAtBlockNumber(\\n        uint32[8] memory phaseBlocks_,\\n        uint32 blockNumber_\\n    )\\n        public\\n        pure\\n        returns(Phase)\\n    {\\n        for(uint i_ = 0; i_<8; i_++) {\\n            if (blockNumber_ < phaseBlocks_[i_]) {\\n                return Phase(i_);\\n            }\\n        }\\n        return Phase(8);\\n    }\\n\\n    /// Pure function to reduce an array of phase blocks and phase to a\\n    /// specific block number.\\n    /// `Phase.ZERO` will always return block `0`.\\n    /// Every other phase will map to a block number in `phaseBlocks_`.\\n    /// @param phaseBlocks_ Fixed array of phase blocks to compare against.\\n    /// @param phase_ Determine the relevant block number for this phase.\\n    /// @return The block number for the phase according to the phase blocks\\n    ///         list, as uint32.\\n    function blockNumberForPhase(uint32[8] calldata phaseBlocks_, Phase phase_)\\n        external\\n        pure\\n        returns(uint32)\\n    {\\n        return phase_ > Phase.ZERO ? phaseBlocks_[uint(phase_) - 1] : 0;\\n    }\\n\\n    /// Impure read-only function to return the \\\"current\\\" phase from internal\\n    /// contract state.\\n    /// Simply wraps `phaseAtBlockNumber` for current values of `phaseBlocks`\\n    /// and `block.number`.\\n    function currentPhase() public view returns (Phase) {\\n        return phaseAtBlockNumber(phaseBlocks, uint32(block.number));\\n    }\\n\\n    /// Modifies functions to only be callable in a specific phase.\\n    /// @param phase_ Modified functions can only be called during this phase.\\n    modifier onlyPhase(Phase phase_) {\\n        require(currentPhase() == phase_, \\\"BAD_PHASE\\\");\\n        _;\\n    }\\n\\n    /// Modifies functions to only be callable in a specific phase OR if the\\n    /// specified phase has passed.\\n    /// @param phase_ Modified function only callable during or after this\\n    /// phase.\\n    modifier onlyAtLeastPhase(Phase phase_) {\\n        require(currentPhase() >= phase_, \\\"MIN_PHASE\\\");\\n        _;\\n    }\\n\\n    /// Writes the block for the next phase.\\n    /// Only uninitialized blocks can be written to.\\n    /// Only the immediate next phase relative to `currentPhase` can be written\\n    /// to.\\n    /// Emits `PhaseShiftScheduled` with the next phase block.\\n    /// @param nextPhaseBlock_ The block for the next phase.\\n    function scheduleNextPhase(uint32 nextPhaseBlock_) internal {\\n        require(uint32(block.number) <= nextPhaseBlock_, \\\"NEXT_BLOCK_PAST\\\");\\n        require(nextPhaseBlock_ < UNINITIALIZED, \\\"NEXT_BLOCK_UNINITIALIZED\\\");\\n\\n        // The next index is the current phase because `Phase.ZERO` doesn't\\n        // exist as an index.\\n        uint nextIndex_ = uint(currentPhase());\\n        require(UNINITIALIZED == phaseBlocks[nextIndex_], \\\"NEXT_BLOCK_SET\\\");\\n\\n        _beforeScheduleNextPhase(nextPhaseBlock_);\\n        phaseBlocks[nextIndex_] = nextPhaseBlock_;\\n\\n        emit PhaseShiftScheduled(nextPhaseBlock_);\\n    }\\n\\n    /// Hook called before scheduling the next phase.\\n    /// Useful to apply additional constraints or state changes on a phase\\n    /// change.\\n    /// Note this is called when scheduling the phase change, not on the block\\n    /// the phase change occurs.\\n    /// This is called before the phase change so that all functionality that\\n    /// is behind a phase gate is still available at the moment of applying the\\n    /// hook for scheduling the next phase.\\n    /// @param nextPhaseBlock_ The block for the next phase.\\n    function _beforeScheduleNextPhase(uint32 nextPhaseBlock_)\\n        internal\\n        virtual\\n    { } //solhint-disable-line no-empty-blocks\\n}\",\"keccak256\":\"0x6c26a8991dcb75287a88b08639b7680f099259a0bbde2eff014ae405bf2c1132\",\"license\":\"CAL\"}},\"version\":1}"
        }
      },
      "contracts/test/PhasedTest.sol": {
        "PhasedTest": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "uint32",
                  "name": "newPhaseBlock_",
                  "type": "uint32"
                }
              ],
              "name": "PhaseShiftScheduled",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "UNINITIALIZED",
              "outputs": [
                {
                  "internalType": "uint32",
                  "name": "",
                  "type": "uint32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint32[8]",
                  "name": "phaseBlocks_",
                  "type": "uint32[8]"
                },
                {
                  "internalType": "enum Phase",
                  "name": "phase_",
                  "type": "uint8"
                }
              ],
              "name": "blockNumberForPhase",
              "outputs": [
                {
                  "internalType": "uint32",
                  "name": "",
                  "type": "uint32"
                }
              ],
              "stateMutability": "pure",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "currentPhase",
              "outputs": [
                {
                  "internalType": "enum Phase",
                  "name": "",
                  "type": "uint8"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "hookCondition",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint32[8]",
                  "name": "phaseBlocks_",
                  "type": "uint32[8]"
                },
                {
                  "internalType": "uint32",
                  "name": "blockNumber_",
                  "type": "uint32"
                }
              ],
              "name": "phaseAtBlockNumber",
              "outputs": [
                {
                  "internalType": "enum Phase",
                  "name": "",
                  "type": "uint8"
                }
              ],
              "stateMutability": "pure",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "name": "phaseBlocks",
              "outputs": [
                {
                  "internalType": "uint32",
                  "name": "",
                  "type": "uint32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "enum Phase",
                  "name": "phase_",
                  "type": "uint8"
                }
              ],
              "name": "runsOnlyAtLeastPhase",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "enum Phase",
                  "name": "phase_",
                  "type": "uint8"
                }
              ],
              "name": "runsOnlyPhase",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint32",
                  "name": "nextPhaseBlock_",
                  "type": "uint32"
                }
              ],
              "name": "testScheduleNextPhase",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "toggleHookCondition",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "@_48": {
                  "entryPoint": null,
                  "id": 48,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "increment_t_uint256": {
                  "entryPoint": 153,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "panic_error_0x32": {
                  "entryPoint": 131,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [
                {
                  "ast": {
                    "nodeType": "YulBlock",
                    "src": "0:380:2",
                    "statements": [
                      {
                        "nodeType": "YulBlock",
                        "src": "6:3:2",
                        "statements": []
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "46:95:2",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "63:1:2",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "70:3:2",
                                        "type": "",
                                        "value": "224"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "75:10:2",
                                        "type": "",
                                        "value": "0x4e487b71"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "66:3:2"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "66:20:2"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "56:6:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "56:31:2"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "56:31:2"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "103:1:2",
                                    "type": "",
                                    "value": "4"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "106:4:2",
                                    "type": "",
                                    "value": "0x32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "96:6:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "96:15:2"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "96:15:2"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "127:1:2",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "130:4:2",
                                    "type": "",
                                    "value": "0x24"
                                  }
                                ],
                                "functionName": {
                                  "name": "revert",
                                  "nodeType": "YulIdentifier",
                                  "src": "120:6:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "120:15:2"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "120:15:2"
                            }
                          ]
                        },
                        "name": "panic_error_0x32",
                        "nodeType": "YulFunctionDefinition",
                        "src": "14:127:2"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "193:185:2",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "232:111:2",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "253:1:2",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "260:3:2",
                                              "type": "",
                                              "value": "224"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "265:10:2",
                                              "type": "",
                                              "value": "0x4e487b71"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "shl",
                                            "nodeType": "YulIdentifier",
                                            "src": "256:3:2"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "256:20:2"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "246:6:2"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "246:31:2"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "246:31:2"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "297:1:2",
                                          "type": "",
                                          "value": "4"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "300:4:2",
                                          "type": "",
                                          "value": "0x11"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "290:6:2"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "290:15:2"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "290:15:2"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "325:1:2",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "328:4:2",
                                          "type": "",
                                          "value": "0x24"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "318:6:2"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "318:15:2"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "318:15:2"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "209:5:2"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "220:1:2",
                                        "type": "",
                                        "value": "0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "216:3:2"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "216:6:2"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "206:2:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "206:17:2"
                              },
                              "nodeType": "YulIf",
                              "src": "203:140:2"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "352:20:2",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "363:5:2"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "370:1:2",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "359:3:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "359:13:2"
                              },
                              "variableNames": [
                                {
                                  "name": "ret",
                                  "nodeType": "YulIdentifier",
                                  "src": "352:3:2"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "increment_t_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "175:5:2",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "ret",
                            "nodeType": "YulTypedName",
                            "src": "185:3:2",
                            "type": ""
                          }
                        ],
                        "src": "146:232:2"
                      }
                    ]
                  },
                  "contents": "{\n    { }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n        ret := add(value, 1)\n    }\n}",
                  "id": 2,
                  "language": "Yul",
                  "name": "#utility.yul"
                }
              ],
              "linkReferences": {},
              "object": "60806040526001805460ff19168117905534801561001c57600080fd5b5060005b600881101561007d5763ffffffff6000826008811061004157610041610083565b600891828204019190066004026101000a81548163ffffffff021916908363ffffffff160217905550808061007590610099565b915050610020565b506100c2565b634e487b7160e01b600052603260045260246000fd5b60006000198214156100bb57634e487b7160e01b600052601160045260246000fd5b5060010190565b6107ff806100d16000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80636932f6b7116100665780636932f6b714610134578063791f211f1461014757806381e45d9a1461015e5780639923c94b14610169578063abec2f811461017c57600080fd5b8063055ad42e146100a357806334c1df75146100c15780633bd126dc146100d457806345bdfa8a146100e957806348a8b7df14610111575b600080fd5b6100ab610189565b6040516100b891906105e5565b60405180910390f35b6100ab6100cf36600461063c565b6101f3565b6100e76100e23660046106d1565b610263565b005b6100fc6100f73660046106fb565b61026f565b60405163ffffffff90911681526020016100b8565b61012461011f366004610737565b6102d2565b60405190151581526020016100b8565b610124610142366004610737565b610347565b6100e76001805460ff19811660ff90911615179055565b6100fc63ffffffff81565b6100fc610177366004610752565b6103af565b6001546101249060ff1681565b604080516101008101918290526000916101ee919083906008908280855b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116101a75790505050505050436101f3565b905090565b6000805b6008811015610256578381600881106102125761021261076b565b602002015163ffffffff168363ffffffff1610156102445780600881111561023c5761023c6105cf565b91505061025d565b8061024e81610797565b9150506101f7565b5060085b90505b92915050565b61026c816103df565b50565b600080826008811115610284576102846105cf565b1161029057600061025a565b8260018360088111156102a5576102a56105cf565b6102af91906107b2565b600881106102bf576102bf61076b565b60200201602081019061025a91906106d1565b6000818060088111156102e7576102e76105cf565b6102ef610189565b6008811115610300576103006105cf565b1461033e5760405162461bcd60e51b81526020600482015260096024820152684241445f504841534560b81b60448201526064015b60405180910390fd5b50600192915050565b60008180600881111561035c5761035c6105cf565b610364610189565b6008811115610375576103756105cf565b101561033e5760405162461bcd60e51b81526020600482015260096024820152684d494e5f504841534560b81b6044820152606401610335565b600081600881106103bf57600080fd5b60089182820401919006600402915054906101000a900463ffffffff1681565b8063ffffffff164363ffffffff16111561042d5760405162461bcd60e51b815260206004820152600f60248201526e1391561517d09313d0d2d7d41054d5608a1b6044820152606401610335565b63ffffffff818116106104825760405162461bcd60e51b815260206004820152601860248201527f4e4558545f424c4f434b5f554e494e495449414c495a454400000000000000006044820152606401610335565b600061048c610189565b600881111561049d5761049d6105cf565b9050600081600881106104b2576104b261076b565b60088104919091015460079091166004026101000a900463ffffffff9081161461050f5760405162461bcd60e51b815260206004820152600e60248201526d1391561517d09313d0d2d7d4d15560921b6044820152606401610335565b6105188261058c565b816000826008811061052c5761052c61076b565b600891828204019190066004026101000a81548163ffffffff021916908363ffffffff1602179055508163ffffffff167f260aac5b840edc27b89fdf50e91311a413363a400959466e1049e6d071b8cee260405160405180910390a25050565b60015460ff1661026c5760405162461bcd60e51b815260206004820152600e60248201526d2427a7a5afa1a7a72224aa24a7a760911b6044820152606401610335565b634e487b7160e01b600052602160045260246000fd5b602081016009831061060757634e487b7160e01b600052602160045260246000fd5b91905290565b634e487b7160e01b600052604160045260246000fd5b803563ffffffff8116811461063757600080fd5b919050565b600080610120838503121561065057600080fd5b83601f84011261065f57600080fd5b60405161010080820182811067ffffffffffffffff821117156106845761068461060d565b6040528401818682111561069757600080fd5b855b828110156106b8576106aa81610623565b825260209182019101610699565b50508193506106c681610623565b925050509250929050565b6000602082840312156106e357600080fd5b61025a82610623565b80356009811061063757600080fd5b600080610120838503121561070f57600080fd5b61010083018481111561072157600080fd5b83925061072d816106ec565b9150509250929050565b60006020828403121561074957600080fd5b61025a826106ec565b60006020828403121561076457600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156107ab576107ab610781565b5060010190565b6000828210156107c4576107c4610781565b50039056fea264697066735822122016474704a1e837fba367dfa96954aa305d9e78da46576577f4f23a2f632145b664736f6c634300080a0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x1 DUP1 SLOAD PUSH1 0xFF NOT AND DUP2 OR SWAP1 SSTORE CALLVALUE DUP1 ISZERO PUSH2 0x1C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 JUMPDEST PUSH1 0x8 DUP2 LT ISZERO PUSH2 0x7D JUMPI PUSH4 0xFFFFFFFF PUSH1 0x0 DUP3 PUSH1 0x8 DUP2 LT PUSH2 0x41 JUMPI PUSH2 0x41 PUSH2 0x83 JUMP JUMPDEST PUSH1 0x8 SWAP2 DUP3 DUP3 DIV ADD SWAP2 SWAP1 MOD PUSH1 0x4 MUL PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP1 PUSH2 0x75 SWAP1 PUSH2 0x99 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x20 JUMP JUMPDEST POP PUSH2 0xC2 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0xBB JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH2 0x7FF DUP1 PUSH2 0xD1 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x9E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6932F6B7 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0x6932F6B7 EQ PUSH2 0x134 JUMPI DUP1 PUSH4 0x791F211F EQ PUSH2 0x147 JUMPI DUP1 PUSH4 0x81E45D9A EQ PUSH2 0x15E JUMPI DUP1 PUSH4 0x9923C94B EQ PUSH2 0x169 JUMPI DUP1 PUSH4 0xABEC2F81 EQ PUSH2 0x17C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x55AD42E EQ PUSH2 0xA3 JUMPI DUP1 PUSH4 0x34C1DF75 EQ PUSH2 0xC1 JUMPI DUP1 PUSH4 0x3BD126DC EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x45BDFA8A EQ PUSH2 0xE9 JUMPI DUP1 PUSH4 0x48A8B7DF EQ PUSH2 0x111 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAB PUSH2 0x189 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB8 SWAP2 SWAP1 PUSH2 0x5E5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xAB PUSH2 0xCF CALLDATASIZE PUSH1 0x4 PUSH2 0x63C JUMP JUMPDEST PUSH2 0x1F3 JUMP JUMPDEST PUSH2 0xE7 PUSH2 0xE2 CALLDATASIZE PUSH1 0x4 PUSH2 0x6D1 JUMP JUMPDEST PUSH2 0x263 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xFC PUSH2 0xF7 CALLDATASIZE PUSH1 0x4 PUSH2 0x6FB JUMP JUMPDEST PUSH2 0x26F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xB8 JUMP JUMPDEST PUSH2 0x124 PUSH2 0x11F CALLDATASIZE PUSH1 0x4 PUSH2 0x737 JUMP JUMPDEST PUSH2 0x2D2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xB8 JUMP JUMPDEST PUSH2 0x124 PUSH2 0x142 CALLDATASIZE PUSH1 0x4 PUSH2 0x737 JUMP JUMPDEST PUSH2 0x347 JUMP JUMPDEST PUSH2 0xE7 PUSH1 0x1 DUP1 SLOAD PUSH1 0xFF NOT DUP2 AND PUSH1 0xFF SWAP1 SWAP2 AND ISZERO OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xFC PUSH4 0xFFFFFFFF DUP2 JUMP JUMPDEST PUSH2 0xFC PUSH2 0x177 CALLDATASIZE PUSH1 0x4 PUSH2 0x752 JUMP JUMPDEST PUSH2 0x3AF JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0x124 SWAP1 PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0x100 DUP2 ADD SWAP2 DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP2 PUSH2 0x1EE SWAP2 SWAP1 DUP4 SWAP1 PUSH1 0x8 SWAP1 DUP3 DUP1 DUP6 JUMPDEST DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x4 ADD SWAP1 PUSH1 0x20 DUP3 PUSH1 0x3 ADD DIV SWAP3 DUP4 ADD SWAP3 PUSH1 0x1 SUB DUP3 MUL SWAP2 POP DUP1 DUP5 GT PUSH2 0x1A7 JUMPI SWAP1 POP POP POP POP POP POP NUMBER PUSH2 0x1F3 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST PUSH1 0x8 DUP2 LT ISZERO PUSH2 0x256 JUMPI DUP4 DUP2 PUSH1 0x8 DUP2 LT PUSH2 0x212 JUMPI PUSH2 0x212 PUSH2 0x76B JUMP JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH4 0xFFFFFFFF AND DUP4 PUSH4 0xFFFFFFFF AND LT ISZERO PUSH2 0x244 JUMPI DUP1 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x23C JUMPI PUSH2 0x23C PUSH2 0x5CF JUMP JUMPDEST SWAP2 POP POP PUSH2 0x25D JUMP JUMPDEST DUP1 PUSH2 0x24E DUP2 PUSH2 0x797 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1F7 JUMP JUMPDEST POP PUSH1 0x8 JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x26C DUP2 PUSH2 0x3DF JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x284 JUMPI PUSH2 0x284 PUSH2 0x5CF JUMP JUMPDEST GT PUSH2 0x290 JUMPI PUSH1 0x0 PUSH2 0x25A JUMP JUMPDEST DUP3 PUSH1 0x1 DUP4 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x2A5 JUMPI PUSH2 0x2A5 PUSH2 0x5CF JUMP JUMPDEST PUSH2 0x2AF SWAP2 SWAP1 PUSH2 0x7B2 JUMP JUMPDEST PUSH1 0x8 DUP2 LT PUSH2 0x2BF JUMPI PUSH2 0x2BF PUSH2 0x76B JUMP JUMPDEST PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x25A SWAP2 SWAP1 PUSH2 0x6D1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP1 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x2E7 JUMPI PUSH2 0x2E7 PUSH2 0x5CF JUMP JUMPDEST PUSH2 0x2EF PUSH2 0x189 JUMP JUMPDEST PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x300 JUMPI PUSH2 0x300 PUSH2 0x5CF JUMP JUMPDEST EQ PUSH2 0x33E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x9 PUSH1 0x24 DUP3 ADD MSTORE PUSH9 0x4241445F5048415345 PUSH1 0xB8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP1 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x35C JUMPI PUSH2 0x35C PUSH2 0x5CF JUMP JUMPDEST PUSH2 0x364 PUSH2 0x189 JUMP JUMPDEST PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x375 JUMPI PUSH2 0x375 PUSH2 0x5CF JUMP JUMPDEST LT ISZERO PUSH2 0x33E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x9 PUSH1 0x24 DUP3 ADD MSTORE PUSH9 0x4D494E5F5048415345 PUSH1 0xB8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x335 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x8 DUP2 LT PUSH2 0x3BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x8 SWAP2 DUP3 DUP3 DIV ADD SWAP2 SWAP1 MOD PUSH1 0x4 MUL SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND DUP2 JUMP JUMPDEST DUP1 PUSH4 0xFFFFFFFF AND NUMBER PUSH4 0xFFFFFFFF AND GT ISZERO PUSH2 0x42D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x1391561517D09313D0D2D7D41054D5 PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x335 JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP2 DUP2 AND LT PUSH2 0x482 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E4558545F424C4F434B5F554E494E495449414C495A45440000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x335 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x48C PUSH2 0x189 JUMP JUMPDEST PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x49D JUMPI PUSH2 0x49D PUSH2 0x5CF JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x8 DUP2 LT PUSH2 0x4B2 JUMPI PUSH2 0x4B2 PUSH2 0x76B JUMP JUMPDEST PUSH1 0x8 DUP2 DIV SWAP2 SWAP1 SWAP2 ADD SLOAD PUSH1 0x7 SWAP1 SWAP2 AND PUSH1 0x4 MUL PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF SWAP1 DUP2 AND EQ PUSH2 0x50F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x1391561517D09313D0D2D7D4D155 PUSH1 0x92 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x335 JUMP JUMPDEST PUSH2 0x518 DUP3 PUSH2 0x58C JUMP JUMPDEST DUP2 PUSH1 0x0 DUP3 PUSH1 0x8 DUP2 LT PUSH2 0x52C JUMPI PUSH2 0x52C PUSH2 0x76B JUMP JUMPDEST PUSH1 0x8 SWAP2 DUP3 DUP3 DIV ADD SWAP2 SWAP1 MOD PUSH1 0x4 MUL PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH4 0xFFFFFFFF AND PUSH32 0x260AAC5B840EDC27B89FDF50E91311A413363A400959466E1049E6D071B8CEE2 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0xFF AND PUSH2 0x26C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x2427A7A5AFA1A7A72224AA24A7A7 PUSH1 0x91 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x335 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 DUP2 ADD PUSH1 0x9 DUP4 LT PUSH2 0x607 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x637 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x120 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x650 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x65F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x100 DUP1 DUP3 ADD DUP3 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x684 JUMPI PUSH2 0x684 PUSH2 0x60D JUMP JUMPDEST PUSH1 0x40 MSTORE DUP5 ADD DUP2 DUP7 DUP3 GT ISZERO PUSH2 0x697 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x6B8 JUMPI PUSH2 0x6AA DUP2 PUSH2 0x623 JUMP JUMPDEST DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x699 JUMP JUMPDEST POP POP DUP2 SWAP4 POP PUSH2 0x6C6 DUP2 PUSH2 0x623 JUMP JUMPDEST SWAP3 POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x6E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x25A DUP3 PUSH2 0x623 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x9 DUP2 LT PUSH2 0x637 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x120 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x70F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x100 DUP4 ADD DUP5 DUP2 GT ISZERO PUSH2 0x721 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 SWAP3 POP PUSH2 0x72D DUP2 PUSH2 0x6EC JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x749 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x25A DUP3 PUSH2 0x6EC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x764 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x7AB JUMPI PUSH2 0x7AB PUSH2 0x781 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x7C4 JUMPI PUSH2 0x7C4 PUSH2 0x781 JUMP JUMPDEST POP SUB SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 AND SELFBALANCE SELFBALANCE DIV LOG1 0xE8 CALLDATACOPY 0xFB LOG3 PUSH8 0xDFA96954AA305D9E PUSH25 0xDA46576577F4F23A2F632145B664736F6C634300080A003300 ",
              "sourceMap": "213:1553:1:-:0;;;349:4;321:32;;-1:-1:-1;;321:32:1;;;;;213:1553;;;;;;;;;;2741:10:0;2736:91;2762:1;2757:2;:6;2736:91;;;2459:10;2785:11;2797:2;2785:15;;;;;;;:::i;:::-;;;;;;;;;;;;:31;;;;;;;;;;;;;;;;;;2765:4;;;;;:::i;:::-;;;;2736:91;;;;213:1553:1;;14:127:2;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:232;185:3;-1:-1:-1;;206:17:2;;203:140;;;265:10;260:3;256:20;253:1;246:31;300:4;297:1;290:15;328:4;325:1;318:15;203:140;-1:-1:-1;370:1:2;359:13;;146:232::o;:::-;213:1553:1;;;;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "@UNINITIALIZED_16": {
                  "entryPoint": null,
                  "id": 16,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@_beforeScheduleNextPhase_230": {
                  "entryPoint": null,
                  "id": 230,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "@_beforeScheduleNextPhase_313": {
                  "entryPoint": 1420,
                  "id": 313,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "@blockNumberForPhase_118": {
                  "entryPoint": 623,
                  "id": 118,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "@currentPhase_135": {
                  "entryPoint": 393,
                  "id": 135,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "@hookCondition_243": {
                  "entryPoint": null,
                  "id": 243,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@phaseAtBlockNumber_89": {
                  "entryPoint": 499,
                  "id": 89,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "@phaseBlocks_26": {
                  "entryPoint": 943,
                  "id": 26,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@runsOnlyAtLeastPhase_284": {
                  "entryPoint": 839,
                  "id": 284,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "@runsOnlyPhase_269": {
                  "entryPoint": 722,
                  "id": 269,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "@scheduleNextPhase_223": {
                  "entryPoint": 991,
                  "id": 223,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "@testScheduleNextPhase_254": {
                  "entryPoint": 611,
                  "id": 254,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "@toggleHookCondition_294": {
                  "entryPoint": null,
                  "id": 294,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "abi_decode_enum_Phase": {
                  "entryPoint": 1772,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_decode_tuple_t_array$_t_uint32_$8_calldata_ptrt_enum$_Phase_$11": {
                  "entryPoint": 1787,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "abi_decode_tuple_t_array$_t_uint32_$8_memory_ptrt_uint32": {
                  "entryPoint": 1596,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "abi_decode_tuple_t_enum$_Phase_$11": {
                  "entryPoint": 1847,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_t_uint256": {
                  "entryPoint": 1874,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_t_uint32": {
                  "entryPoint": 1745,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_uint32": {
                  "entryPoint": 1571,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_enum$_Phase_$11__to_t_uint8__fromStack_reversed": {
                  "entryPoint": 1509,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_056926f056e55e0841a31a47824bb6ffcf6dab905bd2db33c5c65e2db1f83478__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_172fd03a660456ea5bdb78cb0baa2c885a3c243f5d4a60708b6a86b15db7fd77__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_32ca005f352f6eaa95e8eeb2258082bc1fdd5993a26a6477c4179029802acec0__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_460d936037af6f084413e1d4c45db1657b0617ff837d28b75b2f52bf7fde6e4d__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_a6faa6dc69c946102821aa8607dffd36582e9c884a9969c7de9607157030e075__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_c2a8879237c67639ff15b7d05c3c66a88540d4206a1a048c5cd93da5909fc0b3__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_uint32__to_t_uint32__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "checked_sub_t_uint256": {
                  "entryPoint": 1970,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "increment_t_uint256": {
                  "entryPoint": 1943,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "panic_error_0x11": {
                  "entryPoint": 1921,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "panic_error_0x21": {
                  "entryPoint": 1487,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "panic_error_0x32": {
                  "entryPoint": 1899,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "panic_error_0x41": {
                  "entryPoint": 1549,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [
                {
                  "ast": {
                    "nodeType": "YulBlock",
                    "src": "0:5688:2",
                    "statements": [
                      {
                        "nodeType": "YulBlock",
                        "src": "6:3:2",
                        "statements": []
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "46:95:2",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "63:1:2",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "70:3:2",
                                        "type": "",
                                        "value": "224"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "75:10:2",
                                        "type": "",
                                        "value": "0x4e487b71"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "66:3:2"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "66:20:2"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "56:6:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "56:31:2"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "56:31:2"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "103:1:2",
                                    "type": "",
                                    "value": "4"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "106:4:2",
                                    "type": "",
                                    "value": "0x21"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "96:6:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "96:15:2"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "96:15:2"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "127:1:2",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "130:4:2",
                                    "type": "",
                                    "value": "0x24"
                                  }
                                ],
                                "functionName": {
                                  "name": "revert",
                                  "nodeType": "YulIdentifier",
                                  "src": "120:6:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "120:15:2"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "120:15:2"
                            }
                          ]
                        },
                        "name": "panic_error_0x21",
                        "nodeType": "YulFunctionDefinition",
                        "src": "14:127:2"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "253:229:2",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "263:26:2",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "275:9:2"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "286:2:2",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "271:3:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "271:18:2"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "263:4:2"
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "331:111:2",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "352:1:2",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "359:3:2",
                                              "type": "",
                                              "value": "224"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "364:10:2",
                                              "type": "",
                                              "value": "0x4e487b71"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "shl",
                                            "nodeType": "YulIdentifier",
                                            "src": "355:3:2"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "355:20:2"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "345:6:2"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "345:31:2"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "345:31:2"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "396:1:2",
                                          "type": "",
                                          "value": "4"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "399:4:2",
                                          "type": "",
                                          "value": "0x21"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "389:6:2"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "389:15:2"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "389:15:2"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "424:1:2",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "427:4:2",
                                          "type": "",
                                          "value": "0x24"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "417:6:2"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "417:15:2"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "417:15:2"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "311:6:2"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "319:1:2",
                                        "type": "",
                                        "value": "9"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "lt",
                                      "nodeType": "YulIdentifier",
                                      "src": "308:2:2"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "308:13:2"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "301:6:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "301:21:2"
                              },
                              "nodeType": "YulIf",
                              "src": "298:144:2"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "458:9:2"
                                  },
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "469:6:2"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "451:6:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "451:25:2"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "451:25:2"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_enum$_Phase_$11__to_t_uint8__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "222:9:2",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "233:6:2",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "244:4:2",
                            "type": ""
                          }
                        ],
                        "src": "146:336:2"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "519:95:2",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "536:1:2",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "543:3:2",
                                        "type": "",
                                        "value": "224"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "548:10:2",
                                        "type": "",
                                        "value": "0x4e487b71"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "539:3:2"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "539:20:2"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "529:6:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "529:31:2"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "529:31:2"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "576:1:2",
                                    "type": "",
                                    "value": "4"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "579:4:2",
                                    "type": "",
                                    "value": "0x41"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "569:6:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "569:15:2"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "569:15:2"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "600:1:2",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "603:4:2",
                                    "type": "",
                                    "value": "0x24"
                                  }
                                ],
                                "functionName": {
                                  "name": "revert",
                                  "nodeType": "YulIdentifier",
                                  "src": "593:6:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "593:15:2"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "593:15:2"
                            }
                          ]
                        },
                        "name": "panic_error_0x41",
                        "nodeType": "YulFunctionDefinition",
                        "src": "487:127:2"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "667:115:2",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "677:29:2",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "699:6:2"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "686:12:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "686:20:2"
                              },
                              "variableNames": [
                                {
                                  "name": "value",
                                  "nodeType": "YulIdentifier",
                                  "src": "677:5:2"
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "760:16:2",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "769:1:2",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "772:1:2",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "762:6:2"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "762:12:2"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "762:12:2"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "728:5:2"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nodeType": "YulIdentifier",
                                            "src": "739:5:2"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "746:10:2",
                                            "type": "",
                                            "value": "0xffffffff"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "and",
                                          "nodeType": "YulIdentifier",
                                          "src": "735:3:2"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "735:22:2"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "eq",
                                      "nodeType": "YulIdentifier",
                                      "src": "725:2:2"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "725:33:2"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "718:6:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "718:41:2"
                              },
                              "nodeType": "YulIf",
                              "src": "715:61:2"
                            }
                          ]
                        },
                        "name": "abi_decode_uint32",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "offset",
                            "nodeType": "YulTypedName",
                            "src": "646:6:2",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "657:5:2",
                            "type": ""
                          }
                        ],
                        "src": "619:163:2"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "895:737:2",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "942:16:2",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "951:1:2",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "954:1:2",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "944:6:2"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "944:12:2"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "944:12:2"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "916:7:2"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "925:9:2"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "912:3:2"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "912:23:2"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "937:3:2",
                                    "type": "",
                                    "value": "288"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "908:3:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "908:33:2"
                              },
                              "nodeType": "YulIf",
                              "src": "905:53:2"
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "1013:16:2",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1022:1:2",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1025:1:2",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "1015:6:2"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1015:12:2"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1015:12:2"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "headStart",
                                            "nodeType": "YulIdentifier",
                                            "src": "985:9:2"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "996:4:2",
                                            "type": "",
                                            "value": "0x1f"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "981:3:2"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "981:20:2"
                                      },
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "1003:7:2"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "slt",
                                      "nodeType": "YulIdentifier",
                                      "src": "977:3:2"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "977:34:2"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "970:6:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "970:42:2"
                              },
                              "nodeType": "YulIf",
                              "src": "967:62:2"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1038:23:2",
                              "value": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1058:2:2",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "1052:5:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1052:9:2"
                              },
                              "variables": [
                                {
                                  "name": "memPtr",
                                  "nodeType": "YulTypedName",
                                  "src": "1042:6:2",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1070:13:2",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1080:3:2",
                                "type": "",
                                "value": "256"
                              },
                              "variables": [
                                {
                                  "name": "_1",
                                  "nodeType": "YulTypedName",
                                  "src": "1074:2:2",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1092:33:2",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "1114:6:2"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "1122:2:2"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1110:3:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1110:15:2"
                              },
                              "variables": [
                                {
                                  "name": "newFreePtr",
                                  "nodeType": "YulTypedName",
                                  "src": "1096:10:2",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "1200:22:2",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x41",
                                        "nodeType": "YulIdentifier",
                                        "src": "1202:16:2"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1202:18:2"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1202:18:2"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "newFreePtr",
                                        "nodeType": "YulIdentifier",
                                        "src": "1143:10:2"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1155:18:2",
                                        "type": "",
                                        "value": "0xffffffffffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "gt",
                                      "nodeType": "YulIdentifier",
                                      "src": "1140:2:2"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1140:34:2"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "newFreePtr",
                                        "nodeType": "YulIdentifier",
                                        "src": "1179:10:2"
                                      },
                                      {
                                        "name": "memPtr",
                                        "nodeType": "YulIdentifier",
                                        "src": "1191:6:2"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "lt",
                                      "nodeType": "YulIdentifier",
                                      "src": "1176:2:2"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1176:22:2"
                                  }
                                ],
                                "functionName": {
                                  "name": "or",
                                  "nodeType": "YulIdentifier",
                                  "src": "1137:2:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1137:62:2"
                              },
                              "nodeType": "YulIf",
                              "src": "1134:88:2"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1238:2:2",
                                    "type": "",
                                    "value": "64"
                                  },
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "1242:10:2"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "1231:6:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1231:22:2"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1231:22:2"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1262:17:2",
                              "value": {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "1273:6:2"
                              },
                              "variables": [
                                {
                                  "name": "dst",
                                  "nodeType": "YulTypedName",
                                  "src": "1266:3:2",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1288:32:2",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1306:9:2"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "1317:2:2"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1302:3:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1302:18:2"
                              },
                              "variables": [
                                {
                                  "name": "srcEnd",
                                  "nodeType": "YulTypedName",
                                  "src": "1292:6:2",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "1352:16:2",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1361:1:2",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1364:1:2",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "1354:6:2"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1354:12:2"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1354:12:2"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "srcEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1335:6:2"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1343:7:2"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1332:2:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1332:19:2"
                              },
                              "nodeType": "YulIf",
                              "src": "1329:39:2"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1377:20:2",
                              "value": {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1388:9:2"
                              },
                              "variables": [
                                {
                                  "name": "src",
                                  "nodeType": "YulTypedName",
                                  "src": "1381:3:2",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "1464:93:2",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nodeType": "YulIdentifier",
                                          "src": "1485:3:2"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "src",
                                              "nodeType": "YulIdentifier",
                                              "src": "1508:3:2"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "abi_decode_uint32",
                                            "nodeType": "YulIdentifier",
                                            "src": "1490:17:2"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "1490:22:2"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "1478:6:2"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1478:35:2"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1478:35:2"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "1526:21:2",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nodeType": "YulIdentifier",
                                          "src": "1537:3:2"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1542:4:2",
                                          "type": "",
                                          "value": "0x20"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "1533:3:2"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1533:14:2"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "dst",
                                        "nodeType": "YulIdentifier",
                                        "src": "1526:3:2"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "src",
                                    "nodeType": "YulIdentifier",
                                    "src": "1417:3:2"
                                  },
                                  {
                                    "name": "srcEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1422:6:2"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1414:2:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1414:15:2"
                              },
                              "nodeType": "YulForLoop",
                              "post": {
                                "nodeType": "YulBlock",
                                "src": "1430:25:2",
                                "statements": [
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "1432:21:2",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "src",
                                          "nodeType": "YulIdentifier",
                                          "src": "1443:3:2"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1448:4:2",
                                          "type": "",
                                          "value": "0x20"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "1439:3:2"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1439:14:2"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "src",
                                        "nodeType": "YulIdentifier",
                                        "src": "1432:3:2"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "pre": {
                                "nodeType": "YulBlock",
                                "src": "1410:3:2",
                                "statements": []
                              },
                              "src": "1406:151:2"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "1566:16:2",
                              "value": {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "1576:6:2"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "1566:6:2"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "1591:35:2",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "srcEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1619:6:2"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_uint32",
                                  "nodeType": "YulIdentifier",
                                  "src": "1601:17:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1601:25:2"
                              },
                              "variableNames": [
                                {
                                  "name": "value1",
                                  "nodeType": "YulIdentifier",
                                  "src": "1591:6:2"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_array$_t_uint32_$8_memory_ptrt_uint32",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "853:9:2",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "864:7:2",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "876:6:2",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulTypedName",
                            "src": "884:6:2",
                            "type": ""
                          }
                        ],
                        "src": "787:845:2"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "1706:115:2",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "1752:16:2",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1761:1:2",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1764:1:2",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "1754:6:2"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1754:12:2"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1754:12:2"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "1727:7:2"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "1736:9:2"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "1723:3:2"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1723:23:2"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1748:2:2",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1719:3:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1719:32:2"
                              },
                              "nodeType": "YulIf",
                              "src": "1716:52:2"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "1777:38:2",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1805:9:2"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_uint32",
                                  "nodeType": "YulIdentifier",
                                  "src": "1787:17:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1787:28:2"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "1777:6:2"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_uint32",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "1672:9:2",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "1683:7:2",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "1695:6:2",
                            "type": ""
                          }
                        ],
                        "src": "1637:184:2"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "1878:94:2",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "1888:29:2",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "1910:6:2"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "1897:12:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1897:20:2"
                              },
                              "variableNames": [
                                {
                                  "name": "value",
                                  "nodeType": "YulIdentifier",
                                  "src": "1888:5:2"
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "1950:16:2",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1959:1:2",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1962:1:2",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "1952:6:2"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1952:12:2"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1952:12:2"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "1939:5:2"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1946:1:2",
                                        "type": "",
                                        "value": "9"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "lt",
                                      "nodeType": "YulIdentifier",
                                      "src": "1936:2:2"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1936:12:2"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "1929:6:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1929:20:2"
                              },
                              "nodeType": "YulIf",
                              "src": "1926:40:2"
                            }
                          ]
                        },
                        "name": "abi_decode_enum_Phase",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "offset",
                            "nodeType": "YulTypedName",
                            "src": "1857:6:2",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "1868:5:2",
                            "type": ""
                          }
                        ],
                        "src": "1826:146:2"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "2096:223:2",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "2143:16:2",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2152:1:2",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2155:1:2",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "2145:6:2"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2145:12:2"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "2145:12:2"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "2117:7:2"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "2126:9:2"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "2113:3:2"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2113:23:2"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2138:3:2",
                                    "type": "",
                                    "value": "288"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "2109:3:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2109:33:2"
                              },
                              "nodeType": "YulIf",
                              "src": "2106:53:2"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "2168:29:2",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2182:9:2"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2193:3:2",
                                    "type": "",
                                    "value": "256"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2178:3:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2178:19:2"
                              },
                              "variables": [
                                {
                                  "name": "_1",
                                  "nodeType": "YulTypedName",
                                  "src": "2172:2:2",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "2225:16:2",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2234:1:2",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2237:1:2",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "2227:6:2"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2227:12:2"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "2227:12:2"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "2212:2:2"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "2216:7:2"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "2209:2:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2209:15:2"
                              },
                              "nodeType": "YulIf",
                              "src": "2206:35:2"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "2250:19:2",
                              "value": {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2260:9:2"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "2250:6:2"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "2278:35:2",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "2310:2:2"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_enum_Phase",
                                  "nodeType": "YulIdentifier",
                                  "src": "2288:21:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2288:25:2"
                              },
                              "variableNames": [
                                {
                                  "name": "value1",
                                  "nodeType": "YulIdentifier",
                                  "src": "2278:6:2"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_array$_t_uint32_$8_calldata_ptrt_enum$_Phase_$11",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "2054:9:2",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "2065:7:2",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "2077:6:2",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulTypedName",
                            "src": "2085:6:2",
                            "type": ""
                          }
                        ],
                        "src": "1977:342:2"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "2423:93:2",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "2433:26:2",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2445:9:2"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2456:2:2",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2441:3:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2441:18:2"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "2433:4:2"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2475:9:2"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "2490:6:2"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2498:10:2",
                                        "type": "",
                                        "value": "0xffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "2486:3:2"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2486:23:2"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "2468:6:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2468:42:2"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "2468:42:2"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_uint32__to_t_uint32__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "2392:9:2",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "2403:6:2",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "2414:4:2",
                            "type": ""
                          }
                        ],
                        "src": "2324:192:2"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "2599:119:2",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "2645:16:2",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2654:1:2",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2657:1:2",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "2647:6:2"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2647:12:2"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "2647:12:2"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "2620:7:2"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "2629:9:2"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "2616:3:2"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2616:23:2"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2641:2:2",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "2612:3:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2612:32:2"
                              },
                              "nodeType": "YulIf",
                              "src": "2609:52:2"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "2670:42:2",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2702:9:2"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_enum_Phase",
                                  "nodeType": "YulIdentifier",
                                  "src": "2680:21:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2680:32:2"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "2670:6:2"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_enum$_Phase_$11",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "2565:9:2",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "2576:7:2",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "2588:6:2",
                            "type": ""
                          }
                        ],
                        "src": "2521:197:2"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "2818:92:2",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "2828:26:2",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2840:9:2"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2851:2:2",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2836:3:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2836:18:2"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "2828:4:2"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2870:9:2"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value0",
                                            "nodeType": "YulIdentifier",
                                            "src": "2895:6:2"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "iszero",
                                          "nodeType": "YulIdentifier",
                                          "src": "2888:6:2"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2888:14:2"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "2881:6:2"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2881:22:2"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "2863:6:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2863:41:2"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "2863:41:2"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "2787:9:2",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "2798:6:2",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "2809:4:2",
                            "type": ""
                          }
                        ],
                        "src": "2723:187:2"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "2985:110:2",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "3031:16:2",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "3040:1:2",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "3043:1:2",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "3033:6:2"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3033:12:2"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "3033:12:2"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "3006:7:2"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "3015:9:2"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "3002:3:2"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3002:23:2"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3027:2:2",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "2998:3:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2998:32:2"
                              },
                              "nodeType": "YulIf",
                              "src": "2995:52:2"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "3056:33:2",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3079:9:2"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "3066:12:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3066:23:2"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "3056:6:2"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "2951:9:2",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "2962:7:2",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "2974:6:2",
                            "type": ""
                          }
                        ],
                        "src": "2915:180:2"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "3132:95:2",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3149:1:2",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3156:3:2",
                                        "type": "",
                                        "value": "224"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3161:10:2",
                                        "type": "",
                                        "value": "0x4e487b71"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "3152:3:2"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3152:20:2"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "3142:6:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3142:31:2"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "3142:31:2"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3189:1:2",
                                    "type": "",
                                    "value": "4"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3192:4:2",
                                    "type": "",
                                    "value": "0x32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "3182:6:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3182:15:2"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "3182:15:2"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3213:1:2",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3216:4:2",
                                    "type": "",
                                    "value": "0x24"
                                  }
                                ],
                                "functionName": {
                                  "name": "revert",
                                  "nodeType": "YulIdentifier",
                                  "src": "3206:6:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3206:15:2"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "3206:15:2"
                            }
                          ]
                        },
                        "name": "panic_error_0x32",
                        "nodeType": "YulFunctionDefinition",
                        "src": "3100:127:2"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "3264:95:2",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3281:1:2",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3288:3:2",
                                        "type": "",
                                        "value": "224"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3293:10:2",
                                        "type": "",
                                        "value": "0x4e487b71"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "3284:3:2"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3284:20:2"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "3274:6:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3274:31:2"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "3274:31:2"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3321:1:2",
                                    "type": "",
                                    "value": "4"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3324:4:2",
                                    "type": "",
                                    "value": "0x11"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "3314:6:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3314:15:2"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "3314:15:2"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3345:1:2",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3348:4:2",
                                    "type": "",
                                    "value": "0x24"
                                  }
                                ],
                                "functionName": {
                                  "name": "revert",
                                  "nodeType": "YulIdentifier",
                                  "src": "3338:6:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3338:15:2"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "3338:15:2"
                            }
                          ]
                        },
                        "name": "panic_error_0x11",
                        "nodeType": "YulFunctionDefinition",
                        "src": "3232:127:2"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "3411:88:2",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "3442:22:2",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x11",
                                        "nodeType": "YulIdentifier",
                                        "src": "3444:16:2"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3444:18:2"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "3444:18:2"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "3427:5:2"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3438:1:2",
                                        "type": "",
                                        "value": "0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "3434:3:2"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3434:6:2"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "3424:2:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3424:17:2"
                              },
                              "nodeType": "YulIf",
                              "src": "3421:43:2"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "3473:20:2",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "3484:5:2"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3491:1:2",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3480:3:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3480:13:2"
                              },
                              "variableNames": [
                                {
                                  "name": "ret",
                                  "nodeType": "YulIdentifier",
                                  "src": "3473:3:2"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "increment_t_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "3393:5:2",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "ret",
                            "nodeType": "YulTypedName",
                            "src": "3403:3:2",
                            "type": ""
                          }
                        ],
                        "src": "3364:135:2"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "3553:76:2",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "3575:22:2",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x11",
                                        "nodeType": "YulIdentifier",
                                        "src": "3577:16:2"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3577:18:2"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "3577:18:2"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "3569:1:2"
                                  },
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "3572:1:2"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "3566:2:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3566:8:2"
                              },
                              "nodeType": "YulIf",
                              "src": "3563:34:2"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "3606:17:2",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "3618:1:2"
                                  },
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "3621:1:2"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "3614:3:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3614:9:2"
                              },
                              "variableNames": [
                                {
                                  "name": "diff",
                                  "nodeType": "YulIdentifier",
                                  "src": "3606:4:2"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "checked_sub_t_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "x",
                            "nodeType": "YulTypedName",
                            "src": "3535:1:2",
                            "type": ""
                          },
                          {
                            "name": "y",
                            "nodeType": "YulTypedName",
                            "src": "3538:1:2",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "diff",
                            "nodeType": "YulTypedName",
                            "src": "3544:4:2",
                            "type": ""
                          }
                        ],
                        "src": "3504:125:2"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "3808:158:2",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3825:9:2"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3836:2:2",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "3818:6:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3818:21:2"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "3818:21:2"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "3859:9:2"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3870:2:2",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "3855:3:2"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3855:18:2"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3875:1:2",
                                    "type": "",
                                    "value": "9"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "3848:6:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3848:29:2"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "3848:29:2"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "3897:9:2"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3908:2:2",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "3893:3:2"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3893:18:2"
                                  },
                                  {
                                    "hexValue": "4241445f5048415345",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "3913:11:2",
                                    "type": "",
                                    "value": "BAD_PHASE"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "3886:6:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3886:39:2"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "3886:39:2"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "3934:26:2",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3946:9:2"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3957:2:2",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3942:3:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3942:18:2"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "3934:4:2"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_460d936037af6f084413e1d4c45db1657b0617ff837d28b75b2f52bf7fde6e4d__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "3785:9:2",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "3799:4:2",
                            "type": ""
                          }
                        ],
                        "src": "3634:332:2"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "4145:158:2",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4162:9:2"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4173:2:2",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "4155:6:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4155:21:2"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "4155:21:2"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "4196:9:2"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4207:2:2",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4192:3:2"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4192:18:2"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4212:1:2",
                                    "type": "",
                                    "value": "9"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "4185:6:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4185:29:2"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "4185:29:2"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "4234:9:2"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4245:2:2",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4230:3:2"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4230:18:2"
                                  },
                                  {
                                    "hexValue": "4d494e5f5048415345",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "4250:11:2",
                                    "type": "",
                                    "value": "MIN_PHASE"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "4223:6:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4223:39:2"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "4223:39:2"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "4271:26:2",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4283:9:2"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4294:2:2",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4279:3:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4279:18:2"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "4271:4:2"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_a6faa6dc69c946102821aa8607dffd36582e9c884a9969c7de9607157030e075__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "4122:9:2",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "4136:4:2",
                            "type": ""
                          }
                        ],
                        "src": "3971:332:2"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "4482:165:2",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4499:9:2"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4510:2:2",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "4492:6:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4492:21:2"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "4492:21:2"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "4533:9:2"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4544:2:2",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4529:3:2"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4529:18:2"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4549:2:2",
                                    "type": "",
                                    "value": "15"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "4522:6:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4522:30:2"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "4522:30:2"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "4572:9:2"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4583:2:2",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4568:3:2"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4568:18:2"
                                  },
                                  {
                                    "hexValue": "4e4558545f424c4f434b5f50415354",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "4588:17:2",
                                    "type": "",
                                    "value": "NEXT_BLOCK_PAST"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "4561:6:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4561:45:2"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "4561:45:2"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "4615:26:2",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4627:9:2"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4638:2:2",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4623:3:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4623:18:2"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "4615:4:2"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_172fd03a660456ea5bdb78cb0baa2c885a3c243f5d4a60708b6a86b15db7fd77__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "4459:9:2",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "4473:4:2",
                            "type": ""
                          }
                        ],
                        "src": "4308:339:2"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "4826:174:2",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4843:9:2"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4854:2:2",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "4836:6:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4836:21:2"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "4836:21:2"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "4877:9:2"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4888:2:2",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4873:3:2"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4873:18:2"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4893:2:2",
                                    "type": "",
                                    "value": "24"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "4866:6:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4866:30:2"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "4866:30:2"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "4916:9:2"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4927:2:2",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4912:3:2"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4912:18:2"
                                  },
                                  {
                                    "hexValue": "4e4558545f424c4f434b5f554e494e495449414c495a4544",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "4932:26:2",
                                    "type": "",
                                    "value": "NEXT_BLOCK_UNINITIALIZED"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "4905:6:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4905:54:2"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "4905:54:2"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "4968:26:2",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4980:9:2"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4991:2:2",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4976:3:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4976:18:2"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "4968:4:2"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_32ca005f352f6eaa95e8eeb2258082bc1fdd5993a26a6477c4179029802acec0__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "4803:9:2",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "4817:4:2",
                            "type": ""
                          }
                        ],
                        "src": "4652:348:2"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "5179:164:2",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5196:9:2"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5207:2:2",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "5189:6:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5189:21:2"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "5189:21:2"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "5230:9:2"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5241:2:2",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5226:3:2"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5226:18:2"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5246:2:2",
                                    "type": "",
                                    "value": "14"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "5219:6:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5219:30:2"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "5219:30:2"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "5269:9:2"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5280:2:2",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5265:3:2"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5265:18:2"
                                  },
                                  {
                                    "hexValue": "4e4558545f424c4f434b5f534554",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "5285:16:2",
                                    "type": "",
                                    "value": "NEXT_BLOCK_SET"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "5258:6:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5258:44:2"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "5258:44:2"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "5311:26:2",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5323:9:2"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5334:2:2",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5319:3:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5319:18:2"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "5311:4:2"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_c2a8879237c67639ff15b7d05c3c66a88540d4206a1a048c5cd93da5909fc0b3__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "5156:9:2",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "5170:4:2",
                            "type": ""
                          }
                        ],
                        "src": "5005:338:2"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "5522:164:2",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5539:9:2"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5550:2:2",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "5532:6:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5532:21:2"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "5532:21:2"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "5573:9:2"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5584:2:2",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5569:3:2"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5569:18:2"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5589:2:2",
                                    "type": "",
                                    "value": "14"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "5562:6:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5562:30:2"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "5562:30:2"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "5612:9:2"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5623:2:2",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5608:3:2"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5608:18:2"
                                  },
                                  {
                                    "hexValue": "484f4f4b5f434f4e444954494f4e",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "5628:16:2",
                                    "type": "",
                                    "value": "HOOK_CONDITION"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "5601:6:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5601:44:2"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "5601:44:2"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "5654:26:2",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5666:9:2"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5677:2:2",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5662:3:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5662:18:2"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "5654:4:2"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_056926f056e55e0841a31a47824bb6ffcf6dab905bd2db33c5c65e2db1f83478__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "5499:9:2",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "5513:4:2",
                            "type": ""
                          }
                        ],
                        "src": "5348:338:2"
                      }
                    ]
                  },
                  "contents": "{\n    { }\n    function panic_error_0x21()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_enum$_Phase_$11__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        if iszero(lt(value0, 9))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x21)\n            revert(0, 0x24)\n        }\n        mstore(headStart, value0)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_uint32(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_array$_t_uint32_$8_memory_ptrt_uint32(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 288) { revert(0, 0) }\n        if iszero(slt(add(headStart, 0x1f), dataEnd)) { revert(0, 0) }\n        let memPtr := mload(64)\n        let _1 := 256\n        let newFreePtr := add(memPtr, _1)\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        let dst := memPtr\n        let srcEnd := add(headStart, _1)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := headStart\n        for { } lt(src, srcEnd) { src := add(src, 0x20) }\n        {\n            mstore(dst, abi_decode_uint32(src))\n            dst := add(dst, 0x20)\n        }\n        value0 := memPtr\n        value1 := abi_decode_uint32(srcEnd)\n    }\n    function abi_decode_tuple_t_uint32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_uint32(headStart)\n    }\n    function abi_decode_enum_Phase(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(lt(value, 9)) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_array$_t_uint32_$8_calldata_ptrt_enum$_Phase_$11(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 288) { revert(0, 0) }\n        let _1 := add(headStart, 256)\n        if gt(_1, dataEnd) { revert(0, 0) }\n        value0 := headStart\n        value1 := abi_decode_enum_Phase(_1)\n    }\n    function abi_encode_tuple_t_uint32__to_t_uint32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffff))\n    }\n    function abi_decode_tuple_t_enum$_Phase_$11(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_enum_Phase(headStart)\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_460d936037af6f084413e1d4c45db1657b0617ff837d28b75b2f52bf7fde6e4d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 9)\n        mstore(add(headStart, 64), \"BAD_PHASE\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_a6faa6dc69c946102821aa8607dffd36582e9c884a9969c7de9607157030e075__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 9)\n        mstore(add(headStart, 64), \"MIN_PHASE\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_172fd03a660456ea5bdb78cb0baa2c885a3c243f5d4a60708b6a86b15db7fd77__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 15)\n        mstore(add(headStart, 64), \"NEXT_BLOCK_PAST\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_32ca005f352f6eaa95e8eeb2258082bc1fdd5993a26a6477c4179029802acec0__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"NEXT_BLOCK_UNINITIALIZED\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_c2a8879237c67639ff15b7d05c3c66a88540d4206a1a048c5cd93da5909fc0b3__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 14)\n        mstore(add(headStart, 64), \"NEXT_BLOCK_SET\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_056926f056e55e0841a31a47824bb6ffcf6dab905bd2db33c5c65e2db1f83478__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 14)\n        mstore(add(headStart, 64), \"HOOK_CONDITION\")\n        tail := add(headStart, 96)\n    }\n}",
                  "id": 2,
                  "language": "Yul",
                  "name": "#utility.yul"
                }
              ],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "608060405234801561001057600080fd5b506004361061009e5760003560e01c80636932f6b7116100665780636932f6b714610134578063791f211f1461014757806381e45d9a1461015e5780639923c94b14610169578063abec2f811461017c57600080fd5b8063055ad42e146100a357806334c1df75146100c15780633bd126dc146100d457806345bdfa8a146100e957806348a8b7df14610111575b600080fd5b6100ab610189565b6040516100b891906105e5565b60405180910390f35b6100ab6100cf36600461063c565b6101f3565b6100e76100e23660046106d1565b610263565b005b6100fc6100f73660046106fb565b61026f565b60405163ffffffff90911681526020016100b8565b61012461011f366004610737565b6102d2565b60405190151581526020016100b8565b610124610142366004610737565b610347565b6100e76001805460ff19811660ff90911615179055565b6100fc63ffffffff81565b6100fc610177366004610752565b6103af565b6001546101249060ff1681565b604080516101008101918290526000916101ee919083906008908280855b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116101a75790505050505050436101f3565b905090565b6000805b6008811015610256578381600881106102125761021261076b565b602002015163ffffffff168363ffffffff1610156102445780600881111561023c5761023c6105cf565b91505061025d565b8061024e81610797565b9150506101f7565b5060085b90505b92915050565b61026c816103df565b50565b600080826008811115610284576102846105cf565b1161029057600061025a565b8260018360088111156102a5576102a56105cf565b6102af91906107b2565b600881106102bf576102bf61076b565b60200201602081019061025a91906106d1565b6000818060088111156102e7576102e76105cf565b6102ef610189565b6008811115610300576103006105cf565b1461033e5760405162461bcd60e51b81526020600482015260096024820152684241445f504841534560b81b60448201526064015b60405180910390fd5b50600192915050565b60008180600881111561035c5761035c6105cf565b610364610189565b6008811115610375576103756105cf565b101561033e5760405162461bcd60e51b81526020600482015260096024820152684d494e5f504841534560b81b6044820152606401610335565b600081600881106103bf57600080fd5b60089182820401919006600402915054906101000a900463ffffffff1681565b8063ffffffff164363ffffffff16111561042d5760405162461bcd60e51b815260206004820152600f60248201526e1391561517d09313d0d2d7d41054d5608a1b6044820152606401610335565b63ffffffff818116106104825760405162461bcd60e51b815260206004820152601860248201527f4e4558545f424c4f434b5f554e494e495449414c495a454400000000000000006044820152606401610335565b600061048c610189565b600881111561049d5761049d6105cf565b9050600081600881106104b2576104b261076b565b60088104919091015460079091166004026101000a900463ffffffff9081161461050f5760405162461bcd60e51b815260206004820152600e60248201526d1391561517d09313d0d2d7d4d15560921b6044820152606401610335565b6105188261058c565b816000826008811061052c5761052c61076b565b600891828204019190066004026101000a81548163ffffffff021916908363ffffffff1602179055508163ffffffff167f260aac5b840edc27b89fdf50e91311a413363a400959466e1049e6d071b8cee260405160405180910390a25050565b60015460ff1661026c5760405162461bcd60e51b815260206004820152600e60248201526d2427a7a5afa1a7a72224aa24a7a760911b6044820152606401610335565b634e487b7160e01b600052602160045260246000fd5b602081016009831061060757634e487b7160e01b600052602160045260246000fd5b91905290565b634e487b7160e01b600052604160045260246000fd5b803563ffffffff8116811461063757600080fd5b919050565b600080610120838503121561065057600080fd5b83601f84011261065f57600080fd5b60405161010080820182811067ffffffffffffffff821117156106845761068461060d565b6040528401818682111561069757600080fd5b855b828110156106b8576106aa81610623565b825260209182019101610699565b50508193506106c681610623565b925050509250929050565b6000602082840312156106e357600080fd5b61025a82610623565b80356009811061063757600080fd5b600080610120838503121561070f57600080fd5b61010083018481111561072157600080fd5b83925061072d816106ec565b9150509250929050565b60006020828403121561074957600080fd5b61025a826106ec565b60006020828403121561076457600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156107ab576107ab610781565b5060010190565b6000828210156107c4576107c4610781565b50039056fea264697066735822122016474704a1e837fba367dfa96954aa305d9e78da46576577f4f23a2f632145b664736f6c634300080a0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x9E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6932F6B7 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0x6932F6B7 EQ PUSH2 0x134 JUMPI DUP1 PUSH4 0x791F211F EQ PUSH2 0x147 JUMPI DUP1 PUSH4 0x81E45D9A EQ PUSH2 0x15E JUMPI DUP1 PUSH4 0x9923C94B EQ PUSH2 0x169 JUMPI DUP1 PUSH4 0xABEC2F81 EQ PUSH2 0x17C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x55AD42E EQ PUSH2 0xA3 JUMPI DUP1 PUSH4 0x34C1DF75 EQ PUSH2 0xC1 JUMPI DUP1 PUSH4 0x3BD126DC EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x45BDFA8A EQ PUSH2 0xE9 JUMPI DUP1 PUSH4 0x48A8B7DF EQ PUSH2 0x111 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAB PUSH2 0x189 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB8 SWAP2 SWAP1 PUSH2 0x5E5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xAB PUSH2 0xCF CALLDATASIZE PUSH1 0x4 PUSH2 0x63C JUMP JUMPDEST PUSH2 0x1F3 JUMP JUMPDEST PUSH2 0xE7 PUSH2 0xE2 CALLDATASIZE PUSH1 0x4 PUSH2 0x6D1 JUMP JUMPDEST PUSH2 0x263 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xFC PUSH2 0xF7 CALLDATASIZE PUSH1 0x4 PUSH2 0x6FB JUMP JUMPDEST PUSH2 0x26F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xB8 JUMP JUMPDEST PUSH2 0x124 PUSH2 0x11F CALLDATASIZE PUSH1 0x4 PUSH2 0x737 JUMP JUMPDEST PUSH2 0x2D2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xB8 JUMP JUMPDEST PUSH2 0x124 PUSH2 0x142 CALLDATASIZE PUSH1 0x4 PUSH2 0x737 JUMP JUMPDEST PUSH2 0x347 JUMP JUMPDEST PUSH2 0xE7 PUSH1 0x1 DUP1 SLOAD PUSH1 0xFF NOT DUP2 AND PUSH1 0xFF SWAP1 SWAP2 AND ISZERO OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xFC PUSH4 0xFFFFFFFF DUP2 JUMP JUMPDEST PUSH2 0xFC PUSH2 0x177 CALLDATASIZE PUSH1 0x4 PUSH2 0x752 JUMP JUMPDEST PUSH2 0x3AF JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0x124 SWAP1 PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0x100 DUP2 ADD SWAP2 DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP2 PUSH2 0x1EE SWAP2 SWAP1 DUP4 SWAP1 PUSH1 0x8 SWAP1 DUP3 DUP1 DUP6 JUMPDEST DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x4 ADD SWAP1 PUSH1 0x20 DUP3 PUSH1 0x3 ADD DIV SWAP3 DUP4 ADD SWAP3 PUSH1 0x1 SUB DUP3 MUL SWAP2 POP DUP1 DUP5 GT PUSH2 0x1A7 JUMPI SWAP1 POP POP POP POP POP POP NUMBER PUSH2 0x1F3 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST PUSH1 0x8 DUP2 LT ISZERO PUSH2 0x256 JUMPI DUP4 DUP2 PUSH1 0x8 DUP2 LT PUSH2 0x212 JUMPI PUSH2 0x212 PUSH2 0x76B JUMP JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH4 0xFFFFFFFF AND DUP4 PUSH4 0xFFFFFFFF AND LT ISZERO PUSH2 0x244 JUMPI DUP1 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x23C JUMPI PUSH2 0x23C PUSH2 0x5CF JUMP JUMPDEST SWAP2 POP POP PUSH2 0x25D JUMP JUMPDEST DUP1 PUSH2 0x24E DUP2 PUSH2 0x797 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1F7 JUMP JUMPDEST POP PUSH1 0x8 JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x26C DUP2 PUSH2 0x3DF JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x284 JUMPI PUSH2 0x284 PUSH2 0x5CF JUMP JUMPDEST GT PUSH2 0x290 JUMPI PUSH1 0x0 PUSH2 0x25A JUMP JUMPDEST DUP3 PUSH1 0x1 DUP4 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x2A5 JUMPI PUSH2 0x2A5 PUSH2 0x5CF JUMP JUMPDEST PUSH2 0x2AF SWAP2 SWAP1 PUSH2 0x7B2 JUMP JUMPDEST PUSH1 0x8 DUP2 LT PUSH2 0x2BF JUMPI PUSH2 0x2BF PUSH2 0x76B JUMP JUMPDEST PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x25A SWAP2 SWAP1 PUSH2 0x6D1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP1 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x2E7 JUMPI PUSH2 0x2E7 PUSH2 0x5CF JUMP JUMPDEST PUSH2 0x2EF PUSH2 0x189 JUMP JUMPDEST PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x300 JUMPI PUSH2 0x300 PUSH2 0x5CF JUMP JUMPDEST EQ PUSH2 0x33E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x9 PUSH1 0x24 DUP3 ADD MSTORE PUSH9 0x4241445F5048415345 PUSH1 0xB8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP1 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x35C JUMPI PUSH2 0x35C PUSH2 0x5CF JUMP JUMPDEST PUSH2 0x364 PUSH2 0x189 JUMP JUMPDEST PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x375 JUMPI PUSH2 0x375 PUSH2 0x5CF JUMP JUMPDEST LT ISZERO PUSH2 0x33E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x9 PUSH1 0x24 DUP3 ADD MSTORE PUSH9 0x4D494E5F5048415345 PUSH1 0xB8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x335 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x8 DUP2 LT PUSH2 0x3BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x8 SWAP2 DUP3 DUP3 DIV ADD SWAP2 SWAP1 MOD PUSH1 0x4 MUL SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND DUP2 JUMP JUMPDEST DUP1 PUSH4 0xFFFFFFFF AND NUMBER PUSH4 0xFFFFFFFF AND GT ISZERO PUSH2 0x42D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x1391561517D09313D0D2D7D41054D5 PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x335 JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP2 DUP2 AND LT PUSH2 0x482 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E4558545F424C4F434B5F554E494E495449414C495A45440000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x335 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x48C PUSH2 0x189 JUMP JUMPDEST PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x49D JUMPI PUSH2 0x49D PUSH2 0x5CF JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x8 DUP2 LT PUSH2 0x4B2 JUMPI PUSH2 0x4B2 PUSH2 0x76B JUMP JUMPDEST PUSH1 0x8 DUP2 DIV SWAP2 SWAP1 SWAP2 ADD SLOAD PUSH1 0x7 SWAP1 SWAP2 AND PUSH1 0x4 MUL PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF SWAP1 DUP2 AND EQ PUSH2 0x50F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x1391561517D09313D0D2D7D4D155 PUSH1 0x92 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x335 JUMP JUMPDEST PUSH2 0x518 DUP3 PUSH2 0x58C JUMP JUMPDEST DUP2 PUSH1 0x0 DUP3 PUSH1 0x8 DUP2 LT PUSH2 0x52C JUMPI PUSH2 0x52C PUSH2 0x76B JUMP JUMPDEST PUSH1 0x8 SWAP2 DUP3 DUP3 DIV ADD SWAP2 SWAP1 MOD PUSH1 0x4 MUL PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH4 0xFFFFFFFF AND PUSH32 0x260AAC5B840EDC27B89FDF50E91311A413363A400959466E1049E6D071B8CEE2 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0xFF AND PUSH2 0x26C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x2427A7A5AFA1A7A72224AA24A7A7 PUSH1 0x91 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x335 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 DUP2 ADD PUSH1 0x9 DUP4 LT PUSH2 0x607 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x637 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x120 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x650 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x65F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x100 DUP1 DUP3 ADD DUP3 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x684 JUMPI PUSH2 0x684 PUSH2 0x60D JUMP JUMPDEST PUSH1 0x40 MSTORE DUP5 ADD DUP2 DUP7 DUP3 GT ISZERO PUSH2 0x697 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x6B8 JUMPI PUSH2 0x6AA DUP2 PUSH2 0x623 JUMP JUMPDEST DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x699 JUMP JUMPDEST POP POP DUP2 SWAP4 POP PUSH2 0x6C6 DUP2 PUSH2 0x623 JUMP JUMPDEST SWAP3 POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x6E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x25A DUP3 PUSH2 0x623 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x9 DUP2 LT PUSH2 0x637 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x120 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x70F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x100 DUP4 ADD DUP5 DUP2 GT ISZERO PUSH2 0x721 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 SWAP3 POP PUSH2 0x72D DUP2 PUSH2 0x6EC JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x749 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x25A DUP3 PUSH2 0x6EC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x764 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x7AB JUMPI PUSH2 0x7AB PUSH2 0x781 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x7C4 JUMPI PUSH2 0x7C4 PUSH2 0x781 JUMP JUMPDEST POP SUB SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 AND SELFBALANCE SELFBALANCE DIV LOG1 0xE8 CALLDATACOPY 0xFB LOG3 PUSH8 0xDFA96954AA305D9E PUSH25 0xDA46576577F4F23A2F632145B664736F6C634300080A003300 ",
              "sourceMap": "213:1553:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4765:129:0;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3508:337;;;;;;:::i;:::-;;:::i;468:115:1:-;;;;;;:::i;:::-;;:::i;:::-;;4337:214:0;;;;;;:::i;:::-;;:::i;:::-;;;2498:10:2;2486:23;;;2468:42;;2456:2;2441:18;4337:214:0;2324:192:2;812:139:1;;;;;;:::i;:::-;;:::i;:::-;;;2888:14:2;;2881:22;2863:41;;2851:2;2836:18;812:139:1;2723:187:2;1204:153:1;;;;;;:::i;:::-;;:::i;1430:75::-;;1489:13;;;-1:-1:-1;;1472:30:1;;1489:13;;;;1488:14;1472:30;;;1430:75;2420:49:0;;2459:10;2420:49;;2677:28;;;;;;:::i;:::-;;:::i;321:32:1:-;;;;;;;;;4765:129:0;4834:53;;;;;;;;;;-1:-1:-1;;4834:53:0;;;-1:-1:-1;;4834:53:0;;-1:-1:-1;;4834:53:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4873:12;4834:18;:53::i;:::-;4827:60;;4765:129;:::o;3508:337::-;3654:5;;3675:139;3695:1;3692:2;:4;3675:139;;;3737:12;3750:2;3737:16;;;;;;;:::i;:::-;;;;;3722:31;;:12;:31;;;3718:86;;;3786:2;3780:9;;;;;;;;:::i;:::-;3773:16;;;;;3718:86;3698:4;;;;:::i;:::-;;;;3675:139;;;-1:-1:-1;3836:1:0;3830:8;3823:15;;3508:337;;;;;:::o;468:115:1:-;542:34;560:15;542:17;:34::i;:::-;468:115;:::o;4337:214:0:-;4459:6;;4488;:19;;;;;;;;:::i;:::-;;:56;;4543:1;4488:56;;;4510:12;4538:1;4528:6;4523:12;;;;;;;;:::i;:::-;:16;;;;:::i;:::-;4510:30;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;812:139:1:-;913:4;897:6;5116::0;5098:24;;;;;;;;:::i;:::-;:14;:12;:14::i;:::-;:24;;;;;;;;:::i;:::-;;5090:46;;;;-1:-1:-1;;;5090:46:0;;3836:2:2;5090:46:0;;;3818:21:2;3875:1;3855:18;;;3848:29;-1:-1:-1;;;3893:18:2;;;3886:39;3942:18;;5090:46:0;;;;;;;;;-1:-1:-1;940:4:1::1;::::0;812:139;-1:-1:-1;;812:139:1:o;1204:153::-;1319:4;1303:6;5439::0;5421:24;;;;;;;;:::i;:::-;:14;:12;:14::i;:::-;:24;;;;;;;;:::i;:::-;;;5413:46;;;;-1:-1:-1;;;5413:46:0;;4173:2:2;5413:46:0;;;4155:21:2;4212:1;4192:18;;;4185:29;-1:-1:-1;;;4230:18:2;;;4223:39;4279:18;;5413:46:0;3971:332:2;2677:28:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;5797:609::-;5899:15;5875:39;;5882:12;5875:39;;;;5867:67;;;;-1:-1:-1;;;5867:67:0;;4510:2:2;5867:67:0;;;4492:21:2;4549:2;4529:18;;;4522:30;-1:-1:-1;;;4568:18:2;;;4561:45;4623:18;;5867:67:0;4308:339:2;5867:67:0;2459:10;5952:31;;;;5944:68;;;;-1:-1:-1;;;5944:68:0;;4854:2:2;5944:68:0;;;4836:21:2;4893:2;4873:18;;;4866:30;4932:26;4912:18;;;4905:54;4976:18;;5944:68:0;4652:348:2;5944:68:0;6129:15;6152:14;:12;:14::i;:::-;6147:20;;;;;;;;:::i;:::-;6129:38;;6202:11;6214:10;6202:23;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;6185:40;6177:67;;;;-1:-1:-1;;;6177:67:0;;5207:2:2;6177:67:0;;;5189:21:2;5246:2;5226:18;;;5219:30;-1:-1:-1;;;5265:18:2;;;5258:44;5319:18;;6177:67:0;5005:338:2;6177:67:0;6255:41;6280:15;6255:24;:41::i;:::-;6332:15;6306:11;6318:10;6306:23;;;;;;;:::i;:::-;;;;;;;;;;;;:41;;;;;;;;;;;;;;;;;;6383:15;6363:36;;;;;;;;;;;;5857:549;5797:609;:::o;1538:226:1:-;1668:13;;;;1660:40;;;;-1:-1:-1;;;1660:40:1;;5550:2:2;1660:40:1;;;5532:21:2;5589:2;5569:18;;;5562:30;-1:-1:-1;;;5608:18:2;;;5601:44;5662:18;;1660:40:1;5348:338:2;14:127;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:336;286:2;271:18;;319:1;308:13;;298:144;;364:10;359:3;355:20;352:1;345:31;399:4;396:1;389:15;427:4;424:1;417:15;298:144;451:25;;;146:336;:::o;487:127::-;548:10;543:3;539:20;536:1;529:31;579:4;576:1;569:15;603:4;600:1;593:15;619:163;686:20;;746:10;735:22;;725:33;;715:61;;772:1;769;762:12;715:61;619:163;;;:::o;787:845::-;876:6;884;937:3;925:9;916:7;912:23;908:33;905:53;;;954:1;951;944:12;905:53;1003:7;996:4;985:9;981:20;977:34;967:62;;1025:1;1022;1015:12;967:62;1058:2;1052:9;1080:3;1122:2;1114:6;1110:15;1191:6;1179:10;1176:22;1155:18;1143:10;1140:34;1137:62;1134:88;;;1202:18;;:::i;:::-;1238:2;1231:22;1302:18;;1273:6;1332:19;;;1329:39;;;1364:1;1361;1354:12;1329:39;1388:9;1406:151;1422:6;1417:3;1414:15;1406:151;;;1490:22;1508:3;1490:22;:::i;:::-;1478:35;;1542:4;1533:14;;;;1439;1406:151;;;1410:3;;1576:6;1566:16;;1601:25;1619:6;1601:25;:::i;:::-;1591:35;;;;787:845;;;;;:::o;1637:184::-;1695:6;1748:2;1736:9;1727:7;1723:23;1719:32;1716:52;;;1764:1;1761;1754:12;1716:52;1787:28;1805:9;1787:28;:::i;1826:146::-;1897:20;;1946:1;1936:12;;1926:40;;1962:1;1959;1952:12;1977:342;2077:6;2085;2138:3;2126:9;2117:7;2113:23;2109:33;2106:53;;;2155:1;2152;2145:12;2106:53;2193:3;2182:9;2178:19;2216:7;2212:2;2209:15;2206:35;;;2237:1;2234;2227:12;2206:35;2260:9;2250:19;;2288:25;2310:2;2288:25;:::i;:::-;2278:35;;;1977:342;;;;;:::o;2521:197::-;2588:6;2641:2;2629:9;2620:7;2616:23;2612:32;2609:52;;;2657:1;2654;2647:12;2609:52;2680:32;2702:9;2680:32;:::i;2915:180::-;2974:6;3027:2;3015:9;3006:7;3002:23;2998:32;2995:52;;;3043:1;3040;3033:12;2995:52;-1:-1:-1;3066:23:2;;2915:180;-1:-1:-1;2915:180:2:o;3100:127::-;3161:10;3156:3;3152:20;3149:1;3142:31;3192:4;3189:1;3182:15;3216:4;3213:1;3206:15;3232:127;3293:10;3288:3;3284:20;3281:1;3274:31;3324:4;3321:1;3314:15;3348:4;3345:1;3338:15;3364:135;3403:3;-1:-1:-1;;3424:17:2;;3421:43;;;3444:18;;:::i;:::-;-1:-1:-1;3491:1:2;3480:13;;3364:135::o;3504:125::-;3544:4;3572:1;3569;3566:8;3563:34;;;3577:18;;:::i;:::-;-1:-1:-1;3614:9:2;;3504:125::o"
            },
            "methodIdentifiers": {
              "UNINITIALIZED()": "81e45d9a",
              "blockNumberForPhase(uint32[8],uint8)": "45bdfa8a",
              "currentPhase()": "055ad42e",
              "hookCondition()": "abec2f81",
              "phaseAtBlockNumber(uint32[8],uint32)": "34c1df75",
              "phaseBlocks(uint256)": "9923c94b",
              "runsOnlyAtLeastPhase(uint8)": "6932f6b7",
              "runsOnlyPhase(uint8)": "48a8b7df",
              "testScheduleNextPhase(uint32)": "3bd126dc",
              "toggleHookCondition()": "791f211f"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"newPhaseBlock_\",\"type\":\"uint32\"}],\"name\":\"PhaseShiftScheduled\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UNINITIALIZED\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[8]\",\"name\":\"phaseBlocks_\",\"type\":\"uint32[8]\"},{\"internalType\":\"enum Phase\",\"name\":\"phase_\",\"type\":\"uint8\"}],\"name\":\"blockNumberForPhase\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPhase\",\"outputs\":[{\"internalType\":\"enum Phase\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hookCondition\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[8]\",\"name\":\"phaseBlocks_\",\"type\":\"uint32[8]\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber_\",\"type\":\"uint32\"}],\"name\":\"phaseAtBlockNumber\",\"outputs\":[{\"internalType\":\"enum Phase\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"phaseBlocks\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Phase\",\"name\":\"phase_\",\"type\":\"uint8\"}],\"name\":\"runsOnlyAtLeastPhase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Phase\",\"name\":\"phase_\",\"type\":\"uint8\"}],\"name\":\"runsOnlyPhase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"nextPhaseBlock_\",\"type\":\"uint32\"}],\"name\":\"testScheduleNextPhase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleHookCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"blockNumberForPhase(uint32[8],uint8)\":{\"params\":{\"phaseBlocks_\":\"Fixed array of phase blocks to compare against.\",\"phase_\":\"Determine the relevant block number for this phase.\"},\"returns\":{\"_0\":\"The block number for the phase according to the phase blocks         list, as uint32.\"}},\"phaseAtBlockNumber(uint32[8],uint32)\":{\"params\":{\"blockNumber_\":\"Determine the relevant phase relative to this block number.\",\"phaseBlocks_\":\"Fixed array of phase blocks to compare against.\"},\"returns\":{\"_0\":\"The \\\"current\\\" phase relative to the block number and phase blocks list.\"}},\"runsOnlyAtLeastPhase(uint8)\":{\"params\":{\"phase_\":\"Modifier MUST error if current phase is not AT LEAST `phase_`.\"},\"returns\":{\"_0\":\"Always true if not error.\"}},\"runsOnlyPhase(uint8)\":{\"params\":{\"phase_\":\"Modifier MUST error if current phase is not `phase_`.\"},\"returns\":{\"_0\":\"Always true if not error.\"}},\"testScheduleNextPhase(uint32)\":{\"params\":{\"nextPhaseBlock_\":\"As per `scheduleNextPhase`.\"}}},\"title\":\"PhasedTest Empty contract for tests enumerating behaviour of the `Phased` modifiers.\",\"version\":1},\"userdoc\":{\"events\":{\"PhaseShiftScheduled(uint32)\":{\"notice\":\"`PhaseShiftScheduled` is emitted when the next phase is scheduled.\"}},\"kind\":\"user\",\"methods\":{\"UNINITIALIZED()\":{\"notice\":\"Every phase block starts uninitialized. Only uninitialized blocks can be set by the phase scheduler.\"},\"blockNumberForPhase(uint32[8],uint8)\":{\"notice\":\"Pure function to reduce an array of phase blocks and phase to a specific block number. `Phase.ZERO` will always return block `0`. Every other phase will map to a block number in `phaseBlocks_`.\"},\"currentPhase()\":{\"notice\":\"Impure read-only function to return the \\\"current\\\" phase from internal contract state. Simply wraps `phaseAtBlockNumber` for current values of `phaseBlocks` and `block.number`.\"},\"hookCondition()\":{\"notice\":\"Custom variable for testing the `_beforeScheduleNextPhase` hook\"},\"phaseAtBlockNumber(uint32[8],uint32)\":{\"notice\":\"Pure function to reduce an array of phase blocks and block number to a specific `Phase`. The phase will be the highest attained even if several phases have the same block number. If every phase block is after the block number then `Phase.ZERO` is returned. If every phase block is before the block number then `Phase.EIGHT` is returned.\"},\"phaseBlocks(uint256)\":{\"notice\":\"8 phases each as 32 bits to fit a single 32 byte word.\"},\"runsOnlyAtLeastPhase(uint8)\":{\"notice\":\"This function wraps `onlyAtLeastPhase` modifier, passing phase directly into modifier argument.\"},\"runsOnlyPhase(uint8)\":{\"notice\":\"This function wraps `onlyPhase` modifier, passing phase directly into modifier argument.\"},\"testScheduleNextPhase(uint32)\":{\"notice\":\"Exposes `scheduleNextPhase` for testing.\"},\"toggleHookCondition()\":{\"notice\":\"Toggles `hookCondition` for testing phase scheduling hook.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/PhasedTest.sol\":\"PhasedTest\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/phased/Phased.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity ^0.8.10;\\n\\n/// Defines all possible phases.\\n/// `Phased` begins in `Phase.ZERO` and moves through each phase sequentially.\\nenum Phase {\\n    ZERO,\\n    ONE,\\n    TWO,\\n    THREE,\\n    FOUR,\\n    FIVE,\\n    SIX,\\n    SEVEN,\\n    EIGHT\\n}\\n\\n/// @title Phased\\n/// @notice `Phased` is an abstract contract that defines up to `9` phases that\\n/// an implementing contract moves through.\\n///\\n/// `Phase.ZERO` is always the first phase and does not, and cannot, be set\\n/// expicitly. Effectively it is implied that `Phase.ZERO` has been active\\n/// since block zero.\\n///\\n/// Each subsequent phase `Phase.ONE` through `Phase.EIGHT` must be\\n/// scheduled sequentially and explicitly at a block number.\\n///\\n/// Only the immediate next phase can be scheduled with `scheduleNextPhase`,\\n/// it is not possible to schedule multiple phases ahead.\\n///\\n/// Multiple phases can be scheduled in a single block if each scheduled phase\\n/// is scheduled for the current block.\\n///\\n/// Several utility functions and modifiers are provided.\\n///\\n/// A single hook `_beforeScheduleNextPhase` is provided so contracts can\\n/// implement additional phase shift checks.\\n///\\n/// One event `PhaseShiftScheduled` is emitted each time a phase shift is\\n/// scheduled (not when the scheduled phase is reached).\\n///\\n/// @dev `Phased` contracts have a defined timeline with available\\n/// functionality grouped into phases.\\n/// Every `Phased` contract starts at `Phase.ZERO` and moves sequentially\\n/// through phases `ONE` to `EIGHT`.\\n/// Every `Phase` other than `Phase.ZERO` is optional, there is no requirement\\n/// that all 9 phases are implemented.\\n/// Phases can never be revisited, the inheriting contract always moves through\\n/// each achieved phase linearly.\\n/// This is enforced by only allowing `scheduleNextPhase` to be called once per\\n/// phase.\\n/// It is possible to call `scheduleNextPhase` several times in a single block\\n/// but the `block.number` for each phase must be reached each time to schedule\\n/// the next phase.\\n/// Importantly there are events and several modifiers and checks available to\\n/// ensure that functionality is limited to the current phase.\\n/// The full history of each phase shift block is recorded as a fixed size\\n/// array of `uint32`.\\nabstract contract Phased {\\n    /// Every phase block starts uninitialized.\\n    /// Only uninitialized blocks can be set by the phase scheduler.\\n    uint32 public constant UNINITIALIZED = 0xFFFFFFFF;\\n\\n    /// `PhaseShiftScheduled` is emitted when the next phase is scheduled.\\n    event PhaseShiftScheduled(uint32 indexed newPhaseBlock_);\\n\\n    /// 8 phases each as 32 bits to fit a single 32 byte word.\\n    uint32[8] public phaseBlocks;\\n\\n    constructor() {\\n        for (uint256 i_ = 0; i_ < 8; i_++) {\\n            phaseBlocks[i_] = UNINITIALIZED;\\n        }\\n    }\\n\\n    /// Pure function to reduce an array of phase blocks and block number to a\\n    /// specific `Phase`.\\n    /// The phase will be the highest attained even if several phases have the\\n    /// same block number.\\n    /// If every phase block is after the block number then `Phase.ZERO` is\\n    /// returned.\\n    /// If every phase block is before the block number then `Phase.EIGHT` is\\n    /// returned.\\n    /// @param phaseBlocks_ Fixed array of phase blocks to compare against.\\n    /// @param blockNumber_ Determine the relevant phase relative to this block\\n    /// number.\\n    /// @return The \\\"current\\\" phase relative to the block number and phase\\n    /// blocks list.\\n    function phaseAtBlockNumber(\\n        uint32[8] memory phaseBlocks_,\\n        uint32 blockNumber_\\n    )\\n        public\\n        pure\\n        returns(Phase)\\n    {\\n        for(uint i_ = 0; i_<8; i_++) {\\n            if (blockNumber_ < phaseBlocks_[i_]) {\\n                return Phase(i_);\\n            }\\n        }\\n        return Phase(8);\\n    }\\n\\n    /// Pure function to reduce an array of phase blocks and phase to a\\n    /// specific block number.\\n    /// `Phase.ZERO` will always return block `0`.\\n    /// Every other phase will map to a block number in `phaseBlocks_`.\\n    /// @param phaseBlocks_ Fixed array of phase blocks to compare against.\\n    /// @param phase_ Determine the relevant block number for this phase.\\n    /// @return The block number for the phase according to the phase blocks\\n    ///         list, as uint32.\\n    function blockNumberForPhase(uint32[8] calldata phaseBlocks_, Phase phase_)\\n        external\\n        pure\\n        returns(uint32)\\n    {\\n        return phase_ > Phase.ZERO ? phaseBlocks_[uint(phase_) - 1] : 0;\\n    }\\n\\n    /// Impure read-only function to return the \\\"current\\\" phase from internal\\n    /// contract state.\\n    /// Simply wraps `phaseAtBlockNumber` for current values of `phaseBlocks`\\n    /// and `block.number`.\\n    function currentPhase() public view returns (Phase) {\\n        return phaseAtBlockNumber(phaseBlocks, uint32(block.number));\\n    }\\n\\n    /// Modifies functions to only be callable in a specific phase.\\n    /// @param phase_ Modified functions can only be called during this phase.\\n    modifier onlyPhase(Phase phase_) {\\n        require(currentPhase() == phase_, \\\"BAD_PHASE\\\");\\n        _;\\n    }\\n\\n    /// Modifies functions to only be callable in a specific phase OR if the\\n    /// specified phase has passed.\\n    /// @param phase_ Modified function only callable during or after this\\n    /// phase.\\n    modifier onlyAtLeastPhase(Phase phase_) {\\n        require(currentPhase() >= phase_, \\\"MIN_PHASE\\\");\\n        _;\\n    }\\n\\n    /// Writes the block for the next phase.\\n    /// Only uninitialized blocks can be written to.\\n    /// Only the immediate next phase relative to `currentPhase` can be written\\n    /// to.\\n    /// Emits `PhaseShiftScheduled` with the next phase block.\\n    /// @param nextPhaseBlock_ The block for the next phase.\\n    function scheduleNextPhase(uint32 nextPhaseBlock_) internal {\\n        require(uint32(block.number) <= nextPhaseBlock_, \\\"NEXT_BLOCK_PAST\\\");\\n        require(nextPhaseBlock_ < UNINITIALIZED, \\\"NEXT_BLOCK_UNINITIALIZED\\\");\\n\\n        // The next index is the current phase because `Phase.ZERO` doesn't\\n        // exist as an index.\\n        uint nextIndex_ = uint(currentPhase());\\n        require(UNINITIALIZED == phaseBlocks[nextIndex_], \\\"NEXT_BLOCK_SET\\\");\\n\\n        _beforeScheduleNextPhase(nextPhaseBlock_);\\n        phaseBlocks[nextIndex_] = nextPhaseBlock_;\\n\\n        emit PhaseShiftScheduled(nextPhaseBlock_);\\n    }\\n\\n    /// Hook called before scheduling the next phase.\\n    /// Useful to apply additional constraints or state changes on a phase\\n    /// change.\\n    /// Note this is called when scheduling the phase change, not on the block\\n    /// the phase change occurs.\\n    /// This is called before the phase change so that all functionality that\\n    /// is behind a phase gate is still available at the moment of applying the\\n    /// hook for scheduling the next phase.\\n    /// @param nextPhaseBlock_ The block for the next phase.\\n    function _beforeScheduleNextPhase(uint32 nextPhaseBlock_)\\n        internal\\n        virtual\\n    { } //solhint-disable-line no-empty-blocks\\n}\",\"keccak256\":\"0x6c26a8991dcb75287a88b08639b7680f099259a0bbde2eff014ae405bf2c1132\",\"license\":\"CAL\"},\"contracts/test/PhasedTest.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity ^0.8.10;\\n\\nimport { Phase, Phased } from \\\"../phased/Phased.sol\\\";\\n\\n/// @title PhasedTest\\n/// Empty contract for tests enumerating behaviour of the `Phased` modifiers.\\ncontract PhasedTest is Phased {\\n    /// Custom variable for testing the `_beforeScheduleNextPhase` hook\\n    bool public hookCondition = true;\\n\\n    /// Exposes `scheduleNextPhase` for testing.\\n    /// @param nextPhaseBlock_ As per `scheduleNextPhase`.\\n    function testScheduleNextPhase(uint32 nextPhaseBlock_) external {\\n        scheduleNextPhase(nextPhaseBlock_);\\n    }\\n\\n    /// This function wraps `onlyPhase` modifier, passing phase directly into\\n    /// modifier argument.\\n    /// @param phase_ Modifier MUST error if current phase is not `phase_`.\\n    /// @return Always true if not error.\\n    function runsOnlyPhase(Phase phase_)\\n        external\\n        view\\n        onlyPhase(phase_) returns(bool)\\n    {\\n        return true;\\n    }\\n\\n    /// This function wraps `onlyAtLeastPhase` modifier, passing phase directly\\n    /// into modifier argument.\\n    /// @param phase_ Modifier MUST error if current phase is not AT LEAST\\n    /// `phase_`.\\n    /// @return Always true if not error.\\n    function runsOnlyAtLeastPhase(Phase phase_)\\n        external\\n        view\\n        onlyAtLeastPhase(phase_) returns(bool)\\n    {\\n        return true;\\n    }\\n\\n    /// Toggles `hookCondition` for testing phase scheduling hook.\\n    function toggleHookCondition() external { hookCondition = !hookCondition; }\\n\\n    /// @inheritdoc Phased\\n    function _beforeScheduleNextPhase(uint32 nextPhaseBlock_)\\n        internal\\n        virtual\\n        override\\n    {\\n        require(hookCondition, \\\"HOOK_CONDITION\\\");\\n        super._beforeScheduleNextPhase(nextPhaseBlock_);\\n    }\\n}\",\"keccak256\":\"0xd6e91a22969abd2b47b961ed067b73f3d5260dc90a7145dc9248225ccd364db6\",\"license\":\"CAL\"}},\"version\":1}"
        }
      }
    },
    "sources": {
      "contracts/phased/Phased.sol": {
        "ast": {
          "absolutePath": "contracts/phased/Phased.sol",
          "exportedSymbols": {
            "Phase": [
              11
            ],
            "Phased": [
              231
            ]
          },
          "id": 232,
          "license": "CAL",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".10"
              ],
              "nodeType": "PragmaDirective",
              "src": "32:24:0"
            },
            {
              "canonicalName": "Phase",
              "id": 11,
              "members": [
                {
                  "id": 2,
                  "name": "ZERO",
                  "nameLocation": "187:4:0",
                  "nodeType": "EnumValue",
                  "src": "187:4:0"
                },
                {
                  "id": 3,
                  "name": "ONE",
                  "nameLocation": "197:3:0",
                  "nodeType": "EnumValue",
                  "src": "197:3:0"
                },
                {
                  "id": 4,
                  "name": "TWO",
                  "nameLocation": "206:3:0",
                  "nodeType": "EnumValue",
                  "src": "206:3:0"
                },
                {
                  "id": 5,
                  "name": "THREE",
                  "nameLocation": "215:5:0",
                  "nodeType": "EnumValue",
                  "src": "215:5:0"
                },
                {
                  "id": 6,
                  "name": "FOUR",
                  "nameLocation": "226:4:0",
                  "nodeType": "EnumValue",
                  "src": "226:4:0"
                },
                {
                  "id": 7,
                  "name": "FIVE",
                  "nameLocation": "236:4:0",
                  "nodeType": "EnumValue",
                  "src": "236:4:0"
                },
                {
                  "id": 8,
                  "name": "SIX",
                  "nameLocation": "246:3:0",
                  "nodeType": "EnumValue",
                  "src": "246:3:0"
                },
                {
                  "id": 9,
                  "name": "SEVEN",
                  "nameLocation": "255:5:0",
                  "nodeType": "EnumValue",
                  "src": "255:5:0"
                },
                {
                  "id": 10,
                  "name": "EIGHT",
                  "nameLocation": "266:5:0",
                  "nodeType": "EnumValue",
                  "src": "266:5:0"
                }
              ],
              "name": "Phase",
              "nameLocation": "175:5:0",
              "nodeType": "EnumDefinition",
              "src": "170:103:0"
            },
            {
              "abstract": true,
              "baseContracts": [],
              "canonicalName": "Phased",
              "contractDependencies": [],
              "contractKind": "contract",
              "documentation": {
                "id": 12,
                "nodeType": "StructuredDocumentation",
                "src": "275:1997:0",
                "text": "@title Phased\n @notice `Phased` is an abstract contract that defines up to `9` phases that\n an implementing contract moves through.\n `Phase.ZERO` is always the first phase and does not, and cannot, be set\n expicitly. Effectively it is implied that `Phase.ZERO` has been active\n since block zero.\n Each subsequent phase `Phase.ONE` through `Phase.EIGHT` must be\n scheduled sequentially and explicitly at a block number.\n Only the immediate next phase can be scheduled with `scheduleNextPhase`,\n it is not possible to schedule multiple phases ahead.\n Multiple phases can be scheduled in a single block if each scheduled phase\n is scheduled for the current block.\n Several utility functions and modifiers are provided.\n A single hook `_beforeScheduleNextPhase` is provided so contracts can\n implement additional phase shift checks.\n One event `PhaseShiftScheduled` is emitted each time a phase shift is\n scheduled (not when the scheduled phase is reached).\n @dev `Phased` contracts have a defined timeline with available\n functionality grouped into phases.\n Every `Phased` contract starts at `Phase.ZERO` and moves sequentially\n through phases `ONE` to `EIGHT`.\n Every `Phase` other than `Phase.ZERO` is optional, there is no requirement\n that all 9 phases are implemented.\n Phases can never be revisited, the inheriting contract always moves through\n each achieved phase linearly.\n This is enforced by only allowing `scheduleNextPhase` to be called once per\n phase.\n It is possible to call `scheduleNextPhase` several times in a single block\n but the `block.number` for each phase must be reached each time to schedule\n the next phase.\n Importantly there are events and several modifiers and checks available to\n ensure that functionality is limited to the current phase.\n The full history of each phase shift block is recorded as a fixed size\n array of `uint32`."
              },
              "fullyImplemented": true,
              "id": 231,
              "linearizedBaseContracts": [
                231
              ],
              "name": "Phased",
              "nameLocation": "2290:6:0",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": true,
                  "documentation": {
                    "id": 13,
                    "nodeType": "StructuredDocumentation",
                    "src": "2303:112:0",
                    "text": "Every phase block starts uninitialized.\n Only uninitialized blocks can be set by the phase scheduler."
                  },
                  "functionSelector": "81e45d9a",
                  "id": 16,
                  "mutability": "constant",
                  "name": "UNINITIALIZED",
                  "nameLocation": "2443:13:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 231,
                  "src": "2420:49:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint32",
                    "typeString": "uint32"
                  },
                  "typeName": {
                    "id": 14,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "2420:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    }
                  },
                  "value": {
                    "hexValue": "30784646464646464646",
                    "id": 15,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "2459:10:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_4294967295_by_1",
                      "typeString": "int_const 4294967295"
                    },
                    "value": "0xFFFFFFFF"
                  },
                  "visibility": "public"
                },
                {
                  "anonymous": false,
                  "documentation": {
                    "id": 17,
                    "nodeType": "StructuredDocumentation",
                    "src": "2476:70:0",
                    "text": "`PhaseShiftScheduled` is emitted when the next phase is scheduled."
                  },
                  "id": 21,
                  "name": "PhaseShiftScheduled",
                  "nameLocation": "2557:19:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 20,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 19,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "newPhaseBlock_",
                        "nameLocation": "2592:14:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 21,
                        "src": "2577:29:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 18,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "2577:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2576:31:0"
                  },
                  "src": "2551:57:0"
                },
                {
                  "constant": false,
                  "documentation": {
                    "id": 22,
                    "nodeType": "StructuredDocumentation",
                    "src": "2614:58:0",
                    "text": "8 phases each as 32 bits to fit a single 32 byte word."
                  },
                  "functionSelector": "9923c94b",
                  "id": 26,
                  "mutability": "mutable",
                  "name": "phaseBlocks",
                  "nameLocation": "2694:11:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 231,
                  "src": "2677:28:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint32_$8_storage",
                    "typeString": "uint32[8]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 23,
                      "name": "uint32",
                      "nodeType": "ElementaryTypeName",
                      "src": "2677:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint32",
                        "typeString": "uint32"
                      }
                    },
                    "id": 25,
                    "length": {
                      "hexValue": "38",
                      "id": 24,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2684:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_8_by_1",
                        "typeString": "int_const 8"
                      },
                      "value": "8"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "2677:9:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint32_$8_storage_ptr",
                      "typeString": "uint32[8]"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 47,
                    "nodeType": "Block",
                    "src": "2726:107:0",
                    "statements": [
                      {
                        "body": {
                          "id": 45,
                          "nodeType": "Block",
                          "src": "2771:56:0",
                          "statements": [
                            {
                              "expression": {
                                "id": 43,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "baseExpression": {
                                    "id": 39,
                                    "name": "phaseBlocks",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 26,
                                    "src": "2785:11:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_uint32_$8_storage",
                                      "typeString": "uint32[8] storage ref"
                                    }
                                  },
                                  "id": 41,
                                  "indexExpression": {
                                    "id": 40,
                                    "name": "i_",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 30,
                                    "src": "2797:2:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "nodeType": "IndexAccess",
                                  "src": "2785:15:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint32",
                                    "typeString": "uint32"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "id": 42,
                                  "name": "UNINITIALIZED",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 16,
                                  "src": "2803:13:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint32",
                                    "typeString": "uint32"
                                  }
                                },
                                "src": "2785:31:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint32",
                                  "typeString": "uint32"
                                }
                              },
                              "id": 44,
                              "nodeType": "ExpressionStatement",
                              "src": "2785:31:0"
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 35,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 33,
                            "name": "i_",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 30,
                            "src": "2757:2:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "hexValue": "38",
                            "id": 34,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2762:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_8_by_1",
                              "typeString": "int_const 8"
                            },
                            "value": "8"
                          },
                          "src": "2757:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 46,
                        "initializationExpression": {
                          "assignments": [
                            30
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 30,
                              "mutability": "mutable",
                              "name": "i_",
                              "nameLocation": "2749:2:0",
                              "nodeType": "VariableDeclaration",
                              "scope": 46,
                              "src": "2741:10:0",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "typeName": {
                                "id": 29,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "2741:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "visibility": "internal"
                            }
                          ],
                          "id": 32,
                          "initialValue": {
                            "hexValue": "30",
                            "id": 31,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2754:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "2741:14:0"
                        },
                        "loopExpression": {
                          "expression": {
                            "id": 37,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "++",
                            "prefix": false,
                            "src": "2765:4:0",
                            "subExpression": {
                              "id": 36,
                              "name": "i_",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 30,
                              "src": "2765:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 38,
                          "nodeType": "ExpressionStatement",
                          "src": "2765:4:0"
                        },
                        "nodeType": "ForStatement",
                        "src": "2736:91:0"
                      }
                    ]
                  },
                  "id": 48,
                  "implemented": true,
                  "kind": "constructor",
                  "modifiers": [],
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 27,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2723:2:0"
                  },
                  "returnParameters": {
                    "id": 28,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2726:0:0"
                  },
                  "scope": 231,
                  "src": "2712:121:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 88,
                    "nodeType": "Block",
                    "src": "3665:180:0",
                    "statements": [
                      {
                        "body": {
                          "id": 82,
                          "nodeType": "Block",
                          "src": "3704:110:0",
                          "statements": [
                            {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_uint32",
                                  "typeString": "uint32"
                                },
                                "id": 75,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 71,
                                  "name": "blockNumber_",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 55,
                                  "src": "3722:12:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint32",
                                    "typeString": "uint32"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "<",
                                "rightExpression": {
                                  "baseExpression": {
                                    "id": 72,
                                    "name": "phaseBlocks_",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 53,
                                    "src": "3737:12:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_uint32_$8_memory_ptr",
                                      "typeString": "uint32[8] memory"
                                    }
                                  },
                                  "id": 74,
                                  "indexExpression": {
                                    "id": 73,
                                    "name": "i_",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 62,
                                    "src": "3750:2:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "3737:16:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint32",
                                    "typeString": "uint32"
                                  }
                                },
                                "src": "3722:31:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 81,
                              "nodeType": "IfStatement",
                              "src": "3718:86:0",
                              "trueBody": {
                                "id": 80,
                                "nodeType": "Block",
                                "src": "3755:49:0",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "id": 77,
                                          "name": "i_",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 62,
                                          "src": "3786:2:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        ],
                                        "id": 76,
                                        "name": "Phase",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 11,
                                        "src": "3780:5:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_enum$_Phase_$11_$",
                                          "typeString": "type(enum Phase)"
                                        }
                                      },
                                      "id": 78,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "typeConversion",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "3780:9:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_enum$_Phase_$11",
                                        "typeString": "enum Phase"
                                      }
                                    },
                                    "functionReturnParameters": 60,
                                    "id": 79,
                                    "nodeType": "Return",
                                    "src": "3773:16:0"
                                  }
                                ]
                              }
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 67,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 65,
                            "name": "i_",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 62,
                            "src": "3692:2:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "hexValue": "38",
                            "id": 66,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3695:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_8_by_1",
                              "typeString": "int_const 8"
                            },
                            "value": "8"
                          },
                          "src": "3692:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 83,
                        "initializationExpression": {
                          "assignments": [
                            62
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 62,
                              "mutability": "mutable",
                              "name": "i_",
                              "nameLocation": "3684:2:0",
                              "nodeType": "VariableDeclaration",
                              "scope": 83,
                              "src": "3679:7:0",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "typeName": {
                                "id": 61,
                                "name": "uint",
                                "nodeType": "ElementaryTypeName",
                                "src": "3679:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "visibility": "internal"
                            }
                          ],
                          "id": 64,
                          "initialValue": {
                            "hexValue": "30",
                            "id": 63,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3689:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "3679:11:0"
                        },
                        "loopExpression": {
                          "expression": {
                            "id": 69,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "++",
                            "prefix": false,
                            "src": "3698:4:0",
                            "subExpression": {
                              "id": 68,
                              "name": "i_",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 62,
                              "src": "3698:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 70,
                          "nodeType": "ExpressionStatement",
                          "src": "3698:4:0"
                        },
                        "nodeType": "ForStatement",
                        "src": "3675:139:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "hexValue": "38",
                              "id": 85,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3836:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_8_by_1",
                                "typeString": "int_const 8"
                              },
                              "value": "8"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_8_by_1",
                                "typeString": "int_const 8"
                              }
                            ],
                            "id": 84,
                            "name": "Phase",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 11,
                            "src": "3830:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_Phase_$11_$",
                              "typeString": "type(enum Phase)"
                            }
                          },
                          "id": 86,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3830:8:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Phase_$11",
                            "typeString": "enum Phase"
                          }
                        },
                        "functionReturnParameters": 60,
                        "id": 87,
                        "nodeType": "Return",
                        "src": "3823:15:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 49,
                    "nodeType": "StructuredDocumentation",
                    "src": "2839:664:0",
                    "text": "Pure function to reduce an array of phase blocks and block number to a\n specific `Phase`.\n The phase will be the highest attained even if several phases have the\n same block number.\n If every phase block is after the block number then `Phase.ZERO` is\n returned.\n If every phase block is before the block number then `Phase.EIGHT` is\n returned.\n @param phaseBlocks_ Fixed array of phase blocks to compare against.\n @param blockNumber_ Determine the relevant phase relative to this block\n number.\n @return The \"current\" phase relative to the block number and phase\n blocks list."
                  },
                  "functionSelector": "34c1df75",
                  "id": 89,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "phaseAtBlockNumber",
                  "nameLocation": "3517:18:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 56,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 53,
                        "mutability": "mutable",
                        "name": "phaseBlocks_",
                        "nameLocation": "3562:12:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 89,
                        "src": "3545:29:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint32_$8_memory_ptr",
                          "typeString": "uint32[8]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 50,
                            "name": "uint32",
                            "nodeType": "ElementaryTypeName",
                            "src": "3545:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            }
                          },
                          "id": 52,
                          "length": {
                            "hexValue": "38",
                            "id": 51,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3552:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_8_by_1",
                              "typeString": "int_const 8"
                            },
                            "value": "8"
                          },
                          "nodeType": "ArrayTypeName",
                          "src": "3545:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint32_$8_storage_ptr",
                            "typeString": "uint32[8]"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 55,
                        "mutability": "mutable",
                        "name": "blockNumber_",
                        "nameLocation": "3591:12:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 89,
                        "src": "3584:19:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 54,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "3584:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3535:74:0"
                  },
                  "returnParameters": {
                    "id": 60,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 59,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 89,
                        "src": "3654:5:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Phase_$11",
                          "typeString": "enum Phase"
                        },
                        "typeName": {
                          "id": 58,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 57,
                            "name": "Phase",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 11,
                            "src": "3654:5:0"
                          },
                          "referencedDeclaration": 11,
                          "src": "3654:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Phase_$11",
                            "typeString": "enum Phase"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3653:7:0"
                  },
                  "scope": 231,
                  "src": "3508:337:0",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 117,
                    "nodeType": "Block",
                    "src": "4471:80:0",
                    "statements": [
                      {
                        "expression": {
                          "condition": {
                            "commonType": {
                              "typeIdentifier": "t_enum$_Phase_$11",
                              "typeString": "enum Phase"
                            },
                            "id": 105,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 102,
                              "name": "phase_",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 97,
                              "src": "4488:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_Phase_$11",
                                "typeString": "enum Phase"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">",
                            "rightExpression": {
                              "expression": {
                                "id": 103,
                                "name": "Phase",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 11,
                                "src": "4497:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_enum$_Phase_$11_$",
                                  "typeString": "type(enum Phase)"
                                }
                              },
                              "id": 104,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberName": "ZERO",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 2,
                              "src": "4497:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_Phase_$11",
                                "typeString": "enum Phase"
                              }
                            },
                            "src": "4488:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "falseExpression": {
                            "hexValue": "30",
                            "id": 114,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "4543:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "id": 115,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "Conditional",
                          "src": "4488:56:0",
                          "trueExpression": {
                            "baseExpression": {
                              "id": 106,
                              "name": "phaseBlocks_",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 94,
                              "src": "4510:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint32_$8_calldata_ptr",
                                "typeString": "uint32[8] calldata"
                              }
                            },
                            "id": 113,
                            "indexExpression": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 112,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "arguments": [
                                  {
                                    "id": 109,
                                    "name": "phase_",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 97,
                                    "src": "4528:6:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_enum$_Phase_$11",
                                      "typeString": "enum Phase"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_enum$_Phase_$11",
                                      "typeString": "enum Phase"
                                    }
                                  ],
                                  "id": 108,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "4523:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_uint256_$",
                                    "typeString": "type(uint256)"
                                  },
                                  "typeName": {
                                    "id": 107,
                                    "name": "uint",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "4523:4:0",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 110,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "4523:12:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "-",
                              "rightExpression": {
                                "hexValue": "31",
                                "id": 111,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "4538:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_1_by_1",
                                  "typeString": "int_const 1"
                                },
                                "value": "1"
                              },
                              "src": "4523:16:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "4510:30:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "functionReturnParameters": 101,
                        "id": 116,
                        "nodeType": "Return",
                        "src": "4481:63:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 90,
                    "nodeType": "StructuredDocumentation",
                    "src": "3851:481:0",
                    "text": "Pure function to reduce an array of phase blocks and phase to a\n specific block number.\n `Phase.ZERO` will always return block `0`.\n Every other phase will map to a block number in `phaseBlocks_`.\n @param phaseBlocks_ Fixed array of phase blocks to compare against.\n @param phase_ Determine the relevant block number for this phase.\n @return The block number for the phase according to the phase blocks\n         list, as uint32."
                  },
                  "functionSelector": "45bdfa8a",
                  "id": 118,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "blockNumberForPhase",
                  "nameLocation": "4346:19:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 98,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 94,
                        "mutability": "mutable",
                        "name": "phaseBlocks_",
                        "nameLocation": "4385:12:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 118,
                        "src": "4366:31:0",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint32_$8_calldata_ptr",
                          "typeString": "uint32[8]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 91,
                            "name": "uint32",
                            "nodeType": "ElementaryTypeName",
                            "src": "4366:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            }
                          },
                          "id": 93,
                          "length": {
                            "hexValue": "38",
                            "id": 92,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "4373:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_8_by_1",
                              "typeString": "int_const 8"
                            },
                            "value": "8"
                          },
                          "nodeType": "ArrayTypeName",
                          "src": "4366:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint32_$8_storage_ptr",
                            "typeString": "uint32[8]"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 97,
                        "mutability": "mutable",
                        "name": "phase_",
                        "nameLocation": "4405:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 118,
                        "src": "4399:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Phase_$11",
                          "typeString": "enum Phase"
                        },
                        "typeName": {
                          "id": 96,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 95,
                            "name": "Phase",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 11,
                            "src": "4399:5:0"
                          },
                          "referencedDeclaration": 11,
                          "src": "4399:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Phase_$11",
                            "typeString": "enum Phase"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4365:47:0"
                  },
                  "returnParameters": {
                    "id": 101,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 100,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 118,
                        "src": "4459:6:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 99,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "4459:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4458:8:0"
                  },
                  "scope": 231,
                  "src": "4337:214:0",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 134,
                    "nodeType": "Block",
                    "src": "4817:77:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 126,
                              "name": "phaseBlocks",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 26,
                              "src": "4853:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint32_$8_storage",
                                "typeString": "uint32[8] storage ref"
                              }
                            },
                            {
                              "arguments": [
                                {
                                  "expression": {
                                    "id": 129,
                                    "name": "block",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -4,
                                    "src": "4873:5:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_block",
                                      "typeString": "block"
                                    }
                                  },
                                  "id": 130,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "number",
                                  "nodeType": "MemberAccess",
                                  "src": "4873:12:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "id": 128,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "4866:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_uint32_$",
                                  "typeString": "type(uint32)"
                                },
                                "typeName": {
                                  "id": 127,
                                  "name": "uint32",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "4866:6:0",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 131,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "4866:20:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_array$_t_uint32_$8_storage",
                                "typeString": "uint32[8] storage ref"
                              },
                              {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            ],
                            "id": 125,
                            "name": "phaseAtBlockNumber",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 89,
                            "src": "4834:18:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_array$_t_uint32_$8_memory_ptr_$_t_uint32_$returns$_t_enum$_Phase_$11_$",
                              "typeString": "function (uint32[8] memory,uint32) pure returns (enum Phase)"
                            }
                          },
                          "id": 132,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4834:53:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Phase_$11",
                            "typeString": "enum Phase"
                          }
                        },
                        "functionReturnParameters": 124,
                        "id": 133,
                        "nodeType": "Return",
                        "src": "4827:60:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 119,
                    "nodeType": "StructuredDocumentation",
                    "src": "4557:203:0",
                    "text": "Impure read-only function to return the \"current\" phase from internal\n contract state.\n Simply wraps `phaseAtBlockNumber` for current values of `phaseBlocks`\n and `block.number`."
                  },
                  "functionSelector": "055ad42e",
                  "id": 135,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "currentPhase",
                  "nameLocation": "4774:12:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 120,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "4786:2:0"
                  },
                  "returnParameters": {
                    "id": 124,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 123,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 135,
                        "src": "4810:5:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Phase_$11",
                          "typeString": "enum Phase"
                        },
                        "typeName": {
                          "id": 122,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 121,
                            "name": "Phase",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 11,
                            "src": "4810:5:0"
                          },
                          "referencedDeclaration": 11,
                          "src": "4810:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Phase_$11",
                            "typeString": "enum Phase"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4809:7:0"
                  },
                  "scope": 231,
                  "src": "4765:129:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 150,
                    "nodeType": "Block",
                    "src": "5080:74:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_enum$_Phase_$11",
                                "typeString": "enum Phase"
                              },
                              "id": 145,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "arguments": [],
                                "expression": {
                                  "argumentTypes": [],
                                  "id": 142,
                                  "name": "currentPhase",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 135,
                                  "src": "5098:12:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_view$__$returns$_t_enum$_Phase_$11_$",
                                    "typeString": "function () view returns (enum Phase)"
                                  }
                                },
                                "id": 143,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "5098:14:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_Phase_$11",
                                  "typeString": "enum Phase"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "id": 144,
                                "name": "phase_",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 139,
                                "src": "5116:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_Phase_$11",
                                  "typeString": "enum Phase"
                                }
                              },
                              "src": "5098:24:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4241445f5048415345",
                              "id": 146,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5124:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_460d936037af6f084413e1d4c45db1657b0617ff837d28b75b2f52bf7fde6e4d",
                                "typeString": "literal_string \"BAD_PHASE\""
                              },
                              "value": "BAD_PHASE"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_460d936037af6f084413e1d4c45db1657b0617ff837d28b75b2f52bf7fde6e4d",
                                "typeString": "literal_string \"BAD_PHASE\""
                              }
                            ],
                            "id": 141,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "5090:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 147,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5090:46:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 148,
                        "nodeType": "ExpressionStatement",
                        "src": "5090:46:0"
                      },
                      {
                        "id": 149,
                        "nodeType": "PlaceholderStatement",
                        "src": "5146:1:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 136,
                    "nodeType": "StructuredDocumentation",
                    "src": "4900:142:0",
                    "text": "Modifies functions to only be callable in a specific phase.\n @param phase_ Modified functions can only be called during this phase."
                  },
                  "id": 151,
                  "name": "onlyPhase",
                  "nameLocation": "5056:9:0",
                  "nodeType": "ModifierDefinition",
                  "parameters": {
                    "id": 140,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 139,
                        "mutability": "mutable",
                        "name": "phase_",
                        "nameLocation": "5072:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 151,
                        "src": "5066:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Phase_$11",
                          "typeString": "enum Phase"
                        },
                        "typeName": {
                          "id": 138,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 137,
                            "name": "Phase",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 11,
                            "src": "5066:5:0"
                          },
                          "referencedDeclaration": 11,
                          "src": "5066:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Phase_$11",
                            "typeString": "enum Phase"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5065:14:0"
                  },
                  "src": "5047:107:0",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 166,
                    "nodeType": "Block",
                    "src": "5403:74:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_enum$_Phase_$11",
                                "typeString": "enum Phase"
                              },
                              "id": 161,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "arguments": [],
                                "expression": {
                                  "argumentTypes": [],
                                  "id": 158,
                                  "name": "currentPhase",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 135,
                                  "src": "5421:12:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_view$__$returns$_t_enum$_Phase_$11_$",
                                    "typeString": "function () view returns (enum Phase)"
                                  }
                                },
                                "id": 159,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "5421:14:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_Phase_$11",
                                  "typeString": "enum Phase"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">=",
                              "rightExpression": {
                                "id": 160,
                                "name": "phase_",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 155,
                                "src": "5439:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_Phase_$11",
                                  "typeString": "enum Phase"
                                }
                              },
                              "src": "5421:24:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4d494e5f5048415345",
                              "id": 162,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5447:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_a6faa6dc69c946102821aa8607dffd36582e9c884a9969c7de9607157030e075",
                                "typeString": "literal_string \"MIN_PHASE\""
                              },
                              "value": "MIN_PHASE"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_a6faa6dc69c946102821aa8607dffd36582e9c884a9969c7de9607157030e075",
                                "typeString": "literal_string \"MIN_PHASE\""
                              }
                            ],
                            "id": 157,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "5413:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 163,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5413:46:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 164,
                        "nodeType": "ExpressionStatement",
                        "src": "5413:46:0"
                      },
                      {
                        "id": 165,
                        "nodeType": "PlaceholderStatement",
                        "src": "5469:1:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 152,
                    "nodeType": "StructuredDocumentation",
                    "src": "5160:198:0",
                    "text": "Modifies functions to only be callable in a specific phase OR if the\n specified phase has passed.\n @param phase_ Modified function only callable during or after this\n phase."
                  },
                  "id": 167,
                  "name": "onlyAtLeastPhase",
                  "nameLocation": "5372:16:0",
                  "nodeType": "ModifierDefinition",
                  "parameters": {
                    "id": 156,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 155,
                        "mutability": "mutable",
                        "name": "phase_",
                        "nameLocation": "5395:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 167,
                        "src": "5389:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Phase_$11",
                          "typeString": "enum Phase"
                        },
                        "typeName": {
                          "id": 154,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 153,
                            "name": "Phase",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 11,
                            "src": "5389:5:0"
                          },
                          "referencedDeclaration": 11,
                          "src": "5389:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Phase_$11",
                            "typeString": "enum Phase"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5388:14:0"
                  },
                  "src": "5363:114:0",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 222,
                    "nodeType": "Block",
                    "src": "5857:549:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              },
                              "id": 180,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "arguments": [
                                  {
                                    "expression": {
                                      "id": 176,
                                      "name": "block",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": -4,
                                      "src": "5882:5:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_magic_block",
                                        "typeString": "block"
                                      }
                                    },
                                    "id": 177,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "number",
                                    "nodeType": "MemberAccess",
                                    "src": "5882:12:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "id": 175,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "5875:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_uint32_$",
                                    "typeString": "type(uint32)"
                                  },
                                  "typeName": {
                                    "id": 174,
                                    "name": "uint32",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "5875:6:0",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 178,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "5875:20:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint32",
                                  "typeString": "uint32"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<=",
                              "rightExpression": {
                                "id": 179,
                                "name": "nextPhaseBlock_",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 170,
                                "src": "5899:15:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint32",
                                  "typeString": "uint32"
                                }
                              },
                              "src": "5875:39:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4e4558545f424c4f434b5f50415354",
                              "id": 181,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5916:17:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_172fd03a660456ea5bdb78cb0baa2c885a3c243f5d4a60708b6a86b15db7fd77",
                                "typeString": "literal_string \"NEXT_BLOCK_PAST\""
                              },
                              "value": "NEXT_BLOCK_PAST"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_172fd03a660456ea5bdb78cb0baa2c885a3c243f5d4a60708b6a86b15db7fd77",
                                "typeString": "literal_string \"NEXT_BLOCK_PAST\""
                              }
                            ],
                            "id": 173,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "5867:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 182,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5867:67:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 183,
                        "nodeType": "ExpressionStatement",
                        "src": "5867:67:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              },
                              "id": 187,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 185,
                                "name": "nextPhaseBlock_",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 170,
                                "src": "5952:15:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint32",
                                  "typeString": "uint32"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<",
                              "rightExpression": {
                                "id": 186,
                                "name": "UNINITIALIZED",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 16,
                                "src": "5970:13:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint32",
                                  "typeString": "uint32"
                                }
                              },
                              "src": "5952:31:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4e4558545f424c4f434b5f554e494e495449414c495a4544",
                              "id": 188,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5985:26:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_32ca005f352f6eaa95e8eeb2258082bc1fdd5993a26a6477c4179029802acec0",
                                "typeString": "literal_string \"NEXT_BLOCK_UNINITIALIZED\""
                              },
                              "value": "NEXT_BLOCK_UNINITIALIZED"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_32ca005f352f6eaa95e8eeb2258082bc1fdd5993a26a6477c4179029802acec0",
                                "typeString": "literal_string \"NEXT_BLOCK_UNINITIALIZED\""
                              }
                            ],
                            "id": 184,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "5944:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 189,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5944:68:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 190,
                        "nodeType": "ExpressionStatement",
                        "src": "5944:68:0"
                      },
                      {
                        "assignments": [
                          192
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 192,
                            "mutability": "mutable",
                            "name": "nextIndex_",
                            "nameLocation": "6134:10:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 222,
                            "src": "6129:15:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 191,
                              "name": "uint",
                              "nodeType": "ElementaryTypeName",
                              "src": "6129:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 198,
                        "initialValue": {
                          "arguments": [
                            {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 195,
                                "name": "currentPhase",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 135,
                                "src": "6152:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$__$returns$_t_enum$_Phase_$11_$",
                                  "typeString": "function () view returns (enum Phase)"
                                }
                              },
                              "id": 196,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "6152:14:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_Phase_$11",
                                "typeString": "enum Phase"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_enum$_Phase_$11",
                                "typeString": "enum Phase"
                              }
                            ],
                            "id": 194,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "6147:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_uint256_$",
                              "typeString": "type(uint256)"
                            },
                            "typeName": {
                              "id": 193,
                              "name": "uint",
                              "nodeType": "ElementaryTypeName",
                              "src": "6147:4:0",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 197,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6147:20:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "6129:38:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              },
                              "id": 204,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 200,
                                "name": "UNINITIALIZED",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 16,
                                "src": "6185:13:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint32",
                                  "typeString": "uint32"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "baseExpression": {
                                  "id": 201,
                                  "name": "phaseBlocks",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 26,
                                  "src": "6202:11:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_uint32_$8_storage",
                                    "typeString": "uint32[8] storage ref"
                                  }
                                },
                                "id": 203,
                                "indexExpression": {
                                  "id": 202,
                                  "name": "nextIndex_",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 192,
                                  "src": "6214:10:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "6202:23:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint32",
                                  "typeString": "uint32"
                                }
                              },
                              "src": "6185:40:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4e4558545f424c4f434b5f534554",
                              "id": 205,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "6227:16:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_c2a8879237c67639ff15b7d05c3c66a88540d4206a1a048c5cd93da5909fc0b3",
                                "typeString": "literal_string \"NEXT_BLOCK_SET\""
                              },
                              "value": "NEXT_BLOCK_SET"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_c2a8879237c67639ff15b7d05c3c66a88540d4206a1a048c5cd93da5909fc0b3",
                                "typeString": "literal_string \"NEXT_BLOCK_SET\""
                              }
                            ],
                            "id": 199,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "6177:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 206,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6177:67:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 207,
                        "nodeType": "ExpressionStatement",
                        "src": "6177:67:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 209,
                              "name": "nextPhaseBlock_",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 170,
                              "src": "6280:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            ],
                            "id": 208,
                            "name": "_beforeScheduleNextPhase",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 230,
                            "src": "6255:24:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_uint32_$returns$__$",
                              "typeString": "function (uint32)"
                            }
                          },
                          "id": 210,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6255:41:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 211,
                        "nodeType": "ExpressionStatement",
                        "src": "6255:41:0"
                      },
                      {
                        "expression": {
                          "id": 216,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 212,
                              "name": "phaseBlocks",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 26,
                              "src": "6306:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint32_$8_storage",
                                "typeString": "uint32[8] storage ref"
                              }
                            },
                            "id": 214,
                            "indexExpression": {
                              "id": 213,
                              "name": "nextIndex_",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 192,
                              "src": "6318:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "6306:23:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 215,
                            "name": "nextPhaseBlock_",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 170,
                            "src": "6332:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            }
                          },
                          "src": "6306:41:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "id": 217,
                        "nodeType": "ExpressionStatement",
                        "src": "6306:41:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 219,
                              "name": "nextPhaseBlock_",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 170,
                              "src": "6383:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            ],
                            "id": 218,
                            "name": "PhaseShiftScheduled",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 21,
                            "src": "6363:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_uint32_$returns$__$",
                              "typeString": "function (uint32)"
                            }
                          },
                          "id": 220,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6363:36:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 221,
                        "nodeType": "EmitStatement",
                        "src": "6358:41:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 168,
                    "nodeType": "StructuredDocumentation",
                    "src": "5483:309:0",
                    "text": "Writes the block for the next phase.\n Only uninitialized blocks can be written to.\n Only the immediate next phase relative to `currentPhase` can be written\n to.\n Emits `PhaseShiftScheduled` with the next phase block.\n @param nextPhaseBlock_ The block for the next phase."
                  },
                  "id": 223,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "scheduleNextPhase",
                  "nameLocation": "5806:17:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 171,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 170,
                        "mutability": "mutable",
                        "name": "nextPhaseBlock_",
                        "nameLocation": "5831:15:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 223,
                        "src": "5824:22:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 169,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "5824:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5823:24:0"
                  },
                  "returnParameters": {
                    "id": 172,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "5857:0:0"
                  },
                  "scope": 231,
                  "src": "5797:609:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 229,
                    "nodeType": "Block",
                    "src": "7027:3:0",
                    "statements": []
                  },
                  "documentation": {
                    "id": 224,
                    "nodeType": "StructuredDocumentation",
                    "src": "6412:515:0",
                    "text": "Hook called before scheduling the next phase.\n Useful to apply additional constraints or state changes on a phase\n change.\n Note this is called when scheduling the phase change, not on the block\n the phase change occurs.\n This is called before the phase change so that all functionality that\n is behind a phase gate is still available at the moment of applying the\n hook for scheduling the next phase.\n @param nextPhaseBlock_ The block for the next phase."
                  },
                  "id": 230,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_beforeScheduleNextPhase",
                  "nameLocation": "6941:24:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 227,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 226,
                        "mutability": "mutable",
                        "name": "nextPhaseBlock_",
                        "nameLocation": "6973:15:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 230,
                        "src": "6966:22:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 225,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "6966:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6965:24:0"
                  },
                  "returnParameters": {
                    "id": 228,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "7027:0:0"
                  },
                  "scope": 231,
                  "src": "6932:98:0",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "internal"
                }
              ],
              "scope": 232,
              "src": "2272:4799:0",
              "usedErrors": []
            }
          ],
          "src": "32:7039:0"
        },
        "id": 0
      },
      "contracts/test/PhasedTest.sol": {
        "ast": {
          "absolutePath": "contracts/test/PhasedTest.sol",
          "exportedSymbols": {
            "Phase": [
              11
            ],
            "Phased": [
              231
            ],
            "PhasedTest": [
              314
            ]
          },
          "id": 315,
          "license": "CAL",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 233,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".10"
              ],
              "nodeType": "PragmaDirective",
              "src": "32:24:1"
            },
            {
              "absolutePath": "contracts/phased/Phased.sol",
              "file": "../phased/Phased.sol",
              "id": 236,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 315,
              "sourceUnit": 232,
              "src": "58:53:1",
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 234,
                    "name": "Phase",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "src": "67:5:1",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                },
                {
                  "foreign": {
                    "id": 235,
                    "name": "Phased",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "src": "74:6:1",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "abstract": false,
              "baseContracts": [
                {
                  "baseName": {
                    "id": 238,
                    "name": "Phased",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 231,
                    "src": "236:6:1"
                  },
                  "id": 239,
                  "nodeType": "InheritanceSpecifier",
                  "src": "236:6:1"
                }
              ],
              "canonicalName": "PhasedTest",
              "contractDependencies": [],
              "contractKind": "contract",
              "documentation": {
                "id": 237,
                "nodeType": "StructuredDocumentation",
                "src": "113:100:1",
                "text": "@title PhasedTest\n Empty contract for tests enumerating behaviour of the `Phased` modifiers."
              },
              "fullyImplemented": true,
              "id": 314,
              "linearizedBaseContracts": [
                314,
                231
              ],
              "name": "PhasedTest",
              "nameLocation": "222:10:1",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": false,
                  "documentation": {
                    "id": 240,
                    "nodeType": "StructuredDocumentation",
                    "src": "249:67:1",
                    "text": "Custom variable for testing the `_beforeScheduleNextPhase` hook"
                  },
                  "functionSelector": "abec2f81",
                  "id": 243,
                  "mutability": "mutable",
                  "name": "hookCondition",
                  "nameLocation": "333:13:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 314,
                  "src": "321:32:1",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 241,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "321:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": {
                    "hexValue": "74727565",
                    "id": 242,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "349:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 253,
                    "nodeType": "Block",
                    "src": "532:51:1",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 250,
                              "name": "nextPhaseBlock_",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 246,
                              "src": "560:15:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            ],
                            "id": 249,
                            "name": "scheduleNextPhase",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 223,
                            "src": "542:17:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_uint32_$returns$__$",
                              "typeString": "function (uint32)"
                            }
                          },
                          "id": 251,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "542:34:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 252,
                        "nodeType": "ExpressionStatement",
                        "src": "542:34:1"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 244,
                    "nodeType": "StructuredDocumentation",
                    "src": "360:103:1",
                    "text": "Exposes `scheduleNextPhase` for testing.\n @param nextPhaseBlock_ As per `scheduleNextPhase`."
                  },
                  "functionSelector": "3bd126dc",
                  "id": 254,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "testScheduleNextPhase",
                  "nameLocation": "477:21:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 247,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 246,
                        "mutability": "mutable",
                        "name": "nextPhaseBlock_",
                        "nameLocation": "506:15:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 254,
                        "src": "499:22:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 245,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "499:6:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "498:24:1"
                  },
                  "returnParameters": {
                    "id": 248,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "532:0:1"
                  },
                  "scope": 314,
                  "src": "468:115:1",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 268,
                    "nodeType": "Block",
                    "src": "923:28:1",
                    "statements": [
                      {
                        "expression": {
                          "hexValue": "74727565",
                          "id": 266,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "940:4:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        },
                        "functionReturnParameters": 265,
                        "id": 267,
                        "nodeType": "Return",
                        "src": "933:11:1"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 255,
                    "nodeType": "StructuredDocumentation",
                    "src": "589:218:1",
                    "text": "This function wraps `onlyPhase` modifier, passing phase directly into\n modifier argument.\n @param phase_ Modifier MUST error if current phase is not `phase_`.\n @return Always true if not error."
                  },
                  "functionSelector": "48a8b7df",
                  "id": 269,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "id": 261,
                          "name": "phase_",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 258,
                          "src": "897:6:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Phase_$11",
                            "typeString": "enum Phase"
                          }
                        }
                      ],
                      "id": 262,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 260,
                        "name": "onlyPhase",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 151,
                        "src": "887:9:1"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "887:17:1"
                    }
                  ],
                  "name": "runsOnlyPhase",
                  "nameLocation": "821:13:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 259,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 258,
                        "mutability": "mutable",
                        "name": "phase_",
                        "nameLocation": "841:6:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 269,
                        "src": "835:12:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Phase_$11",
                          "typeString": "enum Phase"
                        },
                        "typeName": {
                          "id": 257,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 256,
                            "name": "Phase",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 11,
                            "src": "835:5:1"
                          },
                          "referencedDeclaration": 11,
                          "src": "835:5:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Phase_$11",
                            "typeString": "enum Phase"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "834:14:1"
                  },
                  "returnParameters": {
                    "id": 265,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 264,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 269,
                        "src": "913:4:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 263,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "913:4:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "912:6:1"
                  },
                  "scope": 314,
                  "src": "812:139:1",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 283,
                    "nodeType": "Block",
                    "src": "1329:28:1",
                    "statements": [
                      {
                        "expression": {
                          "hexValue": "74727565",
                          "id": 281,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1346:4:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        },
                        "functionReturnParameters": 280,
                        "id": 282,
                        "nodeType": "Return",
                        "src": "1339:11:1"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 270,
                    "nodeType": "StructuredDocumentation",
                    "src": "957:242:1",
                    "text": "This function wraps `onlyAtLeastPhase` modifier, passing phase directly\n into modifier argument.\n @param phase_ Modifier MUST error if current phase is not AT LEAST\n `phase_`.\n @return Always true if not error."
                  },
                  "functionSelector": "6932f6b7",
                  "id": 284,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "id": 276,
                          "name": "phase_",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 273,
                          "src": "1303:6:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Phase_$11",
                            "typeString": "enum Phase"
                          }
                        }
                      ],
                      "id": 277,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 275,
                        "name": "onlyAtLeastPhase",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 167,
                        "src": "1286:16:1"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "1286:24:1"
                    }
                  ],
                  "name": "runsOnlyAtLeastPhase",
                  "nameLocation": "1213:20:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 274,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 273,
                        "mutability": "mutable",
                        "name": "phase_",
                        "nameLocation": "1240:6:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 284,
                        "src": "1234:12:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Phase_$11",
                          "typeString": "enum Phase"
                        },
                        "typeName": {
                          "id": 272,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 271,
                            "name": "Phase",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 11,
                            "src": "1234:5:1"
                          },
                          "referencedDeclaration": 11,
                          "src": "1234:5:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Phase_$11",
                            "typeString": "enum Phase"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1233:14:1"
                  },
                  "returnParameters": {
                    "id": 280,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 279,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 284,
                        "src": "1319:4:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 278,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "1319:4:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1318:6:1"
                  },
                  "scope": 314,
                  "src": "1204:153:1",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 293,
                    "nodeType": "Block",
                    "src": "1470:35:1",
                    "statements": [
                      {
                        "expression": {
                          "id": 291,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 288,
                            "name": "hookCondition",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 243,
                            "src": "1472:13:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 290,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "!",
                            "prefix": true,
                            "src": "1488:14:1",
                            "subExpression": {
                              "id": 289,
                              "name": "hookCondition",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 243,
                              "src": "1489:13:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "1472:30:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 292,
                        "nodeType": "ExpressionStatement",
                        "src": "1472:30:1"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 285,
                    "nodeType": "StructuredDocumentation",
                    "src": "1363:62:1",
                    "text": "Toggles `hookCondition` for testing phase scheduling hook."
                  },
                  "functionSelector": "791f211f",
                  "id": 294,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "toggleHookCondition",
                  "nameLocation": "1439:19:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 286,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1458:2:1"
                  },
                  "returnParameters": {
                    "id": 287,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1470:0:1"
                  },
                  "scope": 314,
                  "src": "1430:75:1",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "baseFunctions": [
                    230
                  ],
                  "body": {
                    "id": 312,
                    "nodeType": "Block",
                    "src": "1650:114:1",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 302,
                              "name": "hookCondition",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 243,
                              "src": "1668:13:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "484f4f4b5f434f4e444954494f4e",
                              "id": 303,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1683:16:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_056926f056e55e0841a31a47824bb6ffcf6dab905bd2db33c5c65e2db1f83478",
                                "typeString": "literal_string \"HOOK_CONDITION\""
                              },
                              "value": "HOOK_CONDITION"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_056926f056e55e0841a31a47824bb6ffcf6dab905bd2db33c5c65e2db1f83478",
                                "typeString": "literal_string \"HOOK_CONDITION\""
                              }
                            ],
                            "id": 301,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "1660:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 304,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1660:40:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 305,
                        "nodeType": "ExpressionStatement",
                        "src": "1660:40:1"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 309,
                              "name": "nextPhaseBlock_",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 297,
                              "src": "1741:15:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            ],
                            "expression": {
                              "id": 306,
                              "name": "super",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -25,
                              "src": "1710:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_super$_PhasedTest_$314_$",
                                "typeString": "type(contract super PhasedTest)"
                              }
                            },
                            "id": 308,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "_beforeScheduleNextPhase",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 230,
                            "src": "1710:30:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_uint32_$returns$__$",
                              "typeString": "function (uint32)"
                            }
                          },
                          "id": 310,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1710:47:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 311,
                        "nodeType": "ExpressionStatement",
                        "src": "1710:47:1"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 295,
                    "nodeType": "StructuredDocumentation",
                    "src": "1511:22:1",
                    "text": "@inheritdoc Phased"
                  },
                  "id": 313,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_beforeScheduleNextPhase",
                  "nameLocation": "1547:24:1",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 299,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "1637:8:1"
                  },
                  "parameters": {
                    "id": 298,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 297,
                        "mutability": "mutable",
                        "name": "nextPhaseBlock_",
                        "nameLocation": "1579:15:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 313,
                        "src": "1572:22:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 296,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "1572:6:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1571:24:1"
                  },
                  "returnParameters": {
                    "id": 300,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1650:0:1"
                  },
                  "scope": 314,
                  "src": "1538:226:1",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "internal"
                }
              ],
              "scope": 315,
              "src": "213:1553:1",
              "usedErrors": []
            }
          ],
          "src": "32:1734:1"
        },
        "id": 1
      }
    }
  }
}
