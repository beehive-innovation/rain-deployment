{
  "id": "2589b133414f9a0f3a519fcbd823c6a1",
  "_format": "hh-sol-build-info-1",
  "solcVersion": "0.8.10",
  "solcLongVersion": "0.8.10+commit.fc410830",
  "input": {
    "language": "Solidity",
    "sources": {
      "contracts/test/TierUtilTest.sol": {
        "content": "// SPDX-License-Identifier: CAL\n\npragma solidity 0.8.10;\n\nimport {ITier} from \"../tier/ITier.sol\";\nimport {TierUtil} from \"../libraries/TierUtil.sol\";\n\n/// @title TierUtilTest\n/// Thin wrapper around the `TierUtil` library for hardhat unit testing.\ncontract TierUtilTest {\n    /// Wraps `TierUtil.tierAtBlockFromReport`.\n    /// @param report_ Forwarded to `TierUtil`.\n    /// @param blockNumber_ Forwarded to `TierUtil`.\n    function tierAtBlockFromReport(uint256 report_, uint256 blockNumber_)\n        external\n        pure\n        returns (ITier.Tier)\n    {\n        return TierUtil.tierAtBlockFromReport(report_, blockNumber_);\n    }\n\n    /// Wraps `TierUtil.tierBlock`.\n    /// @param report_ Forwarded to `TierUtil`.\n    /// @param tier_ Forwarded to `TierUtil`.\n    function tierBlock(uint256 report_, ITier.Tier tier_)\n        external\n        pure\n        returns (uint256)\n    {\n        return TierUtil.tierBlock(report_, tier_);\n    }\n\n    /// Wraps `TierUtil.truncateTiersAbove`.\n    /// @param report_ Forwarded to `TierUtil`.\n    /// @param tier_ Forwarded to `TierUtil`.\n    function truncateTiersAbove(uint256 report_, ITier.Tier tier_)\n        external\n        pure\n        returns (uint256)\n    {\n        return TierUtil.truncateTiersAbove(report_, tier_);\n    }\n\n    /// Wraps `TierUtil.updateBlocksForTierRange`.\n    /// @param report_ Forwarded to `TierUtil`.\n    /// @param startTier_ Forwarded to `TierUtil`.\n    /// @param endTier_ Forwarded to `TierUtil`.\n    /// @param blockNumber_ Forwarded to `TierUtil`.\n    function updateBlocksForTierRange(\n        uint256 report_,\n        ITier.Tier startTier_,\n        ITier.Tier endTier_,\n        uint256 blockNumber_\n    ) external pure returns (uint256) {\n        return\n            TierUtil.updateBlocksForTierRange(\n                report_,\n                startTier_,\n                endTier_,\n                blockNumber_\n            );\n    }\n\n    /// Wraps `TierUtil.updateReportWithTierAtBlock`.\n    /// @param report_ Forwarded to `TierUtil`.\n    /// @param startTier_ Forwarded to `TierUtil`.\n    /// @param endTier_ Forwarded to `TierUtil`.\n    /// @param blockNumber_ Forwarded to `TierUtil`.\n    function updateReportWithTierAtBlock(\n        uint256 report_,\n        ITier.Tier startTier_,\n        ITier.Tier endTier_,\n        uint256 blockNumber_\n    ) external pure returns (uint256) {\n        return\n            TierUtil.updateReportWithTierAtBlock(\n                report_,\n                startTier_,\n                endTier_,\n                blockNumber_\n            );\n    }\n}\n"
      },
      "contracts/tier/ITier.sol": {
        "content": "// SPDX-License-Identifier: CAL\n\npragma solidity 0.8.10;\n\n/// @title ITier\n/// @notice `ITier` is a simple interface that contracts can\n/// implement to provide membership lists for other contracts.\n///\n/// There are many use-cases for a time-preserving,\n/// conditional membership list.\n///\n/// Some examples include:\n///\n/// - Self-serve whitelist to participate in fundraising\n/// - Lists of users who can claim airdrops and perks\n/// - Pooling resources with implied governance/reward tiers\n/// - POAP style attendance proofs allowing access to future exclusive events\n///\n/// @dev Standard interface to a tiered membership.\n///\n/// A \"membership\" can represent many things:\n/// - Exclusive access.\n/// - Participation in some event or process.\n/// - KYC completion.\n/// - Combination of sub-memberships.\n/// - Etc.\n///\n/// The high level requirements for a contract implementing `ITier`:\n/// - MUST represent held tiers with the `Tier` enum.\n/// - MUST implement `report`.\n///   - The report is a `uint256` that SHOULD represent the block each tier has\n///     been continuously held since encoded as `uint32`.\n///   - The encoded tiers start at ONE; ZERO is implied if no tier has ever\n///     been held.\n///   - `Tier.ZERO` is NOT encoded in the report, it is simply the fallback\n///     value.\n///   - If a tier is lost the block data is erased for that tier and will be\n///     set if/when the tier is regained to the new block.\n///   - If the historical block information is not available the report MAY\n///     return `0x00000000` for all held tiers.\n///   - Tiers that are lost or have never been held MUST return `0xFFFFFFFF`.\n/// - SHOULD implement `setTier`.\n///   - Contracts SHOULD revert with `SET_TIER` error if they cannot\n///     meaningfully set a tier directly.\n///     For example a contract that can only derive a membership tier by\n///     reading the state of an external contract cannot set tiers.\n///   - Contracts implementing `setTier` SHOULD error with `SET_ZERO_TIER`\n///     if `Tier.ZERO` is being set.\n/// - MUST emit `TierChange` when `setTier` successfully writes a new tier.\n///   - Contracts that cannot meaningfully set a tier are exempt.\ninterface ITier {\n\n    /// 9 Possible tiers.\n    /// Fits nicely as uint32 in uint256 which is helpful for internal storage\n    /// concerns.\n    /// 8 tiers can be achieved, ZERO is the tier when no tier has been\n    /// achieved.\n    enum Tier {\n        ZERO,\n        ONE,\n        TWO,\n        THREE,\n        FOUR,\n        FIVE,\n        SIX,\n        SEVEN,\n        EIGHT\n    }\n\n    /// Every time a Tier changes we log start and end Tier against the\n    /// account.\n    /// This MAY NOT be emitted if reports are being read from the state of an\n    /// external contract.\n    event TierChange(\n        address indexed account,\n        Tier indexed startTier,\n        Tier indexed endTier\n    );\n\n    /// @notice Users can set their own tier by calling `setTier`.\n    ///\n    /// The contract that implements `ITier` is responsible for checking\n    /// eligibility and/or taking actions required to set the tier.\n    ///\n    /// For example, the contract must take/refund any tokens relevant to\n    /// changing the tier.\n    ///\n    /// Obviously the user is responsible for any approvals for this action\n    /// prior to calling `setTier`.\n    ///\n    /// When the tier is changed a `TierChange` event will be emmited as:\n    /// ```\n    /// event TierChange(address account, Tier startTier, Tier endTier);\n    /// ```\n    ///\n    /// The `setTier` function includes arbitrary data as the third\n    /// parameter. This can be used to disambiguate in the case that\n    /// there may be many possible options for a user to achieve some tier.\n    ///\n    /// For example, consider the case where `Tier.THREE` can be achieved\n    /// by EITHER locking 1x rare NFT or 3x uncommon NFTs. A user with both\n    /// could use `data` to explicitly state their intent.\n    ///\n    /// NOTE however that _any_ address can call `setTier` for any other\n    /// address.\n    ///\n    /// If you implement `data` or anything that changes state then be very\n    /// careful to avoid griefing attacks.\n    ///\n    /// The `data` parameter can also be ignored by the contract implementing\n    /// `ITier`. For example, ERC20 tokens are fungible so only the balance\n    /// approved by the user is relevant to a tier change.\n    ///\n    /// The `setTier` function SHOULD prevent users from reassigning\n    /// `Tier.ZERO` to themselves.\n    ///\n    /// The `Tier.ZERO` status represents never having any status.\n    /// @dev Updates the tier of an account.\n    ///\n    /// The implementing contract is responsible for all checks and state\n    /// changes required to set the tier. For example, taking/refunding\n    /// funds/NFTs etc.\n    ///\n    /// Contracts may disallow directly setting tiers, preferring to derive\n    /// reports from other onchain data.\n    /// In this case they should `revert(\"SET_TIER\");`.\n    ///\n    /// @param account Account to change the tier for.\n    /// @param endTier Tier after the change.\n    /// @param data Arbitrary input to disambiguate ownership\n    /// (e.g. NFTs to lock).\n    function setTier(\n        address account,\n        Tier endTier,\n        bytes memory data\n    )\n        external;\n\n    /// @notice A tier report is a `uint256` that contains each of the block\n    /// numbers each tier has been held continously since as a `uint32`.\n    /// There are 9 possible tier, starting with `Tier.ZERO` for `0` offset or\n    /// \"never held any tier\" then working up through 8x 4 byte offsets to the\n    /// full 256 bits.\n    ///\n    /// Low bits = Lower tier.\n    ///\n    /// In hexadecimal every 8 characters = one tier, starting at `Tier.EIGHT`\n    /// from high bits and working down to `Tier.ONE`.\n    ///\n    /// `uint32` should be plenty for any blockchain that measures block times\n    /// in seconds, but reconsider if deploying to an environment with\n    /// significantly sub-second block times.\n    ///\n    /// ~135 years of 1 second blocks fit into `uint32`.\n    ///\n    /// `2^8 / (365 * 24 * 60 * 60)`\n    ///\n    /// When a user INCREASES their tier they keep all the block numbers they\n    /// already had, and get new block times for each increased tiers they have\n    /// earned.\n    ///\n    /// When a user DECREASES their tier they return to `0xFFFFFFFF` (never)\n    /// for every tier level they remove, but keep their block numbers for the\n    /// remaining tiers.\n    ///\n    /// GUIs are encouraged to make this dynamic very clear for users as\n    /// round-tripping to a lower status and back is a DESTRUCTIVE operation\n    /// for block times.\n    ///\n    /// The intent is that downstream code can provide additional benefits for\n    /// members who have maintained a certain tier for/since a long time.\n    /// These benefits can be provided by inspecting the report, and by\n    /// on-chain contracts directly,\n    /// rather than needing to work with snapshots etc.\n    /// @dev Returns the earliest block the account has held each tier for\n    /// continuously.\n    /// This is encoded as a uint256 with blocks represented as 8x\n    /// concatenated uint32.\n    /// I.e. Each 4 bytes of the uint256 represents a u32 tier start time.\n    /// The low bits represent low tiers and high bits the high tiers.\n    /// Implementing contracts should return 0xFFFFFFFF for lost &\n    /// never-held tiers.\n    ///\n    /// @param account Account to get the report for.\n    /// @return The report blocks encoded as a uint256.\n    function report(address account) external view returns (uint256);\n}"
      },
      "contracts/libraries/TierUtil.sol": {
        "content": "// SPDX-License-Identifier: CAL\n\npragma solidity 0.8.10;\n\nimport { ITier } from \"../tier/ITier.sol\";\n\n/// @title TierUtil\n/// @notice `TierUtil` implements several pure functions that can be\n/// used to interface with reports.\n/// - `tierAtBlockFromReport`: Returns the highest status achieved relative to\n/// a block number and report. Statuses gained after that block are ignored.\n/// - `tierBlock`: Returns the block that a given tier has been held\n/// since according to a report.\n/// - `truncateTiersAbove`: Resets all the tiers above the reference tier.\n/// - `updateBlocksForTierRange`: Updates a report with a block\n/// number for every tier in a range.\n/// - `updateReportWithTierAtBlock`: Updates a report to a new tier.\n/// @dev Utilities to consistently read, write and manipulate tiers in reports.\n/// The low-level bit shifting can be difficult to get right so this factors\n/// that out.\nlibrary TierUtil {\n\n    /// UNINITIALIZED is 0xFF.. as it is infinitely in the future.\n    uint256 public constant UNINITIALIZED\n        = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n    /// Returns the highest tier achieved relative to a block number\n    /// and report.\n    ///\n    /// Note that typically the report will be from the _current_ contract\n    /// state, i.e. `block.number` but not always. Tiers gained after the\n    /// reference block are ignored.\n    ///\n    /// When the `report` comes from a later block than the `blockNumber` this\n    /// means the user must have held the tier continuously from `blockNumber`\n    /// _through_ to the report block.\n    /// I.e. NOT a snapshot.\n    ///\n    /// @param report_ A report as per `ITier`.\n    /// @param blockNumber_ The block number to check the tiers against.\n    /// @return The highest tier held since `blockNumber` as per `report`.\n    function tierAtBlockFromReport(\n        uint256 report_,\n        uint256 blockNumber_\n    )\n        internal pure returns (ITier.Tier)\n    {\n        for (uint256 i_ = 0; i_ < 8; i_++) {\n            if (uint32(uint256(report_ >> (i_*32))) > uint32(blockNumber_)) {\n                return ITier.Tier(i_);\n            }\n        }\n        return ITier.Tier(8);\n    }\n\n    /// Returns the block that a given tier has been held since from a report.\n    ///\n    /// The report MUST encode \"never\" as 0xFFFFFFFF. This ensures\n    /// compatibility with `tierAtBlockFromReport`.\n    ///\n    /// @param report_ The report to read a block number from.\n    /// @param tier_ The Tier to read the block number for.\n    /// @return The block number this has been held since.\n    function tierBlock(uint256 report_, ITier.Tier tier_)\n        internal\n        pure\n        returns (uint256)\n    {\n        // ZERO is a special case. Everyone has always been at least ZERO,\n        // since block 0.\n        if (tier_ == ITier.Tier.ZERO) { return 0; }\n\n        uint256 offset_ = (uint256(tier_) - 1) * 32;\n        return uint256(uint32(\n            uint256(\n                report_ >> offset_\n            )\n        ));\n    }\n\n    /// Resets all the tiers above the reference tier to 0xFFFFFFFF.\n    ///\n    /// @param report_ Report to truncate with high bit 1s.\n    /// @param tier_ Tier to truncate above (exclusive).\n    /// @return Truncated report.\n    function truncateTiersAbove(uint256 report_, ITier.Tier tier_)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 offset_ = uint256(tier_) * 32;\n        uint256 mask_ = (UNINITIALIZED >> offset_) << offset_;\n        return report_ | mask_;\n    }\n\n    /// Updates a report with a block number for every status integer in a\n    /// range.\n    ///\n    /// Does nothing if the end status is equal or less than the start status.\n    /// @param report_ The report to update.\n    /// @param startTier_ The `Tier` at the start of the range (exclusive).\n    /// @param endTier_ The `Tier` at the end of the range (inclusive).\n    /// @param blockNumber_ The block number to set for every status\n    /// in the range.\n    /// @return The updated report.\n    function updateBlocksForTierRange(\n        uint256 report_,\n        ITier.Tier startTier_,\n        ITier.Tier endTier_,\n        uint256 blockNumber_\n    )\n        internal pure returns (uint256)\n    {\n        uint256 offset_;\n        for (uint256 i_ = uint256(startTier_); i_ < uint256(endTier_); i_++) {\n            offset_ = i_ * 32;\n            report_ =\n                (report_ & ~uint256(uint256(uint32(UNINITIALIZED)) << offset_))\n                | uint256(blockNumber_ << offset_);\n        }\n        return report_;\n    }\n\n    /// Updates a report to a new status.\n    ///\n    /// Internally dispatches to `truncateTiersAbove` and\n    /// `updateBlocksForTierRange`.\n    /// The dispatch is based on whether the new tier is above or below the\n    /// current tier.\n    /// The `startTier_` MUST match the result of `tierAtBlockFromReport`.\n    /// It is expected the caller will know the current tier when\n    /// calling this function and need to do other things in the calling scope\n    /// with it.\n    ///\n    /// @param report_ The report to update.\n    /// @param startTier_ The tier to start updating relative to. Data above\n    /// this tier WILL BE LOST so probably should be the current tier.\n    /// @param endTier_ The new highest tier held, at the given block number.\n    /// @param blockNumber_ The block number to update the highest tier to, and\n    /// intermediate tiers from `startTier_`.\n    /// @return The updated report.\n    function updateReportWithTierAtBlock(\n        uint256 report_,\n        ITier.Tier startTier_,\n        ITier.Tier endTier_,\n        uint256 blockNumber_\n    )\n        internal pure returns (uint256)\n    {\n        return endTier_ < startTier_\n            ? truncateTiersAbove(report_, endTier_)\n            : updateBlocksForTierRange(\n                report_,\n                startTier_,\n                endTier_,\n                blockNumber_\n            );\n    }\n\n}"
      }
    },
    "settings": {
      "metadata": {
        "useLiteralContent": true
      },
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ],
          "": [
            "ast"
          ]
        }
      }
    }
  },
  "output": {
    "contracts": {
      "contracts/libraries/TierUtil.sol": {
        "TierUtil": {
          "abi": [
            {
              "inputs": [],
              "name": "UNINITIALIZED",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "6088610038600b82828239805160001a607314602b57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c806381e45d9a146038575b600080fd5b604060001981565b60405190815260200160405180910390f3fea264697066735822122053de61ff2ad15f2cbe303a1649109f365de0abfa880cd2e9d2f26f2023f9fd4364736f6c634300080a0033",
              "opcodes": "PUSH1 0x88 PUSH2 0x38 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH1 0x33 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x81E45D9A EQ PUSH1 0x38 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 PUSH1 0x0 NOT DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MSTORE8 0xDE PUSH2 0xFF2A 0xD1 0x5F 0x2C 0xBE ADDRESS GASPRICE AND 0x49 LT SWAP16 CALLDATASIZE 0x5D 0xE0 0xAB STATICCALL DUP9 0xC 0xD2 0xE9 0xD2 CALLCODE PUSH16 0x2023F9FD4364736F6C634300080A0033 ",
              "sourceMap": "902:5066:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;902:5066:0;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "@UNINITIALIZED_8": {
                  "entryPoint": null,
                  "id": 8,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_library_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                }
              },
              "generatedSources": [
                {
                  "ast": {
                    "nodeType": "YulBlock",
                    "src": "0:201:3",
                    "statements": [
                      {
                        "nodeType": "YulBlock",
                        "src": "6:3:3",
                        "statements": []
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "123:76:3",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "133:26:3",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "145:9:3"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "156:2:3",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "141:3:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "141:18:3"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "133:4:3"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "175:9:3"
                                  },
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "186:6:3"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "168:6:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "168:25:3"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "168:25:3"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_library_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "92:9:3",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "103:6:3",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "114:4:3",
                            "type": ""
                          }
                        ],
                        "src": "14:185:3"
                      }
                    ]
                  },
                  "contents": "{\n    { }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_library_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n}",
                  "id": 3,
                  "language": "Yul",
                  "name": "#utility.yul"
                }
              ],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "730000000000000000000000000000000000000000301460806040526004361060335760003560e01c806381e45d9a146038575b600080fd5b604060001981565b60405190815260200160405180910390f3fea264697066735822122053de61ff2ad15f2cbe303a1649109f365de0abfa880cd2e9d2f26f2023f9fd4364736f6c634300080a0033",
              "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH1 0x33 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x81E45D9A EQ PUSH1 0x38 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 PUSH1 0x0 NOT DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MSTORE8 0xDE PUSH2 0xFF2A 0xD1 0x5F 0x2C 0xBE ADDRESS GASPRICE AND 0x49 LT SWAP16 CALLDATASIZE 0x5D 0xE0 0xAB STATICCALL DUP9 0xC 0xD2 0xE9 0xD2 CALLCODE PUSH16 0x2023F9FD4364736F6C634300080A0033 ",
              "sourceMap": "902:5066:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;993:114;;-1:-1:-1;;993:114:0;;;;;168:25:3;;;156:2;141:18;993:114:0;;;;;;"
            },
            "methodIdentifiers": {
              "UNINITIALIZED()": "81e45d9a"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"UNINITIALIZED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Utilities to consistently read, write and manipulate tiers in reports. The low-level bit shifting can be difficult to get right so this factors that out.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"TierUtil\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"UNINITIALIZED()\":{\"notice\":\"UNINITIALIZED is 0xFF.. as it is infinitely in the future.\"}},\"notice\":\"`TierUtil` implements several pure functions that can be used to interface with reports. - `tierAtBlockFromReport`: Returns the highest status achieved relative to a block number and report. Statuses gained after that block are ignored. - `tierBlock`: Returns the block that a given tier has been held since according to a report. - `truncateTiersAbove`: Resets all the tiers above the reference tier. - `updateBlocksForTierRange`: Updates a report with a block number for every tier in a range. - `updateReportWithTierAtBlock`: Updates a report to a new tier.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/TierUtil.sol\":\"TierUtil\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/libraries/TierUtil.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\n\\npragma solidity 0.8.10;\\n\\nimport { ITier } from \\\"../tier/ITier.sol\\\";\\n\\n/// @title TierUtil\\n/// @notice `TierUtil` implements several pure functions that can be\\n/// used to interface with reports.\\n/// - `tierAtBlockFromReport`: Returns the highest status achieved relative to\\n/// a block number and report. Statuses gained after that block are ignored.\\n/// - `tierBlock`: Returns the block that a given tier has been held\\n/// since according to a report.\\n/// - `truncateTiersAbove`: Resets all the tiers above the reference tier.\\n/// - `updateBlocksForTierRange`: Updates a report with a block\\n/// number for every tier in a range.\\n/// - `updateReportWithTierAtBlock`: Updates a report to a new tier.\\n/// @dev Utilities to consistently read, write and manipulate tiers in reports.\\n/// The low-level bit shifting can be difficult to get right so this factors\\n/// that out.\\nlibrary TierUtil {\\n\\n    /// UNINITIALIZED is 0xFF.. as it is infinitely in the future.\\n    uint256 public constant UNINITIALIZED\\n        = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n    /// Returns the highest tier achieved relative to a block number\\n    /// and report.\\n    ///\\n    /// Note that typically the report will be from the _current_ contract\\n    /// state, i.e. `block.number` but not always. Tiers gained after the\\n    /// reference block are ignored.\\n    ///\\n    /// When the `report` comes from a later block than the `blockNumber` this\\n    /// means the user must have held the tier continuously from `blockNumber`\\n    /// _through_ to the report block.\\n    /// I.e. NOT a snapshot.\\n    ///\\n    /// @param report_ A report as per `ITier`.\\n    /// @param blockNumber_ The block number to check the tiers against.\\n    /// @return The highest tier held since `blockNumber` as per `report`.\\n    function tierAtBlockFromReport(\\n        uint256 report_,\\n        uint256 blockNumber_\\n    )\\n        internal pure returns (ITier.Tier)\\n    {\\n        for (uint256 i_ = 0; i_ < 8; i_++) {\\n            if (uint32(uint256(report_ >> (i_*32))) > uint32(blockNumber_)) {\\n                return ITier.Tier(i_);\\n            }\\n        }\\n        return ITier.Tier(8);\\n    }\\n\\n    /// Returns the block that a given tier has been held since from a report.\\n    ///\\n    /// The report MUST encode \\\"never\\\" as 0xFFFFFFFF. This ensures\\n    /// compatibility with `tierAtBlockFromReport`.\\n    ///\\n    /// @param report_ The report to read a block number from.\\n    /// @param tier_ The Tier to read the block number for.\\n    /// @return The block number this has been held since.\\n    function tierBlock(uint256 report_, ITier.Tier tier_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // ZERO is a special case. Everyone has always been at least ZERO,\\n        // since block 0.\\n        if (tier_ == ITier.Tier.ZERO) { return 0; }\\n\\n        uint256 offset_ = (uint256(tier_) - 1) * 32;\\n        return uint256(uint32(\\n            uint256(\\n                report_ >> offset_\\n            )\\n        ));\\n    }\\n\\n    /// Resets all the tiers above the reference tier to 0xFFFFFFFF.\\n    ///\\n    /// @param report_ Report to truncate with high bit 1s.\\n    /// @param tier_ Tier to truncate above (exclusive).\\n    /// @return Truncated report.\\n    function truncateTiersAbove(uint256 report_, ITier.Tier tier_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 offset_ = uint256(tier_) * 32;\\n        uint256 mask_ = (UNINITIALIZED >> offset_) << offset_;\\n        return report_ | mask_;\\n    }\\n\\n    /// Updates a report with a block number for every status integer in a\\n    /// range.\\n    ///\\n    /// Does nothing if the end status is equal or less than the start status.\\n    /// @param report_ The report to update.\\n    /// @param startTier_ The `Tier` at the start of the range (exclusive).\\n    /// @param endTier_ The `Tier` at the end of the range (inclusive).\\n    /// @param blockNumber_ The block number to set for every status\\n    /// in the range.\\n    /// @return The updated report.\\n    function updateBlocksForTierRange(\\n        uint256 report_,\\n        ITier.Tier startTier_,\\n        ITier.Tier endTier_,\\n        uint256 blockNumber_\\n    )\\n        internal pure returns (uint256)\\n    {\\n        uint256 offset_;\\n        for (uint256 i_ = uint256(startTier_); i_ < uint256(endTier_); i_++) {\\n            offset_ = i_ * 32;\\n            report_ =\\n                (report_ & ~uint256(uint256(uint32(UNINITIALIZED)) << offset_))\\n                | uint256(blockNumber_ << offset_);\\n        }\\n        return report_;\\n    }\\n\\n    /// Updates a report to a new status.\\n    ///\\n    /// Internally dispatches to `truncateTiersAbove` and\\n    /// `updateBlocksForTierRange`.\\n    /// The dispatch is based on whether the new tier is above or below the\\n    /// current tier.\\n    /// The `startTier_` MUST match the result of `tierAtBlockFromReport`.\\n    /// It is expected the caller will know the current tier when\\n    /// calling this function and need to do other things in the calling scope\\n    /// with it.\\n    ///\\n    /// @param report_ The report to update.\\n    /// @param startTier_ The tier to start updating relative to. Data above\\n    /// this tier WILL BE LOST so probably should be the current tier.\\n    /// @param endTier_ The new highest tier held, at the given block number.\\n    /// @param blockNumber_ The block number to update the highest tier to, and\\n    /// intermediate tiers from `startTier_`.\\n    /// @return The updated report.\\n    function updateReportWithTierAtBlock(\\n        uint256 report_,\\n        ITier.Tier startTier_,\\n        ITier.Tier endTier_,\\n        uint256 blockNumber_\\n    )\\n        internal pure returns (uint256)\\n    {\\n        return endTier_ < startTier_\\n            ? truncateTiersAbove(report_, endTier_)\\n            : updateBlocksForTierRange(\\n                report_,\\n                startTier_,\\n                endTier_,\\n                blockNumber_\\n            );\\n    }\\n\\n}\",\"keccak256\":\"0xc4bde1f366857f2fda9fc9f7d36676f39d9a263f85bfd3b5f51e8d02d769dd5a\",\"license\":\"CAL\"},\"contracts/tier/ITier.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\n\\npragma solidity 0.8.10;\\n\\n/// @title ITier\\n/// @notice `ITier` is a simple interface that contracts can\\n/// implement to provide membership lists for other contracts.\\n///\\n/// There are many use-cases for a time-preserving,\\n/// conditional membership list.\\n///\\n/// Some examples include:\\n///\\n/// - Self-serve whitelist to participate in fundraising\\n/// - Lists of users who can claim airdrops and perks\\n/// - Pooling resources with implied governance/reward tiers\\n/// - POAP style attendance proofs allowing access to future exclusive events\\n///\\n/// @dev Standard interface to a tiered membership.\\n///\\n/// A \\\"membership\\\" can represent many things:\\n/// - Exclusive access.\\n/// - Participation in some event or process.\\n/// - KYC completion.\\n/// - Combination of sub-memberships.\\n/// - Etc.\\n///\\n/// The high level requirements for a contract implementing `ITier`:\\n/// - MUST represent held tiers with the `Tier` enum.\\n/// - MUST implement `report`.\\n///   - The report is a `uint256` that SHOULD represent the block each tier has\\n///     been continuously held since encoded as `uint32`.\\n///   - The encoded tiers start at ONE; ZERO is implied if no tier has ever\\n///     been held.\\n///   - `Tier.ZERO` is NOT encoded in the report, it is simply the fallback\\n///     value.\\n///   - If a tier is lost the block data is erased for that tier and will be\\n///     set if/when the tier is regained to the new block.\\n///   - If the historical block information is not available the report MAY\\n///     return `0x00000000` for all held tiers.\\n///   - Tiers that are lost or have never been held MUST return `0xFFFFFFFF`.\\n/// - SHOULD implement `setTier`.\\n///   - Contracts SHOULD revert with `SET_TIER` error if they cannot\\n///     meaningfully set a tier directly.\\n///     For example a contract that can only derive a membership tier by\\n///     reading the state of an external contract cannot set tiers.\\n///   - Contracts implementing `setTier` SHOULD error with `SET_ZERO_TIER`\\n///     if `Tier.ZERO` is being set.\\n/// - MUST emit `TierChange` when `setTier` successfully writes a new tier.\\n///   - Contracts that cannot meaningfully set a tier are exempt.\\ninterface ITier {\\n\\n    /// 9 Possible tiers.\\n    /// Fits nicely as uint32 in uint256 which is helpful for internal storage\\n    /// concerns.\\n    /// 8 tiers can be achieved, ZERO is the tier when no tier has been\\n    /// achieved.\\n    enum Tier {\\n        ZERO,\\n        ONE,\\n        TWO,\\n        THREE,\\n        FOUR,\\n        FIVE,\\n        SIX,\\n        SEVEN,\\n        EIGHT\\n    }\\n\\n    /// Every time a Tier changes we log start and end Tier against the\\n    /// account.\\n    /// This MAY NOT be emitted if reports are being read from the state of an\\n    /// external contract.\\n    event TierChange(\\n        address indexed account,\\n        Tier indexed startTier,\\n        Tier indexed endTier\\n    );\\n\\n    /// @notice Users can set their own tier by calling `setTier`.\\n    ///\\n    /// The contract that implements `ITier` is responsible for checking\\n    /// eligibility and/or taking actions required to set the tier.\\n    ///\\n    /// For example, the contract must take/refund any tokens relevant to\\n    /// changing the tier.\\n    ///\\n    /// Obviously the user is responsible for any approvals for this action\\n    /// prior to calling `setTier`.\\n    ///\\n    /// When the tier is changed a `TierChange` event will be emmited as:\\n    /// ```\\n    /// event TierChange(address account, Tier startTier, Tier endTier);\\n    /// ```\\n    ///\\n    /// The `setTier` function includes arbitrary data as the third\\n    /// parameter. This can be used to disambiguate in the case that\\n    /// there may be many possible options for a user to achieve some tier.\\n    ///\\n    /// For example, consider the case where `Tier.THREE` can be achieved\\n    /// by EITHER locking 1x rare NFT or 3x uncommon NFTs. A user with both\\n    /// could use `data` to explicitly state their intent.\\n    ///\\n    /// NOTE however that _any_ address can call `setTier` for any other\\n    /// address.\\n    ///\\n    /// If you implement `data` or anything that changes state then be very\\n    /// careful to avoid griefing attacks.\\n    ///\\n    /// The `data` parameter can also be ignored by the contract implementing\\n    /// `ITier`. For example, ERC20 tokens are fungible so only the balance\\n    /// approved by the user is relevant to a tier change.\\n    ///\\n    /// The `setTier` function SHOULD prevent users from reassigning\\n    /// `Tier.ZERO` to themselves.\\n    ///\\n    /// The `Tier.ZERO` status represents never having any status.\\n    /// @dev Updates the tier of an account.\\n    ///\\n    /// The implementing contract is responsible for all checks and state\\n    /// changes required to set the tier. For example, taking/refunding\\n    /// funds/NFTs etc.\\n    ///\\n    /// Contracts may disallow directly setting tiers, preferring to derive\\n    /// reports from other onchain data.\\n    /// In this case they should `revert(\\\"SET_TIER\\\");`.\\n    ///\\n    /// @param account Account to change the tier for.\\n    /// @param endTier Tier after the change.\\n    /// @param data Arbitrary input to disambiguate ownership\\n    /// (e.g. NFTs to lock).\\n    function setTier(\\n        address account,\\n        Tier endTier,\\n        bytes memory data\\n    )\\n        external;\\n\\n    /// @notice A tier report is a `uint256` that contains each of the block\\n    /// numbers each tier has been held continously since as a `uint32`.\\n    /// There are 9 possible tier, starting with `Tier.ZERO` for `0` offset or\\n    /// \\\"never held any tier\\\" then working up through 8x 4 byte offsets to the\\n    /// full 256 bits.\\n    ///\\n    /// Low bits = Lower tier.\\n    ///\\n    /// In hexadecimal every 8 characters = one tier, starting at `Tier.EIGHT`\\n    /// from high bits and working down to `Tier.ONE`.\\n    ///\\n    /// `uint32` should be plenty for any blockchain that measures block times\\n    /// in seconds, but reconsider if deploying to an environment with\\n    /// significantly sub-second block times.\\n    ///\\n    /// ~135 years of 1 second blocks fit into `uint32`.\\n    ///\\n    /// `2^8 / (365 * 24 * 60 * 60)`\\n    ///\\n    /// When a user INCREASES their tier they keep all the block numbers they\\n    /// already had, and get new block times for each increased tiers they have\\n    /// earned.\\n    ///\\n    /// When a user DECREASES their tier they return to `0xFFFFFFFF` (never)\\n    /// for every tier level they remove, but keep their block numbers for the\\n    /// remaining tiers.\\n    ///\\n    /// GUIs are encouraged to make this dynamic very clear for users as\\n    /// round-tripping to a lower status and back is a DESTRUCTIVE operation\\n    /// for block times.\\n    ///\\n    /// The intent is that downstream code can provide additional benefits for\\n    /// members who have maintained a certain tier for/since a long time.\\n    /// These benefits can be provided by inspecting the report, and by\\n    /// on-chain contracts directly,\\n    /// rather than needing to work with snapshots etc.\\n    /// @dev Returns the earliest block the account has held each tier for\\n    /// continuously.\\n    /// This is encoded as a uint256 with blocks represented as 8x\\n    /// concatenated uint32.\\n    /// I.e. Each 4 bytes of the uint256 represents a u32 tier start time.\\n    /// The low bits represent low tiers and high bits the high tiers.\\n    /// Implementing contracts should return 0xFFFFFFFF for lost &\\n    /// never-held tiers.\\n    ///\\n    /// @param account Account to get the report for.\\n    /// @return The report blocks encoded as a uint256.\\n    function report(address account) external view returns (uint256);\\n}\",\"keccak256\":\"0x9df1a0a477801f332f9b95fb6d400d2edb4fce18c089c0df0a5affc02ebd4121\",\"license\":\"CAL\"}},\"version\":1}"
        }
      },
      "contracts/test/TierUtilTest.sol": {
        "TierUtilTest": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "report_",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "blockNumber_",
                  "type": "uint256"
                }
              ],
              "name": "tierAtBlockFromReport",
              "outputs": [
                {
                  "internalType": "enum ITier.Tier",
                  "name": "",
                  "type": "uint8"
                }
              ],
              "stateMutability": "pure",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "report_",
                  "type": "uint256"
                },
                {
                  "internalType": "enum ITier.Tier",
                  "name": "tier_",
                  "type": "uint8"
                }
              ],
              "name": "tierBlock",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "pure",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "report_",
                  "type": "uint256"
                },
                {
                  "internalType": "enum ITier.Tier",
                  "name": "tier_",
                  "type": "uint8"
                }
              ],
              "name": "truncateTiersAbove",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "pure",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "report_",
                  "type": "uint256"
                },
                {
                  "internalType": "enum ITier.Tier",
                  "name": "startTier_",
                  "type": "uint8"
                },
                {
                  "internalType": "enum ITier.Tier",
                  "name": "endTier_",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "blockNumber_",
                  "type": "uint256"
                }
              ],
              "name": "updateBlocksForTierRange",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "pure",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "report_",
                  "type": "uint256"
                },
                {
                  "internalType": "enum ITier.Tier",
                  "name": "startTier_",
                  "type": "uint8"
                },
                {
                  "internalType": "enum ITier.Tier",
                  "name": "endTier_",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "blockNumber_",
                  "type": "uint256"
                }
              ],
              "name": "updateReportWithTierAtBlock",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "pure",
              "type": "function"
            }
          ],
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234801561001057600080fd5b50610455806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80630e47450b1461005c5780636ed9558d146100825780637c76a2fb146100a2578063d37fc68a146100b5578063d4707031146100c8575b600080fd5b61006f61006a3660046102e8565b6100db565b6040519081526020015b60405180910390f35b610095610090366004610314565b6100f0565b604051610079919061034c565b61006f6100b03660046102e8565b6100fc565b61006f6100c3366004610374565b610108565b61006f6100d6366004610374565b61011f565b60006100e7838361012d565b90505b92915050565b60006100e7838361018c565b60006100e783836101ee565b600061011685858585610220565b95945050505050565b60006101168585858561028e565b60008082600881111561014257610142610336565b1415610150575060006100ea565b6000600183600881111561016657610166610336565b61017091906103ce565b61017b9060206103e5565b9390931c63ffffffff169392505050565b6000805b60088110156101e65763ffffffff83166101ab8260206103e5565b85901c63ffffffff1611156101d4578060088111156101cc576101cc610336565b9150506100ea565b806101de81610404565b915050610190565b5060086100e7565b60008082600881111561020357610203610336565b61020e9060206103e5565b600019811c901b841791505092915050565b600080600085600881111561023757610237610336565b90505b84600881111561024c5761024c610336565b8110156102835761025e8160206103e5565b63ffffffff811b199790971684881b179691508061027b81610404565b91505061023a565b509495945050505050565b60008360088111156102a2576102a2610336565b8360088111156102b4576102b4610336565b106102ca576102c585858585610220565b610116565b61011685846101ee565b8035600981106102e357600080fd5b919050565b600080604083850312156102fb57600080fd5b8235915061030b602084016102d4565b90509250929050565b6000806040838503121561032757600080fd5b50508035926020909101359150565b634e487b7160e01b600052602160045260246000fd5b602081016009831061036e57634e487b7160e01b600052602160045260246000fd5b91905290565b6000806000806080858703121561038a57600080fd5b8435935061039a602086016102d4565b92506103a8604086016102d4565b9396929550929360600135925050565b634e487b7160e01b600052601160045260246000fd5b6000828210156103e0576103e06103b8565b500390565b60008160001904831182151516156103ff576103ff6103b8565b500290565b6000600019821415610418576104186103b8565b506001019056fea26469706673582212204df1deb48d97b311f73172405e5a516cb0f01e3714b596cae28267a4321d07ed64736f6c634300080a0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x455 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x57 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xE47450B EQ PUSH2 0x5C JUMPI DUP1 PUSH4 0x6ED9558D EQ PUSH2 0x82 JUMPI DUP1 PUSH4 0x7C76A2FB EQ PUSH2 0xA2 JUMPI DUP1 PUSH4 0xD37FC68A EQ PUSH2 0xB5 JUMPI DUP1 PUSH4 0xD4707031 EQ PUSH2 0xC8 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6F PUSH2 0x6A CALLDATASIZE PUSH1 0x4 PUSH2 0x2E8 JUMP JUMPDEST PUSH2 0xDB JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x95 PUSH2 0x90 CALLDATASIZE PUSH1 0x4 PUSH2 0x314 JUMP JUMPDEST PUSH2 0xF0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x79 SWAP2 SWAP1 PUSH2 0x34C JUMP JUMPDEST PUSH2 0x6F PUSH2 0xB0 CALLDATASIZE PUSH1 0x4 PUSH2 0x2E8 JUMP JUMPDEST PUSH2 0xFC JUMP JUMPDEST PUSH2 0x6F PUSH2 0xC3 CALLDATASIZE PUSH1 0x4 PUSH2 0x374 JUMP JUMPDEST PUSH2 0x108 JUMP JUMPDEST PUSH2 0x6F PUSH2 0xD6 CALLDATASIZE PUSH1 0x4 PUSH2 0x374 JUMP JUMPDEST PUSH2 0x11F JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE7 DUP4 DUP4 PUSH2 0x12D JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE7 DUP4 DUP4 PUSH2 0x18C JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE7 DUP4 DUP4 PUSH2 0x1EE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x116 DUP6 DUP6 DUP6 DUP6 PUSH2 0x220 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x116 DUP6 DUP6 DUP6 DUP6 PUSH2 0x28E JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x142 JUMPI PUSH2 0x142 PUSH2 0x336 JUMP JUMPDEST EQ ISZERO PUSH2 0x150 JUMPI POP PUSH1 0x0 PUSH2 0xEA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP4 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x166 JUMPI PUSH2 0x166 PUSH2 0x336 JUMP JUMPDEST PUSH2 0x170 SWAP2 SWAP1 PUSH2 0x3CE JUMP JUMPDEST PUSH2 0x17B SWAP1 PUSH1 0x20 PUSH2 0x3E5 JUMP JUMPDEST SWAP4 SWAP1 SWAP4 SHR PUSH4 0xFFFFFFFF AND SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST PUSH1 0x8 DUP2 LT ISZERO PUSH2 0x1E6 JUMPI PUSH4 0xFFFFFFFF DUP4 AND PUSH2 0x1AB DUP3 PUSH1 0x20 PUSH2 0x3E5 JUMP JUMPDEST DUP6 SWAP1 SHR PUSH4 0xFFFFFFFF AND GT ISZERO PUSH2 0x1D4 JUMPI DUP1 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x1CC JUMPI PUSH2 0x1CC PUSH2 0x336 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xEA JUMP JUMPDEST DUP1 PUSH2 0x1DE DUP2 PUSH2 0x404 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x190 JUMP JUMPDEST POP PUSH1 0x8 PUSH2 0xE7 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x203 JUMPI PUSH2 0x203 PUSH2 0x336 JUMP JUMPDEST PUSH2 0x20E SWAP1 PUSH1 0x20 PUSH2 0x3E5 JUMP JUMPDEST PUSH1 0x0 NOT DUP2 SHR SWAP1 SHL DUP5 OR SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x237 JUMPI PUSH2 0x237 PUSH2 0x336 JUMP JUMPDEST SWAP1 POP JUMPDEST DUP5 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x24C JUMPI PUSH2 0x24C PUSH2 0x336 JUMP JUMPDEST DUP2 LT ISZERO PUSH2 0x283 JUMPI PUSH2 0x25E DUP2 PUSH1 0x20 PUSH2 0x3E5 JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP2 SHL NOT SWAP8 SWAP1 SWAP8 AND DUP5 DUP9 SHL OR SWAP7 SWAP2 POP DUP1 PUSH2 0x27B DUP2 PUSH2 0x404 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x23A JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x2A2 JUMPI PUSH2 0x2A2 PUSH2 0x336 JUMP JUMPDEST DUP4 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x2B4 JUMPI PUSH2 0x2B4 PUSH2 0x336 JUMP JUMPDEST LT PUSH2 0x2CA JUMPI PUSH2 0x2C5 DUP6 DUP6 DUP6 DUP6 PUSH2 0x220 JUMP JUMPDEST PUSH2 0x116 JUMP JUMPDEST PUSH2 0x116 DUP6 DUP5 PUSH2 0x1EE JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x9 DUP2 LT PUSH2 0x2E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x30B PUSH1 0x20 DUP5 ADD PUSH2 0x2D4 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x327 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 DUP2 ADD PUSH1 0x9 DUP4 LT PUSH2 0x36E JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x38A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH2 0x39A PUSH1 0x20 DUP7 ADD PUSH2 0x2D4 JUMP JUMPDEST SWAP3 POP PUSH2 0x3A8 PUSH1 0x40 DUP7 ADD PUSH2 0x2D4 JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP3 SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x3E0 JUMPI PUSH2 0x3E0 PUSH2 0x3B8 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x3FF JUMPI PUSH2 0x3FF PUSH2 0x3B8 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x418 JUMPI PUSH2 0x418 PUSH2 0x3B8 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4D CALL 0xDE 0xB4 DUP14 SWAP8 0xB3 GT 0xF7 BALANCE PUSH19 0x405E5A516CB0F01E3714B596CAE28267A4321D SMOD 0xED PUSH5 0x736F6C6343 STOP ADDMOD EXP STOP CALLER ",
              "sourceMap": "249:2315:1:-:0;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "@tierAtBlockFromReport_271": {
                  "entryPoint": 240,
                  "id": 271,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "@tierAtBlockFromReport_61": {
                  "entryPoint": 396,
                  "id": 61,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "@tierBlock_107": {
                  "entryPoint": 301,
                  "id": 107,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "@tierBlock_289": {
                  "entryPoint": 219,
                  "id": 289,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "@truncateTiersAbove_141": {
                  "entryPoint": 494,
                  "id": 141,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "@truncateTiersAbove_307": {
                  "entryPoint": 252,
                  "id": 307,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "@updateBlocksForTierRange_213": {
                  "entryPoint": 544,
                  "id": 213,
                  "parameterSlots": 4,
                  "returnSlots": 1
                },
                "@updateBlocksForTierRange_332": {
                  "entryPoint": 264,
                  "id": 332,
                  "parameterSlots": 4,
                  "returnSlots": 1
                },
                "@updateReportWithTierAtBlock_245": {
                  "entryPoint": 654,
                  "id": 245,
                  "parameterSlots": 4,
                  "returnSlots": 1
                },
                "@updateReportWithTierAtBlock_357": {
                  "entryPoint": 287,
                  "id": 357,
                  "parameterSlots": 4,
                  "returnSlots": 1
                },
                "abi_decode_enum_Tier": {
                  "entryPoint": 724,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_decode_tuple_t_uint256t_enum$_Tier_$371": {
                  "entryPoint": 744,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "abi_decode_tuple_t_uint256t_enum$_Tier_$371t_enum$_Tier_$371t_uint256": {
                  "entryPoint": 884,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 4
                },
                "abi_decode_tuple_t_uint256t_uint256": {
                  "entryPoint": 788,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "abi_encode_tuple_t_enum$_Tier_$371__to_t_uint8__fromStack_reversed": {
                  "entryPoint": 844,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "checked_mul_t_uint256": {
                  "entryPoint": 997,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "checked_sub_t_uint256": {
                  "entryPoint": 974,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "increment_t_uint256": {
                  "entryPoint": 1028,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "panic_error_0x11": {
                  "entryPoint": 952,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "panic_error_0x21": {
                  "entryPoint": 822,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [
                {
                  "ast": {
                    "nodeType": "YulBlock",
                    "src": "0:2335:3",
                    "statements": [
                      {
                        "nodeType": "YulBlock",
                        "src": "6:3:3",
                        "statements": []
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "65:94:3",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "75:29:3",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "97:6:3"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "84:12:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "84:20:3"
                              },
                              "variableNames": [
                                {
                                  "name": "value",
                                  "nodeType": "YulIdentifier",
                                  "src": "75:5:3"
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "137:16:3",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "146:1:3",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "149:1:3",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "139:6:3"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "139:12:3"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "139:12:3"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "126:5:3"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "133:1:3",
                                        "type": "",
                                        "value": "9"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "lt",
                                      "nodeType": "YulIdentifier",
                                      "src": "123:2:3"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "123:12:3"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "116:6:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "116:20:3"
                              },
                              "nodeType": "YulIf",
                              "src": "113:40:3"
                            }
                          ]
                        },
                        "name": "abi_decode_enum_Tier",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "offset",
                            "nodeType": "YulTypedName",
                            "src": "44:6:3",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "55:5:3",
                            "type": ""
                          }
                        ],
                        "src": "14:145:3"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "259:169:3",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "305:16:3",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "314:1:3",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "317:1:3",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "307:6:3"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "307:12:3"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "307:12:3"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "280:7:3"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "289:9:3"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "276:3:3"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "276:23:3"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "301:2:3",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "272:3:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "272:32:3"
                              },
                              "nodeType": "YulIf",
                              "src": "269:52:3"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "330:33:3",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "353:9:3"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "340:12:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "340:23:3"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "330:6:3"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "372:50:3",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "407:9:3"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "418:2:3",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "403:3:3"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "403:18:3"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_enum_Tier",
                                  "nodeType": "YulIdentifier",
                                  "src": "382:20:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "382:40:3"
                              },
                              "variableNames": [
                                {
                                  "name": "value1",
                                  "nodeType": "YulIdentifier",
                                  "src": "372:6:3"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_uint256t_enum$_Tier_$371",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "217:9:3",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "228:7:3",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "240:6:3",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulTypedName",
                            "src": "248:6:3",
                            "type": ""
                          }
                        ],
                        "src": "164:264:3"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "534:76:3",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "544:26:3",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "556:9:3"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "567:2:3",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "552:3:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "552:18:3"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "544:4:3"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "586:9:3"
                                  },
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "597:6:3"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "579:6:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "579:25:3"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "579:25:3"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "503:9:3",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "514:6:3",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "525:4:3",
                            "type": ""
                          }
                        ],
                        "src": "433:177:3"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "702:161:3",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "748:16:3",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "757:1:3",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "760:1:3",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "750:6:3"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "750:12:3"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "750:12:3"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "723:7:3"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "732:9:3"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "719:3:3"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "719:23:3"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "744:2:3",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "715:3:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "715:32:3"
                              },
                              "nodeType": "YulIf",
                              "src": "712:52:3"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "773:33:3",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "796:9:3"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "783:12:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "783:23:3"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "773:6:3"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "815:42:3",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "842:9:3"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "853:2:3",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "838:3:3"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "838:18:3"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "825:12:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "825:32:3"
                              },
                              "variableNames": [
                                {
                                  "name": "value1",
                                  "nodeType": "YulIdentifier",
                                  "src": "815:6:3"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_uint256t_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "660:9:3",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "671:7:3",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "683:6:3",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulTypedName",
                            "src": "691:6:3",
                            "type": ""
                          }
                        ],
                        "src": "615:248:3"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "900:95:3",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "917:1:3",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "924:3:3",
                                        "type": "",
                                        "value": "224"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "929:10:3",
                                        "type": "",
                                        "value": "0x4e487b71"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "920:3:3"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "920:20:3"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "910:6:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "910:31:3"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "910:31:3"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "957:1:3",
                                    "type": "",
                                    "value": "4"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "960:4:3",
                                    "type": "",
                                    "value": "0x21"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "950:6:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "950:15:3"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "950:15:3"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "981:1:3",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "984:4:3",
                                    "type": "",
                                    "value": "0x24"
                                  }
                                ],
                                "functionName": {
                                  "name": "revert",
                                  "nodeType": "YulIdentifier",
                                  "src": "974:6:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "974:15:3"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "974:15:3"
                            }
                          ]
                        },
                        "name": "panic_error_0x21",
                        "nodeType": "YulFunctionDefinition",
                        "src": "868:127:3"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "1107:229:3",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "1117:26:3",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1129:9:3"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1140:2:3",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1125:3:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1125:18:3"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "1117:4:3"
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "1185:111:3",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1206:1:3",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "1213:3:3",
                                              "type": "",
                                              "value": "224"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "1218:10:3",
                                              "type": "",
                                              "value": "0x4e487b71"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "shl",
                                            "nodeType": "YulIdentifier",
                                            "src": "1209:3:3"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "1209:20:3"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "1199:6:3"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1199:31:3"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1199:31:3"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1250:1:3",
                                          "type": "",
                                          "value": "4"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1253:4:3",
                                          "type": "",
                                          "value": "0x21"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "1243:6:3"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1243:15:3"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1243:15:3"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1278:1:3",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1281:4:3",
                                          "type": "",
                                          "value": "0x24"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "1271:6:3"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1271:15:3"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1271:15:3"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "1165:6:3"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1173:1:3",
                                        "type": "",
                                        "value": "9"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "lt",
                                      "nodeType": "YulIdentifier",
                                      "src": "1162:2:3"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1162:13:3"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "1155:6:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1155:21:3"
                              },
                              "nodeType": "YulIf",
                              "src": "1152:144:3"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1312:9:3"
                                  },
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "1323:6:3"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "1305:6:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1305:25:3"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1305:25:3"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_enum$_Tier_$371__to_t_uint8__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "1076:9:3",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "1087:6:3",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "1098:4:3",
                            "type": ""
                          }
                        ],
                        "src": "1000:336:3"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "1478:280:3",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "1525:16:3",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1534:1:3",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1537:1:3",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "1527:6:3"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1527:12:3"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1527:12:3"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "1499:7:3"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "1508:9:3"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "1495:3:3"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1495:23:3"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1520:3:3",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1491:3:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1491:33:3"
                              },
                              "nodeType": "YulIf",
                              "src": "1488:53:3"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "1550:33:3",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1573:9:3"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "1560:12:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1560:23:3"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "1550:6:3"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "1592:50:3",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "1627:9:3"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1638:2:3",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1623:3:3"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1623:18:3"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_enum_Tier",
                                  "nodeType": "YulIdentifier",
                                  "src": "1602:20:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1602:40:3"
                              },
                              "variableNames": [
                                {
                                  "name": "value1",
                                  "nodeType": "YulIdentifier",
                                  "src": "1592:6:3"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "1651:50:3",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "1686:9:3"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1697:2:3",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1682:3:3"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1682:18:3"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_enum_Tier",
                                  "nodeType": "YulIdentifier",
                                  "src": "1661:20:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1661:40:3"
                              },
                              "variableNames": [
                                {
                                  "name": "value2",
                                  "nodeType": "YulIdentifier",
                                  "src": "1651:6:3"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "1710:42:3",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "1737:9:3"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1748:2:3",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1733:3:3"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1733:18:3"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "1720:12:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1720:32:3"
                              },
                              "variableNames": [
                                {
                                  "name": "value3",
                                  "nodeType": "YulIdentifier",
                                  "src": "1710:6:3"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_uint256t_enum$_Tier_$371t_enum$_Tier_$371t_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "1420:9:3",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "1431:7:3",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "1443:6:3",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulTypedName",
                            "src": "1451:6:3",
                            "type": ""
                          },
                          {
                            "name": "value2",
                            "nodeType": "YulTypedName",
                            "src": "1459:6:3",
                            "type": ""
                          },
                          {
                            "name": "value3",
                            "nodeType": "YulTypedName",
                            "src": "1467:6:3",
                            "type": ""
                          }
                        ],
                        "src": "1341:417:3"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "1795:95:3",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1812:1:3",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1819:3:3",
                                        "type": "",
                                        "value": "224"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1824:10:3",
                                        "type": "",
                                        "value": "0x4e487b71"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "1815:3:3"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1815:20:3"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "1805:6:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1805:31:3"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1805:31:3"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1852:1:3",
                                    "type": "",
                                    "value": "4"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1855:4:3",
                                    "type": "",
                                    "value": "0x11"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "1845:6:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1845:15:3"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1845:15:3"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1876:1:3",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1879:4:3",
                                    "type": "",
                                    "value": "0x24"
                                  }
                                ],
                                "functionName": {
                                  "name": "revert",
                                  "nodeType": "YulIdentifier",
                                  "src": "1869:6:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1869:15:3"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1869:15:3"
                            }
                          ]
                        },
                        "name": "panic_error_0x11",
                        "nodeType": "YulFunctionDefinition",
                        "src": "1763:127:3"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "1944:76:3",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "1966:22:3",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x11",
                                        "nodeType": "YulIdentifier",
                                        "src": "1968:16:3"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1968:18:3"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1968:18:3"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "1960:1:3"
                                  },
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "1963:1:3"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1957:2:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1957:8:3"
                              },
                              "nodeType": "YulIf",
                              "src": "1954:34:3"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "1997:17:3",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "2009:1:3"
                                  },
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "2012:1:3"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "2005:3:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2005:9:3"
                              },
                              "variableNames": [
                                {
                                  "name": "diff",
                                  "nodeType": "YulIdentifier",
                                  "src": "1997:4:3"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "checked_sub_t_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "x",
                            "nodeType": "YulTypedName",
                            "src": "1926:1:3",
                            "type": ""
                          },
                          {
                            "name": "y",
                            "nodeType": "YulTypedName",
                            "src": "1929:1:3",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "diff",
                            "nodeType": "YulTypedName",
                            "src": "1935:4:3",
                            "type": ""
                          }
                        ],
                        "src": "1895:125:3"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "2077:116:3",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "2136:22:3",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x11",
                                        "nodeType": "YulIdentifier",
                                        "src": "2138:16:3"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2138:18:3"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "2138:18:3"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "x",
                                            "nodeType": "YulIdentifier",
                                            "src": "2108:1:3"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "iszero",
                                          "nodeType": "YulIdentifier",
                                          "src": "2101:6:3"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2101:9:3"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "2094:6:3"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2094:17:3"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "y",
                                        "nodeType": "YulIdentifier",
                                        "src": "2116:1:3"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "2127:1:3",
                                                "type": "",
                                                "value": "0"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "not",
                                              "nodeType": "YulIdentifier",
                                              "src": "2123:3:3"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "2123:6:3"
                                          },
                                          {
                                            "name": "x",
                                            "nodeType": "YulIdentifier",
                                            "src": "2131:1:3"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "div",
                                          "nodeType": "YulIdentifier",
                                          "src": "2119:3:3"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2119:14:3"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "gt",
                                      "nodeType": "YulIdentifier",
                                      "src": "2113:2:3"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2113:21:3"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "2090:3:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2090:45:3"
                              },
                              "nodeType": "YulIf",
                              "src": "2087:71:3"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "2167:20:3",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "2182:1:3"
                                  },
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "2185:1:3"
                                  }
                                ],
                                "functionName": {
                                  "name": "mul",
                                  "nodeType": "YulIdentifier",
                                  "src": "2178:3:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2178:9:3"
                              },
                              "variableNames": [
                                {
                                  "name": "product",
                                  "nodeType": "YulIdentifier",
                                  "src": "2167:7:3"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "checked_mul_t_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "x",
                            "nodeType": "YulTypedName",
                            "src": "2056:1:3",
                            "type": ""
                          },
                          {
                            "name": "y",
                            "nodeType": "YulTypedName",
                            "src": "2059:1:3",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "product",
                            "nodeType": "YulTypedName",
                            "src": "2065:7:3",
                            "type": ""
                          }
                        ],
                        "src": "2025:168:3"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "2245:88:3",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "2276:22:3",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x11",
                                        "nodeType": "YulIdentifier",
                                        "src": "2278:16:3"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2278:18:3"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "2278:18:3"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "2261:5:3"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2272:1:3",
                                        "type": "",
                                        "value": "0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "2268:3:3"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2268:6:3"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "2258:2:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2258:17:3"
                              },
                              "nodeType": "YulIf",
                              "src": "2255:43:3"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "2307:20:3",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "2318:5:3"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2325:1:3",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2314:3:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2314:13:3"
                              },
                              "variableNames": [
                                {
                                  "name": "ret",
                                  "nodeType": "YulIdentifier",
                                  "src": "2307:3:3"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "increment_t_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "2227:5:3",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "ret",
                            "nodeType": "YulTypedName",
                            "src": "2237:3:3",
                            "type": ""
                          }
                        ],
                        "src": "2198:135:3"
                      }
                    ]
                  },
                  "contents": "{\n    { }\n    function abi_decode_enum_Tier(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(lt(value, 9)) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_uint256t_enum$_Tier_$371(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_enum_Tier(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function panic_error_0x21()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_enum$_Tier_$371__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        if iszero(lt(value0, 9))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x21)\n            revert(0, 0x24)\n        }\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_uint256t_enum$_Tier_$371t_enum$_Tier_$371t_uint256(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_enum_Tier(add(headStart, 32))\n        value2 := abi_decode_enum_Tier(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n}",
                  "id": 3,
                  "language": "Yul",
                  "name": "#utility.yul"
                }
              ],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "608060405234801561001057600080fd5b50600436106100575760003560e01c80630e47450b1461005c5780636ed9558d146100825780637c76a2fb146100a2578063d37fc68a146100b5578063d4707031146100c8575b600080fd5b61006f61006a3660046102e8565b6100db565b6040519081526020015b60405180910390f35b610095610090366004610314565b6100f0565b604051610079919061034c565b61006f6100b03660046102e8565b6100fc565b61006f6100c3366004610374565b610108565b61006f6100d6366004610374565b61011f565b60006100e7838361012d565b90505b92915050565b60006100e7838361018c565b60006100e783836101ee565b600061011685858585610220565b95945050505050565b60006101168585858561028e565b60008082600881111561014257610142610336565b1415610150575060006100ea565b6000600183600881111561016657610166610336565b61017091906103ce565b61017b9060206103e5565b9390931c63ffffffff169392505050565b6000805b60088110156101e65763ffffffff83166101ab8260206103e5565b85901c63ffffffff1611156101d4578060088111156101cc576101cc610336565b9150506100ea565b806101de81610404565b915050610190565b5060086100e7565b60008082600881111561020357610203610336565b61020e9060206103e5565b600019811c901b841791505092915050565b600080600085600881111561023757610237610336565b90505b84600881111561024c5761024c610336565b8110156102835761025e8160206103e5565b63ffffffff811b199790971684881b179691508061027b81610404565b91505061023a565b509495945050505050565b60008360088111156102a2576102a2610336565b8360088111156102b4576102b4610336565b106102ca576102c585858585610220565b610116565b61011685846101ee565b8035600981106102e357600080fd5b919050565b600080604083850312156102fb57600080fd5b8235915061030b602084016102d4565b90509250929050565b6000806040838503121561032757600080fd5b50508035926020909101359150565b634e487b7160e01b600052602160045260246000fd5b602081016009831061036e57634e487b7160e01b600052602160045260246000fd5b91905290565b6000806000806080858703121561038a57600080fd5b8435935061039a602086016102d4565b92506103a8604086016102d4565b9396929550929360600135925050565b634e487b7160e01b600052601160045260246000fd5b6000828210156103e0576103e06103b8565b500390565b60008160001904831182151516156103ff576103ff6103b8565b500290565b6000600019821415610418576104186103b8565b506001019056fea26469706673582212204df1deb48d97b311f73172405e5a516cb0f01e3714b596cae28267a4321d07ed64736f6c634300080a0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x57 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xE47450B EQ PUSH2 0x5C JUMPI DUP1 PUSH4 0x6ED9558D EQ PUSH2 0x82 JUMPI DUP1 PUSH4 0x7C76A2FB EQ PUSH2 0xA2 JUMPI DUP1 PUSH4 0xD37FC68A EQ PUSH2 0xB5 JUMPI DUP1 PUSH4 0xD4707031 EQ PUSH2 0xC8 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6F PUSH2 0x6A CALLDATASIZE PUSH1 0x4 PUSH2 0x2E8 JUMP JUMPDEST PUSH2 0xDB JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x95 PUSH2 0x90 CALLDATASIZE PUSH1 0x4 PUSH2 0x314 JUMP JUMPDEST PUSH2 0xF0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x79 SWAP2 SWAP1 PUSH2 0x34C JUMP JUMPDEST PUSH2 0x6F PUSH2 0xB0 CALLDATASIZE PUSH1 0x4 PUSH2 0x2E8 JUMP JUMPDEST PUSH2 0xFC JUMP JUMPDEST PUSH2 0x6F PUSH2 0xC3 CALLDATASIZE PUSH1 0x4 PUSH2 0x374 JUMP JUMPDEST PUSH2 0x108 JUMP JUMPDEST PUSH2 0x6F PUSH2 0xD6 CALLDATASIZE PUSH1 0x4 PUSH2 0x374 JUMP JUMPDEST PUSH2 0x11F JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE7 DUP4 DUP4 PUSH2 0x12D JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE7 DUP4 DUP4 PUSH2 0x18C JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE7 DUP4 DUP4 PUSH2 0x1EE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x116 DUP6 DUP6 DUP6 DUP6 PUSH2 0x220 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x116 DUP6 DUP6 DUP6 DUP6 PUSH2 0x28E JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x142 JUMPI PUSH2 0x142 PUSH2 0x336 JUMP JUMPDEST EQ ISZERO PUSH2 0x150 JUMPI POP PUSH1 0x0 PUSH2 0xEA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP4 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x166 JUMPI PUSH2 0x166 PUSH2 0x336 JUMP JUMPDEST PUSH2 0x170 SWAP2 SWAP1 PUSH2 0x3CE JUMP JUMPDEST PUSH2 0x17B SWAP1 PUSH1 0x20 PUSH2 0x3E5 JUMP JUMPDEST SWAP4 SWAP1 SWAP4 SHR PUSH4 0xFFFFFFFF AND SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST PUSH1 0x8 DUP2 LT ISZERO PUSH2 0x1E6 JUMPI PUSH4 0xFFFFFFFF DUP4 AND PUSH2 0x1AB DUP3 PUSH1 0x20 PUSH2 0x3E5 JUMP JUMPDEST DUP6 SWAP1 SHR PUSH4 0xFFFFFFFF AND GT ISZERO PUSH2 0x1D4 JUMPI DUP1 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x1CC JUMPI PUSH2 0x1CC PUSH2 0x336 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xEA JUMP JUMPDEST DUP1 PUSH2 0x1DE DUP2 PUSH2 0x404 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x190 JUMP JUMPDEST POP PUSH1 0x8 PUSH2 0xE7 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x203 JUMPI PUSH2 0x203 PUSH2 0x336 JUMP JUMPDEST PUSH2 0x20E SWAP1 PUSH1 0x20 PUSH2 0x3E5 JUMP JUMPDEST PUSH1 0x0 NOT DUP2 SHR SWAP1 SHL DUP5 OR SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x237 JUMPI PUSH2 0x237 PUSH2 0x336 JUMP JUMPDEST SWAP1 POP JUMPDEST DUP5 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x24C JUMPI PUSH2 0x24C PUSH2 0x336 JUMP JUMPDEST DUP2 LT ISZERO PUSH2 0x283 JUMPI PUSH2 0x25E DUP2 PUSH1 0x20 PUSH2 0x3E5 JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP2 SHL NOT SWAP8 SWAP1 SWAP8 AND DUP5 DUP9 SHL OR SWAP7 SWAP2 POP DUP1 PUSH2 0x27B DUP2 PUSH2 0x404 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x23A JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x2A2 JUMPI PUSH2 0x2A2 PUSH2 0x336 JUMP JUMPDEST DUP4 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x2B4 JUMPI PUSH2 0x2B4 PUSH2 0x336 JUMP JUMPDEST LT PUSH2 0x2CA JUMPI PUSH2 0x2C5 DUP6 DUP6 DUP6 DUP6 PUSH2 0x220 JUMP JUMPDEST PUSH2 0x116 JUMP JUMPDEST PUSH2 0x116 DUP6 DUP5 PUSH2 0x1EE JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x9 DUP2 LT PUSH2 0x2E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x30B PUSH1 0x20 DUP5 ADD PUSH2 0x2D4 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x327 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 DUP2 ADD PUSH1 0x9 DUP4 LT PUSH2 0x36E JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x38A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH2 0x39A PUSH1 0x20 DUP7 ADD PUSH2 0x2D4 JUMP JUMPDEST SWAP3 POP PUSH2 0x3A8 PUSH1 0x40 DUP7 ADD PUSH2 0x2D4 JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP3 SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x3E0 JUMPI PUSH2 0x3E0 PUSH2 0x3B8 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x3FF JUMPI PUSH2 0x3FF PUSH2 0x3B8 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x418 JUMPI PUSH2 0x418 PUSH2 0x3B8 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4D CALL 0xDE 0xB4 DUP14 SWAP8 0xB3 GT 0xF7 BALANCE PUSH19 0x405E5A516CB0F01E3714B596CAE28267A4321D SMOD 0xED PUSH5 0x736F6C6343 STOP ADDMOD EXP STOP CALLER ",
              "sourceMap": "249:2315:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;772:172;;;;;;:::i;:::-;;:::i;:::-;;;579:25:3;;;567:2;552:18;772:172:1;;;;;;;;426:210;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;1089:190::-;;;;;;:::i;:::-;;:::i;1537:379::-;;;;;;:::i;:::-;;:::i;2177:385::-;;;;;;:::i;:::-;;:::i;772:172::-;873:7;903:34;922:7;931:5;903:18;:34::i;:::-;896:41;;772:172;;;;;:::o;426:210::-;543:10;576:53;607:7;616:12;576:30;:53::i;1089:190::-;1199:7;1229:43;1257:7;1266:5;1229:27;:43::i;1537:379::-;1715:7;1753:156;1804:7;1829:10;1857:8;1883:12;1753:33;:156::i;:::-;1734:175;1537:379;-1:-1:-1;;;;;1537:379:1:o;2177:385::-;2358:7;2396:159;2450:7;2475:10;2503:8;2529:12;2396:36;:159::i;2599:441:0:-;2700:7;;2828:5;:24;;;;;;;;:::i;:::-;;2824:43;;;-1:-1:-1;2863:1:0;2856:8;;2824:43;2877:15;2913:1;2904:5;2896:14;;;;;;;;:::i;:::-;:18;;;;:::i;:::-;2895:25;;2918:2;2895:25;:::i;:::-;2990:18;;;;2937:96;;;2599:441;-1:-1:-1;;;2599:441:0:o;1835:362::-;1958:10;;1984:177;2010:1;2005:2;:6;1984:177;;;2037:58;;;2064:5;:2;2067;2064:5;:::i;:::-;2052:7;:18;;2037:58;;;2033:118;;;2133:2;2122:14;;;;;;;;:::i;:::-;2115:21;;;;;2033:118;2013:4;;;;:::i;:::-;;;;1984:177;;;-1:-1:-1;2188:1:0;2177:13;;3274:272;3384:7;3407:15;3433:5;3425:14;;;;;;;;:::i;:::-;:19;;3442:2;3425:19;:::i;:::-;-1:-1:-1;;3471:24:0;;3470:37;;3524:15;;;-1:-1:-1;;3274:272:0;;;;:::o;4049:529::-;4235:7;4258:15;4288:10;4309;4301:19;;;;;;;;:::i;:::-;4288:32;;4283:265;4335:8;4327:17;;;;;;;;:::i;:::-;4322:2;:22;4283:265;;;4376:7;:2;4381;4376:7;:::i;:::-;4443:30;:41;;4434:51;4424:61;;;;4513:23;;;4423:114;;4366:17;-1:-1:-1;4346:4:0;;;;:::i;:::-;;;;4283:265;;;-1:-1:-1;4564:7:0;;4049:529;-1:-1:-1;;;;;4049:529:0:o;5504:461::-;5693:7;5734:10;5723:21;;;;;;;;:::i;:::-;:8;:21;;;;;;;;:::i;:::-;;:235;;5811:147;5853:7;5878:10;5906:8;5932:12;5811:24;:147::i;:::-;5723:235;;;5759:37;5778:7;5787:8;5759:18;:37::i;14:145:3:-;84:20;;133:1;123:12;;113:40;;149:1;146;139:12;113:40;14:145;;;:::o;164:264::-;240:6;248;301:2;289:9;280:7;276:23;272:32;269:52;;;317:1;314;307:12;269:52;353:9;340:23;330:33;;382:40;418:2;407:9;403:18;382:40;:::i;:::-;372:50;;164:264;;;;;:::o;615:248::-;683:6;691;744:2;732:9;723:7;719:23;715:32;712:52;;;760:1;757;750:12;712:52;-1:-1:-1;;783:23:3;;;853:2;838:18;;;825:32;;-1:-1:-1;615:248:3:o;868:127::-;929:10;924:3;920:20;917:1;910:31;960:4;957:1;950:15;984:4;981:1;974:15;1000:336;1140:2;1125:18;;1173:1;1162:13;;1152:144;;1218:10;1213:3;1209:20;1206:1;1199:31;1253:4;1250:1;1243:15;1281:4;1278:1;1271:15;1152:144;1305:25;;;1000:336;:::o;1341:417::-;1443:6;1451;1459;1467;1520:3;1508:9;1499:7;1495:23;1491:33;1488:53;;;1537:1;1534;1527:12;1488:53;1573:9;1560:23;1550:33;;1602:40;1638:2;1627:9;1623:18;1602:40;:::i;:::-;1592:50;;1661:40;1697:2;1686:9;1682:18;1661:40;:::i;:::-;1341:417;;;;-1:-1:-1;1651:50:3;;1748:2;1733:18;1720:32;;-1:-1:-1;;1341:417:3:o;1763:127::-;1824:10;1819:3;1815:20;1812:1;1805:31;1855:4;1852:1;1845:15;1879:4;1876:1;1869:15;1895:125;1935:4;1963:1;1960;1957:8;1954:34;;;1968:18;;:::i;:::-;-1:-1:-1;2005:9:3;;1895:125::o;2025:168::-;2065:7;2131:1;2127;2123:6;2119:14;2116:1;2113:21;2108:1;2101:9;2094:17;2090:45;2087:71;;;2138:18;;:::i;:::-;-1:-1:-1;2178:9:3;;2025:168::o;2198:135::-;2237:3;-1:-1:-1;;2258:17:3;;2255:43;;;2278:18;;:::i;:::-;-1:-1:-1;2325:1:3;2314:13;;2198:135::o"
            },
            "methodIdentifiers": {
              "tierAtBlockFromReport(uint256,uint256)": "6ed9558d",
              "tierBlock(uint256,uint8)": "0e47450b",
              "truncateTiersAbove(uint256,uint8)": "7c76a2fb",
              "updateBlocksForTierRange(uint256,uint8,uint8,uint256)": "d37fc68a",
              "updateReportWithTierAtBlock(uint256,uint8,uint8,uint256)": "d4707031"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"report_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber_\",\"type\":\"uint256\"}],\"name\":\"tierAtBlockFromReport\",\"outputs\":[{\"internalType\":\"enum ITier.Tier\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"report_\",\"type\":\"uint256\"},{\"internalType\":\"enum ITier.Tier\",\"name\":\"tier_\",\"type\":\"uint8\"}],\"name\":\"tierBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"report_\",\"type\":\"uint256\"},{\"internalType\":\"enum ITier.Tier\",\"name\":\"tier_\",\"type\":\"uint8\"}],\"name\":\"truncateTiersAbove\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"report_\",\"type\":\"uint256\"},{\"internalType\":\"enum ITier.Tier\",\"name\":\"startTier_\",\"type\":\"uint8\"},{\"internalType\":\"enum ITier.Tier\",\"name\":\"endTier_\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber_\",\"type\":\"uint256\"}],\"name\":\"updateBlocksForTierRange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"report_\",\"type\":\"uint256\"},{\"internalType\":\"enum ITier.Tier\",\"name\":\"startTier_\",\"type\":\"uint8\"},{\"internalType\":\"enum ITier.Tier\",\"name\":\"endTier_\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber_\",\"type\":\"uint256\"}],\"name\":\"updateReportWithTierAtBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"tierAtBlockFromReport(uint256,uint256)\":{\"params\":{\"blockNumber_\":\"Forwarded to `TierUtil`.\",\"report_\":\"Forwarded to `TierUtil`.\"}},\"tierBlock(uint256,uint8)\":{\"params\":{\"report_\":\"Forwarded to `TierUtil`.\",\"tier_\":\"Forwarded to `TierUtil`.\"}},\"truncateTiersAbove(uint256,uint8)\":{\"params\":{\"report_\":\"Forwarded to `TierUtil`.\",\"tier_\":\"Forwarded to `TierUtil`.\"}},\"updateBlocksForTierRange(uint256,uint8,uint8,uint256)\":{\"params\":{\"blockNumber_\":\"Forwarded to `TierUtil`.\",\"endTier_\":\"Forwarded to `TierUtil`.\",\"report_\":\"Forwarded to `TierUtil`.\",\"startTier_\":\"Forwarded to `TierUtil`.\"}},\"updateReportWithTierAtBlock(uint256,uint8,uint8,uint256)\":{\"params\":{\"blockNumber_\":\"Forwarded to `TierUtil`.\",\"endTier_\":\"Forwarded to `TierUtil`.\",\"report_\":\"Forwarded to `TierUtil`.\",\"startTier_\":\"Forwarded to `TierUtil`.\"}}},\"title\":\"TierUtilTest Thin wrapper around the `TierUtil` library for hardhat unit testing.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"tierAtBlockFromReport(uint256,uint256)\":{\"notice\":\"Wraps `TierUtil.tierAtBlockFromReport`.\"},\"tierBlock(uint256,uint8)\":{\"notice\":\"Wraps `TierUtil.tierBlock`.\"},\"truncateTiersAbove(uint256,uint8)\":{\"notice\":\"Wraps `TierUtil.truncateTiersAbove`.\"},\"updateBlocksForTierRange(uint256,uint8,uint8,uint256)\":{\"notice\":\"Wraps `TierUtil.updateBlocksForTierRange`.\"},\"updateReportWithTierAtBlock(uint256,uint8,uint8,uint256)\":{\"notice\":\"Wraps `TierUtil.updateReportWithTierAtBlock`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/TierUtilTest.sol\":\"TierUtilTest\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/libraries/TierUtil.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\n\\npragma solidity 0.8.10;\\n\\nimport { ITier } from \\\"../tier/ITier.sol\\\";\\n\\n/// @title TierUtil\\n/// @notice `TierUtil` implements several pure functions that can be\\n/// used to interface with reports.\\n/// - `tierAtBlockFromReport`: Returns the highest status achieved relative to\\n/// a block number and report. Statuses gained after that block are ignored.\\n/// - `tierBlock`: Returns the block that a given tier has been held\\n/// since according to a report.\\n/// - `truncateTiersAbove`: Resets all the tiers above the reference tier.\\n/// - `updateBlocksForTierRange`: Updates a report with a block\\n/// number for every tier in a range.\\n/// - `updateReportWithTierAtBlock`: Updates a report to a new tier.\\n/// @dev Utilities to consistently read, write and manipulate tiers in reports.\\n/// The low-level bit shifting can be difficult to get right so this factors\\n/// that out.\\nlibrary TierUtil {\\n\\n    /// UNINITIALIZED is 0xFF.. as it is infinitely in the future.\\n    uint256 public constant UNINITIALIZED\\n        = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n    /// Returns the highest tier achieved relative to a block number\\n    /// and report.\\n    ///\\n    /// Note that typically the report will be from the _current_ contract\\n    /// state, i.e. `block.number` but not always. Tiers gained after the\\n    /// reference block are ignored.\\n    ///\\n    /// When the `report` comes from a later block than the `blockNumber` this\\n    /// means the user must have held the tier continuously from `blockNumber`\\n    /// _through_ to the report block.\\n    /// I.e. NOT a snapshot.\\n    ///\\n    /// @param report_ A report as per `ITier`.\\n    /// @param blockNumber_ The block number to check the tiers against.\\n    /// @return The highest tier held since `blockNumber` as per `report`.\\n    function tierAtBlockFromReport(\\n        uint256 report_,\\n        uint256 blockNumber_\\n    )\\n        internal pure returns (ITier.Tier)\\n    {\\n        for (uint256 i_ = 0; i_ < 8; i_++) {\\n            if (uint32(uint256(report_ >> (i_*32))) > uint32(blockNumber_)) {\\n                return ITier.Tier(i_);\\n            }\\n        }\\n        return ITier.Tier(8);\\n    }\\n\\n    /// Returns the block that a given tier has been held since from a report.\\n    ///\\n    /// The report MUST encode \\\"never\\\" as 0xFFFFFFFF. This ensures\\n    /// compatibility with `tierAtBlockFromReport`.\\n    ///\\n    /// @param report_ The report to read a block number from.\\n    /// @param tier_ The Tier to read the block number for.\\n    /// @return The block number this has been held since.\\n    function tierBlock(uint256 report_, ITier.Tier tier_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // ZERO is a special case. Everyone has always been at least ZERO,\\n        // since block 0.\\n        if (tier_ == ITier.Tier.ZERO) { return 0; }\\n\\n        uint256 offset_ = (uint256(tier_) - 1) * 32;\\n        return uint256(uint32(\\n            uint256(\\n                report_ >> offset_\\n            )\\n        ));\\n    }\\n\\n    /// Resets all the tiers above the reference tier to 0xFFFFFFFF.\\n    ///\\n    /// @param report_ Report to truncate with high bit 1s.\\n    /// @param tier_ Tier to truncate above (exclusive).\\n    /// @return Truncated report.\\n    function truncateTiersAbove(uint256 report_, ITier.Tier tier_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 offset_ = uint256(tier_) * 32;\\n        uint256 mask_ = (UNINITIALIZED >> offset_) << offset_;\\n        return report_ | mask_;\\n    }\\n\\n    /// Updates a report with a block number for every status integer in a\\n    /// range.\\n    ///\\n    /// Does nothing if the end status is equal or less than the start status.\\n    /// @param report_ The report to update.\\n    /// @param startTier_ The `Tier` at the start of the range (exclusive).\\n    /// @param endTier_ The `Tier` at the end of the range (inclusive).\\n    /// @param blockNumber_ The block number to set for every status\\n    /// in the range.\\n    /// @return The updated report.\\n    function updateBlocksForTierRange(\\n        uint256 report_,\\n        ITier.Tier startTier_,\\n        ITier.Tier endTier_,\\n        uint256 blockNumber_\\n    )\\n        internal pure returns (uint256)\\n    {\\n        uint256 offset_;\\n        for (uint256 i_ = uint256(startTier_); i_ < uint256(endTier_); i_++) {\\n            offset_ = i_ * 32;\\n            report_ =\\n                (report_ & ~uint256(uint256(uint32(UNINITIALIZED)) << offset_))\\n                | uint256(blockNumber_ << offset_);\\n        }\\n        return report_;\\n    }\\n\\n    /// Updates a report to a new status.\\n    ///\\n    /// Internally dispatches to `truncateTiersAbove` and\\n    /// `updateBlocksForTierRange`.\\n    /// The dispatch is based on whether the new tier is above or below the\\n    /// current tier.\\n    /// The `startTier_` MUST match the result of `tierAtBlockFromReport`.\\n    /// It is expected the caller will know the current tier when\\n    /// calling this function and need to do other things in the calling scope\\n    /// with it.\\n    ///\\n    /// @param report_ The report to update.\\n    /// @param startTier_ The tier to start updating relative to. Data above\\n    /// this tier WILL BE LOST so probably should be the current tier.\\n    /// @param endTier_ The new highest tier held, at the given block number.\\n    /// @param blockNumber_ The block number to update the highest tier to, and\\n    /// intermediate tiers from `startTier_`.\\n    /// @return The updated report.\\n    function updateReportWithTierAtBlock(\\n        uint256 report_,\\n        ITier.Tier startTier_,\\n        ITier.Tier endTier_,\\n        uint256 blockNumber_\\n    )\\n        internal pure returns (uint256)\\n    {\\n        return endTier_ < startTier_\\n            ? truncateTiersAbove(report_, endTier_)\\n            : updateBlocksForTierRange(\\n                report_,\\n                startTier_,\\n                endTier_,\\n                blockNumber_\\n            );\\n    }\\n\\n}\",\"keccak256\":\"0xc4bde1f366857f2fda9fc9f7d36676f39d9a263f85bfd3b5f51e8d02d769dd5a\",\"license\":\"CAL\"},\"contracts/test/TierUtilTest.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\n\\npragma solidity 0.8.10;\\n\\nimport {ITier} from \\\"../tier/ITier.sol\\\";\\nimport {TierUtil} from \\\"../libraries/TierUtil.sol\\\";\\n\\n/// @title TierUtilTest\\n/// Thin wrapper around the `TierUtil` library for hardhat unit testing.\\ncontract TierUtilTest {\\n    /// Wraps `TierUtil.tierAtBlockFromReport`.\\n    /// @param report_ Forwarded to `TierUtil`.\\n    /// @param blockNumber_ Forwarded to `TierUtil`.\\n    function tierAtBlockFromReport(uint256 report_, uint256 blockNumber_)\\n        external\\n        pure\\n        returns (ITier.Tier)\\n    {\\n        return TierUtil.tierAtBlockFromReport(report_, blockNumber_);\\n    }\\n\\n    /// Wraps `TierUtil.tierBlock`.\\n    /// @param report_ Forwarded to `TierUtil`.\\n    /// @param tier_ Forwarded to `TierUtil`.\\n    function tierBlock(uint256 report_, ITier.Tier tier_)\\n        external\\n        pure\\n        returns (uint256)\\n    {\\n        return TierUtil.tierBlock(report_, tier_);\\n    }\\n\\n    /// Wraps `TierUtil.truncateTiersAbove`.\\n    /// @param report_ Forwarded to `TierUtil`.\\n    /// @param tier_ Forwarded to `TierUtil`.\\n    function truncateTiersAbove(uint256 report_, ITier.Tier tier_)\\n        external\\n        pure\\n        returns (uint256)\\n    {\\n        return TierUtil.truncateTiersAbove(report_, tier_);\\n    }\\n\\n    /// Wraps `TierUtil.updateBlocksForTierRange`.\\n    /// @param report_ Forwarded to `TierUtil`.\\n    /// @param startTier_ Forwarded to `TierUtil`.\\n    /// @param endTier_ Forwarded to `TierUtil`.\\n    /// @param blockNumber_ Forwarded to `TierUtil`.\\n    function updateBlocksForTierRange(\\n        uint256 report_,\\n        ITier.Tier startTier_,\\n        ITier.Tier endTier_,\\n        uint256 blockNumber_\\n    ) external pure returns (uint256) {\\n        return\\n            TierUtil.updateBlocksForTierRange(\\n                report_,\\n                startTier_,\\n                endTier_,\\n                blockNumber_\\n            );\\n    }\\n\\n    /// Wraps `TierUtil.updateReportWithTierAtBlock`.\\n    /// @param report_ Forwarded to `TierUtil`.\\n    /// @param startTier_ Forwarded to `TierUtil`.\\n    /// @param endTier_ Forwarded to `TierUtil`.\\n    /// @param blockNumber_ Forwarded to `TierUtil`.\\n    function updateReportWithTierAtBlock(\\n        uint256 report_,\\n        ITier.Tier startTier_,\\n        ITier.Tier endTier_,\\n        uint256 blockNumber_\\n    ) external pure returns (uint256) {\\n        return\\n            TierUtil.updateReportWithTierAtBlock(\\n                report_,\\n                startTier_,\\n                endTier_,\\n                blockNumber_\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xd3efcdb818db453aa802bef64e91629477e75fae0859d9a5ceb9a090d8a240c4\",\"license\":\"CAL\"},\"contracts/tier/ITier.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\n\\npragma solidity 0.8.10;\\n\\n/// @title ITier\\n/// @notice `ITier` is a simple interface that contracts can\\n/// implement to provide membership lists for other contracts.\\n///\\n/// There are many use-cases for a time-preserving,\\n/// conditional membership list.\\n///\\n/// Some examples include:\\n///\\n/// - Self-serve whitelist to participate in fundraising\\n/// - Lists of users who can claim airdrops and perks\\n/// - Pooling resources with implied governance/reward tiers\\n/// - POAP style attendance proofs allowing access to future exclusive events\\n///\\n/// @dev Standard interface to a tiered membership.\\n///\\n/// A \\\"membership\\\" can represent many things:\\n/// - Exclusive access.\\n/// - Participation in some event or process.\\n/// - KYC completion.\\n/// - Combination of sub-memberships.\\n/// - Etc.\\n///\\n/// The high level requirements for a contract implementing `ITier`:\\n/// - MUST represent held tiers with the `Tier` enum.\\n/// - MUST implement `report`.\\n///   - The report is a `uint256` that SHOULD represent the block each tier has\\n///     been continuously held since encoded as `uint32`.\\n///   - The encoded tiers start at ONE; ZERO is implied if no tier has ever\\n///     been held.\\n///   - `Tier.ZERO` is NOT encoded in the report, it is simply the fallback\\n///     value.\\n///   - If a tier is lost the block data is erased for that tier and will be\\n///     set if/when the tier is regained to the new block.\\n///   - If the historical block information is not available the report MAY\\n///     return `0x00000000` for all held tiers.\\n///   - Tiers that are lost or have never been held MUST return `0xFFFFFFFF`.\\n/// - SHOULD implement `setTier`.\\n///   - Contracts SHOULD revert with `SET_TIER` error if they cannot\\n///     meaningfully set a tier directly.\\n///     For example a contract that can only derive a membership tier by\\n///     reading the state of an external contract cannot set tiers.\\n///   - Contracts implementing `setTier` SHOULD error with `SET_ZERO_TIER`\\n///     if `Tier.ZERO` is being set.\\n/// - MUST emit `TierChange` when `setTier` successfully writes a new tier.\\n///   - Contracts that cannot meaningfully set a tier are exempt.\\ninterface ITier {\\n\\n    /// 9 Possible tiers.\\n    /// Fits nicely as uint32 in uint256 which is helpful for internal storage\\n    /// concerns.\\n    /// 8 tiers can be achieved, ZERO is the tier when no tier has been\\n    /// achieved.\\n    enum Tier {\\n        ZERO,\\n        ONE,\\n        TWO,\\n        THREE,\\n        FOUR,\\n        FIVE,\\n        SIX,\\n        SEVEN,\\n        EIGHT\\n    }\\n\\n    /// Every time a Tier changes we log start and end Tier against the\\n    /// account.\\n    /// This MAY NOT be emitted if reports are being read from the state of an\\n    /// external contract.\\n    event TierChange(\\n        address indexed account,\\n        Tier indexed startTier,\\n        Tier indexed endTier\\n    );\\n\\n    /// @notice Users can set their own tier by calling `setTier`.\\n    ///\\n    /// The contract that implements `ITier` is responsible for checking\\n    /// eligibility and/or taking actions required to set the tier.\\n    ///\\n    /// For example, the contract must take/refund any tokens relevant to\\n    /// changing the tier.\\n    ///\\n    /// Obviously the user is responsible for any approvals for this action\\n    /// prior to calling `setTier`.\\n    ///\\n    /// When the tier is changed a `TierChange` event will be emmited as:\\n    /// ```\\n    /// event TierChange(address account, Tier startTier, Tier endTier);\\n    /// ```\\n    ///\\n    /// The `setTier` function includes arbitrary data as the third\\n    /// parameter. This can be used to disambiguate in the case that\\n    /// there may be many possible options for a user to achieve some tier.\\n    ///\\n    /// For example, consider the case where `Tier.THREE` can be achieved\\n    /// by EITHER locking 1x rare NFT or 3x uncommon NFTs. A user with both\\n    /// could use `data` to explicitly state their intent.\\n    ///\\n    /// NOTE however that _any_ address can call `setTier` for any other\\n    /// address.\\n    ///\\n    /// If you implement `data` or anything that changes state then be very\\n    /// careful to avoid griefing attacks.\\n    ///\\n    /// The `data` parameter can also be ignored by the contract implementing\\n    /// `ITier`. For example, ERC20 tokens are fungible so only the balance\\n    /// approved by the user is relevant to a tier change.\\n    ///\\n    /// The `setTier` function SHOULD prevent users from reassigning\\n    /// `Tier.ZERO` to themselves.\\n    ///\\n    /// The `Tier.ZERO` status represents never having any status.\\n    /// @dev Updates the tier of an account.\\n    ///\\n    /// The implementing contract is responsible for all checks and state\\n    /// changes required to set the tier. For example, taking/refunding\\n    /// funds/NFTs etc.\\n    ///\\n    /// Contracts may disallow directly setting tiers, preferring to derive\\n    /// reports from other onchain data.\\n    /// In this case they should `revert(\\\"SET_TIER\\\");`.\\n    ///\\n    /// @param account Account to change the tier for.\\n    /// @param endTier Tier after the change.\\n    /// @param data Arbitrary input to disambiguate ownership\\n    /// (e.g. NFTs to lock).\\n    function setTier(\\n        address account,\\n        Tier endTier,\\n        bytes memory data\\n    )\\n        external;\\n\\n    /// @notice A tier report is a `uint256` that contains each of the block\\n    /// numbers each tier has been held continously since as a `uint32`.\\n    /// There are 9 possible tier, starting with `Tier.ZERO` for `0` offset or\\n    /// \\\"never held any tier\\\" then working up through 8x 4 byte offsets to the\\n    /// full 256 bits.\\n    ///\\n    /// Low bits = Lower tier.\\n    ///\\n    /// In hexadecimal every 8 characters = one tier, starting at `Tier.EIGHT`\\n    /// from high bits and working down to `Tier.ONE`.\\n    ///\\n    /// `uint32` should be plenty for any blockchain that measures block times\\n    /// in seconds, but reconsider if deploying to an environment with\\n    /// significantly sub-second block times.\\n    ///\\n    /// ~135 years of 1 second blocks fit into `uint32`.\\n    ///\\n    /// `2^8 / (365 * 24 * 60 * 60)`\\n    ///\\n    /// When a user INCREASES their tier they keep all the block numbers they\\n    /// already had, and get new block times for each increased tiers they have\\n    /// earned.\\n    ///\\n    /// When a user DECREASES their tier they return to `0xFFFFFFFF` (never)\\n    /// for every tier level they remove, but keep their block numbers for the\\n    /// remaining tiers.\\n    ///\\n    /// GUIs are encouraged to make this dynamic very clear for users as\\n    /// round-tripping to a lower status and back is a DESTRUCTIVE operation\\n    /// for block times.\\n    ///\\n    /// The intent is that downstream code can provide additional benefits for\\n    /// members who have maintained a certain tier for/since a long time.\\n    /// These benefits can be provided by inspecting the report, and by\\n    /// on-chain contracts directly,\\n    /// rather than needing to work with snapshots etc.\\n    /// @dev Returns the earliest block the account has held each tier for\\n    /// continuously.\\n    /// This is encoded as a uint256 with blocks represented as 8x\\n    /// concatenated uint32.\\n    /// I.e. Each 4 bytes of the uint256 represents a u32 tier start time.\\n    /// The low bits represent low tiers and high bits the high tiers.\\n    /// Implementing contracts should return 0xFFFFFFFF for lost &\\n    /// never-held tiers.\\n    ///\\n    /// @param account Account to get the report for.\\n    /// @return The report blocks encoded as a uint256.\\n    function report(address account) external view returns (uint256);\\n}\",\"keccak256\":\"0x9df1a0a477801f332f9b95fb6d400d2edb4fce18c089c0df0a5affc02ebd4121\",\"license\":\"CAL\"}},\"version\":1}"
        }
      },
      "contracts/tier/ITier.sol": {
        "ITier": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "enum ITier.Tier",
                  "name": "startTier",
                  "type": "uint8"
                },
                {
                  "indexed": true,
                  "internalType": "enum ITier.Tier",
                  "name": "endTier",
                  "type": "uint8"
                }
              ],
              "name": "TierChange",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "report",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "internalType": "enum ITier.Tier",
                  "name": "endTier",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "name": "setTier",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "report(address)": "e053ea31",
              "setTier(address,uint8,bytes)": "52dab69d"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum ITier.Tier\",\"name\":\"startTier\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"enum ITier.Tier\",\"name\":\"endTier\",\"type\":\"uint8\"}],\"name\":\"TierChange\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"report\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"enum ITier.Tier\",\"name\":\"endTier\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"setTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Standard interface to a tiered membership. A \\\"membership\\\" can represent many things: - Exclusive access. - Participation in some event or process. - KYC completion. - Combination of sub-memberships. - Etc. The high level requirements for a contract implementing `ITier`: - MUST represent held tiers with the `Tier` enum. - MUST implement `report`.   - The report is a `uint256` that SHOULD represent the block each tier has     been continuously held since encoded as `uint32`.   - The encoded tiers start at ONE; ZERO is implied if no tier has ever     been held.   - `Tier.ZERO` is NOT encoded in the report, it is simply the fallback     value.   - If a tier is lost the block data is erased for that tier and will be     set if/when the tier is regained to the new block.   - If the historical block information is not available the report MAY     return `0x00000000` for all held tiers.   - Tiers that are lost or have never been held MUST return `0xFFFFFFFF`. - SHOULD implement `setTier`.   - Contracts SHOULD revert with `SET_TIER` error if they cannot     meaningfully set a tier directly.     For example a contract that can only derive a membership tier by     reading the state of an external contract cannot set tiers.   - Contracts implementing `setTier` SHOULD error with `SET_ZERO_TIER`     if `Tier.ZERO` is being set. - MUST emit `TierChange` when `setTier` successfully writes a new tier.   - Contracts that cannot meaningfully set a tier are exempt.\",\"kind\":\"dev\",\"methods\":{\"report(address)\":{\"details\":\"Returns the earliest block the account has held each tier for continuously. This is encoded as a uint256 with blocks represented as 8x concatenated uint32. I.e. Each 4 bytes of the uint256 represents a u32 tier start time. The low bits represent low tiers and high bits the high tiers. Implementing contracts should return 0xFFFFFFFF for lost & never-held tiers.\",\"params\":{\"account\":\"Account to get the report for.\"},\"returns\":{\"_0\":\"The report blocks encoded as a uint256.\"}},\"setTier(address,uint8,bytes)\":{\"details\":\"Updates the tier of an account. The implementing contract is responsible for all checks and state changes required to set the tier. For example, taking/refunding funds/NFTs etc. Contracts may disallow directly setting tiers, preferring to derive reports from other onchain data. In this case they should `revert(\\\"SET_TIER\\\");`.\",\"params\":{\"account\":\"Account to change the tier for.\",\"data\":\"Arbitrary input to disambiguate ownership (e.g. NFTs to lock).\",\"endTier\":\"Tier after the change.\"}}},\"title\":\"ITier\",\"version\":1},\"userdoc\":{\"events\":{\"TierChange(address,uint8,uint8)\":{\"notice\":\"Every time a Tier changes we log start and end Tier against the account. This MAY NOT be emitted if reports are being read from the state of an external contract.\"}},\"kind\":\"user\",\"methods\":{\"report(address)\":{\"notice\":\"A tier report is a `uint256` that contains each of the block numbers each tier has been held continously since as a `uint32`. There are 9 possible tier, starting with `Tier.ZERO` for `0` offset or \\\"never held any tier\\\" then working up through 8x 4 byte offsets to the full 256 bits. Low bits = Lower tier. In hexadecimal every 8 characters = one tier, starting at `Tier.EIGHT` from high bits and working down to `Tier.ONE`. `uint32` should be plenty for any blockchain that measures block times in seconds, but reconsider if deploying to an environment with significantly sub-second block times. ~135 years of 1 second blocks fit into `uint32`. `2^8 / (365 * 24 * 60 * 60)` When a user INCREASES their tier they keep all the block numbers they already had, and get new block times for each increased tiers they have earned. When a user DECREASES their tier they return to `0xFFFFFFFF` (never) for every tier level they remove, but keep their block numbers for the remaining tiers. GUIs are encouraged to make this dynamic very clear for users as round-tripping to a lower status and back is a DESTRUCTIVE operation for block times. The intent is that downstream code can provide additional benefits for members who have maintained a certain tier for/since a long time. These benefits can be provided by inspecting the report, and by on-chain contracts directly, rather than needing to work with snapshots etc.\"},\"setTier(address,uint8,bytes)\":{\"notice\":\"Users can set their own tier by calling `setTier`. The contract that implements `ITier` is responsible for checking eligibility and/or taking actions required to set the tier. For example, the contract must take/refund any tokens relevant to changing the tier. Obviously the user is responsible for any approvals for this action prior to calling `setTier`. When the tier is changed a `TierChange` event will be emmited as: ``` event TierChange(address account, Tier startTier, Tier endTier); ``` The `setTier` function includes arbitrary data as the third parameter. This can be used to disambiguate in the case that there may be many possible options for a user to achieve some tier. For example, consider the case where `Tier.THREE` can be achieved by EITHER locking 1x rare NFT or 3x uncommon NFTs. A user with both could use `data` to explicitly state their intent. NOTE however that _any_ address can call `setTier` for any other address. If you implement `data` or anything that changes state then be very careful to avoid griefing attacks. The `data` parameter can also be ignored by the contract implementing `ITier`. For example, ERC20 tokens are fungible so only the balance approved by the user is relevant to a tier change. The `setTier` function SHOULD prevent users from reassigning `Tier.ZERO` to themselves. The `Tier.ZERO` status represents never having any status.\"}},\"notice\":\"`ITier` is a simple interface that contracts can implement to provide membership lists for other contracts. There are many use-cases for a time-preserving, conditional membership list. Some examples include: - Self-serve whitelist to participate in fundraising - Lists of users who can claim airdrops and perks - Pooling resources with implied governance/reward tiers - POAP style attendance proofs allowing access to future exclusive events\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tier/ITier.sol\":\"ITier\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/tier/ITier.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\n\\npragma solidity 0.8.10;\\n\\n/// @title ITier\\n/// @notice `ITier` is a simple interface that contracts can\\n/// implement to provide membership lists for other contracts.\\n///\\n/// There are many use-cases for a time-preserving,\\n/// conditional membership list.\\n///\\n/// Some examples include:\\n///\\n/// - Self-serve whitelist to participate in fundraising\\n/// - Lists of users who can claim airdrops and perks\\n/// - Pooling resources with implied governance/reward tiers\\n/// - POAP style attendance proofs allowing access to future exclusive events\\n///\\n/// @dev Standard interface to a tiered membership.\\n///\\n/// A \\\"membership\\\" can represent many things:\\n/// - Exclusive access.\\n/// - Participation in some event or process.\\n/// - KYC completion.\\n/// - Combination of sub-memberships.\\n/// - Etc.\\n///\\n/// The high level requirements for a contract implementing `ITier`:\\n/// - MUST represent held tiers with the `Tier` enum.\\n/// - MUST implement `report`.\\n///   - The report is a `uint256` that SHOULD represent the block each tier has\\n///     been continuously held since encoded as `uint32`.\\n///   - The encoded tiers start at ONE; ZERO is implied if no tier has ever\\n///     been held.\\n///   - `Tier.ZERO` is NOT encoded in the report, it is simply the fallback\\n///     value.\\n///   - If a tier is lost the block data is erased for that tier and will be\\n///     set if/when the tier is regained to the new block.\\n///   - If the historical block information is not available the report MAY\\n///     return `0x00000000` for all held tiers.\\n///   - Tiers that are lost or have never been held MUST return `0xFFFFFFFF`.\\n/// - SHOULD implement `setTier`.\\n///   - Contracts SHOULD revert with `SET_TIER` error if they cannot\\n///     meaningfully set a tier directly.\\n///     For example a contract that can only derive a membership tier by\\n///     reading the state of an external contract cannot set tiers.\\n///   - Contracts implementing `setTier` SHOULD error with `SET_ZERO_TIER`\\n///     if `Tier.ZERO` is being set.\\n/// - MUST emit `TierChange` when `setTier` successfully writes a new tier.\\n///   - Contracts that cannot meaningfully set a tier are exempt.\\ninterface ITier {\\n\\n    /// 9 Possible tiers.\\n    /// Fits nicely as uint32 in uint256 which is helpful for internal storage\\n    /// concerns.\\n    /// 8 tiers can be achieved, ZERO is the tier when no tier has been\\n    /// achieved.\\n    enum Tier {\\n        ZERO,\\n        ONE,\\n        TWO,\\n        THREE,\\n        FOUR,\\n        FIVE,\\n        SIX,\\n        SEVEN,\\n        EIGHT\\n    }\\n\\n    /// Every time a Tier changes we log start and end Tier against the\\n    /// account.\\n    /// This MAY NOT be emitted if reports are being read from the state of an\\n    /// external contract.\\n    event TierChange(\\n        address indexed account,\\n        Tier indexed startTier,\\n        Tier indexed endTier\\n    );\\n\\n    /// @notice Users can set their own tier by calling `setTier`.\\n    ///\\n    /// The contract that implements `ITier` is responsible for checking\\n    /// eligibility and/or taking actions required to set the tier.\\n    ///\\n    /// For example, the contract must take/refund any tokens relevant to\\n    /// changing the tier.\\n    ///\\n    /// Obviously the user is responsible for any approvals for this action\\n    /// prior to calling `setTier`.\\n    ///\\n    /// When the tier is changed a `TierChange` event will be emmited as:\\n    /// ```\\n    /// event TierChange(address account, Tier startTier, Tier endTier);\\n    /// ```\\n    ///\\n    /// The `setTier` function includes arbitrary data as the third\\n    /// parameter. This can be used to disambiguate in the case that\\n    /// there may be many possible options for a user to achieve some tier.\\n    ///\\n    /// For example, consider the case where `Tier.THREE` can be achieved\\n    /// by EITHER locking 1x rare NFT or 3x uncommon NFTs. A user with both\\n    /// could use `data` to explicitly state their intent.\\n    ///\\n    /// NOTE however that _any_ address can call `setTier` for any other\\n    /// address.\\n    ///\\n    /// If you implement `data` or anything that changes state then be very\\n    /// careful to avoid griefing attacks.\\n    ///\\n    /// The `data` parameter can also be ignored by the contract implementing\\n    /// `ITier`. For example, ERC20 tokens are fungible so only the balance\\n    /// approved by the user is relevant to a tier change.\\n    ///\\n    /// The `setTier` function SHOULD prevent users from reassigning\\n    /// `Tier.ZERO` to themselves.\\n    ///\\n    /// The `Tier.ZERO` status represents never having any status.\\n    /// @dev Updates the tier of an account.\\n    ///\\n    /// The implementing contract is responsible for all checks and state\\n    /// changes required to set the tier. For example, taking/refunding\\n    /// funds/NFTs etc.\\n    ///\\n    /// Contracts may disallow directly setting tiers, preferring to derive\\n    /// reports from other onchain data.\\n    /// In this case they should `revert(\\\"SET_TIER\\\");`.\\n    ///\\n    /// @param account Account to change the tier for.\\n    /// @param endTier Tier after the change.\\n    /// @param data Arbitrary input to disambiguate ownership\\n    /// (e.g. NFTs to lock).\\n    function setTier(\\n        address account,\\n        Tier endTier,\\n        bytes memory data\\n    )\\n        external;\\n\\n    /// @notice A tier report is a `uint256` that contains each of the block\\n    /// numbers each tier has been held continously since as a `uint32`.\\n    /// There are 9 possible tier, starting with `Tier.ZERO` for `0` offset or\\n    /// \\\"never held any tier\\\" then working up through 8x 4 byte offsets to the\\n    /// full 256 bits.\\n    ///\\n    /// Low bits = Lower tier.\\n    ///\\n    /// In hexadecimal every 8 characters = one tier, starting at `Tier.EIGHT`\\n    /// from high bits and working down to `Tier.ONE`.\\n    ///\\n    /// `uint32` should be plenty for any blockchain that measures block times\\n    /// in seconds, but reconsider if deploying to an environment with\\n    /// significantly sub-second block times.\\n    ///\\n    /// ~135 years of 1 second blocks fit into `uint32`.\\n    ///\\n    /// `2^8 / (365 * 24 * 60 * 60)`\\n    ///\\n    /// When a user INCREASES their tier they keep all the block numbers they\\n    /// already had, and get new block times for each increased tiers they have\\n    /// earned.\\n    ///\\n    /// When a user DECREASES their tier they return to `0xFFFFFFFF` (never)\\n    /// for every tier level they remove, but keep their block numbers for the\\n    /// remaining tiers.\\n    ///\\n    /// GUIs are encouraged to make this dynamic very clear for users as\\n    /// round-tripping to a lower status and back is a DESTRUCTIVE operation\\n    /// for block times.\\n    ///\\n    /// The intent is that downstream code can provide additional benefits for\\n    /// members who have maintained a certain tier for/since a long time.\\n    /// These benefits can be provided by inspecting the report, and by\\n    /// on-chain contracts directly,\\n    /// rather than needing to work with snapshots etc.\\n    /// @dev Returns the earliest block the account has held each tier for\\n    /// continuously.\\n    /// This is encoded as a uint256 with blocks represented as 8x\\n    /// concatenated uint32.\\n    /// I.e. Each 4 bytes of the uint256 represents a u32 tier start time.\\n    /// The low bits represent low tiers and high bits the high tiers.\\n    /// Implementing contracts should return 0xFFFFFFFF for lost &\\n    /// never-held tiers.\\n    ///\\n    /// @param account Account to get the report for.\\n    /// @return The report blocks encoded as a uint256.\\n    function report(address account) external view returns (uint256);\\n}\",\"keccak256\":\"0x9df1a0a477801f332f9b95fb6d400d2edb4fce18c089c0df0a5affc02ebd4121\",\"license\":\"CAL\"}},\"version\":1}"
        }
      }
    },
    "sources": {
      "contracts/libraries/TierUtil.sol": {
        "ast": {
          "absolutePath": "contracts/libraries/TierUtil.sol",
          "exportedSymbols": {
            "ITier": [
              402
            ],
            "TierUtil": [
              246
            ]
          },
          "id": 247,
          "license": "CAL",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1,
              "literals": [
                "solidity",
                "0.8",
                ".10"
              ],
              "nodeType": "PragmaDirective",
              "src": "33:23:0"
            },
            {
              "absolutePath": "contracts/tier/ITier.sol",
              "file": "../tier/ITier.sol",
              "id": 3,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 247,
              "sourceUnit": 403,
              "src": "58:42:0",
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 2,
                    "name": "ITier",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "src": "67:5:0",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "TierUtil",
              "contractDependencies": [],
              "contractKind": "library",
              "documentation": {
                "id": 4,
                "nodeType": "StructuredDocumentation",
                "src": "102:800:0",
                "text": "@title TierUtil\n @notice `TierUtil` implements several pure functions that can be\n used to interface with reports.\n - `tierAtBlockFromReport`: Returns the highest status achieved relative to\n a block number and report. Statuses gained after that block are ignored.\n - `tierBlock`: Returns the block that a given tier has been held\n since according to a report.\n - `truncateTiersAbove`: Resets all the tiers above the reference tier.\n - `updateBlocksForTierRange`: Updates a report with a block\n number for every tier in a range.\n - `updateReportWithTierAtBlock`: Updates a report to a new tier.\n @dev Utilities to consistently read, write and manipulate tiers in reports.\n The low-level bit shifting can be difficult to get right so this factors\n that out."
              },
              "fullyImplemented": true,
              "id": 246,
              "linearizedBaseContracts": [
                246
              ],
              "name": "TierUtil",
              "nameLocation": "910:8:0",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": true,
                  "documentation": {
                    "id": 5,
                    "nodeType": "StructuredDocumentation",
                    "src": "926:62:0",
                    "text": "UNINITIALIZED is 0xFF.. as it is infinitely in the future."
                  },
                  "functionSelector": "81e45d9a",
                  "id": 8,
                  "mutability": "constant",
                  "name": "UNINITIALIZED",
                  "nameLocation": "1017:13:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 246,
                  "src": "993:114:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 6,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "993:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": {
                    "hexValue": "307846464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646",
                    "id": 7,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1041:66:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_115792089237316195423570985008687907853269984665640564039457584007913129639935_by_1",
                      "typeString": "int_const 1157...(70 digits omitted)...9935"
                    },
                    "value": "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                  },
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 60,
                    "nodeType": "Block",
                    "src": "1974:223:0",
                    "statements": [
                      {
                        "body": {
                          "id": 53,
                          "nodeType": "Block",
                          "src": "2019:142:0",
                          "statements": [
                            {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_uint32",
                                  "typeString": "uint32"
                                },
                                "id": 45,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "commonType": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          },
                                          "id": 38,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "leftExpression": {
                                            "id": 33,
                                            "name": "report_",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 11,
                                            "src": "2052:7:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "nodeType": "BinaryOperation",
                                          "operator": ">>",
                                          "rightExpression": {
                                            "components": [
                                              {
                                                "commonType": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                },
                                                "id": 36,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "leftExpression": {
                                                  "id": 34,
                                                  "name": "i_",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 20,
                                                  "src": "2064:2:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_uint256",
                                                    "typeString": "uint256"
                                                  }
                                                },
                                                "nodeType": "BinaryOperation",
                                                "operator": "*",
                                                "rightExpression": {
                                                  "hexValue": "3332",
                                                  "id": 35,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": true,
                                                  "kind": "number",
                                                  "lValueRequested": false,
                                                  "nodeType": "Literal",
                                                  "src": "2067:2:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_rational_32_by_1",
                                                    "typeString": "int_const 32"
                                                  },
                                                  "value": "32"
                                                },
                                                "src": "2064:5:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                }
                                              }
                                            ],
                                            "id": 37,
                                            "isConstant": false,
                                            "isInlineArray": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "nodeType": "TupleExpression",
                                            "src": "2063:7:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "src": "2052:18:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        ],
                                        "id": 32,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "lValueRequested": false,
                                        "nodeType": "ElementaryTypeNameExpression",
                                        "src": "2044:7:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_uint256_$",
                                          "typeString": "type(uint256)"
                                        },
                                        "typeName": {
                                          "id": 31,
                                          "name": "uint256",
                                          "nodeType": "ElementaryTypeName",
                                          "src": "2044:7:0",
                                          "typeDescriptions": {}
                                        }
                                      },
                                      "id": 39,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "typeConversion",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "2044:27:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "id": 30,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "2037:6:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_uint32_$",
                                      "typeString": "type(uint32)"
                                    },
                                    "typeName": {
                                      "id": 29,
                                      "name": "uint32",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "2037:6:0",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 40,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "2037:35:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint32",
                                    "typeString": "uint32"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": ">",
                                "rightExpression": {
                                  "arguments": [
                                    {
                                      "id": 43,
                                      "name": "blockNumber_",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 13,
                                      "src": "2082:12:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "id": 42,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "2075:6:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_uint32_$",
                                      "typeString": "type(uint32)"
                                    },
                                    "typeName": {
                                      "id": 41,
                                      "name": "uint32",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "2075:6:0",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 44,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "2075:20:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint32",
                                    "typeString": "uint32"
                                  }
                                },
                                "src": "2037:58:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 52,
                              "nodeType": "IfStatement",
                              "src": "2033:118:0",
                              "trueBody": {
                                "id": 51,
                                "nodeType": "Block",
                                "src": "2097:54:0",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "id": 48,
                                          "name": "i_",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 20,
                                          "src": "2133:2:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        ],
                                        "expression": {
                                          "id": 46,
                                          "name": "ITier",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 402,
                                          "src": "2122:5:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_type$_t_contract$_ITier_$402_$",
                                            "typeString": "type(contract ITier)"
                                          }
                                        },
                                        "id": 47,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "Tier",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 371,
                                        "src": "2122:10:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_enum$_Tier_$371_$",
                                          "typeString": "type(enum ITier.Tier)"
                                        }
                                      },
                                      "id": 49,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "typeConversion",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "2122:14:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_enum$_Tier_$371",
                                        "typeString": "enum ITier.Tier"
                                      }
                                    },
                                    "functionReturnParameters": 18,
                                    "id": 50,
                                    "nodeType": "Return",
                                    "src": "2115:21:0"
                                  }
                                ]
                              }
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 25,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 23,
                            "name": "i_",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 20,
                            "src": "2005:2:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "hexValue": "38",
                            "id": 24,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2010:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_8_by_1",
                              "typeString": "int_const 8"
                            },
                            "value": "8"
                          },
                          "src": "2005:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 54,
                        "initializationExpression": {
                          "assignments": [
                            20
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 20,
                              "mutability": "mutable",
                              "name": "i_",
                              "nameLocation": "1997:2:0",
                              "nodeType": "VariableDeclaration",
                              "scope": 54,
                              "src": "1989:10:0",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "typeName": {
                                "id": 19,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "1989:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "visibility": "internal"
                            }
                          ],
                          "id": 22,
                          "initialValue": {
                            "hexValue": "30",
                            "id": 21,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2002:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "1989:14:0"
                        },
                        "loopExpression": {
                          "expression": {
                            "id": 27,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "++",
                            "prefix": false,
                            "src": "2013:4:0",
                            "subExpression": {
                              "id": 26,
                              "name": "i_",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 20,
                              "src": "2013:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 28,
                          "nodeType": "ExpressionStatement",
                          "src": "2013:4:0"
                        },
                        "nodeType": "ForStatement",
                        "src": "1984:177:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "hexValue": "38",
                              "id": 57,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2188:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_8_by_1",
                                "typeString": "int_const 8"
                              },
                              "value": "8"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_8_by_1",
                                "typeString": "int_const 8"
                              }
                            ],
                            "expression": {
                              "id": 55,
                              "name": "ITier",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 402,
                              "src": "2177:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_ITier_$402_$",
                                "typeString": "type(contract ITier)"
                              }
                            },
                            "id": 56,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "Tier",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 371,
                            "src": "2177:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_Tier_$371_$",
                              "typeString": "type(enum ITier.Tier)"
                            }
                          },
                          "id": 58,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2177:13:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$371",
                            "typeString": "enum ITier.Tier"
                          }
                        },
                        "functionReturnParameters": 18,
                        "id": 59,
                        "nodeType": "Return",
                        "src": "2170:20:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 9,
                    "nodeType": "StructuredDocumentation",
                    "src": "1114:716:0",
                    "text": "Returns the highest tier achieved relative to a block number\n and report.\n Note that typically the report will be from the _current_ contract\n state, i.e. `block.number` but not always. Tiers gained after the\n reference block are ignored.\n When the `report` comes from a later block than the `blockNumber` this\n means the user must have held the tier continuously from `blockNumber`\n _through_ to the report block.\n I.e. NOT a snapshot.\n @param report_ A report as per `ITier`.\n @param blockNumber_ The block number to check the tiers against.\n @return The highest tier held since `blockNumber` as per `report`."
                  },
                  "id": 61,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "tierAtBlockFromReport",
                  "nameLocation": "1844:21:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 14,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 11,
                        "mutability": "mutable",
                        "name": "report_",
                        "nameLocation": "1883:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 61,
                        "src": "1875:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 10,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1875:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 13,
                        "mutability": "mutable",
                        "name": "blockNumber_",
                        "nameLocation": "1908:12:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 61,
                        "src": "1900:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 12,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1900:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1865:61:0"
                  },
                  "returnParameters": {
                    "id": 18,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 17,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 61,
                        "src": "1958:10:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Tier_$371",
                          "typeString": "enum ITier.Tier"
                        },
                        "typeName": {
                          "id": 16,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 15,
                            "name": "ITier.Tier",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 371,
                            "src": "1958:10:0"
                          },
                          "referencedDeclaration": 371,
                          "src": "1958:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$371",
                            "typeString": "enum ITier.Tier"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1957:12:0"
                  },
                  "scope": 246,
                  "src": "1835:362:0",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 106,
                    "nodeType": "Block",
                    "src": "2713:327:0",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_enum$_Tier_$371",
                            "typeString": "enum ITier.Tier"
                          },
                          "id": 76,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 72,
                            "name": "tier_",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 67,
                            "src": "2828:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_Tier_$371",
                              "typeString": "enum ITier.Tier"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "expression": {
                              "expression": {
                                "id": 73,
                                "name": "ITier",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 402,
                                "src": "2837:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_ITier_$402_$",
                                  "typeString": "type(contract ITier)"
                                }
                              },
                              "id": 74,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "Tier",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 371,
                              "src": "2837:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_enum$_Tier_$371_$",
                                "typeString": "type(enum ITier.Tier)"
                              }
                            },
                            "id": 75,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberName": "ZERO",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 362,
                            "src": "2837:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_Tier_$371",
                              "typeString": "enum ITier.Tier"
                            }
                          },
                          "src": "2828:24:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 80,
                        "nodeType": "IfStatement",
                        "src": "2824:43:0",
                        "trueBody": {
                          "id": 79,
                          "nodeType": "Block",
                          "src": "2854:13:0",
                          "statements": [
                            {
                              "expression": {
                                "hexValue": "30",
                                "id": 77,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "2863:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "functionReturnParameters": 71,
                              "id": 78,
                              "nodeType": "Return",
                              "src": "2856:8:0"
                            }
                          ]
                        }
                      },
                      {
                        "assignments": [
                          82
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 82,
                            "mutability": "mutable",
                            "name": "offset_",
                            "nameLocation": "2885:7:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 106,
                            "src": "2877:15:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 81,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "2877:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 92,
                        "initialValue": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 91,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "components": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 88,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "arguments": [
                                    {
                                      "id": 85,
                                      "name": "tier_",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 67,
                                      "src": "2904:5:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_enum$_Tier_$371",
                                        "typeString": "enum ITier.Tier"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_enum$_Tier_$371",
                                        "typeString": "enum ITier.Tier"
                                      }
                                    ],
                                    "id": 84,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "2896:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_uint256_$",
                                      "typeString": "type(uint256)"
                                    },
                                    "typeName": {
                                      "id": 83,
                                      "name": "uint256",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "2896:7:0",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 86,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "2896:14:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "-",
                                "rightExpression": {
                                  "hexValue": "31",
                                  "id": 87,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "2913:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_1_by_1",
                                    "typeString": "int_const 1"
                                  },
                                  "value": "1"
                                },
                                "src": "2896:18:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "id": 89,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "2895:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "*",
                          "rightExpression": {
                            "hexValue": "3332",
                            "id": 90,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2918:2:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_32_by_1",
                              "typeString": "int_const 32"
                            },
                            "value": "32"
                          },
                          "src": "2895:25:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2877:43:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 101,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "id": 99,
                                        "name": "report_",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 64,
                                        "src": "2990:7:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": ">>",
                                      "rightExpression": {
                                        "id": 100,
                                        "name": "offset_",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 82,
                                        "src": "3001:7:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "2990:18:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "id": 98,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "2965:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_uint256_$",
                                      "typeString": "type(uint256)"
                                    },
                                    "typeName": {
                                      "id": 97,
                                      "name": "uint256",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "2965:7:0",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 102,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "2965:57:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "id": 96,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "2945:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_uint32_$",
                                  "typeString": "type(uint32)"
                                },
                                "typeName": {
                                  "id": 95,
                                  "name": "uint32",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "2945:6:0",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 103,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2945:87:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            ],
                            "id": 94,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "2937:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_uint256_$",
                              "typeString": "type(uint256)"
                            },
                            "typeName": {
                              "id": 93,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "2937:7:0",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 104,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2937:96:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 71,
                        "id": 105,
                        "nodeType": "Return",
                        "src": "2930:103:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 62,
                    "nodeType": "StructuredDocumentation",
                    "src": "2203:391:0",
                    "text": "Returns the block that a given tier has been held since from a report.\n The report MUST encode \"never\" as 0xFFFFFFFF. This ensures\n compatibility with `tierAtBlockFromReport`.\n @param report_ The report to read a block number from.\n @param tier_ The Tier to read the block number for.\n @return The block number this has been held since."
                  },
                  "id": 107,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "tierBlock",
                  "nameLocation": "2608:9:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 68,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 64,
                        "mutability": "mutable",
                        "name": "report_",
                        "nameLocation": "2626:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 107,
                        "src": "2618:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 63,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2618:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 67,
                        "mutability": "mutable",
                        "name": "tier_",
                        "nameLocation": "2646:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 107,
                        "src": "2635:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Tier_$371",
                          "typeString": "enum ITier.Tier"
                        },
                        "typeName": {
                          "id": 66,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 65,
                            "name": "ITier.Tier",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 371,
                            "src": "2635:10:0"
                          },
                          "referencedDeclaration": 371,
                          "src": "2635:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$371",
                            "typeString": "enum ITier.Tier"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2617:35:0"
                  },
                  "returnParameters": {
                    "id": 71,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 70,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 107,
                        "src": "2700:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 69,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2700:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2699:9:0"
                  },
                  "scope": 246,
                  "src": "2599:441:0",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 140,
                    "nodeType": "Block",
                    "src": "3397:149:0",
                    "statements": [
                      {
                        "assignments": [
                          119
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 119,
                            "mutability": "mutable",
                            "name": "offset_",
                            "nameLocation": "3415:7:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 140,
                            "src": "3407:15:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 118,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "3407:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 126,
                        "initialValue": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 125,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "arguments": [
                              {
                                "id": 122,
                                "name": "tier_",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 113,
                                "src": "3433:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_Tier_$371",
                                  "typeString": "enum ITier.Tier"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_enum$_Tier_$371",
                                  "typeString": "enum ITier.Tier"
                                }
                              ],
                              "id": 121,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "3425:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_uint256_$",
                                "typeString": "type(uint256)"
                              },
                              "typeName": {
                                "id": 120,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "3425:7:0",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 123,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3425:14:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "*",
                          "rightExpression": {
                            "hexValue": "3332",
                            "id": 124,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3442:2:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_32_by_1",
                              "typeString": "int_const 32"
                            },
                            "value": "32"
                          },
                          "src": "3425:19:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "3407:37:0"
                      },
                      {
                        "assignments": [
                          128
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 128,
                            "mutability": "mutable",
                            "name": "mask_",
                            "nameLocation": "3462:5:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 140,
                            "src": "3454:13:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 127,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "3454:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 135,
                        "initialValue": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 134,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "components": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 131,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 129,
                                  "name": "UNINITIALIZED",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 8,
                                  "src": "3471:13:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": ">>",
                                "rightExpression": {
                                  "id": 130,
                                  "name": "offset_",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 119,
                                  "src": "3488:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "3471:24:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "id": 132,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "3470:26:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<<",
                          "rightExpression": {
                            "id": 133,
                            "name": "offset_",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 119,
                            "src": "3500:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "3470:37:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "3454:53:0"
                      },
                      {
                        "expression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 138,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 136,
                            "name": "report_",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 110,
                            "src": "3524:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "|",
                          "rightExpression": {
                            "id": 137,
                            "name": "mask_",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 128,
                            "src": "3534:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "3524:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 117,
                        "id": 139,
                        "nodeType": "Return",
                        "src": "3517:22:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 108,
                    "nodeType": "StructuredDocumentation",
                    "src": "3046:223:0",
                    "text": "Resets all the tiers above the reference tier to 0xFFFFFFFF.\n @param report_ Report to truncate with high bit 1s.\n @param tier_ Tier to truncate above (exclusive).\n @return Truncated report."
                  },
                  "id": 141,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "truncateTiersAbove",
                  "nameLocation": "3283:18:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 114,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 110,
                        "mutability": "mutable",
                        "name": "report_",
                        "nameLocation": "3310:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 141,
                        "src": "3302:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 109,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3302:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 113,
                        "mutability": "mutable",
                        "name": "tier_",
                        "nameLocation": "3330:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 141,
                        "src": "3319:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Tier_$371",
                          "typeString": "enum ITier.Tier"
                        },
                        "typeName": {
                          "id": 112,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 111,
                            "name": "ITier.Tier",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 371,
                            "src": "3319:10:0"
                          },
                          "referencedDeclaration": 371,
                          "src": "3319:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$371",
                            "typeString": "enum ITier.Tier"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3301:35:0"
                  },
                  "returnParameters": {
                    "id": 117,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 116,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 141,
                        "src": "3384:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 115,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3384:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3383:9:0"
                  },
                  "scope": 246,
                  "src": "3274:272:0",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 212,
                    "nodeType": "Block",
                    "src": "4248:330:0",
                    "statements": [
                      {
                        "assignments": [
                          158
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 158,
                            "mutability": "mutable",
                            "name": "offset_",
                            "nameLocation": "4266:7:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 212,
                            "src": "4258:15:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 157,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "4258:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 159,
                        "nodeType": "VariableDeclarationStatement",
                        "src": "4258:15:0"
                      },
                      {
                        "body": {
                          "id": 208,
                          "nodeType": "Block",
                          "src": "4352:196:0",
                          "statements": [
                            {
                              "expression": {
                                "id": 180,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 176,
                                  "name": "offset_",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 158,
                                  "src": "4366:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 179,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "id": 177,
                                    "name": "i_",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 161,
                                    "src": "4376:2:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "*",
                                  "rightExpression": {
                                    "hexValue": "3332",
                                    "id": 178,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "4381:2:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_32_by_1",
                                      "typeString": "int_const 32"
                                    },
                                    "value": "32"
                                  },
                                  "src": "4376:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "4366:17:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 181,
                              "nodeType": "ExpressionStatement",
                              "src": "4366:17:0"
                            },
                            {
                              "expression": {
                                "id": 206,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 182,
                                  "name": "report_",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 144,
                                  "src": "4397:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 205,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "components": [
                                      {
                                        "commonType": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "id": 197,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "id": 183,
                                          "name": "report_",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 144,
                                          "src": "4424:7:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "&",
                                        "rightExpression": {
                                          "id": 196,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "nodeType": "UnaryOperation",
                                          "operator": "~",
                                          "prefix": true,
                                          "src": "4434:51:0",
                                          "subExpression": {
                                            "arguments": [
                                              {
                                                "commonType": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                },
                                                "id": 194,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "leftExpression": {
                                                  "arguments": [
                                                    {
                                                      "arguments": [
                                                        {
                                                          "id": 190,
                                                          "name": "UNINITIALIZED",
                                                          "nodeType": "Identifier",
                                                          "overloadedDeclarations": [],
                                                          "referencedDeclaration": 8,
                                                          "src": "4458:13:0",
                                                          "typeDescriptions": {
                                                            "typeIdentifier": "t_uint256",
                                                            "typeString": "uint256"
                                                          }
                                                        }
                                                      ],
                                                      "expression": {
                                                        "argumentTypes": [
                                                          {
                                                            "typeIdentifier": "t_uint256",
                                                            "typeString": "uint256"
                                                          }
                                                        ],
                                                        "id": 189,
                                                        "isConstant": false,
                                                        "isLValue": false,
                                                        "isPure": true,
                                                        "lValueRequested": false,
                                                        "nodeType": "ElementaryTypeNameExpression",
                                                        "src": "4451:6:0",
                                                        "typeDescriptions": {
                                                          "typeIdentifier": "t_type$_t_uint32_$",
                                                          "typeString": "type(uint32)"
                                                        },
                                                        "typeName": {
                                                          "id": 188,
                                                          "name": "uint32",
                                                          "nodeType": "ElementaryTypeName",
                                                          "src": "4451:6:0",
                                                          "typeDescriptions": {}
                                                        }
                                                      },
                                                      "id": 191,
                                                      "isConstant": false,
                                                      "isLValue": false,
                                                      "isPure": true,
                                                      "kind": "typeConversion",
                                                      "lValueRequested": false,
                                                      "names": [],
                                                      "nodeType": "FunctionCall",
                                                      "src": "4451:21:0",
                                                      "tryCall": false,
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_uint32",
                                                        "typeString": "uint32"
                                                      }
                                                    }
                                                  ],
                                                  "expression": {
                                                    "argumentTypes": [
                                                      {
                                                        "typeIdentifier": "t_uint32",
                                                        "typeString": "uint32"
                                                      }
                                                    ],
                                                    "id": 187,
                                                    "isConstant": false,
                                                    "isLValue": false,
                                                    "isPure": true,
                                                    "lValueRequested": false,
                                                    "nodeType": "ElementaryTypeNameExpression",
                                                    "src": "4443:7:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_type$_t_uint256_$",
                                                      "typeString": "type(uint256)"
                                                    },
                                                    "typeName": {
                                                      "id": 186,
                                                      "name": "uint256",
                                                      "nodeType": "ElementaryTypeName",
                                                      "src": "4443:7:0",
                                                      "typeDescriptions": {}
                                                    }
                                                  },
                                                  "id": 192,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": true,
                                                  "kind": "typeConversion",
                                                  "lValueRequested": false,
                                                  "names": [],
                                                  "nodeType": "FunctionCall",
                                                  "src": "4443:30:0",
                                                  "tryCall": false,
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_uint256",
                                                    "typeString": "uint256"
                                                  }
                                                },
                                                "nodeType": "BinaryOperation",
                                                "operator": "<<",
                                                "rightExpression": {
                                                  "id": 193,
                                                  "name": "offset_",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 158,
                                                  "src": "4477:7:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_uint256",
                                                    "typeString": "uint256"
                                                  }
                                                },
                                                "src": "4443:41:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                }
                                              }
                                            ],
                                            "expression": {
                                              "argumentTypes": [
                                                {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                }
                                              ],
                                              "id": 185,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "lValueRequested": false,
                                              "nodeType": "ElementaryTypeNameExpression",
                                              "src": "4435:7:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_type$_t_uint256_$",
                                                "typeString": "type(uint256)"
                                              },
                                              "typeName": {
                                                "id": 184,
                                                "name": "uint256",
                                                "nodeType": "ElementaryTypeName",
                                                "src": "4435:7:0",
                                                "typeDescriptions": {}
                                              }
                                            },
                                            "id": 195,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "kind": "typeConversion",
                                            "lValueRequested": false,
                                            "names": [],
                                            "nodeType": "FunctionCall",
                                            "src": "4435:50:0",
                                            "tryCall": false,
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "src": "4424:61:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      }
                                    ],
                                    "id": 198,
                                    "isConstant": false,
                                    "isInlineArray": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "TupleExpression",
                                    "src": "4423:63:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "|",
                                  "rightExpression": {
                                    "arguments": [
                                      {
                                        "commonType": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "id": 203,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "id": 201,
                                          "name": "blockNumber_",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 152,
                                          "src": "4513:12:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "<<",
                                        "rightExpression": {
                                          "id": 202,
                                          "name": "offset_",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 158,
                                          "src": "4529:7:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "src": "4513:23:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      ],
                                      "id": 200,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "nodeType": "ElementaryTypeNameExpression",
                                      "src": "4505:7:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_uint256_$",
                                        "typeString": "type(uint256)"
                                      },
                                      "typeName": {
                                        "id": 199,
                                        "name": "uint256",
                                        "nodeType": "ElementaryTypeName",
                                        "src": "4505:7:0",
                                        "typeDescriptions": {}
                                      }
                                    },
                                    "id": 204,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "typeConversion",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "4505:32:0",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "4423:114:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "4397:140:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 207,
                              "nodeType": "ExpressionStatement",
                              "src": "4397:140:0"
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 172,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 167,
                            "name": "i_",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 161,
                            "src": "4322:2:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "arguments": [
                              {
                                "id": 170,
                                "name": "endTier_",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 150,
                                "src": "4335:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_Tier_$371",
                                  "typeString": "enum ITier.Tier"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_enum$_Tier_$371",
                                  "typeString": "enum ITier.Tier"
                                }
                              ],
                              "id": 169,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "4327:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_uint256_$",
                                "typeString": "type(uint256)"
                              },
                              "typeName": {
                                "id": 168,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "4327:7:0",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 171,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4327:17:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "4322:22:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 209,
                        "initializationExpression": {
                          "assignments": [
                            161
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 161,
                              "mutability": "mutable",
                              "name": "i_",
                              "nameLocation": "4296:2:0",
                              "nodeType": "VariableDeclaration",
                              "scope": 209,
                              "src": "4288:10:0",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "typeName": {
                                "id": 160,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "4288:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "visibility": "internal"
                            }
                          ],
                          "id": 166,
                          "initialValue": {
                            "arguments": [
                              {
                                "id": 164,
                                "name": "startTier_",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 147,
                                "src": "4309:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_Tier_$371",
                                  "typeString": "enum ITier.Tier"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_enum$_Tier_$371",
                                  "typeString": "enum ITier.Tier"
                                }
                              ],
                              "id": 163,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "4301:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_uint256_$",
                                "typeString": "type(uint256)"
                              },
                              "typeName": {
                                "id": 162,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "4301:7:0",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 165,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4301:19:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "4288:32:0"
                        },
                        "loopExpression": {
                          "expression": {
                            "id": 174,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "++",
                            "prefix": false,
                            "src": "4346:4:0",
                            "subExpression": {
                              "id": 173,
                              "name": "i_",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 161,
                              "src": "4346:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 175,
                          "nodeType": "ExpressionStatement",
                          "src": "4346:4:0"
                        },
                        "nodeType": "ForStatement",
                        "src": "4283:265:0"
                      },
                      {
                        "expression": {
                          "id": 210,
                          "name": "report_",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 144,
                          "src": "4564:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 156,
                        "id": 211,
                        "nodeType": "Return",
                        "src": "4557:14:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 142,
                    "nodeType": "StructuredDocumentation",
                    "src": "3552:492:0",
                    "text": "Updates a report with a block number for every status integer in a\n range.\n Does nothing if the end status is equal or less than the start status.\n @param report_ The report to update.\n @param startTier_ The `Tier` at the start of the range (exclusive).\n @param endTier_ The `Tier` at the end of the range (inclusive).\n @param blockNumber_ The block number to set for every status\n in the range.\n @return The updated report."
                  },
                  "id": 213,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "updateBlocksForTierRange",
                  "nameLocation": "4058:24:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 153,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 144,
                        "mutability": "mutable",
                        "name": "report_",
                        "nameLocation": "4100:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 213,
                        "src": "4092:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 143,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4092:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 147,
                        "mutability": "mutable",
                        "name": "startTier_",
                        "nameLocation": "4128:10:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 213,
                        "src": "4117:21:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Tier_$371",
                          "typeString": "enum ITier.Tier"
                        },
                        "typeName": {
                          "id": 146,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 145,
                            "name": "ITier.Tier",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 371,
                            "src": "4117:10:0"
                          },
                          "referencedDeclaration": 371,
                          "src": "4117:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$371",
                            "typeString": "enum ITier.Tier"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 150,
                        "mutability": "mutable",
                        "name": "endTier_",
                        "nameLocation": "4159:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 213,
                        "src": "4148:19:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Tier_$371",
                          "typeString": "enum ITier.Tier"
                        },
                        "typeName": {
                          "id": 149,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 148,
                            "name": "ITier.Tier",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 371,
                            "src": "4148:10:0"
                          },
                          "referencedDeclaration": 371,
                          "src": "4148:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$371",
                            "typeString": "enum ITier.Tier"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 152,
                        "mutability": "mutable",
                        "name": "blockNumber_",
                        "nameLocation": "4185:12:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 213,
                        "src": "4177:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 151,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4177:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4082:121:0"
                  },
                  "returnParameters": {
                    "id": 156,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 155,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 213,
                        "src": "4235:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 154,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4235:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4234:9:0"
                  },
                  "scope": 246,
                  "src": "4049:529:0",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 244,
                    "nodeType": "Block",
                    "src": "5706:259:0",
                    "statements": [
                      {
                        "expression": {
                          "condition": {
                            "commonType": {
                              "typeIdentifier": "t_enum$_Tier_$371",
                              "typeString": "enum ITier.Tier"
                            },
                            "id": 231,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 229,
                              "name": "endTier_",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 222,
                              "src": "5723:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_Tier_$371",
                                "typeString": "enum ITier.Tier"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "<",
                            "rightExpression": {
                              "id": 230,
                              "name": "startTier_",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 219,
                              "src": "5734:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_Tier_$371",
                                "typeString": "enum ITier.Tier"
                              }
                            },
                            "src": "5723:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "falseExpression": {
                            "arguments": [
                              {
                                "id": 237,
                                "name": "report_",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 216,
                                "src": "5853:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "id": 238,
                                "name": "startTier_",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 219,
                                "src": "5878:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_Tier_$371",
                                  "typeString": "enum ITier.Tier"
                                }
                              },
                              {
                                "id": 239,
                                "name": "endTier_",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 222,
                                "src": "5906:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_Tier_$371",
                                  "typeString": "enum ITier.Tier"
                                }
                              },
                              {
                                "id": 240,
                                "name": "blockNumber_",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 224,
                                "src": "5932:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_enum$_Tier_$371",
                                  "typeString": "enum ITier.Tier"
                                },
                                {
                                  "typeIdentifier": "t_enum$_Tier_$371",
                                  "typeString": "enum ITier.Tier"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 236,
                              "name": "updateBlocksForTierRange",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 213,
                              "src": "5811:24:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_enum$_Tier_$371_$_t_enum$_Tier_$371_$_t_uint256_$returns$_t_uint256_$",
                                "typeString": "function (uint256,enum ITier.Tier,enum ITier.Tier,uint256) pure returns (uint256)"
                              }
                            },
                            "id": 241,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "5811:147:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 242,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "Conditional",
                          "src": "5723:235:0",
                          "trueExpression": {
                            "arguments": [
                              {
                                "id": 233,
                                "name": "report_",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 216,
                                "src": "5778:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "id": 234,
                                "name": "endTier_",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 222,
                                "src": "5787:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_Tier_$371",
                                  "typeString": "enum ITier.Tier"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_enum$_Tier_$371",
                                  "typeString": "enum ITier.Tier"
                                }
                              ],
                              "id": 232,
                              "name": "truncateTiersAbove",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 141,
                              "src": "5759:18:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_enum$_Tier_$371_$returns$_t_uint256_$",
                                "typeString": "function (uint256,enum ITier.Tier) pure returns (uint256)"
                              }
                            },
                            "id": 235,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "5759:37:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 228,
                        "id": 243,
                        "nodeType": "Return",
                        "src": "5716:242:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 214,
                    "nodeType": "StructuredDocumentation",
                    "src": "4584:915:0",
                    "text": "Updates a report to a new status.\n Internally dispatches to `truncateTiersAbove` and\n `updateBlocksForTierRange`.\n The dispatch is based on whether the new tier is above or below the\n current tier.\n The `startTier_` MUST match the result of `tierAtBlockFromReport`.\n It is expected the caller will know the current tier when\n calling this function and need to do other things in the calling scope\n with it.\n @param report_ The report to update.\n @param startTier_ The tier to start updating relative to. Data above\n this tier WILL BE LOST so probably should be the current tier.\n @param endTier_ The new highest tier held, at the given block number.\n @param blockNumber_ The block number to update the highest tier to, and\n intermediate tiers from `startTier_`.\n @return The updated report."
                  },
                  "id": 245,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "updateReportWithTierAtBlock",
                  "nameLocation": "5513:27:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 225,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 216,
                        "mutability": "mutable",
                        "name": "report_",
                        "nameLocation": "5558:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 245,
                        "src": "5550:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 215,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "5550:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 219,
                        "mutability": "mutable",
                        "name": "startTier_",
                        "nameLocation": "5586:10:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 245,
                        "src": "5575:21:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Tier_$371",
                          "typeString": "enum ITier.Tier"
                        },
                        "typeName": {
                          "id": 218,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 217,
                            "name": "ITier.Tier",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 371,
                            "src": "5575:10:0"
                          },
                          "referencedDeclaration": 371,
                          "src": "5575:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$371",
                            "typeString": "enum ITier.Tier"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 222,
                        "mutability": "mutable",
                        "name": "endTier_",
                        "nameLocation": "5617:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 245,
                        "src": "5606:19:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Tier_$371",
                          "typeString": "enum ITier.Tier"
                        },
                        "typeName": {
                          "id": 221,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 220,
                            "name": "ITier.Tier",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 371,
                            "src": "5606:10:0"
                          },
                          "referencedDeclaration": 371,
                          "src": "5606:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$371",
                            "typeString": "enum ITier.Tier"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 224,
                        "mutability": "mutable",
                        "name": "blockNumber_",
                        "nameLocation": "5643:12:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 245,
                        "src": "5635:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 223,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "5635:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5540:121:0"
                  },
                  "returnParameters": {
                    "id": 228,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 227,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 245,
                        "src": "5693:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 226,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "5693:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5692:9:0"
                  },
                  "scope": 246,
                  "src": "5504:461:0",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                }
              ],
              "scope": 247,
              "src": "902:5066:0",
              "usedErrors": []
            }
          ],
          "src": "33:5935:0"
        },
        "id": 0
      },
      "contracts/test/TierUtilTest.sol": {
        "ast": {
          "absolutePath": "contracts/test/TierUtilTest.sol",
          "exportedSymbols": {
            "ITier": [
              402
            ],
            "TierUtil": [
              246
            ],
            "TierUtilTest": [
              358
            ]
          },
          "id": 359,
          "license": "CAL",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 248,
              "literals": [
                "solidity",
                "0.8",
                ".10"
              ],
              "nodeType": "PragmaDirective",
              "src": "33:23:1"
            },
            {
              "absolutePath": "contracts/tier/ITier.sol",
              "file": "../tier/ITier.sol",
              "id": 250,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 359,
              "sourceUnit": 403,
              "src": "58:40:1",
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 249,
                    "name": "ITier",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "src": "66:5:1",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "absolutePath": "contracts/libraries/TierUtil.sol",
              "file": "../libraries/TierUtil.sol",
              "id": 252,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 359,
              "sourceUnit": 247,
              "src": "99:51:1",
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 251,
                    "name": "TierUtil",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "src": "107:8:1",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "TierUtilTest",
              "contractDependencies": [],
              "contractKind": "contract",
              "documentation": {
                "id": 253,
                "nodeType": "StructuredDocumentation",
                "src": "152:97:1",
                "text": "@title TierUtilTest\n Thin wrapper around the `TierUtil` library for hardhat unit testing."
              },
              "fullyImplemented": true,
              "id": 358,
              "linearizedBaseContracts": [
                358
              ],
              "name": "TierUtilTest",
              "nameLocation": "258:12:1",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "body": {
                    "id": 270,
                    "nodeType": "Block",
                    "src": "559:77:1",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 266,
                              "name": "report_",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 256,
                              "src": "607:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 267,
                              "name": "blockNumber_",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 258,
                              "src": "616:12:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 264,
                              "name": "TierUtil",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 246,
                              "src": "576:8:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_TierUtil_$246_$",
                                "typeString": "type(library TierUtil)"
                              }
                            },
                            "id": 265,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "tierAtBlockFromReport",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 61,
                            "src": "576:30:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_enum$_Tier_$371_$",
                              "typeString": "function (uint256,uint256) pure returns (enum ITier.Tier)"
                            }
                          },
                          "id": 268,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "576:53:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$371",
                            "typeString": "enum ITier.Tier"
                          }
                        },
                        "functionReturnParameters": 263,
                        "id": 269,
                        "nodeType": "Return",
                        "src": "569:60:1"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 254,
                    "nodeType": "StructuredDocumentation",
                    "src": "277:144:1",
                    "text": "Wraps `TierUtil.tierAtBlockFromReport`.\n @param report_ Forwarded to `TierUtil`.\n @param blockNumber_ Forwarded to `TierUtil`."
                  },
                  "functionSelector": "6ed9558d",
                  "id": 271,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "tierAtBlockFromReport",
                  "nameLocation": "435:21:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 259,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 256,
                        "mutability": "mutable",
                        "name": "report_",
                        "nameLocation": "465:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 271,
                        "src": "457:15:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 255,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "457:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 258,
                        "mutability": "mutable",
                        "name": "blockNumber_",
                        "nameLocation": "482:12:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 271,
                        "src": "474:20:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 257,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "474:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "456:39:1"
                  },
                  "returnParameters": {
                    "id": 263,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 262,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 271,
                        "src": "543:10:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Tier_$371",
                          "typeString": "enum ITier.Tier"
                        },
                        "typeName": {
                          "id": 261,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 260,
                            "name": "ITier.Tier",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 371,
                            "src": "543:10:1"
                          },
                          "referencedDeclaration": 371,
                          "src": "543:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$371",
                            "typeString": "enum ITier.Tier"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "542:12:1"
                  },
                  "scope": 358,
                  "src": "426:210:1",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 288,
                    "nodeType": "Block",
                    "src": "886:58:1",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 284,
                              "name": "report_",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 274,
                              "src": "922:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 285,
                              "name": "tier_",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 277,
                              "src": "931:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_Tier_$371",
                                "typeString": "enum ITier.Tier"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_enum$_Tier_$371",
                                "typeString": "enum ITier.Tier"
                              }
                            ],
                            "expression": {
                              "id": 282,
                              "name": "TierUtil",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 246,
                              "src": "903:8:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_TierUtil_$246_$",
                                "typeString": "type(library TierUtil)"
                              }
                            },
                            "id": 283,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "tierBlock",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 107,
                            "src": "903:18:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_enum$_Tier_$371_$returns$_t_uint256_$",
                              "typeString": "function (uint256,enum ITier.Tier) pure returns (uint256)"
                            }
                          },
                          "id": 286,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "903:34:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 281,
                        "id": 287,
                        "nodeType": "Return",
                        "src": "896:41:1"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 272,
                    "nodeType": "StructuredDocumentation",
                    "src": "642:125:1",
                    "text": "Wraps `TierUtil.tierBlock`.\n @param report_ Forwarded to `TierUtil`.\n @param tier_ Forwarded to `TierUtil`."
                  },
                  "functionSelector": "0e47450b",
                  "id": 289,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "tierBlock",
                  "nameLocation": "781:9:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 278,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 274,
                        "mutability": "mutable",
                        "name": "report_",
                        "nameLocation": "799:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 289,
                        "src": "791:15:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 273,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "791:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 277,
                        "mutability": "mutable",
                        "name": "tier_",
                        "nameLocation": "819:5:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 289,
                        "src": "808:16:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Tier_$371",
                          "typeString": "enum ITier.Tier"
                        },
                        "typeName": {
                          "id": 276,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 275,
                            "name": "ITier.Tier",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 371,
                            "src": "808:10:1"
                          },
                          "referencedDeclaration": 371,
                          "src": "808:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$371",
                            "typeString": "enum ITier.Tier"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "790:35:1"
                  },
                  "returnParameters": {
                    "id": 281,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 280,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 289,
                        "src": "873:7:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 279,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "873:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "872:9:1"
                  },
                  "scope": 358,
                  "src": "772:172:1",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 306,
                    "nodeType": "Block",
                    "src": "1212:67:1",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 302,
                              "name": "report_",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 292,
                              "src": "1257:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 303,
                              "name": "tier_",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 295,
                              "src": "1266:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_Tier_$371",
                                "typeString": "enum ITier.Tier"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_enum$_Tier_$371",
                                "typeString": "enum ITier.Tier"
                              }
                            ],
                            "expression": {
                              "id": 300,
                              "name": "TierUtil",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 246,
                              "src": "1229:8:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_TierUtil_$246_$",
                                "typeString": "type(library TierUtil)"
                              }
                            },
                            "id": 301,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "truncateTiersAbove",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 141,
                            "src": "1229:27:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_enum$_Tier_$371_$returns$_t_uint256_$",
                              "typeString": "function (uint256,enum ITier.Tier) pure returns (uint256)"
                            }
                          },
                          "id": 304,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1229:43:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 299,
                        "id": 305,
                        "nodeType": "Return",
                        "src": "1222:50:1"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 290,
                    "nodeType": "StructuredDocumentation",
                    "src": "950:134:1",
                    "text": "Wraps `TierUtil.truncateTiersAbove`.\n @param report_ Forwarded to `TierUtil`.\n @param tier_ Forwarded to `TierUtil`."
                  },
                  "functionSelector": "7c76a2fb",
                  "id": 307,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "truncateTiersAbove",
                  "nameLocation": "1098:18:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 296,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 292,
                        "mutability": "mutable",
                        "name": "report_",
                        "nameLocation": "1125:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 307,
                        "src": "1117:15:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 291,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1117:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 295,
                        "mutability": "mutable",
                        "name": "tier_",
                        "nameLocation": "1145:5:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 307,
                        "src": "1134:16:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Tier_$371",
                          "typeString": "enum ITier.Tier"
                        },
                        "typeName": {
                          "id": 294,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 293,
                            "name": "ITier.Tier",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 371,
                            "src": "1134:10:1"
                          },
                          "referencedDeclaration": 371,
                          "src": "1134:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$371",
                            "typeString": "enum ITier.Tier"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1116:35:1"
                  },
                  "returnParameters": {
                    "id": 299,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 298,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 307,
                        "src": "1199:7:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 297,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1199:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1198:9:1"
                  },
                  "scope": 358,
                  "src": "1089:190:1",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 331,
                    "nodeType": "Block",
                    "src": "1724:192:1",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 325,
                              "name": "report_",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 310,
                              "src": "1804:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 326,
                              "name": "startTier_",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 313,
                              "src": "1829:10:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_Tier_$371",
                                "typeString": "enum ITier.Tier"
                              }
                            },
                            {
                              "id": 327,
                              "name": "endTier_",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 316,
                              "src": "1857:8:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_Tier_$371",
                                "typeString": "enum ITier.Tier"
                              }
                            },
                            {
                              "id": 328,
                              "name": "blockNumber_",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 318,
                              "src": "1883:12:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_enum$_Tier_$371",
                                "typeString": "enum ITier.Tier"
                              },
                              {
                                "typeIdentifier": "t_enum$_Tier_$371",
                                "typeString": "enum ITier.Tier"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 323,
                              "name": "TierUtil",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 246,
                              "src": "1753:8:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_TierUtil_$246_$",
                                "typeString": "type(library TierUtil)"
                              }
                            },
                            "id": 324,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "updateBlocksForTierRange",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 213,
                            "src": "1753:33:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_enum$_Tier_$371_$_t_enum$_Tier_$371_$_t_uint256_$returns$_t_uint256_$",
                              "typeString": "function (uint256,enum ITier.Tier,enum ITier.Tier,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 329,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1753:156:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 322,
                        "id": 330,
                        "nodeType": "Return",
                        "src": "1734:175:1"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 308,
                    "nodeType": "StructuredDocumentation",
                    "src": "1285:247:1",
                    "text": "Wraps `TierUtil.updateBlocksForTierRange`.\n @param report_ Forwarded to `TierUtil`.\n @param startTier_ Forwarded to `TierUtil`.\n @param endTier_ Forwarded to `TierUtil`.\n @param blockNumber_ Forwarded to `TierUtil`."
                  },
                  "functionSelector": "d37fc68a",
                  "id": 332,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "updateBlocksForTierRange",
                  "nameLocation": "1546:24:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 319,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 310,
                        "mutability": "mutable",
                        "name": "report_",
                        "nameLocation": "1588:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 332,
                        "src": "1580:15:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 309,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1580:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 313,
                        "mutability": "mutable",
                        "name": "startTier_",
                        "nameLocation": "1616:10:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 332,
                        "src": "1605:21:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Tier_$371",
                          "typeString": "enum ITier.Tier"
                        },
                        "typeName": {
                          "id": 312,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 311,
                            "name": "ITier.Tier",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 371,
                            "src": "1605:10:1"
                          },
                          "referencedDeclaration": 371,
                          "src": "1605:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$371",
                            "typeString": "enum ITier.Tier"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 316,
                        "mutability": "mutable",
                        "name": "endTier_",
                        "nameLocation": "1647:8:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 332,
                        "src": "1636:19:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Tier_$371",
                          "typeString": "enum ITier.Tier"
                        },
                        "typeName": {
                          "id": 315,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 314,
                            "name": "ITier.Tier",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 371,
                            "src": "1636:10:1"
                          },
                          "referencedDeclaration": 371,
                          "src": "1636:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$371",
                            "typeString": "enum ITier.Tier"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 318,
                        "mutability": "mutable",
                        "name": "blockNumber_",
                        "nameLocation": "1673:12:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 332,
                        "src": "1665:20:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 317,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1665:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1570:121:1"
                  },
                  "returnParameters": {
                    "id": 322,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 321,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 332,
                        "src": "1715:7:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 320,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1715:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1714:9:1"
                  },
                  "scope": 358,
                  "src": "1537:379:1",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 356,
                    "nodeType": "Block",
                    "src": "2367:195:1",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 350,
                              "name": "report_",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 335,
                              "src": "2450:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 351,
                              "name": "startTier_",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 338,
                              "src": "2475:10:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_Tier_$371",
                                "typeString": "enum ITier.Tier"
                              }
                            },
                            {
                              "id": 352,
                              "name": "endTier_",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 341,
                              "src": "2503:8:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_Tier_$371",
                                "typeString": "enum ITier.Tier"
                              }
                            },
                            {
                              "id": 353,
                              "name": "blockNumber_",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 343,
                              "src": "2529:12:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_enum$_Tier_$371",
                                "typeString": "enum ITier.Tier"
                              },
                              {
                                "typeIdentifier": "t_enum$_Tier_$371",
                                "typeString": "enum ITier.Tier"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 348,
                              "name": "TierUtil",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 246,
                              "src": "2396:8:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_TierUtil_$246_$",
                                "typeString": "type(library TierUtil)"
                              }
                            },
                            "id": 349,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "updateReportWithTierAtBlock",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 245,
                            "src": "2396:36:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_enum$_Tier_$371_$_t_enum$_Tier_$371_$_t_uint256_$returns$_t_uint256_$",
                              "typeString": "function (uint256,enum ITier.Tier,enum ITier.Tier,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 354,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2396:159:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 347,
                        "id": 355,
                        "nodeType": "Return",
                        "src": "2377:178:1"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 333,
                    "nodeType": "StructuredDocumentation",
                    "src": "1922:250:1",
                    "text": "Wraps `TierUtil.updateReportWithTierAtBlock`.\n @param report_ Forwarded to `TierUtil`.\n @param startTier_ Forwarded to `TierUtil`.\n @param endTier_ Forwarded to `TierUtil`.\n @param blockNumber_ Forwarded to `TierUtil`."
                  },
                  "functionSelector": "d4707031",
                  "id": 357,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "updateReportWithTierAtBlock",
                  "nameLocation": "2186:27:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 344,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 335,
                        "mutability": "mutable",
                        "name": "report_",
                        "nameLocation": "2231:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 357,
                        "src": "2223:15:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 334,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2223:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 338,
                        "mutability": "mutable",
                        "name": "startTier_",
                        "nameLocation": "2259:10:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 357,
                        "src": "2248:21:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Tier_$371",
                          "typeString": "enum ITier.Tier"
                        },
                        "typeName": {
                          "id": 337,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 336,
                            "name": "ITier.Tier",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 371,
                            "src": "2248:10:1"
                          },
                          "referencedDeclaration": 371,
                          "src": "2248:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$371",
                            "typeString": "enum ITier.Tier"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 341,
                        "mutability": "mutable",
                        "name": "endTier_",
                        "nameLocation": "2290:8:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 357,
                        "src": "2279:19:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Tier_$371",
                          "typeString": "enum ITier.Tier"
                        },
                        "typeName": {
                          "id": 340,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 339,
                            "name": "ITier.Tier",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 371,
                            "src": "2279:10:1"
                          },
                          "referencedDeclaration": 371,
                          "src": "2279:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$371",
                            "typeString": "enum ITier.Tier"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 343,
                        "mutability": "mutable",
                        "name": "blockNumber_",
                        "nameLocation": "2316:12:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 357,
                        "src": "2308:20:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 342,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2308:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2213:121:1"
                  },
                  "returnParameters": {
                    "id": 347,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 346,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 357,
                        "src": "2358:7:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 345,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2358:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2357:9:1"
                  },
                  "scope": 358,
                  "src": "2177:385:1",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 359,
              "src": "249:2315:1",
              "usedErrors": []
            }
          ],
          "src": "33:2532:1"
        },
        "id": 1
      },
      "contracts/tier/ITier.sol": {
        "ast": {
          "absolutePath": "contracts/tier/ITier.sol",
          "exportedSymbols": {
            "ITier": [
              402
            ]
          },
          "id": 403,
          "license": "CAL",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 360,
              "literals": [
                "solidity",
                "0.8",
                ".10"
              ],
              "nodeType": "PragmaDirective",
              "src": "33:23:2"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "ITier",
              "contractDependencies": [],
              "contractKind": "interface",
              "documentation": {
                "id": 361,
                "nodeType": "StructuredDocumentation",
                "src": "58:2122:2",
                "text": "@title ITier\n @notice `ITier` is a simple interface that contracts can\n implement to provide membership lists for other contracts.\n There are many use-cases for a time-preserving,\n conditional membership list.\n Some examples include:\n - Self-serve whitelist to participate in fundraising\n - Lists of users who can claim airdrops and perks\n - Pooling resources with implied governance/reward tiers\n - POAP style attendance proofs allowing access to future exclusive events\n @dev Standard interface to a tiered membership.\n A \"membership\" can represent many things:\n - Exclusive access.\n - Participation in some event or process.\n - KYC completion.\n - Combination of sub-memberships.\n - Etc.\n The high level requirements for a contract implementing `ITier`:\n - MUST represent held tiers with the `Tier` enum.\n - MUST implement `report`.\n   - The report is a `uint256` that SHOULD represent the block each tier has\n     been continuously held since encoded as `uint32`.\n   - The encoded tiers start at ONE; ZERO is implied if no tier has ever\n     been held.\n   - `Tier.ZERO` is NOT encoded in the report, it is simply the fallback\n     value.\n   - If a tier is lost the block data is erased for that tier and will be\n     set if/when the tier is regained to the new block.\n   - If the historical block information is not available the report MAY\n     return `0x00000000` for all held tiers.\n   - Tiers that are lost or have never been held MUST return `0xFFFFFFFF`.\n - SHOULD implement `setTier`.\n   - Contracts SHOULD revert with `SET_TIER` error if they cannot\n     meaningfully set a tier directly.\n     For example a contract that can only derive a membership tier by\n     reading the state of an external contract cannot set tiers.\n   - Contracts implementing `setTier` SHOULD error with `SET_ZERO_TIER`\n     if `Tier.ZERO` is being set.\n - MUST emit `TierChange` when `setTier` successfully writes a new tier.\n   - Contracts that cannot meaningfully set a tier are exempt."
              },
              "fullyImplemented": false,
              "id": 402,
              "linearizedBaseContracts": [
                402
              ],
              "name": "ITier",
              "nameLocation": "2190:5:2",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "canonicalName": "ITier.Tier",
                  "id": 371,
                  "members": [
                    {
                      "id": 362,
                      "name": "ZERO",
                      "nameLocation": "2436:4:2",
                      "nodeType": "EnumValue",
                      "src": "2436:4:2"
                    },
                    {
                      "id": 363,
                      "name": "ONE",
                      "nameLocation": "2450:3:2",
                      "nodeType": "EnumValue",
                      "src": "2450:3:2"
                    },
                    {
                      "id": 364,
                      "name": "TWO",
                      "nameLocation": "2463:3:2",
                      "nodeType": "EnumValue",
                      "src": "2463:3:2"
                    },
                    {
                      "id": 365,
                      "name": "THREE",
                      "nameLocation": "2476:5:2",
                      "nodeType": "EnumValue",
                      "src": "2476:5:2"
                    },
                    {
                      "id": 366,
                      "name": "FOUR",
                      "nameLocation": "2491:4:2",
                      "nodeType": "EnumValue",
                      "src": "2491:4:2"
                    },
                    {
                      "id": 367,
                      "name": "FIVE",
                      "nameLocation": "2505:4:2",
                      "nodeType": "EnumValue",
                      "src": "2505:4:2"
                    },
                    {
                      "id": 368,
                      "name": "SIX",
                      "nameLocation": "2519:3:2",
                      "nodeType": "EnumValue",
                      "src": "2519:3:2"
                    },
                    {
                      "id": 369,
                      "name": "SEVEN",
                      "nameLocation": "2532:5:2",
                      "nodeType": "EnumValue",
                      "src": "2532:5:2"
                    },
                    {
                      "id": 370,
                      "name": "EIGHT",
                      "nameLocation": "2547:5:2",
                      "nodeType": "EnumValue",
                      "src": "2547:5:2"
                    }
                  ],
                  "name": "Tier",
                  "nameLocation": "2421:4:2",
                  "nodeType": "EnumDefinition",
                  "src": "2416:142:2"
                },
                {
                  "anonymous": false,
                  "documentation": {
                    "id": 372,
                    "nodeType": "StructuredDocumentation",
                    "src": "2564:190:2",
                    "text": "Every time a Tier changes we log start and end Tier against the\n account.\n This MAY NOT be emitted if reports are being read from the state of an\n external contract."
                  },
                  "id": 382,
                  "name": "TierChange",
                  "nameLocation": "2765:10:2",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 381,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 374,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "account",
                        "nameLocation": "2801:7:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 382,
                        "src": "2785:23:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 373,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2785:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 377,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "startTier",
                        "nameLocation": "2831:9:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 382,
                        "src": "2818:22:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Tier_$371",
                          "typeString": "enum ITier.Tier"
                        },
                        "typeName": {
                          "id": 376,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 375,
                            "name": "Tier",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 371,
                            "src": "2818:4:2"
                          },
                          "referencedDeclaration": 371,
                          "src": "2818:4:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$371",
                            "typeString": "enum ITier.Tier"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 380,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "endTier",
                        "nameLocation": "2863:7:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 382,
                        "src": "2850:20:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Tier_$371",
                          "typeString": "enum ITier.Tier"
                        },
                        "typeName": {
                          "id": 379,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 378,
                            "name": "Tier",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 371,
                            "src": "2850:4:2"
                          },
                          "referencedDeclaration": 371,
                          "src": "2850:4:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$371",
                            "typeString": "enum ITier.Tier"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2775:101:2"
                  },
                  "src": "2759:118:2"
                },
                {
                  "documentation": {
                    "id": 383,
                    "nodeType": "StructuredDocumentation",
                    "src": "2883:2294:2",
                    "text": "@notice Users can set their own tier by calling `setTier`.\n The contract that implements `ITier` is responsible for checking\n eligibility and/or taking actions required to set the tier.\n For example, the contract must take/refund any tokens relevant to\n changing the tier.\n Obviously the user is responsible for any approvals for this action\n prior to calling `setTier`.\n When the tier is changed a `TierChange` event will be emmited as:\n ```\n event TierChange(address account, Tier startTier, Tier endTier);\n ```\n The `setTier` function includes arbitrary data as the third\n parameter. This can be used to disambiguate in the case that\n there may be many possible options for a user to achieve some tier.\n For example, consider the case where `Tier.THREE` can be achieved\n by EITHER locking 1x rare NFT or 3x uncommon NFTs. A user with both\n could use `data` to explicitly state their intent.\n NOTE however that _any_ address can call `setTier` for any other\n address.\n If you implement `data` or anything that changes state then be very\n careful to avoid griefing attacks.\n The `data` parameter can also be ignored by the contract implementing\n `ITier`. For example, ERC20 tokens are fungible so only the balance\n approved by the user is relevant to a tier change.\n The `setTier` function SHOULD prevent users from reassigning\n `Tier.ZERO` to themselves.\n The `Tier.ZERO` status represents never having any status.\n @dev Updates the tier of an account.\n The implementing contract is responsible for all checks and state\n changes required to set the tier. For example, taking/refunding\n funds/NFTs etc.\n Contracts may disallow directly setting tiers, preferring to derive\n reports from other onchain data.\n In this case they should `revert(\"SET_TIER\");`.\n @param account Account to change the tier for.\n @param endTier Tier after the change.\n @param data Arbitrary input to disambiguate ownership\n (e.g. NFTs to lock)."
                  },
                  "functionSelector": "52dab69d",
                  "id": 393,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "setTier",
                  "nameLocation": "5191:7:2",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 391,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 385,
                        "mutability": "mutable",
                        "name": "account",
                        "nameLocation": "5216:7:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 393,
                        "src": "5208:15:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 384,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5208:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 388,
                        "mutability": "mutable",
                        "name": "endTier",
                        "nameLocation": "5238:7:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 393,
                        "src": "5233:12:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Tier_$371",
                          "typeString": "enum ITier.Tier"
                        },
                        "typeName": {
                          "id": 387,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 386,
                            "name": "Tier",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 371,
                            "src": "5233:4:2"
                          },
                          "referencedDeclaration": 371,
                          "src": "5233:4:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$371",
                            "typeString": "enum ITier.Tier"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 390,
                        "mutability": "mutable",
                        "name": "data",
                        "nameLocation": "5268:4:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 393,
                        "src": "5255:17:2",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 389,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "5255:5:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5198:80:2"
                  },
                  "returnParameters": {
                    "id": 392,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "5295:0:2"
                  },
                  "scope": 402,
                  "src": "5182:114:2",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 394,
                    "nodeType": "StructuredDocumentation",
                    "src": "5302:2251:2",
                    "text": "@notice A tier report is a `uint256` that contains each of the block\n numbers each tier has been held continously since as a `uint32`.\n There are 9 possible tier, starting with `Tier.ZERO` for `0` offset or\n \"never held any tier\" then working up through 8x 4 byte offsets to the\n full 256 bits.\n Low bits = Lower tier.\n In hexadecimal every 8 characters = one tier, starting at `Tier.EIGHT`\n from high bits and working down to `Tier.ONE`.\n `uint32` should be plenty for any blockchain that measures block times\n in seconds, but reconsider if deploying to an environment with\n significantly sub-second block times.\n ~135 years of 1 second blocks fit into `uint32`.\n `2^8 / (365 * 24 * 60 * 60)`\n When a user INCREASES their tier they keep all the block numbers they\n already had, and get new block times for each increased tiers they have\n earned.\n When a user DECREASES their tier they return to `0xFFFFFFFF` (never)\n for every tier level they remove, but keep their block numbers for the\n remaining tiers.\n GUIs are encouraged to make this dynamic very clear for users as\n round-tripping to a lower status and back is a DESTRUCTIVE operation\n for block times.\n The intent is that downstream code can provide additional benefits for\n members who have maintained a certain tier for/since a long time.\n These benefits can be provided by inspecting the report, and by\n on-chain contracts directly,\n rather than needing to work with snapshots etc.\n @dev Returns the earliest block the account has held each tier for\n continuously.\n This is encoded as a uint256 with blocks represented as 8x\n concatenated uint32.\n I.e. Each 4 bytes of the uint256 represents a u32 tier start time.\n The low bits represent low tiers and high bits the high tiers.\n Implementing contracts should return 0xFFFFFFFF for lost &\n never-held tiers.\n @param account Account to get the report for.\n @return The report blocks encoded as a uint256."
                  },
                  "functionSelector": "e053ea31",
                  "id": 401,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "report",
                  "nameLocation": "7567:6:2",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 397,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 396,
                        "mutability": "mutable",
                        "name": "account",
                        "nameLocation": "7582:7:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 401,
                        "src": "7574:15:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 395,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "7574:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "7573:17:2"
                  },
                  "returnParameters": {
                    "id": 400,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 399,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 401,
                        "src": "7614:7:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 398,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "7614:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "7613:9:2"
                  },
                  "scope": 402,
                  "src": "7558:65:2",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 403,
              "src": "2180:5445:2",
              "usedErrors": []
            }
          ],
          "src": "33:7592:2"
        },
        "id": 2
      }
    }
  }
}
