{
  "id": "03073843450a065c5e46397483c9e2e6",
  "_format": "hh-sol-build-info-1",
  "solcVersion": "0.8.10",
  "solcLongVersion": "0.8.10+commit.fc410830",
  "input": {
    "language": "Solidity",
    "sources": {
      "contracts/test/TierByConstructionTest.sol": {
        "content": "// SPDX-License-Identifier: CAL\n\npragma solidity 0.8.10;\n\nimport { ITier } from \"../tier/ITier.sol\";\nimport { TierByConstruction } from \"../tier/TierByConstruction.sol\";\n\n/// @title TierByConstructionTest\n/// An empty contract that facilitates tests enumerating behaviour of the\n/// modifiers at each tier.\ncontract TierByConstructionTest is TierByConstruction {\n\n    /// @param tier_ The tier contract for `TierByConstruction`.\n    constructor(ITier tier_)\n        TierByConstruction(tier_) { } // solhint-disable-line no-empty-blocks\n\n    /// External function with no modifier to use as a control for testing.\n    function unlimited()\n        external\n        view\n    { } // solhint-disable-line no-empty-blocks\n\n    /// Requires `Tier.ZERO` to call.\n    function ifZero()\n        external\n        view\n        onlyTier(msg.sender, ITier.Tier.ZERO)\n    { } // solhint-disable-line no-empty-blocks\n\n    /// Requires `Tier.ONE` to call.\n    function ifOne()\n        external\n        view\n        onlyTier(msg.sender, ITier.Tier.ONE)\n    { } // solhint-disable-line no-empty-blocks\n\n    /// Requires `Tier.TWO` to call.\n    function ifTwo()\n        external\n        view\n        onlyTier(msg.sender, ITier.Tier.TWO)\n    { } // solhint-disable-line no-empty-blocks\n\n    /// Requires `Tier.THREE` to call.\n    function ifThree()\n        external\n        view\n        onlyTier(msg.sender, ITier.Tier.THREE)\n    { } // solhint-disable-line no-empty-blocks\n\n    /// Requires `Tier.FOUR` to call.\n    function ifFour()\n        external\n        view\n        onlyTier(msg.sender, ITier.Tier.FOUR)\n    { } // solhint-disable-line no-empty-blocks\n\n    /// Requires `Tier.FIVE` to call.\n    function ifFive()\n        external\n        view\n        onlyTier(msg.sender, ITier.Tier.FIVE)\n    { } // solhint-disable-line no-empty-blocks\n\n    /// Requires `Tier.SIX` to call.\n    function ifSix()\n        external\n        view\n        onlyTier(msg.sender, ITier.Tier.SIX)\n    { } // solhint-disable-line no-empty-blocks\n\n    /// Requires `Tier.SEVEN` to call.\n    function ifSeven()\n        external\n        view\n        onlyTier(msg.sender, ITier.Tier.SEVEN)\n    { } // solhint-disable-line no-empty-blocks\n\n    /// Requires `Tier.EIGHT` to call.\n    function ifEight()\n        external\n        view\n        onlyTier(msg.sender, ITier.Tier.EIGHT)\n    { } // solhint-disable-line no-empty-blocks\n}"
      },
      "contracts/tier/ITier.sol": {
        "content": "// SPDX-License-Identifier: CAL\n\npragma solidity 0.8.10;\n\n/// @title ITier\n/// @notice `ITier` is a simple interface that contracts can\n/// implement to provide membership lists for other contracts.\n///\n/// There are many use-cases for a time-preserving,\n/// conditional membership list.\n///\n/// Some examples include:\n///\n/// - Self-serve whitelist to participate in fundraising\n/// - Lists of users who can claim airdrops and perks\n/// - Pooling resources with implied governance/reward tiers\n/// - POAP style attendance proofs allowing access to future exclusive events\n///\n/// @dev Standard interface to a tiered membership.\n///\n/// A \"membership\" can represent many things:\n/// - Exclusive access.\n/// - Participation in some event or process.\n/// - KYC completion.\n/// - Combination of sub-memberships.\n/// - Etc.\n///\n/// The high level requirements for a contract implementing `ITier`:\n/// - MUST represent held tiers with the `Tier` enum.\n/// - MUST implement `report`.\n///   - The report is a `uint256` that SHOULD represent the block each tier has\n///     been continuously held since encoded as `uint32`.\n///   - The encoded tiers start at ONE; ZERO is implied if no tier has ever\n///     been held.\n///   - `Tier.ZERO` is NOT encoded in the report, it is simply the fallback\n///     value.\n///   - If a tier is lost the block data is erased for that tier and will be\n///     set if/when the tier is regained to the new block.\n///   - If the historical block information is not available the report MAY\n///     return `0x00000000` for all held tiers.\n///   - Tiers that are lost or have never been held MUST return `0xFFFFFFFF`.\n/// - SHOULD implement `setTier`.\n///   - Contracts SHOULD revert with `SET_TIER` error if they cannot\n///     meaningfully set a tier directly.\n///     For example a contract that can only derive a membership tier by\n///     reading the state of an external contract cannot set tiers.\n///   - Contracts implementing `setTier` SHOULD error with `SET_ZERO_TIER`\n///     if `Tier.ZERO` is being set.\n/// - MUST emit `TierChange` when `setTier` successfully writes a new tier.\n///   - Contracts that cannot meaningfully set a tier are exempt.\ninterface ITier {\n\n    /// 9 Possible tiers.\n    /// Fits nicely as uint32 in uint256 which is helpful for internal storage\n    /// concerns.\n    /// 8 tiers can be achieved, ZERO is the tier when no tier has been\n    /// achieved.\n    enum Tier {\n        ZERO,\n        ONE,\n        TWO,\n        THREE,\n        FOUR,\n        FIVE,\n        SIX,\n        SEVEN,\n        EIGHT\n    }\n\n    /// Every time a Tier changes we log start and end Tier against the\n    /// account.\n    /// This MAY NOT be emitted if reports are being read from the state of an\n    /// external contract.\n    event TierChange(\n        address indexed account,\n        Tier indexed startTier,\n        Tier indexed endTier\n    );\n\n    /// @notice Users can set their own tier by calling `setTier`.\n    ///\n    /// The contract that implements `ITier` is responsible for checking\n    /// eligibility and/or taking actions required to set the tier.\n    ///\n    /// For example, the contract must take/refund any tokens relevant to\n    /// changing the tier.\n    ///\n    /// Obviously the user is responsible for any approvals for this action\n    /// prior to calling `setTier`.\n    ///\n    /// When the tier is changed a `TierChange` event will be emmited as:\n    /// ```\n    /// event TierChange(address account, Tier startTier, Tier endTier);\n    /// ```\n    ///\n    /// The `setTier` function includes arbitrary data as the third\n    /// parameter. This can be used to disambiguate in the case that\n    /// there may be many possible options for a user to achieve some tier.\n    ///\n    /// For example, consider the case where `Tier.THREE` can be achieved\n    /// by EITHER locking 1x rare NFT or 3x uncommon NFTs. A user with both\n    /// could use `data` to explicitly state their intent.\n    ///\n    /// NOTE however that _any_ address can call `setTier` for any other\n    /// address.\n    ///\n    /// If you implement `data` or anything that changes state then be very\n    /// careful to avoid griefing attacks.\n    ///\n    /// The `data` parameter can also be ignored by the contract implementing\n    /// `ITier`. For example, ERC20 tokens are fungible so only the balance\n    /// approved by the user is relevant to a tier change.\n    ///\n    /// The `setTier` function SHOULD prevent users from reassigning\n    /// `Tier.ZERO` to themselves.\n    ///\n    /// The `Tier.ZERO` status represents never having any status.\n    /// @dev Updates the tier of an account.\n    ///\n    /// The implementing contract is responsible for all checks and state\n    /// changes required to set the tier. For example, taking/refunding\n    /// funds/NFTs etc.\n    ///\n    /// Contracts may disallow directly setting tiers, preferring to derive\n    /// reports from other onchain data.\n    /// In this case they should `revert(\"SET_TIER\");`.\n    ///\n    /// @param account Account to change the tier for.\n    /// @param endTier Tier after the change.\n    /// @param data Arbitrary input to disambiguate ownership\n    /// (e.g. NFTs to lock).\n    function setTier(\n        address account,\n        Tier endTier,\n        bytes memory data\n    )\n        external;\n\n    /// @notice A tier report is a `uint256` that contains each of the block\n    /// numbers each tier has been held continously since as a `uint32`.\n    /// There are 9 possible tier, starting with `Tier.ZERO` for `0` offset or\n    /// \"never held any tier\" then working up through 8x 4 byte offsets to the\n    /// full 256 bits.\n    ///\n    /// Low bits = Lower tier.\n    ///\n    /// In hexadecimal every 8 characters = one tier, starting at `Tier.EIGHT`\n    /// from high bits and working down to `Tier.ONE`.\n    ///\n    /// `uint32` should be plenty for any blockchain that measures block times\n    /// in seconds, but reconsider if deploying to an environment with\n    /// significantly sub-second block times.\n    ///\n    /// ~135 years of 1 second blocks fit into `uint32`.\n    ///\n    /// `2^8 / (365 * 24 * 60 * 60)`\n    ///\n    /// When a user INCREASES their tier they keep all the block numbers they\n    /// already had, and get new block times for each increased tiers they have\n    /// earned.\n    ///\n    /// When a user DECREASES their tier they return to `0xFFFFFFFF` (never)\n    /// for every tier level they remove, but keep their block numbers for the\n    /// remaining tiers.\n    ///\n    /// GUIs are encouraged to make this dynamic very clear for users as\n    /// round-tripping to a lower status and back is a DESTRUCTIVE operation\n    /// for block times.\n    ///\n    /// The intent is that downstream code can provide additional benefits for\n    /// members who have maintained a certain tier for/since a long time.\n    /// These benefits can be provided by inspecting the report, and by\n    /// on-chain contracts directly,\n    /// rather than needing to work with snapshots etc.\n    /// @dev Returns the earliest block the account has held each tier for\n    /// continuously.\n    /// This is encoded as a uint256 with blocks represented as 8x\n    /// concatenated uint32.\n    /// I.e. Each 4 bytes of the uint256 represents a u32 tier start time.\n    /// The low bits represent low tiers and high bits the high tiers.\n    /// Implementing contracts should return 0xFFFFFFFF for lost &\n    /// never-held tiers.\n    ///\n    /// @param account Account to get the report for.\n    /// @return The report blocks encoded as a uint256.\n    function report(address account) external view returns (uint256);\n}"
      },
      "contracts/tier/TierByConstruction.sol": {
        "content": "// SPDX-License-Identifier: CAL\n\npragma solidity 0.8.10;\n\nimport { TierUtil } from \"../libraries/TierUtil.sol\";\nimport { ITier } from \"./ITier.sol\";\n\n/// @title TierByConstruction\n/// @notice `TierByConstruction` is a base contract for other\n/// contracts to inherit from.\n///\n/// It exposes `isTier` and the corresponding modifier `onlyTier`.\n///\n/// This ensures that the address has held at least the given tier\n/// since the contract was constructed.\n///\n/// We check against the construction time of the contract rather\n/// than the current block to avoid various exploits.\n///\n/// Users should not be able to gain a tier for a single block, claim\n/// benefits then remove the tier within the same block.\n///\n/// The construction block provides a simple and generic reference\n/// point that is difficult to manipulate/predict.\n///\n/// Note that `ReadOnlyTier` contracts must carefully consider use\n/// with `TierByConstruction` as they tend to return `0x00000000` for\n/// any/all tiers held. There needs to be additional safeguards to\n/// mitigate \"flash tier\" attacks.\n///\n/// Note that an account COULD be `TierByConstruction` then lower/\n/// remove a tier, then no longer be eligible when they regain the\n/// tier. Only _continuously held_ tiers are valid against the\n/// construction block check as this is native behaviour of the\n/// `report` function in `ITier`.\n///\n/// Technically the `ITier` could re-enter the `TierByConstruction`\n/// so the `onlyTier` modifier runs AFTER the modified function.\n///\n/// @dev Enforces tiers held by contract contruction block.\n/// The construction block is compared against the blocks returned by `report`.\n/// The `ITier` contract is paramaterised and set during construction.\ncontract TierByConstruction {\n    ITier public tierContract;\n    uint256 public constructionBlock;\n\n    constructor(ITier tierContract_) {\n        tierContract = tierContract_;\n        constructionBlock = block.number;\n    }\n\n    /// Check if an account has held AT LEAST the given tier according to\n    /// `tierContract` since construction.\n    /// The account MUST have held the tier continuously from construction\n    /// until the \"current\" state according to `report`.\n    /// Note that `report` PROBABLY is current as at the block this function is\n    /// called but MAYBE NOT.\n    /// The `ITier` contract is free to manage reports however makes sense.\n    ///\n    /// @param account_ Account to check status of.\n    /// @param minimumTier_ Minimum tier for the account.\n    /// @return True if the status is currently held.\n    function isTier(address account_, ITier.Tier minimumTier_)\n        public\n        view\n        returns (bool)\n    {\n        return constructionBlock >= TierUtil.tierBlock(\n            tierContract.report(account_),\n            minimumTier_\n        );\n    }\n\n    /// Modifier that restricts access to functions depending on the tier\n    /// required by the function.\n    ///\n    /// `isTier` involves an external call to tierContract.report.\n    /// `require` happens AFTER the modified function to avoid rentrant\n    /// `ITier` code.\n    /// Also `report` from `ITier` is `view` so the compiler will error on\n    /// attempted state modification.\n    // solhint-disable-next-line max-line-length\n    /// https://consensys.github.io/smart-contract-best-practices/recommendations/#use-modifiers-only-for-checks\n    ///\n    /// Do NOT use this to guard setting the tier on an `ITier` contract.\n    /// The initial tier would be checked AFTER it has already been\n    /// modified which is unsafe.\n    ///\n    /// @param account_ Account to enforce tier of.\n    /// @param minimumTier_ Minimum tier for the account.\n    modifier onlyTier(address account_, ITier.Tier minimumTier_) {\n        _;\n        require(\n            isTier(account_, minimumTier_),\n            \"MINIMUM_TIER\"\n        );\n    }\n}"
      },
      "contracts/libraries/TierUtil.sol": {
        "content": "// SPDX-License-Identifier: CAL\n\npragma solidity 0.8.10;\n\nimport { ITier } from \"../tier/ITier.sol\";\n\n/// @title TierUtil\n/// @notice `TierUtil` implements several pure functions that can be\n/// used to interface with reports.\n/// - `tierAtBlockFromReport`: Returns the highest status achieved relative to\n/// a block number and report. Statuses gained after that block are ignored.\n/// - `tierBlock`: Returns the block that a given tier has been held\n/// since according to a report.\n/// - `truncateTiersAbove`: Resets all the tiers above the reference tier.\n/// - `updateBlocksForTierRange`: Updates a report with a block\n/// number for every tier in a range.\n/// - `updateReportWithTierAtBlock`: Updates a report to a new tier.\n/// @dev Utilities to consistently read, write and manipulate tiers in reports.\n/// The low-level bit shifting can be difficult to get right so this factors\n/// that out.\nlibrary TierUtil {\n\n    /// UNINITIALIZED is 0xFF.. as it is infinitely in the future.\n    uint256 public constant UNINITIALIZED\n        = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n    /// Returns the highest tier achieved relative to a block number\n    /// and report.\n    ///\n    /// Note that typically the report will be from the _current_ contract\n    /// state, i.e. `block.number` but not always. Tiers gained after the\n    /// reference block are ignored.\n    ///\n    /// When the `report` comes from a later block than the `blockNumber` this\n    /// means the user must have held the tier continuously from `blockNumber`\n    /// _through_ to the report block.\n    /// I.e. NOT a snapshot.\n    ///\n    /// @param report_ A report as per `ITier`.\n    /// @param blockNumber_ The block number to check the tiers against.\n    /// @return The highest tier held since `blockNumber` as per `report`.\n    function tierAtBlockFromReport(\n        uint256 report_,\n        uint256 blockNumber_\n    )\n        internal pure returns (ITier.Tier)\n    {\n        for (uint256 i_ = 0; i_ < 8; i_++) {\n            if (uint32(uint256(report_ >> (i_*32))) > uint32(blockNumber_)) {\n                return ITier.Tier(i_);\n            }\n        }\n        return ITier.Tier(8);\n    }\n\n    /// Returns the block that a given tier has been held since from a report.\n    ///\n    /// The report MUST encode \"never\" as 0xFFFFFFFF. This ensures\n    /// compatibility with `tierAtBlockFromReport`.\n    ///\n    /// @param report_ The report to read a block number from.\n    /// @param tier_ The Tier to read the block number for.\n    /// @return The block number this has been held since.\n    function tierBlock(uint256 report_, ITier.Tier tier_)\n        internal\n        pure\n        returns (uint256)\n    {\n        // ZERO is a special case. Everyone has always been at least ZERO,\n        // since block 0.\n        if (tier_ == ITier.Tier.ZERO) { return 0; }\n\n        uint256 offset_ = (uint256(tier_) - 1) * 32;\n        return uint256(uint32(\n            uint256(\n                report_ >> offset_\n            )\n        ));\n    }\n\n    /// Resets all the tiers above the reference tier to 0xFFFFFFFF.\n    ///\n    /// @param report_ Report to truncate with high bit 1s.\n    /// @param tier_ Tier to truncate above (exclusive).\n    /// @return Truncated report.\n    function truncateTiersAbove(uint256 report_, ITier.Tier tier_)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 offset_ = uint256(tier_) * 32;\n        uint256 mask_ = (UNINITIALIZED >> offset_) << offset_;\n        return report_ | mask_;\n    }\n\n    /// Updates a report with a block number for every status integer in a\n    /// range.\n    ///\n    /// Does nothing if the end status is equal or less than the start status.\n    /// @param report_ The report to update.\n    /// @param startTier_ The `Tier` at the start of the range (exclusive).\n    /// @param endTier_ The `Tier` at the end of the range (inclusive).\n    /// @param blockNumber_ The block number to set for every status\n    /// in the range.\n    /// @return The updated report.\n    function updateBlocksForTierRange(\n        uint256 report_,\n        ITier.Tier startTier_,\n        ITier.Tier endTier_,\n        uint256 blockNumber_\n    )\n        internal pure returns (uint256)\n    {\n        uint256 offset_;\n        for (uint256 i_ = uint256(startTier_); i_ < uint256(endTier_); i_++) {\n            offset_ = i_ * 32;\n            report_ =\n                (report_ & ~uint256(uint256(uint32(UNINITIALIZED)) << offset_))\n                | uint256(blockNumber_ << offset_);\n        }\n        return report_;\n    }\n\n    /// Updates a report to a new status.\n    ///\n    /// Internally dispatches to `truncateTiersAbove` and\n    /// `updateBlocksForTierRange`.\n    /// The dispatch is based on whether the new tier is above or below the\n    /// current tier.\n    /// The `startTier_` MUST match the result of `tierAtBlockFromReport`.\n    /// It is expected the caller will know the current tier when\n    /// calling this function and need to do other things in the calling scope\n    /// with it.\n    ///\n    /// @param report_ The report to update.\n    /// @param startTier_ The tier to start updating relative to. Data above\n    /// this tier WILL BE LOST so probably should be the current tier.\n    /// @param endTier_ The new highest tier held, at the given block number.\n    /// @param blockNumber_ The block number to update the highest tier to, and\n    /// intermediate tiers from `startTier_`.\n    /// @return The updated report.\n    function updateReportWithTierAtBlock(\n        uint256 report_,\n        ITier.Tier startTier_,\n        ITier.Tier endTier_,\n        uint256 blockNumber_\n    )\n        internal pure returns (uint256)\n    {\n        return endTier_ < startTier_\n            ? truncateTiersAbove(report_, endTier_)\n            : updateBlocksForTierRange(\n                report_,\n                startTier_,\n                endTier_,\n                blockNumber_\n            );\n    }\n\n}"
      }
    },
    "settings": {
      "metadata": {
        "useLiteralContent": true
      },
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ],
          "": [
            "ast"
          ]
        }
      }
    }
  },
  "output": {
    "contracts": {
      "contracts/libraries/TierUtil.sol": {
        "TierUtil": {
          "abi": [
            {
              "inputs": [],
              "name": "UNINITIALIZED",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "6088610038600b82828239805160001a607314602b57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c806381e45d9a146038575b600080fd5b604060001981565b60405190815260200160405180910390f3fea264697066735822122053de61ff2ad15f2cbe303a1649109f365de0abfa880cd2e9d2f26f2023f9fd4364736f6c634300080a0033",
              "opcodes": "PUSH1 0x88 PUSH2 0x38 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH1 0x33 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x81E45D9A EQ PUSH1 0x38 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 PUSH1 0x0 NOT DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MSTORE8 0xDE PUSH2 0xFF2A 0xD1 0x5F 0x2C 0xBE ADDRESS GASPRICE AND 0x49 LT SWAP16 CALLDATASIZE 0x5D 0xE0 0xAB STATICCALL DUP9 0xC 0xD2 0xE9 0xD2 CALLCODE PUSH16 0x2023F9FD4364736F6C634300080A0033 ",
              "sourceMap": "902:5066:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;902:5066:0;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "@UNINITIALIZED_8": {
                  "entryPoint": null,
                  "id": 8,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_library_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                }
              },
              "generatedSources": [
                {
                  "ast": {
                    "nodeType": "YulBlock",
                    "src": "0:201:4",
                    "statements": [
                      {
                        "nodeType": "YulBlock",
                        "src": "6:3:4",
                        "statements": []
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "123:76:4",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "133:26:4",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "145:9:4"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "156:2:4",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "141:3:4"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "141:18:4"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "133:4:4"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "175:9:4"
                                  },
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "186:6:4"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "168:6:4"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "168:25:4"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "168:25:4"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_library_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "92:9:4",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "103:6:4",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "114:4:4",
                            "type": ""
                          }
                        ],
                        "src": "14:185:4"
                      }
                    ]
                  },
                  "contents": "{\n    { }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_library_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n}",
                  "id": 4,
                  "language": "Yul",
                  "name": "#utility.yul"
                }
              ],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "730000000000000000000000000000000000000000301460806040526004361060335760003560e01c806381e45d9a146038575b600080fd5b604060001981565b60405190815260200160405180910390f3fea264697066735822122053de61ff2ad15f2cbe303a1649109f365de0abfa880cd2e9d2f26f2023f9fd4364736f6c634300080a0033",
              "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH1 0x33 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x81E45D9A EQ PUSH1 0x38 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 PUSH1 0x0 NOT DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MSTORE8 0xDE PUSH2 0xFF2A 0xD1 0x5F 0x2C 0xBE ADDRESS GASPRICE AND 0x49 LT SWAP16 CALLDATASIZE 0x5D 0xE0 0xAB STATICCALL DUP9 0xC 0xD2 0xE9 0xD2 CALLCODE PUSH16 0x2023F9FD4364736F6C634300080A0033 ",
              "sourceMap": "902:5066:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;993:114;;-1:-1:-1;;993:114:0;;;;;168:25:4;;;156:2;141:18;993:114:0;;;;;;"
            },
            "methodIdentifiers": {
              "UNINITIALIZED()": "81e45d9a"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"UNINITIALIZED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Utilities to consistently read, write and manipulate tiers in reports. The low-level bit shifting can be difficult to get right so this factors that out.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"TierUtil\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"UNINITIALIZED()\":{\"notice\":\"UNINITIALIZED is 0xFF.. as it is infinitely in the future.\"}},\"notice\":\"`TierUtil` implements several pure functions that can be used to interface with reports. - `tierAtBlockFromReport`: Returns the highest status achieved relative to a block number and report. Statuses gained after that block are ignored. - `tierBlock`: Returns the block that a given tier has been held since according to a report. - `truncateTiersAbove`: Resets all the tiers above the reference tier. - `updateBlocksForTierRange`: Updates a report with a block number for every tier in a range. - `updateReportWithTierAtBlock`: Updates a report to a new tier.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/TierUtil.sol\":\"TierUtil\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/libraries/TierUtil.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\n\\npragma solidity 0.8.10;\\n\\nimport { ITier } from \\\"../tier/ITier.sol\\\";\\n\\n/// @title TierUtil\\n/// @notice `TierUtil` implements several pure functions that can be\\n/// used to interface with reports.\\n/// - `tierAtBlockFromReport`: Returns the highest status achieved relative to\\n/// a block number and report. Statuses gained after that block are ignored.\\n/// - `tierBlock`: Returns the block that a given tier has been held\\n/// since according to a report.\\n/// - `truncateTiersAbove`: Resets all the tiers above the reference tier.\\n/// - `updateBlocksForTierRange`: Updates a report with a block\\n/// number for every tier in a range.\\n/// - `updateReportWithTierAtBlock`: Updates a report to a new tier.\\n/// @dev Utilities to consistently read, write and manipulate tiers in reports.\\n/// The low-level bit shifting can be difficult to get right so this factors\\n/// that out.\\nlibrary TierUtil {\\n\\n    /// UNINITIALIZED is 0xFF.. as it is infinitely in the future.\\n    uint256 public constant UNINITIALIZED\\n        = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n    /// Returns the highest tier achieved relative to a block number\\n    /// and report.\\n    ///\\n    /// Note that typically the report will be from the _current_ contract\\n    /// state, i.e. `block.number` but not always. Tiers gained after the\\n    /// reference block are ignored.\\n    ///\\n    /// When the `report` comes from a later block than the `blockNumber` this\\n    /// means the user must have held the tier continuously from `blockNumber`\\n    /// _through_ to the report block.\\n    /// I.e. NOT a snapshot.\\n    ///\\n    /// @param report_ A report as per `ITier`.\\n    /// @param blockNumber_ The block number to check the tiers against.\\n    /// @return The highest tier held since `blockNumber` as per `report`.\\n    function tierAtBlockFromReport(\\n        uint256 report_,\\n        uint256 blockNumber_\\n    )\\n        internal pure returns (ITier.Tier)\\n    {\\n        for (uint256 i_ = 0; i_ < 8; i_++) {\\n            if (uint32(uint256(report_ >> (i_*32))) > uint32(blockNumber_)) {\\n                return ITier.Tier(i_);\\n            }\\n        }\\n        return ITier.Tier(8);\\n    }\\n\\n    /// Returns the block that a given tier has been held since from a report.\\n    ///\\n    /// The report MUST encode \\\"never\\\" as 0xFFFFFFFF. This ensures\\n    /// compatibility with `tierAtBlockFromReport`.\\n    ///\\n    /// @param report_ The report to read a block number from.\\n    /// @param tier_ The Tier to read the block number for.\\n    /// @return The block number this has been held since.\\n    function tierBlock(uint256 report_, ITier.Tier tier_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // ZERO is a special case. Everyone has always been at least ZERO,\\n        // since block 0.\\n        if (tier_ == ITier.Tier.ZERO) { return 0; }\\n\\n        uint256 offset_ = (uint256(tier_) - 1) * 32;\\n        return uint256(uint32(\\n            uint256(\\n                report_ >> offset_\\n            )\\n        ));\\n    }\\n\\n    /// Resets all the tiers above the reference tier to 0xFFFFFFFF.\\n    ///\\n    /// @param report_ Report to truncate with high bit 1s.\\n    /// @param tier_ Tier to truncate above (exclusive).\\n    /// @return Truncated report.\\n    function truncateTiersAbove(uint256 report_, ITier.Tier tier_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 offset_ = uint256(tier_) * 32;\\n        uint256 mask_ = (UNINITIALIZED >> offset_) << offset_;\\n        return report_ | mask_;\\n    }\\n\\n    /// Updates a report with a block number for every status integer in a\\n    /// range.\\n    ///\\n    /// Does nothing if the end status is equal or less than the start status.\\n    /// @param report_ The report to update.\\n    /// @param startTier_ The `Tier` at the start of the range (exclusive).\\n    /// @param endTier_ The `Tier` at the end of the range (inclusive).\\n    /// @param blockNumber_ The block number to set for every status\\n    /// in the range.\\n    /// @return The updated report.\\n    function updateBlocksForTierRange(\\n        uint256 report_,\\n        ITier.Tier startTier_,\\n        ITier.Tier endTier_,\\n        uint256 blockNumber_\\n    )\\n        internal pure returns (uint256)\\n    {\\n        uint256 offset_;\\n        for (uint256 i_ = uint256(startTier_); i_ < uint256(endTier_); i_++) {\\n            offset_ = i_ * 32;\\n            report_ =\\n                (report_ & ~uint256(uint256(uint32(UNINITIALIZED)) << offset_))\\n                | uint256(blockNumber_ << offset_);\\n        }\\n        return report_;\\n    }\\n\\n    /// Updates a report to a new status.\\n    ///\\n    /// Internally dispatches to `truncateTiersAbove` and\\n    /// `updateBlocksForTierRange`.\\n    /// The dispatch is based on whether the new tier is above or below the\\n    /// current tier.\\n    /// The `startTier_` MUST match the result of `tierAtBlockFromReport`.\\n    /// It is expected the caller will know the current tier when\\n    /// calling this function and need to do other things in the calling scope\\n    /// with it.\\n    ///\\n    /// @param report_ The report to update.\\n    /// @param startTier_ The tier to start updating relative to. Data above\\n    /// this tier WILL BE LOST so probably should be the current tier.\\n    /// @param endTier_ The new highest tier held, at the given block number.\\n    /// @param blockNumber_ The block number to update the highest tier to, and\\n    /// intermediate tiers from `startTier_`.\\n    /// @return The updated report.\\n    function updateReportWithTierAtBlock(\\n        uint256 report_,\\n        ITier.Tier startTier_,\\n        ITier.Tier endTier_,\\n        uint256 blockNumber_\\n    )\\n        internal pure returns (uint256)\\n    {\\n        return endTier_ < startTier_\\n            ? truncateTiersAbove(report_, endTier_)\\n            : updateBlocksForTierRange(\\n                report_,\\n                startTier_,\\n                endTier_,\\n                blockNumber_\\n            );\\n    }\\n\\n}\",\"keccak256\":\"0xc4bde1f366857f2fda9fc9f7d36676f39d9a263f85bfd3b5f51e8d02d769dd5a\",\"license\":\"CAL\"},\"contracts/tier/ITier.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\n\\npragma solidity 0.8.10;\\n\\n/// @title ITier\\n/// @notice `ITier` is a simple interface that contracts can\\n/// implement to provide membership lists for other contracts.\\n///\\n/// There are many use-cases for a time-preserving,\\n/// conditional membership list.\\n///\\n/// Some examples include:\\n///\\n/// - Self-serve whitelist to participate in fundraising\\n/// - Lists of users who can claim airdrops and perks\\n/// - Pooling resources with implied governance/reward tiers\\n/// - POAP style attendance proofs allowing access to future exclusive events\\n///\\n/// @dev Standard interface to a tiered membership.\\n///\\n/// A \\\"membership\\\" can represent many things:\\n/// - Exclusive access.\\n/// - Participation in some event or process.\\n/// - KYC completion.\\n/// - Combination of sub-memberships.\\n/// - Etc.\\n///\\n/// The high level requirements for a contract implementing `ITier`:\\n/// - MUST represent held tiers with the `Tier` enum.\\n/// - MUST implement `report`.\\n///   - The report is a `uint256` that SHOULD represent the block each tier has\\n///     been continuously held since encoded as `uint32`.\\n///   - The encoded tiers start at ONE; ZERO is implied if no tier has ever\\n///     been held.\\n///   - `Tier.ZERO` is NOT encoded in the report, it is simply the fallback\\n///     value.\\n///   - If a tier is lost the block data is erased for that tier and will be\\n///     set if/when the tier is regained to the new block.\\n///   - If the historical block information is not available the report MAY\\n///     return `0x00000000` for all held tiers.\\n///   - Tiers that are lost or have never been held MUST return `0xFFFFFFFF`.\\n/// - SHOULD implement `setTier`.\\n///   - Contracts SHOULD revert with `SET_TIER` error if they cannot\\n///     meaningfully set a tier directly.\\n///     For example a contract that can only derive a membership tier by\\n///     reading the state of an external contract cannot set tiers.\\n///   - Contracts implementing `setTier` SHOULD error with `SET_ZERO_TIER`\\n///     if `Tier.ZERO` is being set.\\n/// - MUST emit `TierChange` when `setTier` successfully writes a new tier.\\n///   - Contracts that cannot meaningfully set a tier are exempt.\\ninterface ITier {\\n\\n    /// 9 Possible tiers.\\n    /// Fits nicely as uint32 in uint256 which is helpful for internal storage\\n    /// concerns.\\n    /// 8 tiers can be achieved, ZERO is the tier when no tier has been\\n    /// achieved.\\n    enum Tier {\\n        ZERO,\\n        ONE,\\n        TWO,\\n        THREE,\\n        FOUR,\\n        FIVE,\\n        SIX,\\n        SEVEN,\\n        EIGHT\\n    }\\n\\n    /// Every time a Tier changes we log start and end Tier against the\\n    /// account.\\n    /// This MAY NOT be emitted if reports are being read from the state of an\\n    /// external contract.\\n    event TierChange(\\n        address indexed account,\\n        Tier indexed startTier,\\n        Tier indexed endTier\\n    );\\n\\n    /// @notice Users can set their own tier by calling `setTier`.\\n    ///\\n    /// The contract that implements `ITier` is responsible for checking\\n    /// eligibility and/or taking actions required to set the tier.\\n    ///\\n    /// For example, the contract must take/refund any tokens relevant to\\n    /// changing the tier.\\n    ///\\n    /// Obviously the user is responsible for any approvals for this action\\n    /// prior to calling `setTier`.\\n    ///\\n    /// When the tier is changed a `TierChange` event will be emmited as:\\n    /// ```\\n    /// event TierChange(address account, Tier startTier, Tier endTier);\\n    /// ```\\n    ///\\n    /// The `setTier` function includes arbitrary data as the third\\n    /// parameter. This can be used to disambiguate in the case that\\n    /// there may be many possible options for a user to achieve some tier.\\n    ///\\n    /// For example, consider the case where `Tier.THREE` can be achieved\\n    /// by EITHER locking 1x rare NFT or 3x uncommon NFTs. A user with both\\n    /// could use `data` to explicitly state their intent.\\n    ///\\n    /// NOTE however that _any_ address can call `setTier` for any other\\n    /// address.\\n    ///\\n    /// If you implement `data` or anything that changes state then be very\\n    /// careful to avoid griefing attacks.\\n    ///\\n    /// The `data` parameter can also be ignored by the contract implementing\\n    /// `ITier`. For example, ERC20 tokens are fungible so only the balance\\n    /// approved by the user is relevant to a tier change.\\n    ///\\n    /// The `setTier` function SHOULD prevent users from reassigning\\n    /// `Tier.ZERO` to themselves.\\n    ///\\n    /// The `Tier.ZERO` status represents never having any status.\\n    /// @dev Updates the tier of an account.\\n    ///\\n    /// The implementing contract is responsible for all checks and state\\n    /// changes required to set the tier. For example, taking/refunding\\n    /// funds/NFTs etc.\\n    ///\\n    /// Contracts may disallow directly setting tiers, preferring to derive\\n    /// reports from other onchain data.\\n    /// In this case they should `revert(\\\"SET_TIER\\\");`.\\n    ///\\n    /// @param account Account to change the tier for.\\n    /// @param endTier Tier after the change.\\n    /// @param data Arbitrary input to disambiguate ownership\\n    /// (e.g. NFTs to lock).\\n    function setTier(\\n        address account,\\n        Tier endTier,\\n        bytes memory data\\n    )\\n        external;\\n\\n    /// @notice A tier report is a `uint256` that contains each of the block\\n    /// numbers each tier has been held continously since as a `uint32`.\\n    /// There are 9 possible tier, starting with `Tier.ZERO` for `0` offset or\\n    /// \\\"never held any tier\\\" then working up through 8x 4 byte offsets to the\\n    /// full 256 bits.\\n    ///\\n    /// Low bits = Lower tier.\\n    ///\\n    /// In hexadecimal every 8 characters = one tier, starting at `Tier.EIGHT`\\n    /// from high bits and working down to `Tier.ONE`.\\n    ///\\n    /// `uint32` should be plenty for any blockchain that measures block times\\n    /// in seconds, but reconsider if deploying to an environment with\\n    /// significantly sub-second block times.\\n    ///\\n    /// ~135 years of 1 second blocks fit into `uint32`.\\n    ///\\n    /// `2^8 / (365 * 24 * 60 * 60)`\\n    ///\\n    /// When a user INCREASES their tier they keep all the block numbers they\\n    /// already had, and get new block times for each increased tiers they have\\n    /// earned.\\n    ///\\n    /// When a user DECREASES their tier they return to `0xFFFFFFFF` (never)\\n    /// for every tier level they remove, but keep their block numbers for the\\n    /// remaining tiers.\\n    ///\\n    /// GUIs are encouraged to make this dynamic very clear for users as\\n    /// round-tripping to a lower status and back is a DESTRUCTIVE operation\\n    /// for block times.\\n    ///\\n    /// The intent is that downstream code can provide additional benefits for\\n    /// members who have maintained a certain tier for/since a long time.\\n    /// These benefits can be provided by inspecting the report, and by\\n    /// on-chain contracts directly,\\n    /// rather than needing to work with snapshots etc.\\n    /// @dev Returns the earliest block the account has held each tier for\\n    /// continuously.\\n    /// This is encoded as a uint256 with blocks represented as 8x\\n    /// concatenated uint32.\\n    /// I.e. Each 4 bytes of the uint256 represents a u32 tier start time.\\n    /// The low bits represent low tiers and high bits the high tiers.\\n    /// Implementing contracts should return 0xFFFFFFFF for lost &\\n    /// never-held tiers.\\n    ///\\n    /// @param account Account to get the report for.\\n    /// @return The report blocks encoded as a uint256.\\n    function report(address account) external view returns (uint256);\\n}\",\"keccak256\":\"0x9df1a0a477801f332f9b95fb6d400d2edb4fce18c089c0df0a5affc02ebd4121\",\"license\":\"CAL\"}},\"version\":1}"
        }
      },
      "contracts/test/TierByConstructionTest.sol": {
        "TierByConstructionTest": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "contract ITier",
                  "name": "tier_",
                  "type": "address"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "inputs": [],
              "name": "constructionBlock",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "ifEight",
              "outputs": [],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "ifFive",
              "outputs": [],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "ifFour",
              "outputs": [],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "ifOne",
              "outputs": [],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "ifSeven",
              "outputs": [],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "ifSix",
              "outputs": [],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "ifThree",
              "outputs": [],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "ifTwo",
              "outputs": [],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "ifZero",
              "outputs": [],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "account_",
                  "type": "address"
                },
                {
                  "internalType": "enum ITier.Tier",
                  "name": "minimumTier_",
                  "type": "uint8"
                }
              ],
              "name": "isTier",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "tierContract",
              "outputs": [
                {
                  "internalType": "contract ITier",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "unlimited",
              "outputs": [],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "@_266": {
                  "entryPoint": null,
                  "id": 266,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "@_452": {
                  "entryPoint": null,
                  "id": 452,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "abi_decode_tuple_t_contract$_ITier_$424_fromMemory": {
                  "entryPoint": 88,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                }
              },
              "generatedSources": [
                {
                  "ast": {
                    "nodeType": "YulBlock",
                    "src": "0:319:4",
                    "statements": [
                      {
                        "nodeType": "YulBlock",
                        "src": "6:3:4",
                        "statements": []
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "108:209:4",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "154:16:4",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "163:1:4",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "166:1:4",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "156:6:4"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "156:12:4"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "156:12:4"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "129:7:4"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "138:9:4"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "125:3:4"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "125:23:4"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "150:2:4",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "121:3:4"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "121:32:4"
                              },
                              "nodeType": "YulIf",
                              "src": "118:52:4"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "179:29:4",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "198:9:4"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "192:5:4"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "192:16:4"
                              },
                              "variables": [
                                {
                                  "name": "value",
                                  "nodeType": "YulTypedName",
                                  "src": "183:5:4",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "271:16:4",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "280:1:4",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "283:1:4",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "273:6:4"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "273:12:4"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "273:12:4"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "230:5:4"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nodeType": "YulIdentifier",
                                            "src": "241:5:4"
                                          },
                                          {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "kind": "number",
                                                    "nodeType": "YulLiteral",
                                                    "src": "256:3:4",
                                                    "type": "",
                                                    "value": "160"
                                                  },
                                                  {
                                                    "kind": "number",
                                                    "nodeType": "YulLiteral",
                                                    "src": "261:1:4",
                                                    "type": "",
                                                    "value": "1"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "shl",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "252:3:4"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "252:11:4"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "265:1:4",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "sub",
                                              "nodeType": "YulIdentifier",
                                              "src": "248:3:4"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "248:19:4"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "and",
                                          "nodeType": "YulIdentifier",
                                          "src": "237:3:4"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "237:31:4"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "eq",
                                      "nodeType": "YulIdentifier",
                                      "src": "227:2:4"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "227:42:4"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "220:6:4"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "220:50:4"
                              },
                              "nodeType": "YulIf",
                              "src": "217:70:4"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "296:15:4",
                              "value": {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "306:5:4"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "296:6:4"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_contract$_ITier_$424_fromMemory",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "74:9:4",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "85:7:4",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "97:6:4",
                            "type": ""
                          }
                        ],
                        "src": "14:303:4"
                      }
                    ]
                  },
                  "contents": "{\n    { }\n    function abi_decode_tuple_t_contract$_ITier_$424_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n}",
                  "id": 4,
                  "language": "Yul",
                  "name": "#utility.yul"
                }
              ],
              "linkReferences": {},
              "object": "608060405234801561001057600080fd5b506040516104b13803806104b183398101604081905261002f91610058565b600080546001600160a01b0319166001600160a01b039290921691909117905543600155610088565b60006020828403121561006a57600080fd5b81516001600160a01b038116811461008157600080fd5b9392505050565b61041a806100976000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80637922deb51161008c578063cb457d4711610066578063cb457d47146100f8578063d1abd2de14610170578063d78aafde14610178578063e149ceb51461018057600080fd5b80637922deb5146101355780637bcd3dc51461013d578063a30872db1461014557600080fd5b80630f0af57f146100d45780631fb3d151146100f05780633f152251146100fa5780636bdfcec61461010257806375bf27871461010a57806377544f3314610112575b600080fd5b6100dd60015481565b6040519081526020015b60405180910390f35b6100f8610188565b005b6100f86101d8565b6100f86101e5565b6100f86101f2565b610125610120366004610320565b6101fb565b60405190151581526020016100e7565b6100f8610280565b6100f861028d565b600054610158906001600160a01b031681565b6040516001600160a01b0390911681526020016100e7565b6100f861029a565b6100f86102a7565b6100f86102b4565b33600861019582826101fb565b6101d45760405162461bcd60e51b815260206004820152600c60248201526b26a4a724a6aaa6afaa24a2a960a11b604482015260640160405180910390fd5b5050565b33600461019582826101fb565b33600661019582826101fb565b33600361019582825b6000805460405163e053ea3160e01b81526001600160a01b03858116600483015261027292169063e053ea3190602401602060405180830381865afa158015610248573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026c9190610369565b836102c1565b600154101590505b92915050565b33600761019582826101fb565b33600061019582826101fb565b33600161019582826101fb565b33600561019582826101fb565b33600261019582826101fb565b6000808260088111156102d6576102d6610382565b14156102e45750600061027a565b600060018360088111156102fa576102fa610382565b61030491906103ae565b61030f9060206103c5565b9390931c63ffffffff169392505050565b6000806040838503121561033357600080fd5b82356001600160a01b038116811461034a57600080fd5b915060208301356009811061035e57600080fd5b809150509250929050565b60006020828403121561037b57600080fd5b5051919050565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000828210156103c0576103c0610398565b500390565b60008160001904831182151516156103df576103df610398565b50029056fea2646970667358221220a439a4806783dbf41b6f29d9fa4a68cffdd9daf5cd7475ba418b201453b45bf064736f6c634300080a0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x4B1 CODESIZE SUB DUP1 PUSH2 0x4B1 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x58 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE NUMBER PUSH1 0x1 SSTORE PUSH2 0x88 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x6A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x81 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x41A DUP1 PUSH2 0x97 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7922DEB5 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xCB457D47 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xCB457D47 EQ PUSH2 0xF8 JUMPI DUP1 PUSH4 0xD1ABD2DE EQ PUSH2 0x170 JUMPI DUP1 PUSH4 0xD78AAFDE EQ PUSH2 0x178 JUMPI DUP1 PUSH4 0xE149CEB5 EQ PUSH2 0x180 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x7922DEB5 EQ PUSH2 0x135 JUMPI DUP1 PUSH4 0x7BCD3DC5 EQ PUSH2 0x13D JUMPI DUP1 PUSH4 0xA30872DB EQ PUSH2 0x145 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xF0AF57F EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x1FB3D151 EQ PUSH2 0xF0 JUMPI DUP1 PUSH4 0x3F152251 EQ PUSH2 0xFA JUMPI DUP1 PUSH4 0x6BDFCEC6 EQ PUSH2 0x102 JUMPI DUP1 PUSH4 0x75BF2787 EQ PUSH2 0x10A JUMPI DUP1 PUSH4 0x77544F33 EQ PUSH2 0x112 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDD PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xF8 PUSH2 0x188 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xF8 PUSH2 0x1D8 JUMP JUMPDEST PUSH2 0xF8 PUSH2 0x1E5 JUMP JUMPDEST PUSH2 0xF8 PUSH2 0x1F2 JUMP JUMPDEST PUSH2 0x125 PUSH2 0x120 CALLDATASIZE PUSH1 0x4 PUSH2 0x320 JUMP JUMPDEST PUSH2 0x1FB JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE7 JUMP JUMPDEST PUSH2 0xF8 PUSH2 0x280 JUMP JUMPDEST PUSH2 0xF8 PUSH2 0x28D JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x158 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE7 JUMP JUMPDEST PUSH2 0xF8 PUSH2 0x29A JUMP JUMPDEST PUSH2 0xF8 PUSH2 0x2A7 JUMP JUMPDEST PUSH2 0xF8 PUSH2 0x2B4 JUMP JUMPDEST CALLER PUSH1 0x8 PUSH2 0x195 DUP3 DUP3 PUSH2 0x1FB JUMP JUMPDEST PUSH2 0x1D4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH12 0x26A4A724A6AAA6AFAA24A2A9 PUSH1 0xA1 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST CALLER PUSH1 0x4 PUSH2 0x195 DUP3 DUP3 PUSH2 0x1FB JUMP JUMPDEST CALLER PUSH1 0x6 PUSH2 0x195 DUP3 DUP3 PUSH2 0x1FB JUMP JUMPDEST CALLER PUSH1 0x3 PUSH2 0x195 DUP3 DUP3 JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0xE053EA31 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH2 0x272 SWAP3 AND SWAP1 PUSH4 0xE053EA31 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x248 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x26C SWAP2 SWAP1 PUSH2 0x369 JUMP JUMPDEST DUP4 PUSH2 0x2C1 JUMP JUMPDEST PUSH1 0x1 SLOAD LT ISZERO SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST CALLER PUSH1 0x7 PUSH2 0x195 DUP3 DUP3 PUSH2 0x1FB JUMP JUMPDEST CALLER PUSH1 0x0 PUSH2 0x195 DUP3 DUP3 PUSH2 0x1FB JUMP JUMPDEST CALLER PUSH1 0x1 PUSH2 0x195 DUP3 DUP3 PUSH2 0x1FB JUMP JUMPDEST CALLER PUSH1 0x5 PUSH2 0x195 DUP3 DUP3 PUSH2 0x1FB JUMP JUMPDEST CALLER PUSH1 0x2 PUSH2 0x195 DUP3 DUP3 PUSH2 0x1FB JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x2D6 JUMPI PUSH2 0x2D6 PUSH2 0x382 JUMP JUMPDEST EQ ISZERO PUSH2 0x2E4 JUMPI POP PUSH1 0x0 PUSH2 0x27A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP4 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x2FA JUMPI PUSH2 0x2FA PUSH2 0x382 JUMP JUMPDEST PUSH2 0x304 SWAP2 SWAP1 PUSH2 0x3AE JUMP JUMPDEST PUSH2 0x30F SWAP1 PUSH1 0x20 PUSH2 0x3C5 JUMP JUMPDEST SWAP4 SWAP1 SWAP4 SHR PUSH4 0xFFFFFFFF AND SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x333 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x34A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH1 0x9 DUP2 LT PUSH2 0x35E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x37B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x3C0 JUMPI PUSH2 0x3C0 PUSH2 0x398 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x3DF JUMPI PUSH2 0x3DF PUSH2 0x398 JUMP JUMPDEST POP MUL SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG4 CODECOPY LOG4 DUP1 PUSH8 0x83DBF41B6F29D9FA 0x4A PUSH9 0xCFFDD9DAF5CD7475BA COINBASE DUP12 KECCAK256 EQ MSTORE8 0xB4 JUMPDEST CREATE PUSH5 0x736F6C6343 STOP ADDMOD EXP STOP CALLER ",
              "sourceMap": "307:2075:1:-:0;;;433:62;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1873:12:3;:28;;-1:-1:-1;;;;;;1873:28:3;-1:-1:-1;;;;;1873:28:3;;;;;;;;;;1931:12;-1:-1:-1;1911:32:3;307:2075:1;;14:303:4;97:6;150:2;138:9;129:7;125:23;121:32;118:52;;;166:1;163;156:12;118:52;192:16;;-1:-1:-1;;;;;237:31:4;;227:42;;217:70;;283:1;280;273:12;217:70;306:5;14:303;-1:-1:-1;;;14:303:4:o;:::-;307:2075:1;;;;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "@constructionBlock_436": {
                  "entryPoint": null,
                  "id": 436,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@ifEight_379": {
                  "entryPoint": 392,
                  "id": 379,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@ifFive_343": {
                  "entryPoint": 679,
                  "id": 343,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@ifFour_331": {
                  "entryPoint": 472,
                  "id": 331,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@ifOne_295": {
                  "entryPoint": 666,
                  "id": 295,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@ifSeven_367": {
                  "entryPoint": 640,
                  "id": 367,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@ifSix_355": {
                  "entryPoint": 485,
                  "id": 355,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@ifThree_319": {
                  "entryPoint": 498,
                  "id": 319,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@ifTwo_307": {
                  "entryPoint": 692,
                  "id": 307,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@ifZero_283": {
                  "entryPoint": 653,
                  "id": 283,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@isTier_475": {
                  "entryPoint": 507,
                  "id": 475,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "@tierBlock_107": {
                  "entryPoint": 705,
                  "id": 107,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "@tierContract_434": {
                  "entryPoint": null,
                  "id": 434,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@unlimited_271": {
                  "entryPoint": null,
                  "id": 271,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "abi_decode_tuple_t_addresst_enum$_Tier_$393": {
                  "entryPoint": 800,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "abi_decode_tuple_t_uint256_fromMemory": {
                  "entryPoint": 873,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_contract$_ITier_$424__to_t_address__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_0e7b139056d213f6cf6aafa2ba85187741039eeb8f0d68e3be041110713a1740__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "checked_mul_t_uint256": {
                  "entryPoint": 965,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "checked_sub_t_uint256": {
                  "entryPoint": 942,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "panic_error_0x11": {
                  "entryPoint": 920,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "panic_error_0x21": {
                  "entryPoint": 898,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [
                {
                  "ast": {
                    "nodeType": "YulBlock",
                    "src": "0:2360:4",
                    "statements": [
                      {
                        "nodeType": "YulBlock",
                        "src": "6:3:4",
                        "statements": []
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "115:76:4",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "125:26:4",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "137:9:4"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "148:2:4",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "133:3:4"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "133:18:4"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "125:4:4"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "167:9:4"
                                  },
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "178:6:4"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "160:6:4"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "160:25:4"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "160:25:4"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "84:9:4",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "95:6:4",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "106:4:4",
                            "type": ""
                          }
                        ],
                        "src": "14:177:4"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "291:349:4",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "337:16:4",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "346:1:4",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "349:1:4",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "339:6:4"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "339:12:4"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "339:12:4"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "312:7:4"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "321:9:4"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "308:3:4"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "308:23:4"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "333:2:4",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "304:3:4"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "304:32:4"
                              },
                              "nodeType": "YulIf",
                              "src": "301:52:4"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "362:36:4",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "388:9:4"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "375:12:4"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "375:23:4"
                              },
                              "variables": [
                                {
                                  "name": "value",
                                  "nodeType": "YulTypedName",
                                  "src": "366:5:4",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "461:16:4",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "470:1:4",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "473:1:4",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "463:6:4"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "463:12:4"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "463:12:4"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "420:5:4"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nodeType": "YulIdentifier",
                                            "src": "431:5:4"
                                          },
                                          {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "kind": "number",
                                                    "nodeType": "YulLiteral",
                                                    "src": "446:3:4",
                                                    "type": "",
                                                    "value": "160"
                                                  },
                                                  {
                                                    "kind": "number",
                                                    "nodeType": "YulLiteral",
                                                    "src": "451:1:4",
                                                    "type": "",
                                                    "value": "1"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "shl",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "442:3:4"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "442:11:4"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "455:1:4",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "sub",
                                              "nodeType": "YulIdentifier",
                                              "src": "438:3:4"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "438:19:4"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "and",
                                          "nodeType": "YulIdentifier",
                                          "src": "427:3:4"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "427:31:4"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "eq",
                                      "nodeType": "YulIdentifier",
                                      "src": "417:2:4"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "417:42:4"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "410:6:4"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "410:50:4"
                              },
                              "nodeType": "YulIf",
                              "src": "407:70:4"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "486:15:4",
                              "value": {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "496:5:4"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "486:6:4"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "510:47:4",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "542:9:4"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "553:2:4",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "538:3:4"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "538:18:4"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "525:12:4"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "525:32:4"
                              },
                              "variables": [
                                {
                                  "name": "value_1",
                                  "nodeType": "YulTypedName",
                                  "src": "514:7:4",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "592:16:4",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "601:1:4",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "604:1:4",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "594:6:4"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "594:12:4"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "594:12:4"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "579:7:4"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "588:1:4",
                                        "type": "",
                                        "value": "9"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "lt",
                                      "nodeType": "YulIdentifier",
                                      "src": "576:2:4"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "576:14:4"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "569:6:4"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "569:22:4"
                              },
                              "nodeType": "YulIf",
                              "src": "566:42:4"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "617:17:4",
                              "value": {
                                "name": "value_1",
                                "nodeType": "YulIdentifier",
                                "src": "627:7:4"
                              },
                              "variableNames": [
                                {
                                  "name": "value1",
                                  "nodeType": "YulIdentifier",
                                  "src": "617:6:4"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_addresst_enum$_Tier_$393",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "249:9:4",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "260:7:4",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "272:6:4",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulTypedName",
                            "src": "280:6:4",
                            "type": ""
                          }
                        ],
                        "src": "196:444:4"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "740:92:4",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "750:26:4",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "762:9:4"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "773:2:4",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "758:3:4"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "758:18:4"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "750:4:4"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "792:9:4"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value0",
                                            "nodeType": "YulIdentifier",
                                            "src": "817:6:4"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "iszero",
                                          "nodeType": "YulIdentifier",
                                          "src": "810:6:4"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "810:14:4"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "803:6:4"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "803:22:4"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "785:6:4"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "785:41:4"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "785:41:4"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "709:9:4",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "720:6:4",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "731:4:4",
                            "type": ""
                          }
                        ],
                        "src": "645:187:4"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "951:102:4",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "961:26:4",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "973:9:4"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "984:2:4",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "969:3:4"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "969:18:4"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "961:4:4"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1003:9:4"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "1018:6:4"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "1034:3:4",
                                                "type": "",
                                                "value": "160"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "1039:1:4",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "1030:3:4"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "1030:11:4"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1043:1:4",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nodeType": "YulIdentifier",
                                          "src": "1026:3:4"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1026:19:4"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "1014:3:4"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1014:32:4"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "996:6:4"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "996:51:4"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "996:51:4"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_contract$_ITier_$424__to_t_address__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "920:9:4",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "931:6:4",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "942:4:4",
                            "type": ""
                          }
                        ],
                        "src": "837:216:4"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "1232:162:4",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1249:9:4"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1260:2:4",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "1242:6:4"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1242:21:4"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1242:21:4"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "1283:9:4"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1294:2:4",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1279:3:4"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1279:18:4"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1299:2:4",
                                    "type": "",
                                    "value": "12"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "1272:6:4"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1272:30:4"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1272:30:4"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "1322:9:4"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1333:2:4",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1318:3:4"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1318:18:4"
                                  },
                                  {
                                    "hexValue": "4d494e494d554d5f54494552",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "1338:14:4",
                                    "type": "",
                                    "value": "MINIMUM_TIER"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "1311:6:4"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1311:42:4"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1311:42:4"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "1362:26:4",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1374:9:4"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1385:2:4",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1370:3:4"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1370:18:4"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "1362:4:4"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_0e7b139056d213f6cf6aafa2ba85187741039eeb8f0d68e3be041110713a1740__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "1209:9:4",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "1223:4:4",
                            "type": ""
                          }
                        ],
                        "src": "1058:336:4"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "1500:102:4",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "1510:26:4",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1522:9:4"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1533:2:4",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1518:3:4"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1518:18:4"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "1510:4:4"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1552:9:4"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "1567:6:4"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "1583:3:4",
                                                "type": "",
                                                "value": "160"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "1588:1:4",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "1579:3:4"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "1579:11:4"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1592:1:4",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nodeType": "YulIdentifier",
                                          "src": "1575:3:4"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1575:19:4"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "1563:3:4"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1563:32:4"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "1545:6:4"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1545:51:4"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1545:51:4"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "1469:9:4",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "1480:6:4",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "1491:4:4",
                            "type": ""
                          }
                        ],
                        "src": "1399:203:4"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "1688:103:4",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "1734:16:4",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1743:1:4",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1746:1:4",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "1736:6:4"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1736:12:4"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1736:12:4"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "1709:7:4"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "1718:9:4"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "1705:3:4"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1705:23:4"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1730:2:4",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1701:3:4"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1701:32:4"
                              },
                              "nodeType": "YulIf",
                              "src": "1698:52:4"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "1759:26:4",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1775:9:4"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "1769:5:4"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1769:16:4"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "1759:6:4"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_uint256_fromMemory",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "1654:9:4",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "1665:7:4",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "1677:6:4",
                            "type": ""
                          }
                        ],
                        "src": "1607:184:4"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "1828:95:4",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1845:1:4",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1852:3:4",
                                        "type": "",
                                        "value": "224"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1857:10:4",
                                        "type": "",
                                        "value": "0x4e487b71"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "1848:3:4"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1848:20:4"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "1838:6:4"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1838:31:4"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1838:31:4"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1885:1:4",
                                    "type": "",
                                    "value": "4"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1888:4:4",
                                    "type": "",
                                    "value": "0x21"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "1878:6:4"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1878:15:4"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1878:15:4"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1909:1:4",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1912:4:4",
                                    "type": "",
                                    "value": "0x24"
                                  }
                                ],
                                "functionName": {
                                  "name": "revert",
                                  "nodeType": "YulIdentifier",
                                  "src": "1902:6:4"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1902:15:4"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1902:15:4"
                            }
                          ]
                        },
                        "name": "panic_error_0x21",
                        "nodeType": "YulFunctionDefinition",
                        "src": "1796:127:4"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "1960:95:4",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1977:1:4",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1984:3:4",
                                        "type": "",
                                        "value": "224"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1989:10:4",
                                        "type": "",
                                        "value": "0x4e487b71"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "1980:3:4"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1980:20:4"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "1970:6:4"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1970:31:4"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1970:31:4"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2017:1:4",
                                    "type": "",
                                    "value": "4"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2020:4:4",
                                    "type": "",
                                    "value": "0x11"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "2010:6:4"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2010:15:4"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "2010:15:4"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2041:1:4",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2044:4:4",
                                    "type": "",
                                    "value": "0x24"
                                  }
                                ],
                                "functionName": {
                                  "name": "revert",
                                  "nodeType": "YulIdentifier",
                                  "src": "2034:6:4"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2034:15:4"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "2034:15:4"
                            }
                          ]
                        },
                        "name": "panic_error_0x11",
                        "nodeType": "YulFunctionDefinition",
                        "src": "1928:127:4"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "2109:76:4",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "2131:22:4",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x11",
                                        "nodeType": "YulIdentifier",
                                        "src": "2133:16:4"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2133:18:4"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "2133:18:4"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "2125:1:4"
                                  },
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "2128:1:4"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "2122:2:4"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2122:8:4"
                              },
                              "nodeType": "YulIf",
                              "src": "2119:34:4"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "2162:17:4",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "2174:1:4"
                                  },
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "2177:1:4"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "2170:3:4"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2170:9:4"
                              },
                              "variableNames": [
                                {
                                  "name": "diff",
                                  "nodeType": "YulIdentifier",
                                  "src": "2162:4:4"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "checked_sub_t_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "x",
                            "nodeType": "YulTypedName",
                            "src": "2091:1:4",
                            "type": ""
                          },
                          {
                            "name": "y",
                            "nodeType": "YulTypedName",
                            "src": "2094:1:4",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "diff",
                            "nodeType": "YulTypedName",
                            "src": "2100:4:4",
                            "type": ""
                          }
                        ],
                        "src": "2060:125:4"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "2242:116:4",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "2301:22:4",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x11",
                                        "nodeType": "YulIdentifier",
                                        "src": "2303:16:4"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2303:18:4"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "2303:18:4"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "x",
                                            "nodeType": "YulIdentifier",
                                            "src": "2273:1:4"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "iszero",
                                          "nodeType": "YulIdentifier",
                                          "src": "2266:6:4"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2266:9:4"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "2259:6:4"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2259:17:4"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "y",
                                        "nodeType": "YulIdentifier",
                                        "src": "2281:1:4"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "2292:1:4",
                                                "type": "",
                                                "value": "0"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "not",
                                              "nodeType": "YulIdentifier",
                                              "src": "2288:3:4"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "2288:6:4"
                                          },
                                          {
                                            "name": "x",
                                            "nodeType": "YulIdentifier",
                                            "src": "2296:1:4"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "div",
                                          "nodeType": "YulIdentifier",
                                          "src": "2284:3:4"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2284:14:4"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "gt",
                                      "nodeType": "YulIdentifier",
                                      "src": "2278:2:4"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2278:21:4"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "2255:3:4"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2255:45:4"
                              },
                              "nodeType": "YulIf",
                              "src": "2252:71:4"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "2332:20:4",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "2347:1:4"
                                  },
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "2350:1:4"
                                  }
                                ],
                                "functionName": {
                                  "name": "mul",
                                  "nodeType": "YulIdentifier",
                                  "src": "2343:3:4"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2343:9:4"
                              },
                              "variableNames": [
                                {
                                  "name": "product",
                                  "nodeType": "YulIdentifier",
                                  "src": "2332:7:4"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "checked_mul_t_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "x",
                            "nodeType": "YulTypedName",
                            "src": "2221:1:4",
                            "type": ""
                          },
                          {
                            "name": "y",
                            "nodeType": "YulTypedName",
                            "src": "2224:1:4",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "product",
                            "nodeType": "YulTypedName",
                            "src": "2230:7:4",
                            "type": ""
                          }
                        ],
                        "src": "2190:168:4"
                      }
                    ]
                  },
                  "contents": "{\n    { }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_enum$_Tier_$393(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        if iszero(lt(value_1, 9)) { revert(0, 0) }\n        value1 := value_1\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_contract$_ITier_$424__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_stringliteral_0e7b139056d213f6cf6aafa2ba85187741039eeb8f0d68e3be041110713a1740__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 12)\n        mstore(add(headStart, 64), \"MINIMUM_TIER\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function panic_error_0x21()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n}",
                  "id": 4,
                  "language": "Yul",
                  "name": "#utility.yul"
                }
              ],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "608060405234801561001057600080fd5b50600436106100cf5760003560e01c80637922deb51161008c578063cb457d4711610066578063cb457d47146100f8578063d1abd2de14610170578063d78aafde14610178578063e149ceb51461018057600080fd5b80637922deb5146101355780637bcd3dc51461013d578063a30872db1461014557600080fd5b80630f0af57f146100d45780631fb3d151146100f05780633f152251146100fa5780636bdfcec61461010257806375bf27871461010a57806377544f3314610112575b600080fd5b6100dd60015481565b6040519081526020015b60405180910390f35b6100f8610188565b005b6100f86101d8565b6100f86101e5565b6100f86101f2565b610125610120366004610320565b6101fb565b60405190151581526020016100e7565b6100f8610280565b6100f861028d565b600054610158906001600160a01b031681565b6040516001600160a01b0390911681526020016100e7565b6100f861029a565b6100f86102a7565b6100f86102b4565b33600861019582826101fb565b6101d45760405162461bcd60e51b815260206004820152600c60248201526b26a4a724a6aaa6afaa24a2a960a11b604482015260640160405180910390fd5b5050565b33600461019582826101fb565b33600661019582826101fb565b33600361019582825b6000805460405163e053ea3160e01b81526001600160a01b03858116600483015261027292169063e053ea3190602401602060405180830381865afa158015610248573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026c9190610369565b836102c1565b600154101590505b92915050565b33600761019582826101fb565b33600061019582826101fb565b33600161019582826101fb565b33600561019582826101fb565b33600261019582826101fb565b6000808260088111156102d6576102d6610382565b14156102e45750600061027a565b600060018360088111156102fa576102fa610382565b61030491906103ae565b61030f9060206103c5565b9390931c63ffffffff169392505050565b6000806040838503121561033357600080fd5b82356001600160a01b038116811461034a57600080fd5b915060208301356009811061035e57600080fd5b809150509250929050565b60006020828403121561037b57600080fd5b5051919050565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000828210156103c0576103c0610398565b500390565b60008160001904831182151516156103df576103df610398565b50029056fea2646970667358221220a439a4806783dbf41b6f29d9fa4a68cffdd9daf5cd7475ba418b201453b45bf064736f6c634300080a0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7922DEB5 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xCB457D47 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xCB457D47 EQ PUSH2 0xF8 JUMPI DUP1 PUSH4 0xD1ABD2DE EQ PUSH2 0x170 JUMPI DUP1 PUSH4 0xD78AAFDE EQ PUSH2 0x178 JUMPI DUP1 PUSH4 0xE149CEB5 EQ PUSH2 0x180 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x7922DEB5 EQ PUSH2 0x135 JUMPI DUP1 PUSH4 0x7BCD3DC5 EQ PUSH2 0x13D JUMPI DUP1 PUSH4 0xA30872DB EQ PUSH2 0x145 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xF0AF57F EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x1FB3D151 EQ PUSH2 0xF0 JUMPI DUP1 PUSH4 0x3F152251 EQ PUSH2 0xFA JUMPI DUP1 PUSH4 0x6BDFCEC6 EQ PUSH2 0x102 JUMPI DUP1 PUSH4 0x75BF2787 EQ PUSH2 0x10A JUMPI DUP1 PUSH4 0x77544F33 EQ PUSH2 0x112 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDD PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xF8 PUSH2 0x188 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xF8 PUSH2 0x1D8 JUMP JUMPDEST PUSH2 0xF8 PUSH2 0x1E5 JUMP JUMPDEST PUSH2 0xF8 PUSH2 0x1F2 JUMP JUMPDEST PUSH2 0x125 PUSH2 0x120 CALLDATASIZE PUSH1 0x4 PUSH2 0x320 JUMP JUMPDEST PUSH2 0x1FB JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE7 JUMP JUMPDEST PUSH2 0xF8 PUSH2 0x280 JUMP JUMPDEST PUSH2 0xF8 PUSH2 0x28D JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x158 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE7 JUMP JUMPDEST PUSH2 0xF8 PUSH2 0x29A JUMP JUMPDEST PUSH2 0xF8 PUSH2 0x2A7 JUMP JUMPDEST PUSH2 0xF8 PUSH2 0x2B4 JUMP JUMPDEST CALLER PUSH1 0x8 PUSH2 0x195 DUP3 DUP3 PUSH2 0x1FB JUMP JUMPDEST PUSH2 0x1D4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH12 0x26A4A724A6AAA6AFAA24A2A9 PUSH1 0xA1 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST CALLER PUSH1 0x4 PUSH2 0x195 DUP3 DUP3 PUSH2 0x1FB JUMP JUMPDEST CALLER PUSH1 0x6 PUSH2 0x195 DUP3 DUP3 PUSH2 0x1FB JUMP JUMPDEST CALLER PUSH1 0x3 PUSH2 0x195 DUP3 DUP3 JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0xE053EA31 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH2 0x272 SWAP3 AND SWAP1 PUSH4 0xE053EA31 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x248 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x26C SWAP2 SWAP1 PUSH2 0x369 JUMP JUMPDEST DUP4 PUSH2 0x2C1 JUMP JUMPDEST PUSH1 0x1 SLOAD LT ISZERO SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST CALLER PUSH1 0x7 PUSH2 0x195 DUP3 DUP3 PUSH2 0x1FB JUMP JUMPDEST CALLER PUSH1 0x0 PUSH2 0x195 DUP3 DUP3 PUSH2 0x1FB JUMP JUMPDEST CALLER PUSH1 0x1 PUSH2 0x195 DUP3 DUP3 PUSH2 0x1FB JUMP JUMPDEST CALLER PUSH1 0x5 PUSH2 0x195 DUP3 DUP3 PUSH2 0x1FB JUMP JUMPDEST CALLER PUSH1 0x2 PUSH2 0x195 DUP3 DUP3 PUSH2 0x1FB JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x2D6 JUMPI PUSH2 0x2D6 PUSH2 0x382 JUMP JUMPDEST EQ ISZERO PUSH2 0x2E4 JUMPI POP PUSH1 0x0 PUSH2 0x27A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP4 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x2FA JUMPI PUSH2 0x2FA PUSH2 0x382 JUMP JUMPDEST PUSH2 0x304 SWAP2 SWAP1 PUSH2 0x3AE JUMP JUMPDEST PUSH2 0x30F SWAP1 PUSH1 0x20 PUSH2 0x3C5 JUMP JUMPDEST SWAP4 SWAP1 SWAP4 SHR PUSH4 0xFFFFFFFF AND SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x333 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x34A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH1 0x9 DUP2 LT PUSH2 0x35E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x37B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x3C0 JUMPI PUSH2 0x3C0 PUSH2 0x398 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x3DF JUMPI PUSH2 0x3DF PUSH2 0x398 JUMP JUMPDEST POP MUL SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG4 CODECOPY LOG4 DUP1 PUSH8 0x83DBF41B6F29D9FA 0x4A PUSH9 0xCFFDD9DAF5CD7475BA COINBASE DUP12 KECCAK256 EQ MSTORE8 0xB4 JUMPDEST CREATE PUSH5 0x736F6C6343 STOP ADDMOD EXP STOP CALLER ",
              "sourceMap": "307:2075:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1791:32:3;;;;;;;;;160:25:4;;;148:2;133:18;1791:32:3;;;;;;;;2237:103:1;;;:::i;:::-;;1496:101;;;:::i;1865:99::-;;;:::i;1309:103::-;;;:::i;2563:256:3:-;;;;;;:::i;:::-;;:::i;:::-;;;810:14:4;;803:22;785:41;;773:2;758:18;2563:256:3;645:187:4;2049:103:1;;;:::i;759:101::-;;;:::i;1760:25:3:-;;;;;-1:-1:-1;;;;;1760:25:3;;;;;;-1:-1:-1;;;;;1014:32:4;;;996:51;;984:2;969:18;1760:25:3;837:216:4;943:99:1;;;:::i;1681:101::-;;;:::i;1125:99::-;;;:::i;2237:103::-;2303:10;2315:16;3782:30:3;3789:8;3799:12;3782:6;:30::i;:::-;3761:89;;;;-1:-1:-1;;;3761:89:3;;1260:2:4;3761:89:3;;;1242:21:4;1299:2;1279:18;;;1272:30;-1:-1:-1;;;1318:18:4;;;1311:42;1370:18;;3761:89:3;;;;;;;;2237:103:1;;:::o;1496:101::-;1561:10;1573:15;3782:30:3;3789:8;3799:12;3782:6;:30::i;1865:99:1:-;1929:10;1941:14;3782:30:3;3789:8;3799:12;3782:6;:30::i;1309:103:1:-;1375:10;1387:16;3782:30:3;3789:8;3799:12;2563:256;2667:4;2747:12;;:29;;-1:-1:-1;;;2747:29:3;;-1:-1:-1;;;;;1014:32:4;;;2747:29:3;;;996:51:4;2715:97:3;;2747:12;;:19;;969:18:4;;2747:29:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2790:12;2715:18;:97::i;:::-;2694:17;;:118;;2687:125;;2563:256;;;;;:::o;2049:103:1:-;2115:10;2127:16;3782:30:3;3789:8;3799:12;3782:6;:30::i;759:101:1:-;824:10;836:15;3782:30:3;3789:8;3799:12;3782:6;:30::i;943:99:1:-;1007:10;1019:14;3782:30:3;3789:8;3799:12;3782:6;:30::i;1681:101:1:-;1746:10;1758:15;3782:30:3;3789:8;3799:12;3782:6;:30::i;1125:99:1:-;1189:10;1201:14;3782:30:3;3789:8;3799:12;3782:6;:30::i;2599:441:0:-;2700:7;;2828:5;:24;;;;;;;;:::i;:::-;;2824:43;;;-1:-1:-1;2863:1:0;2856:8;;2824:43;2877:15;2913:1;2904:5;2896:14;;;;;;;;:::i;:::-;:18;;;;:::i;:::-;2895:25;;2918:2;2895:25;:::i;:::-;2990:18;;;;2937:96;;;2599:441;-1:-1:-1;;;2599:441:0:o;196:444:4:-;272:6;280;333:2;321:9;312:7;308:23;304:32;301:52;;;349:1;346;339:12;301:52;375:23;;-1:-1:-1;;;;;427:31:4;;417:42;;407:70;;473:1;470;463:12;407:70;496:5;-1:-1:-1;553:2:4;538:18;;525:32;588:1;576:14;;566:42;;604:1;601;594:12;566:42;627:7;617:17;;;196:444;;;;;:::o;1607:184::-;1677:6;1730:2;1718:9;1709:7;1705:23;1701:32;1698:52;;;1746:1;1743;1736:12;1698:52;-1:-1:-1;1769:16:4;;1607:184;-1:-1:-1;1607:184:4:o;1796:127::-;1857:10;1852:3;1848:20;1845:1;1838:31;1888:4;1885:1;1878:15;1912:4;1909:1;1902:15;1928:127;1989:10;1984:3;1980:20;1977:1;1970:31;2020:4;2017:1;2010:15;2044:4;2041:1;2034:15;2060:125;2100:4;2128:1;2125;2122:8;2119:34;;;2133:18;;:::i;:::-;-1:-1:-1;2170:9:4;;2060:125::o;2190:168::-;2230:7;2296:1;2292;2288:6;2284:14;2281:1;2278:21;2273:1;2266:9;2259:17;2255:45;2252:71;;;2303:18;;:::i;:::-;-1:-1:-1;2343:9:4;;2190:168::o"
            },
            "methodIdentifiers": {
              "constructionBlock()": "0f0af57f",
              "ifEight()": "1fb3d151",
              "ifFive()": "d78aafde",
              "ifFour()": "3f152251",
              "ifOne()": "d1abd2de",
              "ifSeven()": "7922deb5",
              "ifSix()": "6bdfcec6",
              "ifThree()": "75bf2787",
              "ifTwo()": "e149ceb5",
              "ifZero()": "7bcd3dc5",
              "isTier(address,uint8)": "77544f33",
              "tierContract()": "a30872db",
              "unlimited()": "cb457d47"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ITier\",\"name\":\"tier_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"constructionBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ifEight\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ifFive\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ifFour\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ifOne\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ifSeven\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ifSix\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ifThree\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ifTwo\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ifZero\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"},{\"internalType\":\"enum ITier.Tier\",\"name\":\"minimumTier_\",\"type\":\"uint8\"}],\"name\":\"isTier\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tierContract\",\"outputs\":[{\"internalType\":\"contract ITier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlimited\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"tier_\":\"The tier contract for `TierByConstruction`.\"}},\"isTier(address,uint8)\":{\"params\":{\"account_\":\"Account to check status of.\",\"minimumTier_\":\"Minimum tier for the account.\"},\"returns\":{\"_0\":\"True if the status is currently held.\"}}},\"title\":\"TierByConstructionTest An empty contract that facilitates tests enumerating behaviour of the modifiers at each tier.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"ifEight()\":{\"notice\":\"Requires `Tier.EIGHT` to call.\"},\"ifFive()\":{\"notice\":\"Requires `Tier.FIVE` to call.\"},\"ifFour()\":{\"notice\":\"Requires `Tier.FOUR` to call.\"},\"ifOne()\":{\"notice\":\"Requires `Tier.ONE` to call.\"},\"ifSeven()\":{\"notice\":\"Requires `Tier.SEVEN` to call.\"},\"ifSix()\":{\"notice\":\"Requires `Tier.SIX` to call.\"},\"ifThree()\":{\"notice\":\"Requires `Tier.THREE` to call.\"},\"ifTwo()\":{\"notice\":\"Requires `Tier.TWO` to call.\"},\"ifZero()\":{\"notice\":\"Requires `Tier.ZERO` to call.\"},\"isTier(address,uint8)\":{\"notice\":\"Check if an account has held AT LEAST the given tier according to `tierContract` since construction. The account MUST have held the tier continuously from construction until the \\\"current\\\" state according to `report`. Note that `report` PROBABLY is current as at the block this function is called but MAYBE NOT. The `ITier` contract is free to manage reports however makes sense.\"},\"unlimited()\":{\"notice\":\"External function with no modifier to use as a control for testing.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/TierByConstructionTest.sol\":\"TierByConstructionTest\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/libraries/TierUtil.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\n\\npragma solidity 0.8.10;\\n\\nimport { ITier } from \\\"../tier/ITier.sol\\\";\\n\\n/// @title TierUtil\\n/// @notice `TierUtil` implements several pure functions that can be\\n/// used to interface with reports.\\n/// - `tierAtBlockFromReport`: Returns the highest status achieved relative to\\n/// a block number and report. Statuses gained after that block are ignored.\\n/// - `tierBlock`: Returns the block that a given tier has been held\\n/// since according to a report.\\n/// - `truncateTiersAbove`: Resets all the tiers above the reference tier.\\n/// - `updateBlocksForTierRange`: Updates a report with a block\\n/// number for every tier in a range.\\n/// - `updateReportWithTierAtBlock`: Updates a report to a new tier.\\n/// @dev Utilities to consistently read, write and manipulate tiers in reports.\\n/// The low-level bit shifting can be difficult to get right so this factors\\n/// that out.\\nlibrary TierUtil {\\n\\n    /// UNINITIALIZED is 0xFF.. as it is infinitely in the future.\\n    uint256 public constant UNINITIALIZED\\n        = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n    /// Returns the highest tier achieved relative to a block number\\n    /// and report.\\n    ///\\n    /// Note that typically the report will be from the _current_ contract\\n    /// state, i.e. `block.number` but not always. Tiers gained after the\\n    /// reference block are ignored.\\n    ///\\n    /// When the `report` comes from a later block than the `blockNumber` this\\n    /// means the user must have held the tier continuously from `blockNumber`\\n    /// _through_ to the report block.\\n    /// I.e. NOT a snapshot.\\n    ///\\n    /// @param report_ A report as per `ITier`.\\n    /// @param blockNumber_ The block number to check the tiers against.\\n    /// @return The highest tier held since `blockNumber` as per `report`.\\n    function tierAtBlockFromReport(\\n        uint256 report_,\\n        uint256 blockNumber_\\n    )\\n        internal pure returns (ITier.Tier)\\n    {\\n        for (uint256 i_ = 0; i_ < 8; i_++) {\\n            if (uint32(uint256(report_ >> (i_*32))) > uint32(blockNumber_)) {\\n                return ITier.Tier(i_);\\n            }\\n        }\\n        return ITier.Tier(8);\\n    }\\n\\n    /// Returns the block that a given tier has been held since from a report.\\n    ///\\n    /// The report MUST encode \\\"never\\\" as 0xFFFFFFFF. This ensures\\n    /// compatibility with `tierAtBlockFromReport`.\\n    ///\\n    /// @param report_ The report to read a block number from.\\n    /// @param tier_ The Tier to read the block number for.\\n    /// @return The block number this has been held since.\\n    function tierBlock(uint256 report_, ITier.Tier tier_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // ZERO is a special case. Everyone has always been at least ZERO,\\n        // since block 0.\\n        if (tier_ == ITier.Tier.ZERO) { return 0; }\\n\\n        uint256 offset_ = (uint256(tier_) - 1) * 32;\\n        return uint256(uint32(\\n            uint256(\\n                report_ >> offset_\\n            )\\n        ));\\n    }\\n\\n    /// Resets all the tiers above the reference tier to 0xFFFFFFFF.\\n    ///\\n    /// @param report_ Report to truncate with high bit 1s.\\n    /// @param tier_ Tier to truncate above (exclusive).\\n    /// @return Truncated report.\\n    function truncateTiersAbove(uint256 report_, ITier.Tier tier_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 offset_ = uint256(tier_) * 32;\\n        uint256 mask_ = (UNINITIALIZED >> offset_) << offset_;\\n        return report_ | mask_;\\n    }\\n\\n    /// Updates a report with a block number for every status integer in a\\n    /// range.\\n    ///\\n    /// Does nothing if the end status is equal or less than the start status.\\n    /// @param report_ The report to update.\\n    /// @param startTier_ The `Tier` at the start of the range (exclusive).\\n    /// @param endTier_ The `Tier` at the end of the range (inclusive).\\n    /// @param blockNumber_ The block number to set for every status\\n    /// in the range.\\n    /// @return The updated report.\\n    function updateBlocksForTierRange(\\n        uint256 report_,\\n        ITier.Tier startTier_,\\n        ITier.Tier endTier_,\\n        uint256 blockNumber_\\n    )\\n        internal pure returns (uint256)\\n    {\\n        uint256 offset_;\\n        for (uint256 i_ = uint256(startTier_); i_ < uint256(endTier_); i_++) {\\n            offset_ = i_ * 32;\\n            report_ =\\n                (report_ & ~uint256(uint256(uint32(UNINITIALIZED)) << offset_))\\n                | uint256(blockNumber_ << offset_);\\n        }\\n        return report_;\\n    }\\n\\n    /// Updates a report to a new status.\\n    ///\\n    /// Internally dispatches to `truncateTiersAbove` and\\n    /// `updateBlocksForTierRange`.\\n    /// The dispatch is based on whether the new tier is above or below the\\n    /// current tier.\\n    /// The `startTier_` MUST match the result of `tierAtBlockFromReport`.\\n    /// It is expected the caller will know the current tier when\\n    /// calling this function and need to do other things in the calling scope\\n    /// with it.\\n    ///\\n    /// @param report_ The report to update.\\n    /// @param startTier_ The tier to start updating relative to. Data above\\n    /// this tier WILL BE LOST so probably should be the current tier.\\n    /// @param endTier_ The new highest tier held, at the given block number.\\n    /// @param blockNumber_ The block number to update the highest tier to, and\\n    /// intermediate tiers from `startTier_`.\\n    /// @return The updated report.\\n    function updateReportWithTierAtBlock(\\n        uint256 report_,\\n        ITier.Tier startTier_,\\n        ITier.Tier endTier_,\\n        uint256 blockNumber_\\n    )\\n        internal pure returns (uint256)\\n    {\\n        return endTier_ < startTier_\\n            ? truncateTiersAbove(report_, endTier_)\\n            : updateBlocksForTierRange(\\n                report_,\\n                startTier_,\\n                endTier_,\\n                blockNumber_\\n            );\\n    }\\n\\n}\",\"keccak256\":\"0xc4bde1f366857f2fda9fc9f7d36676f39d9a263f85bfd3b5f51e8d02d769dd5a\",\"license\":\"CAL\"},\"contracts/test/TierByConstructionTest.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\n\\npragma solidity 0.8.10;\\n\\nimport { ITier } from \\\"../tier/ITier.sol\\\";\\nimport { TierByConstruction } from \\\"../tier/TierByConstruction.sol\\\";\\n\\n/// @title TierByConstructionTest\\n/// An empty contract that facilitates tests enumerating behaviour of the\\n/// modifiers at each tier.\\ncontract TierByConstructionTest is TierByConstruction {\\n\\n    /// @param tier_ The tier contract for `TierByConstruction`.\\n    constructor(ITier tier_)\\n        TierByConstruction(tier_) { } // solhint-disable-line no-empty-blocks\\n\\n    /// External function with no modifier to use as a control for testing.\\n    function unlimited()\\n        external\\n        view\\n    { } // solhint-disable-line no-empty-blocks\\n\\n    /// Requires `Tier.ZERO` to call.\\n    function ifZero()\\n        external\\n        view\\n        onlyTier(msg.sender, ITier.Tier.ZERO)\\n    { } // solhint-disable-line no-empty-blocks\\n\\n    /// Requires `Tier.ONE` to call.\\n    function ifOne()\\n        external\\n        view\\n        onlyTier(msg.sender, ITier.Tier.ONE)\\n    { } // solhint-disable-line no-empty-blocks\\n\\n    /// Requires `Tier.TWO` to call.\\n    function ifTwo()\\n        external\\n        view\\n        onlyTier(msg.sender, ITier.Tier.TWO)\\n    { } // solhint-disable-line no-empty-blocks\\n\\n    /// Requires `Tier.THREE` to call.\\n    function ifThree()\\n        external\\n        view\\n        onlyTier(msg.sender, ITier.Tier.THREE)\\n    { } // solhint-disable-line no-empty-blocks\\n\\n    /// Requires `Tier.FOUR` to call.\\n    function ifFour()\\n        external\\n        view\\n        onlyTier(msg.sender, ITier.Tier.FOUR)\\n    { } // solhint-disable-line no-empty-blocks\\n\\n    /// Requires `Tier.FIVE` to call.\\n    function ifFive()\\n        external\\n        view\\n        onlyTier(msg.sender, ITier.Tier.FIVE)\\n    { } // solhint-disable-line no-empty-blocks\\n\\n    /// Requires `Tier.SIX` to call.\\n    function ifSix()\\n        external\\n        view\\n        onlyTier(msg.sender, ITier.Tier.SIX)\\n    { } // solhint-disable-line no-empty-blocks\\n\\n    /// Requires `Tier.SEVEN` to call.\\n    function ifSeven()\\n        external\\n        view\\n        onlyTier(msg.sender, ITier.Tier.SEVEN)\\n    { } // solhint-disable-line no-empty-blocks\\n\\n    /// Requires `Tier.EIGHT` to call.\\n    function ifEight()\\n        external\\n        view\\n        onlyTier(msg.sender, ITier.Tier.EIGHT)\\n    { } // solhint-disable-line no-empty-blocks\\n}\",\"keccak256\":\"0x449f4b44d46c2da1f6b9bbbdabfe6ae39686d2e019b8960b813fd9e4ffe49550\",\"license\":\"CAL\"},\"contracts/tier/ITier.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\n\\npragma solidity 0.8.10;\\n\\n/// @title ITier\\n/// @notice `ITier` is a simple interface that contracts can\\n/// implement to provide membership lists for other contracts.\\n///\\n/// There are many use-cases for a time-preserving,\\n/// conditional membership list.\\n///\\n/// Some examples include:\\n///\\n/// - Self-serve whitelist to participate in fundraising\\n/// - Lists of users who can claim airdrops and perks\\n/// - Pooling resources with implied governance/reward tiers\\n/// - POAP style attendance proofs allowing access to future exclusive events\\n///\\n/// @dev Standard interface to a tiered membership.\\n///\\n/// A \\\"membership\\\" can represent many things:\\n/// - Exclusive access.\\n/// - Participation in some event or process.\\n/// - KYC completion.\\n/// - Combination of sub-memberships.\\n/// - Etc.\\n///\\n/// The high level requirements for a contract implementing `ITier`:\\n/// - MUST represent held tiers with the `Tier` enum.\\n/// - MUST implement `report`.\\n///   - The report is a `uint256` that SHOULD represent the block each tier has\\n///     been continuously held since encoded as `uint32`.\\n///   - The encoded tiers start at ONE; ZERO is implied if no tier has ever\\n///     been held.\\n///   - `Tier.ZERO` is NOT encoded in the report, it is simply the fallback\\n///     value.\\n///   - If a tier is lost the block data is erased for that tier and will be\\n///     set if/when the tier is regained to the new block.\\n///   - If the historical block information is not available the report MAY\\n///     return `0x00000000` for all held tiers.\\n///   - Tiers that are lost or have never been held MUST return `0xFFFFFFFF`.\\n/// - SHOULD implement `setTier`.\\n///   - Contracts SHOULD revert with `SET_TIER` error if they cannot\\n///     meaningfully set a tier directly.\\n///     For example a contract that can only derive a membership tier by\\n///     reading the state of an external contract cannot set tiers.\\n///   - Contracts implementing `setTier` SHOULD error with `SET_ZERO_TIER`\\n///     if `Tier.ZERO` is being set.\\n/// - MUST emit `TierChange` when `setTier` successfully writes a new tier.\\n///   - Contracts that cannot meaningfully set a tier are exempt.\\ninterface ITier {\\n\\n    /// 9 Possible tiers.\\n    /// Fits nicely as uint32 in uint256 which is helpful for internal storage\\n    /// concerns.\\n    /// 8 tiers can be achieved, ZERO is the tier when no tier has been\\n    /// achieved.\\n    enum Tier {\\n        ZERO,\\n        ONE,\\n        TWO,\\n        THREE,\\n        FOUR,\\n        FIVE,\\n        SIX,\\n        SEVEN,\\n        EIGHT\\n    }\\n\\n    /// Every time a Tier changes we log start and end Tier against the\\n    /// account.\\n    /// This MAY NOT be emitted if reports are being read from the state of an\\n    /// external contract.\\n    event TierChange(\\n        address indexed account,\\n        Tier indexed startTier,\\n        Tier indexed endTier\\n    );\\n\\n    /// @notice Users can set their own tier by calling `setTier`.\\n    ///\\n    /// The contract that implements `ITier` is responsible for checking\\n    /// eligibility and/or taking actions required to set the tier.\\n    ///\\n    /// For example, the contract must take/refund any tokens relevant to\\n    /// changing the tier.\\n    ///\\n    /// Obviously the user is responsible for any approvals for this action\\n    /// prior to calling `setTier`.\\n    ///\\n    /// When the tier is changed a `TierChange` event will be emmited as:\\n    /// ```\\n    /// event TierChange(address account, Tier startTier, Tier endTier);\\n    /// ```\\n    ///\\n    /// The `setTier` function includes arbitrary data as the third\\n    /// parameter. This can be used to disambiguate in the case that\\n    /// there may be many possible options for a user to achieve some tier.\\n    ///\\n    /// For example, consider the case where `Tier.THREE` can be achieved\\n    /// by EITHER locking 1x rare NFT or 3x uncommon NFTs. A user with both\\n    /// could use `data` to explicitly state their intent.\\n    ///\\n    /// NOTE however that _any_ address can call `setTier` for any other\\n    /// address.\\n    ///\\n    /// If you implement `data` or anything that changes state then be very\\n    /// careful to avoid griefing attacks.\\n    ///\\n    /// The `data` parameter can also be ignored by the contract implementing\\n    /// `ITier`. For example, ERC20 tokens are fungible so only the balance\\n    /// approved by the user is relevant to a tier change.\\n    ///\\n    /// The `setTier` function SHOULD prevent users from reassigning\\n    /// `Tier.ZERO` to themselves.\\n    ///\\n    /// The `Tier.ZERO` status represents never having any status.\\n    /// @dev Updates the tier of an account.\\n    ///\\n    /// The implementing contract is responsible for all checks and state\\n    /// changes required to set the tier. For example, taking/refunding\\n    /// funds/NFTs etc.\\n    ///\\n    /// Contracts may disallow directly setting tiers, preferring to derive\\n    /// reports from other onchain data.\\n    /// In this case they should `revert(\\\"SET_TIER\\\");`.\\n    ///\\n    /// @param account Account to change the tier for.\\n    /// @param endTier Tier after the change.\\n    /// @param data Arbitrary input to disambiguate ownership\\n    /// (e.g. NFTs to lock).\\n    function setTier(\\n        address account,\\n        Tier endTier,\\n        bytes memory data\\n    )\\n        external;\\n\\n    /// @notice A tier report is a `uint256` that contains each of the block\\n    /// numbers each tier has been held continously since as a `uint32`.\\n    /// There are 9 possible tier, starting with `Tier.ZERO` for `0` offset or\\n    /// \\\"never held any tier\\\" then working up through 8x 4 byte offsets to the\\n    /// full 256 bits.\\n    ///\\n    /// Low bits = Lower tier.\\n    ///\\n    /// In hexadecimal every 8 characters = one tier, starting at `Tier.EIGHT`\\n    /// from high bits and working down to `Tier.ONE`.\\n    ///\\n    /// `uint32` should be plenty for any blockchain that measures block times\\n    /// in seconds, but reconsider if deploying to an environment with\\n    /// significantly sub-second block times.\\n    ///\\n    /// ~135 years of 1 second blocks fit into `uint32`.\\n    ///\\n    /// `2^8 / (365 * 24 * 60 * 60)`\\n    ///\\n    /// When a user INCREASES their tier they keep all the block numbers they\\n    /// already had, and get new block times for each increased tiers they have\\n    /// earned.\\n    ///\\n    /// When a user DECREASES their tier they return to `0xFFFFFFFF` (never)\\n    /// for every tier level they remove, but keep their block numbers for the\\n    /// remaining tiers.\\n    ///\\n    /// GUIs are encouraged to make this dynamic very clear for users as\\n    /// round-tripping to a lower status and back is a DESTRUCTIVE operation\\n    /// for block times.\\n    ///\\n    /// The intent is that downstream code can provide additional benefits for\\n    /// members who have maintained a certain tier for/since a long time.\\n    /// These benefits can be provided by inspecting the report, and by\\n    /// on-chain contracts directly,\\n    /// rather than needing to work with snapshots etc.\\n    /// @dev Returns the earliest block the account has held each tier for\\n    /// continuously.\\n    /// This is encoded as a uint256 with blocks represented as 8x\\n    /// concatenated uint32.\\n    /// I.e. Each 4 bytes of the uint256 represents a u32 tier start time.\\n    /// The low bits represent low tiers and high bits the high tiers.\\n    /// Implementing contracts should return 0xFFFFFFFF for lost &\\n    /// never-held tiers.\\n    ///\\n    /// @param account Account to get the report for.\\n    /// @return The report blocks encoded as a uint256.\\n    function report(address account) external view returns (uint256);\\n}\",\"keccak256\":\"0x9df1a0a477801f332f9b95fb6d400d2edb4fce18c089c0df0a5affc02ebd4121\",\"license\":\"CAL\"},\"contracts/tier/TierByConstruction.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\n\\npragma solidity 0.8.10;\\n\\nimport { TierUtil } from \\\"../libraries/TierUtil.sol\\\";\\nimport { ITier } from \\\"./ITier.sol\\\";\\n\\n/// @title TierByConstruction\\n/// @notice `TierByConstruction` is a base contract for other\\n/// contracts to inherit from.\\n///\\n/// It exposes `isTier` and the corresponding modifier `onlyTier`.\\n///\\n/// This ensures that the address has held at least the given tier\\n/// since the contract was constructed.\\n///\\n/// We check against the construction time of the contract rather\\n/// than the current block to avoid various exploits.\\n///\\n/// Users should not be able to gain a tier for a single block, claim\\n/// benefits then remove the tier within the same block.\\n///\\n/// The construction block provides a simple and generic reference\\n/// point that is difficult to manipulate/predict.\\n///\\n/// Note that `ReadOnlyTier` contracts must carefully consider use\\n/// with `TierByConstruction` as they tend to return `0x00000000` for\\n/// any/all tiers held. There needs to be additional safeguards to\\n/// mitigate \\\"flash tier\\\" attacks.\\n///\\n/// Note that an account COULD be `TierByConstruction` then lower/\\n/// remove a tier, then no longer be eligible when they regain the\\n/// tier. Only _continuously held_ tiers are valid against the\\n/// construction block check as this is native behaviour of the\\n/// `report` function in `ITier`.\\n///\\n/// Technically the `ITier` could re-enter the `TierByConstruction`\\n/// so the `onlyTier` modifier runs AFTER the modified function.\\n///\\n/// @dev Enforces tiers held by contract contruction block.\\n/// The construction block is compared against the blocks returned by `report`.\\n/// The `ITier` contract is paramaterised and set during construction.\\ncontract TierByConstruction {\\n    ITier public tierContract;\\n    uint256 public constructionBlock;\\n\\n    constructor(ITier tierContract_) {\\n        tierContract = tierContract_;\\n        constructionBlock = block.number;\\n    }\\n\\n    /// Check if an account has held AT LEAST the given tier according to\\n    /// `tierContract` since construction.\\n    /// The account MUST have held the tier continuously from construction\\n    /// until the \\\"current\\\" state according to `report`.\\n    /// Note that `report` PROBABLY is current as at the block this function is\\n    /// called but MAYBE NOT.\\n    /// The `ITier` contract is free to manage reports however makes sense.\\n    ///\\n    /// @param account_ Account to check status of.\\n    /// @param minimumTier_ Minimum tier for the account.\\n    /// @return True if the status is currently held.\\n    function isTier(address account_, ITier.Tier minimumTier_)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return constructionBlock >= TierUtil.tierBlock(\\n            tierContract.report(account_),\\n            minimumTier_\\n        );\\n    }\\n\\n    /// Modifier that restricts access to functions depending on the tier\\n    /// required by the function.\\n    ///\\n    /// `isTier` involves an external call to tierContract.report.\\n    /// `require` happens AFTER the modified function to avoid rentrant\\n    /// `ITier` code.\\n    /// Also `report` from `ITier` is `view` so the compiler will error on\\n    /// attempted state modification.\\n    // solhint-disable-next-line max-line-length\\n    /// https://consensys.github.io/smart-contract-best-practices/recommendations/#use-modifiers-only-for-checks\\n    ///\\n    /// Do NOT use this to guard setting the tier on an `ITier` contract.\\n    /// The initial tier would be checked AFTER it has already been\\n    /// modified which is unsafe.\\n    ///\\n    /// @param account_ Account to enforce tier of.\\n    /// @param minimumTier_ Minimum tier for the account.\\n    modifier onlyTier(address account_, ITier.Tier minimumTier_) {\\n        _;\\n        require(\\n            isTier(account_, minimumTier_),\\n            \\\"MINIMUM_TIER\\\"\\n        );\\n    }\\n}\",\"keccak256\":\"0xe8d7c4db4628aade6b94c09b108829e89185ffddd890833a2685dda1a4928bf0\",\"license\":\"CAL\"}},\"version\":1}"
        }
      },
      "contracts/tier/ITier.sol": {
        "ITier": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "enum ITier.Tier",
                  "name": "startTier",
                  "type": "uint8"
                },
                {
                  "indexed": true,
                  "internalType": "enum ITier.Tier",
                  "name": "endTier",
                  "type": "uint8"
                }
              ],
              "name": "TierChange",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "report",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "internalType": "enum ITier.Tier",
                  "name": "endTier",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "name": "setTier",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "report(address)": "e053ea31",
              "setTier(address,uint8,bytes)": "52dab69d"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum ITier.Tier\",\"name\":\"startTier\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"enum ITier.Tier\",\"name\":\"endTier\",\"type\":\"uint8\"}],\"name\":\"TierChange\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"report\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"enum ITier.Tier\",\"name\":\"endTier\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"setTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Standard interface to a tiered membership. A \\\"membership\\\" can represent many things: - Exclusive access. - Participation in some event or process. - KYC completion. - Combination of sub-memberships. - Etc. The high level requirements for a contract implementing `ITier`: - MUST represent held tiers with the `Tier` enum. - MUST implement `report`.   - The report is a `uint256` that SHOULD represent the block each tier has     been continuously held since encoded as `uint32`.   - The encoded tiers start at ONE; ZERO is implied if no tier has ever     been held.   - `Tier.ZERO` is NOT encoded in the report, it is simply the fallback     value.   - If a tier is lost the block data is erased for that tier and will be     set if/when the tier is regained to the new block.   - If the historical block information is not available the report MAY     return `0x00000000` for all held tiers.   - Tiers that are lost or have never been held MUST return `0xFFFFFFFF`. - SHOULD implement `setTier`.   - Contracts SHOULD revert with `SET_TIER` error if they cannot     meaningfully set a tier directly.     For example a contract that can only derive a membership tier by     reading the state of an external contract cannot set tiers.   - Contracts implementing `setTier` SHOULD error with `SET_ZERO_TIER`     if `Tier.ZERO` is being set. - MUST emit `TierChange` when `setTier` successfully writes a new tier.   - Contracts that cannot meaningfully set a tier are exempt.\",\"kind\":\"dev\",\"methods\":{\"report(address)\":{\"details\":\"Returns the earliest block the account has held each tier for continuously. This is encoded as a uint256 with blocks represented as 8x concatenated uint32. I.e. Each 4 bytes of the uint256 represents a u32 tier start time. The low bits represent low tiers and high bits the high tiers. Implementing contracts should return 0xFFFFFFFF for lost & never-held tiers.\",\"params\":{\"account\":\"Account to get the report for.\"},\"returns\":{\"_0\":\"The report blocks encoded as a uint256.\"}},\"setTier(address,uint8,bytes)\":{\"details\":\"Updates the tier of an account. The implementing contract is responsible for all checks and state changes required to set the tier. For example, taking/refunding funds/NFTs etc. Contracts may disallow directly setting tiers, preferring to derive reports from other onchain data. In this case they should `revert(\\\"SET_TIER\\\");`.\",\"params\":{\"account\":\"Account to change the tier for.\",\"data\":\"Arbitrary input to disambiguate ownership (e.g. NFTs to lock).\",\"endTier\":\"Tier after the change.\"}}},\"title\":\"ITier\",\"version\":1},\"userdoc\":{\"events\":{\"TierChange(address,uint8,uint8)\":{\"notice\":\"Every time a Tier changes we log start and end Tier against the account. This MAY NOT be emitted if reports are being read from the state of an external contract.\"}},\"kind\":\"user\",\"methods\":{\"report(address)\":{\"notice\":\"A tier report is a `uint256` that contains each of the block numbers each tier has been held continously since as a `uint32`. There are 9 possible tier, starting with `Tier.ZERO` for `0` offset or \\\"never held any tier\\\" then working up through 8x 4 byte offsets to the full 256 bits. Low bits = Lower tier. In hexadecimal every 8 characters = one tier, starting at `Tier.EIGHT` from high bits and working down to `Tier.ONE`. `uint32` should be plenty for any blockchain that measures block times in seconds, but reconsider if deploying to an environment with significantly sub-second block times. ~135 years of 1 second blocks fit into `uint32`. `2^8 / (365 * 24 * 60 * 60)` When a user INCREASES their tier they keep all the block numbers they already had, and get new block times for each increased tiers they have earned. When a user DECREASES their tier they return to `0xFFFFFFFF` (never) for every tier level they remove, but keep their block numbers for the remaining tiers. GUIs are encouraged to make this dynamic very clear for users as round-tripping to a lower status and back is a DESTRUCTIVE operation for block times. The intent is that downstream code can provide additional benefits for members who have maintained a certain tier for/since a long time. These benefits can be provided by inspecting the report, and by on-chain contracts directly, rather than needing to work with snapshots etc.\"},\"setTier(address,uint8,bytes)\":{\"notice\":\"Users can set their own tier by calling `setTier`. The contract that implements `ITier` is responsible for checking eligibility and/or taking actions required to set the tier. For example, the contract must take/refund any tokens relevant to changing the tier. Obviously the user is responsible for any approvals for this action prior to calling `setTier`. When the tier is changed a `TierChange` event will be emmited as: ``` event TierChange(address account, Tier startTier, Tier endTier); ``` The `setTier` function includes arbitrary data as the third parameter. This can be used to disambiguate in the case that there may be many possible options for a user to achieve some tier. For example, consider the case where `Tier.THREE` can be achieved by EITHER locking 1x rare NFT or 3x uncommon NFTs. A user with both could use `data` to explicitly state their intent. NOTE however that _any_ address can call `setTier` for any other address. If you implement `data` or anything that changes state then be very careful to avoid griefing attacks. The `data` parameter can also be ignored by the contract implementing `ITier`. For example, ERC20 tokens are fungible so only the balance approved by the user is relevant to a tier change. The `setTier` function SHOULD prevent users from reassigning `Tier.ZERO` to themselves. The `Tier.ZERO` status represents never having any status.\"}},\"notice\":\"`ITier` is a simple interface that contracts can implement to provide membership lists for other contracts. There are many use-cases for a time-preserving, conditional membership list. Some examples include: - Self-serve whitelist to participate in fundraising - Lists of users who can claim airdrops and perks - Pooling resources with implied governance/reward tiers - POAP style attendance proofs allowing access to future exclusive events\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tier/ITier.sol\":\"ITier\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/tier/ITier.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\n\\npragma solidity 0.8.10;\\n\\n/// @title ITier\\n/// @notice `ITier` is a simple interface that contracts can\\n/// implement to provide membership lists for other contracts.\\n///\\n/// There are many use-cases for a time-preserving,\\n/// conditional membership list.\\n///\\n/// Some examples include:\\n///\\n/// - Self-serve whitelist to participate in fundraising\\n/// - Lists of users who can claim airdrops and perks\\n/// - Pooling resources with implied governance/reward tiers\\n/// - POAP style attendance proofs allowing access to future exclusive events\\n///\\n/// @dev Standard interface to a tiered membership.\\n///\\n/// A \\\"membership\\\" can represent many things:\\n/// - Exclusive access.\\n/// - Participation in some event or process.\\n/// - KYC completion.\\n/// - Combination of sub-memberships.\\n/// - Etc.\\n///\\n/// The high level requirements for a contract implementing `ITier`:\\n/// - MUST represent held tiers with the `Tier` enum.\\n/// - MUST implement `report`.\\n///   - The report is a `uint256` that SHOULD represent the block each tier has\\n///     been continuously held since encoded as `uint32`.\\n///   - The encoded tiers start at ONE; ZERO is implied if no tier has ever\\n///     been held.\\n///   - `Tier.ZERO` is NOT encoded in the report, it is simply the fallback\\n///     value.\\n///   - If a tier is lost the block data is erased for that tier and will be\\n///     set if/when the tier is regained to the new block.\\n///   - If the historical block information is not available the report MAY\\n///     return `0x00000000` for all held tiers.\\n///   - Tiers that are lost or have never been held MUST return `0xFFFFFFFF`.\\n/// - SHOULD implement `setTier`.\\n///   - Contracts SHOULD revert with `SET_TIER` error if they cannot\\n///     meaningfully set a tier directly.\\n///     For example a contract that can only derive a membership tier by\\n///     reading the state of an external contract cannot set tiers.\\n///   - Contracts implementing `setTier` SHOULD error with `SET_ZERO_TIER`\\n///     if `Tier.ZERO` is being set.\\n/// - MUST emit `TierChange` when `setTier` successfully writes a new tier.\\n///   - Contracts that cannot meaningfully set a tier are exempt.\\ninterface ITier {\\n\\n    /// 9 Possible tiers.\\n    /// Fits nicely as uint32 in uint256 which is helpful for internal storage\\n    /// concerns.\\n    /// 8 tiers can be achieved, ZERO is the tier when no tier has been\\n    /// achieved.\\n    enum Tier {\\n        ZERO,\\n        ONE,\\n        TWO,\\n        THREE,\\n        FOUR,\\n        FIVE,\\n        SIX,\\n        SEVEN,\\n        EIGHT\\n    }\\n\\n    /// Every time a Tier changes we log start and end Tier against the\\n    /// account.\\n    /// This MAY NOT be emitted if reports are being read from the state of an\\n    /// external contract.\\n    event TierChange(\\n        address indexed account,\\n        Tier indexed startTier,\\n        Tier indexed endTier\\n    );\\n\\n    /// @notice Users can set their own tier by calling `setTier`.\\n    ///\\n    /// The contract that implements `ITier` is responsible for checking\\n    /// eligibility and/or taking actions required to set the tier.\\n    ///\\n    /// For example, the contract must take/refund any tokens relevant to\\n    /// changing the tier.\\n    ///\\n    /// Obviously the user is responsible for any approvals for this action\\n    /// prior to calling `setTier`.\\n    ///\\n    /// When the tier is changed a `TierChange` event will be emmited as:\\n    /// ```\\n    /// event TierChange(address account, Tier startTier, Tier endTier);\\n    /// ```\\n    ///\\n    /// The `setTier` function includes arbitrary data as the third\\n    /// parameter. This can be used to disambiguate in the case that\\n    /// there may be many possible options for a user to achieve some tier.\\n    ///\\n    /// For example, consider the case where `Tier.THREE` can be achieved\\n    /// by EITHER locking 1x rare NFT or 3x uncommon NFTs. A user with both\\n    /// could use `data` to explicitly state their intent.\\n    ///\\n    /// NOTE however that _any_ address can call `setTier` for any other\\n    /// address.\\n    ///\\n    /// If you implement `data` or anything that changes state then be very\\n    /// careful to avoid griefing attacks.\\n    ///\\n    /// The `data` parameter can also be ignored by the contract implementing\\n    /// `ITier`. For example, ERC20 tokens are fungible so only the balance\\n    /// approved by the user is relevant to a tier change.\\n    ///\\n    /// The `setTier` function SHOULD prevent users from reassigning\\n    /// `Tier.ZERO` to themselves.\\n    ///\\n    /// The `Tier.ZERO` status represents never having any status.\\n    /// @dev Updates the tier of an account.\\n    ///\\n    /// The implementing contract is responsible for all checks and state\\n    /// changes required to set the tier. For example, taking/refunding\\n    /// funds/NFTs etc.\\n    ///\\n    /// Contracts may disallow directly setting tiers, preferring to derive\\n    /// reports from other onchain data.\\n    /// In this case they should `revert(\\\"SET_TIER\\\");`.\\n    ///\\n    /// @param account Account to change the tier for.\\n    /// @param endTier Tier after the change.\\n    /// @param data Arbitrary input to disambiguate ownership\\n    /// (e.g. NFTs to lock).\\n    function setTier(\\n        address account,\\n        Tier endTier,\\n        bytes memory data\\n    )\\n        external;\\n\\n    /// @notice A tier report is a `uint256` that contains each of the block\\n    /// numbers each tier has been held continously since as a `uint32`.\\n    /// There are 9 possible tier, starting with `Tier.ZERO` for `0` offset or\\n    /// \\\"never held any tier\\\" then working up through 8x 4 byte offsets to the\\n    /// full 256 bits.\\n    ///\\n    /// Low bits = Lower tier.\\n    ///\\n    /// In hexadecimal every 8 characters = one tier, starting at `Tier.EIGHT`\\n    /// from high bits and working down to `Tier.ONE`.\\n    ///\\n    /// `uint32` should be plenty for any blockchain that measures block times\\n    /// in seconds, but reconsider if deploying to an environment with\\n    /// significantly sub-second block times.\\n    ///\\n    /// ~135 years of 1 second blocks fit into `uint32`.\\n    ///\\n    /// `2^8 / (365 * 24 * 60 * 60)`\\n    ///\\n    /// When a user INCREASES their tier they keep all the block numbers they\\n    /// already had, and get new block times for each increased tiers they have\\n    /// earned.\\n    ///\\n    /// When a user DECREASES their tier they return to `0xFFFFFFFF` (never)\\n    /// for every tier level they remove, but keep their block numbers for the\\n    /// remaining tiers.\\n    ///\\n    /// GUIs are encouraged to make this dynamic very clear for users as\\n    /// round-tripping to a lower status and back is a DESTRUCTIVE operation\\n    /// for block times.\\n    ///\\n    /// The intent is that downstream code can provide additional benefits for\\n    /// members who have maintained a certain tier for/since a long time.\\n    /// These benefits can be provided by inspecting the report, and by\\n    /// on-chain contracts directly,\\n    /// rather than needing to work with snapshots etc.\\n    /// @dev Returns the earliest block the account has held each tier for\\n    /// continuously.\\n    /// This is encoded as a uint256 with blocks represented as 8x\\n    /// concatenated uint32.\\n    /// I.e. Each 4 bytes of the uint256 represents a u32 tier start time.\\n    /// The low bits represent low tiers and high bits the high tiers.\\n    /// Implementing contracts should return 0xFFFFFFFF for lost &\\n    /// never-held tiers.\\n    ///\\n    /// @param account Account to get the report for.\\n    /// @return The report blocks encoded as a uint256.\\n    function report(address account) external view returns (uint256);\\n}\",\"keccak256\":\"0x9df1a0a477801f332f9b95fb6d400d2edb4fce18c089c0df0a5affc02ebd4121\",\"license\":\"CAL\"}},\"version\":1}"
        }
      },
      "contracts/tier/TierByConstruction.sol": {
        "TierByConstruction": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "contract ITier",
                  "name": "tierContract_",
                  "type": "address"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "inputs": [],
              "name": "constructionBlock",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "account_",
                  "type": "address"
                },
                {
                  "internalType": "enum ITier.Tier",
                  "name": "minimumTier_",
                  "type": "uint8"
                }
              ],
              "name": "isTier",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "tierContract",
              "outputs": [
                {
                  "internalType": "contract ITier",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "@_452": {
                  "entryPoint": null,
                  "id": 452,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "abi_decode_tuple_t_contract$_ITier_$424_fromMemory": {
                  "entryPoint": 88,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                }
              },
              "generatedSources": [
                {
                  "ast": {
                    "nodeType": "YulBlock",
                    "src": "0:319:4",
                    "statements": [
                      {
                        "nodeType": "YulBlock",
                        "src": "6:3:4",
                        "statements": []
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "108:209:4",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "154:16:4",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "163:1:4",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "166:1:4",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "156:6:4"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "156:12:4"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "156:12:4"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "129:7:4"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "138:9:4"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "125:3:4"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "125:23:4"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "150:2:4",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "121:3:4"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "121:32:4"
                              },
                              "nodeType": "YulIf",
                              "src": "118:52:4"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "179:29:4",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "198:9:4"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "192:5:4"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "192:16:4"
                              },
                              "variables": [
                                {
                                  "name": "value",
                                  "nodeType": "YulTypedName",
                                  "src": "183:5:4",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "271:16:4",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "280:1:4",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "283:1:4",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "273:6:4"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "273:12:4"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "273:12:4"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "230:5:4"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nodeType": "YulIdentifier",
                                            "src": "241:5:4"
                                          },
                                          {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "kind": "number",
                                                    "nodeType": "YulLiteral",
                                                    "src": "256:3:4",
                                                    "type": "",
                                                    "value": "160"
                                                  },
                                                  {
                                                    "kind": "number",
                                                    "nodeType": "YulLiteral",
                                                    "src": "261:1:4",
                                                    "type": "",
                                                    "value": "1"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "shl",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "252:3:4"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "252:11:4"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "265:1:4",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "sub",
                                              "nodeType": "YulIdentifier",
                                              "src": "248:3:4"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "248:19:4"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "and",
                                          "nodeType": "YulIdentifier",
                                          "src": "237:3:4"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "237:31:4"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "eq",
                                      "nodeType": "YulIdentifier",
                                      "src": "227:2:4"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "227:42:4"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "220:6:4"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "220:50:4"
                              },
                              "nodeType": "YulIf",
                              "src": "217:70:4"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "296:15:4",
                              "value": {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "306:5:4"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "296:6:4"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_contract$_ITier_$424_fromMemory",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "74:9:4",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "85:7:4",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "97:6:4",
                            "type": ""
                          }
                        ],
                        "src": "14:303:4"
                      }
                    ]
                  },
                  "contents": "{\n    { }\n    function abi_decode_tuple_t_contract$_ITier_$424_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n}",
                  "id": 4,
                  "language": "Yul",
                  "name": "#utility.yul"
                }
              ],
              "linkReferences": {},
              "object": "608060405234801561001057600080fd5b5060405161032538038061032583398101604081905261002f91610058565b600080546001600160a01b0319166001600160a01b039290921691909117905543600155610088565b60006020828403121561006a57600080fd5b81516001600160a01b038116811461008157600080fd5b9392505050565b61028e806100976000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80630f0af57f1461004657806377544f3314610062578063a30872db14610085575b600080fd5b61004f60015481565b6040519081526020015b60405180910390f35b610075610070366004610194565b6100b0565b6040519015158152602001610059565b600054610098906001600160a01b031681565b6040516001600160a01b039091168152602001610059565b6000805460405163e053ea3160e01b81526001600160a01b03858116600483015261012792169063e053ea3190602401602060405180830381865afa1580156100fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061012191906101dd565b83610135565b600154101590505b92915050565b60008082600881111561014a5761014a6101f6565b14156101585750600061012f565b6000600183600881111561016e5761016e6101f6565b6101789190610222565b610183906020610239565b9390931c63ffffffff169392505050565b600080604083850312156101a757600080fd5b82356001600160a01b03811681146101be57600080fd5b91506020830135600981106101d257600080fd5b809150509250929050565b6000602082840312156101ef57600080fd5b5051919050565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000828210156102345761023461020c565b500390565b60008160001904831182151516156102535761025361020c565b50029056fea2646970667358221220406e674b8078a36de45259223cf9f63de9d3941e467ddf4c4eab99688745541e64736f6c634300080a0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x325 CODESIZE SUB DUP1 PUSH2 0x325 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x58 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE NUMBER PUSH1 0x1 SSTORE PUSH2 0x88 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x6A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x81 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x28E DUP1 PUSH2 0x97 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xF0AF57F EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x77544F33 EQ PUSH2 0x62 JUMPI DUP1 PUSH4 0xA30872DB EQ PUSH2 0x85 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4F PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x75 PUSH2 0x70 CALLDATASIZE PUSH1 0x4 PUSH2 0x194 JUMP JUMPDEST PUSH2 0xB0 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x59 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x98 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x59 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0xE053EA31 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH2 0x127 SWAP3 AND SWAP1 PUSH4 0xE053EA31 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xFD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x121 SWAP2 SWAP1 PUSH2 0x1DD JUMP JUMPDEST DUP4 PUSH2 0x135 JUMP JUMPDEST PUSH1 0x1 SLOAD LT ISZERO SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x14A JUMPI PUSH2 0x14A PUSH2 0x1F6 JUMP JUMPDEST EQ ISZERO PUSH2 0x158 JUMPI POP PUSH1 0x0 PUSH2 0x12F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP4 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x16E JUMPI PUSH2 0x16E PUSH2 0x1F6 JUMP JUMPDEST PUSH2 0x178 SWAP2 SWAP1 PUSH2 0x222 JUMP JUMPDEST PUSH2 0x183 SWAP1 PUSH1 0x20 PUSH2 0x239 JUMP JUMPDEST SWAP4 SWAP1 SWAP4 SHR PUSH4 0xFFFFFFFF AND SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH1 0x9 DUP2 LT PUSH2 0x1D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x234 JUMPI PUSH2 0x234 PUSH2 0x20C JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x253 JUMPI PUSH2 0x253 PUSH2 0x20C JUMP JUMPDEST POP MUL SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BLOCKHASH PUSH15 0x674B8078A36DE45259223CF9F63DE9 0xD3 SWAP5 0x1E CHAINID PUSH30 0xDF4C4EAB99688745541E64736F6C634300080A0033000000000000000000 ",
              "sourceMap": "1726:2133:3:-:0;;;1830:120;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1873:12;:28;;-1:-1:-1;;;;;;1873:28:3;-1:-1:-1;;;;;1873:28:3;;;;;;;;;;1931:12;-1:-1:-1;1911:32:3;1726:2133;;14:303:4;97:6;150:2;138:9;129:7;125:23;121:32;118:52;;;166:1;163;156:12;118:52;192:16;;-1:-1:-1;;;;;237:31:4;;227:42;;217:70;;283:1;280;273:12;217:70;306:5;14:303;-1:-1:-1;;;14:303:4:o;:::-;1726:2133:3;;;;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "@constructionBlock_436": {
                  "entryPoint": null,
                  "id": 436,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@isTier_475": {
                  "entryPoint": 176,
                  "id": 475,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "@tierBlock_107": {
                  "entryPoint": 309,
                  "id": 107,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "@tierContract_434": {
                  "entryPoint": null,
                  "id": 434,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "abi_decode_tuple_t_addresst_enum$_Tier_$393": {
                  "entryPoint": 404,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "abi_decode_tuple_t_uint256_fromMemory": {
                  "entryPoint": 477,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_contract$_ITier_$424__to_t_address__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "checked_mul_t_uint256": {
                  "entryPoint": 569,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "checked_sub_t_uint256": {
                  "entryPoint": 546,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "panic_error_0x11": {
                  "entryPoint": 524,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "panic_error_0x21": {
                  "entryPoint": 502,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [
                {
                  "ast": {
                    "nodeType": "YulBlock",
                    "src": "0:2019:4",
                    "statements": [
                      {
                        "nodeType": "YulBlock",
                        "src": "6:3:4",
                        "statements": []
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "115:76:4",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "125:26:4",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "137:9:4"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "148:2:4",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "133:3:4"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "133:18:4"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "125:4:4"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "167:9:4"
                                  },
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "178:6:4"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "160:6:4"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "160:25:4"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "160:25:4"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "84:9:4",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "95:6:4",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "106:4:4",
                            "type": ""
                          }
                        ],
                        "src": "14:177:4"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "291:349:4",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "337:16:4",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "346:1:4",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "349:1:4",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "339:6:4"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "339:12:4"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "339:12:4"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "312:7:4"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "321:9:4"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "308:3:4"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "308:23:4"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "333:2:4",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "304:3:4"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "304:32:4"
                              },
                              "nodeType": "YulIf",
                              "src": "301:52:4"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "362:36:4",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "388:9:4"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "375:12:4"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "375:23:4"
                              },
                              "variables": [
                                {
                                  "name": "value",
                                  "nodeType": "YulTypedName",
                                  "src": "366:5:4",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "461:16:4",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "470:1:4",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "473:1:4",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "463:6:4"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "463:12:4"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "463:12:4"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "420:5:4"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nodeType": "YulIdentifier",
                                            "src": "431:5:4"
                                          },
                                          {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "kind": "number",
                                                    "nodeType": "YulLiteral",
                                                    "src": "446:3:4",
                                                    "type": "",
                                                    "value": "160"
                                                  },
                                                  {
                                                    "kind": "number",
                                                    "nodeType": "YulLiteral",
                                                    "src": "451:1:4",
                                                    "type": "",
                                                    "value": "1"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "shl",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "442:3:4"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "442:11:4"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "455:1:4",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "sub",
                                              "nodeType": "YulIdentifier",
                                              "src": "438:3:4"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "438:19:4"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "and",
                                          "nodeType": "YulIdentifier",
                                          "src": "427:3:4"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "427:31:4"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "eq",
                                      "nodeType": "YulIdentifier",
                                      "src": "417:2:4"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "417:42:4"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "410:6:4"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "410:50:4"
                              },
                              "nodeType": "YulIf",
                              "src": "407:70:4"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "486:15:4",
                              "value": {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "496:5:4"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "486:6:4"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "510:47:4",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "542:9:4"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "553:2:4",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "538:3:4"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "538:18:4"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "525:12:4"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "525:32:4"
                              },
                              "variables": [
                                {
                                  "name": "value_1",
                                  "nodeType": "YulTypedName",
                                  "src": "514:7:4",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "592:16:4",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "601:1:4",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "604:1:4",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "594:6:4"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "594:12:4"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "594:12:4"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "579:7:4"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "588:1:4",
                                        "type": "",
                                        "value": "9"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "lt",
                                      "nodeType": "YulIdentifier",
                                      "src": "576:2:4"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "576:14:4"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "569:6:4"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "569:22:4"
                              },
                              "nodeType": "YulIf",
                              "src": "566:42:4"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "617:17:4",
                              "value": {
                                "name": "value_1",
                                "nodeType": "YulIdentifier",
                                "src": "627:7:4"
                              },
                              "variableNames": [
                                {
                                  "name": "value1",
                                  "nodeType": "YulIdentifier",
                                  "src": "617:6:4"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_addresst_enum$_Tier_$393",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "249:9:4",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "260:7:4",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "272:6:4",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulTypedName",
                            "src": "280:6:4",
                            "type": ""
                          }
                        ],
                        "src": "196:444:4"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "740:92:4",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "750:26:4",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "762:9:4"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "773:2:4",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "758:3:4"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "758:18:4"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "750:4:4"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "792:9:4"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value0",
                                            "nodeType": "YulIdentifier",
                                            "src": "817:6:4"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "iszero",
                                          "nodeType": "YulIdentifier",
                                          "src": "810:6:4"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "810:14:4"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "803:6:4"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "803:22:4"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "785:6:4"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "785:41:4"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "785:41:4"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "709:9:4",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "720:6:4",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "731:4:4",
                            "type": ""
                          }
                        ],
                        "src": "645:187:4"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "951:102:4",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "961:26:4",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "973:9:4"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "984:2:4",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "969:3:4"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "969:18:4"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "961:4:4"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1003:9:4"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "1018:6:4"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "1034:3:4",
                                                "type": "",
                                                "value": "160"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "1039:1:4",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "1030:3:4"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "1030:11:4"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1043:1:4",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nodeType": "YulIdentifier",
                                          "src": "1026:3:4"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1026:19:4"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "1014:3:4"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1014:32:4"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "996:6:4"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "996:51:4"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "996:51:4"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_contract$_ITier_$424__to_t_address__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "920:9:4",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "931:6:4",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "942:4:4",
                            "type": ""
                          }
                        ],
                        "src": "837:216:4"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "1159:102:4",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "1169:26:4",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1181:9:4"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1192:2:4",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1177:3:4"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1177:18:4"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "1169:4:4"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1211:9:4"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "1226:6:4"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "1242:3:4",
                                                "type": "",
                                                "value": "160"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "1247:1:4",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "1238:3:4"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "1238:11:4"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1251:1:4",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nodeType": "YulIdentifier",
                                          "src": "1234:3:4"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1234:19:4"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "1222:3:4"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1222:32:4"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "1204:6:4"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1204:51:4"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1204:51:4"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "1128:9:4",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "1139:6:4",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "1150:4:4",
                            "type": ""
                          }
                        ],
                        "src": "1058:203:4"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "1347:103:4",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "1393:16:4",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1402:1:4",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1405:1:4",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "1395:6:4"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1395:12:4"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1395:12:4"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "1368:7:4"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "1377:9:4"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "1364:3:4"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1364:23:4"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1389:2:4",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1360:3:4"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1360:32:4"
                              },
                              "nodeType": "YulIf",
                              "src": "1357:52:4"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "1418:26:4",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1434:9:4"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "1428:5:4"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1428:16:4"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "1418:6:4"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_uint256_fromMemory",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "1313:9:4",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "1324:7:4",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "1336:6:4",
                            "type": ""
                          }
                        ],
                        "src": "1266:184:4"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "1487:95:4",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1504:1:4",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1511:3:4",
                                        "type": "",
                                        "value": "224"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1516:10:4",
                                        "type": "",
                                        "value": "0x4e487b71"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "1507:3:4"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1507:20:4"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "1497:6:4"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1497:31:4"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1497:31:4"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1544:1:4",
                                    "type": "",
                                    "value": "4"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1547:4:4",
                                    "type": "",
                                    "value": "0x21"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "1537:6:4"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1537:15:4"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1537:15:4"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1568:1:4",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1571:4:4",
                                    "type": "",
                                    "value": "0x24"
                                  }
                                ],
                                "functionName": {
                                  "name": "revert",
                                  "nodeType": "YulIdentifier",
                                  "src": "1561:6:4"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1561:15:4"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1561:15:4"
                            }
                          ]
                        },
                        "name": "panic_error_0x21",
                        "nodeType": "YulFunctionDefinition",
                        "src": "1455:127:4"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "1619:95:4",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1636:1:4",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1643:3:4",
                                        "type": "",
                                        "value": "224"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1648:10:4",
                                        "type": "",
                                        "value": "0x4e487b71"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "1639:3:4"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1639:20:4"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "1629:6:4"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1629:31:4"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1629:31:4"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1676:1:4",
                                    "type": "",
                                    "value": "4"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1679:4:4",
                                    "type": "",
                                    "value": "0x11"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "1669:6:4"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1669:15:4"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1669:15:4"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1700:1:4",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1703:4:4",
                                    "type": "",
                                    "value": "0x24"
                                  }
                                ],
                                "functionName": {
                                  "name": "revert",
                                  "nodeType": "YulIdentifier",
                                  "src": "1693:6:4"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1693:15:4"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1693:15:4"
                            }
                          ]
                        },
                        "name": "panic_error_0x11",
                        "nodeType": "YulFunctionDefinition",
                        "src": "1587:127:4"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "1768:76:4",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "1790:22:4",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x11",
                                        "nodeType": "YulIdentifier",
                                        "src": "1792:16:4"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1792:18:4"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1792:18:4"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "1784:1:4"
                                  },
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "1787:1:4"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1781:2:4"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1781:8:4"
                              },
                              "nodeType": "YulIf",
                              "src": "1778:34:4"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "1821:17:4",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "1833:1:4"
                                  },
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "1836:1:4"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1829:3:4"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1829:9:4"
                              },
                              "variableNames": [
                                {
                                  "name": "diff",
                                  "nodeType": "YulIdentifier",
                                  "src": "1821:4:4"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "checked_sub_t_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "x",
                            "nodeType": "YulTypedName",
                            "src": "1750:1:4",
                            "type": ""
                          },
                          {
                            "name": "y",
                            "nodeType": "YulTypedName",
                            "src": "1753:1:4",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "diff",
                            "nodeType": "YulTypedName",
                            "src": "1759:4:4",
                            "type": ""
                          }
                        ],
                        "src": "1719:125:4"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "1901:116:4",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "1960:22:4",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x11",
                                        "nodeType": "YulIdentifier",
                                        "src": "1962:16:4"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1962:18:4"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1962:18:4"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "x",
                                            "nodeType": "YulIdentifier",
                                            "src": "1932:1:4"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "iszero",
                                          "nodeType": "YulIdentifier",
                                          "src": "1925:6:4"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1925:9:4"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "1918:6:4"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1918:17:4"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "y",
                                        "nodeType": "YulIdentifier",
                                        "src": "1940:1:4"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "1951:1:4",
                                                "type": "",
                                                "value": "0"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "not",
                                              "nodeType": "YulIdentifier",
                                              "src": "1947:3:4"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "1947:6:4"
                                          },
                                          {
                                            "name": "x",
                                            "nodeType": "YulIdentifier",
                                            "src": "1955:1:4"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "div",
                                          "nodeType": "YulIdentifier",
                                          "src": "1943:3:4"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1943:14:4"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "gt",
                                      "nodeType": "YulIdentifier",
                                      "src": "1937:2:4"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1937:21:4"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "1914:3:4"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1914:45:4"
                              },
                              "nodeType": "YulIf",
                              "src": "1911:71:4"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "1991:20:4",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "2006:1:4"
                                  },
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "2009:1:4"
                                  }
                                ],
                                "functionName": {
                                  "name": "mul",
                                  "nodeType": "YulIdentifier",
                                  "src": "2002:3:4"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2002:9:4"
                              },
                              "variableNames": [
                                {
                                  "name": "product",
                                  "nodeType": "YulIdentifier",
                                  "src": "1991:7:4"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "checked_mul_t_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "x",
                            "nodeType": "YulTypedName",
                            "src": "1880:1:4",
                            "type": ""
                          },
                          {
                            "name": "y",
                            "nodeType": "YulTypedName",
                            "src": "1883:1:4",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "product",
                            "nodeType": "YulTypedName",
                            "src": "1889:7:4",
                            "type": ""
                          }
                        ],
                        "src": "1849:168:4"
                      }
                    ]
                  },
                  "contents": "{\n    { }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_enum$_Tier_$393(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        if iszero(lt(value_1, 9)) { revert(0, 0) }\n        value1 := value_1\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_contract$_ITier_$424__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function panic_error_0x21()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n}",
                  "id": 4,
                  "language": "Yul",
                  "name": "#utility.yul"
                }
              ],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "608060405234801561001057600080fd5b50600436106100415760003560e01c80630f0af57f1461004657806377544f3314610062578063a30872db14610085575b600080fd5b61004f60015481565b6040519081526020015b60405180910390f35b610075610070366004610194565b6100b0565b6040519015158152602001610059565b600054610098906001600160a01b031681565b6040516001600160a01b039091168152602001610059565b6000805460405163e053ea3160e01b81526001600160a01b03858116600483015261012792169063e053ea3190602401602060405180830381865afa1580156100fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061012191906101dd565b83610135565b600154101590505b92915050565b60008082600881111561014a5761014a6101f6565b14156101585750600061012f565b6000600183600881111561016e5761016e6101f6565b6101789190610222565b610183906020610239565b9390931c63ffffffff169392505050565b600080604083850312156101a757600080fd5b82356001600160a01b03811681146101be57600080fd5b91506020830135600981106101d257600080fd5b809150509250929050565b6000602082840312156101ef57600080fd5b5051919050565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000828210156102345761023461020c565b500390565b60008160001904831182151516156102535761025361020c565b50029056fea2646970667358221220406e674b8078a36de45259223cf9f63de9d3941e467ddf4c4eab99688745541e64736f6c634300080a0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xF0AF57F EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x77544F33 EQ PUSH2 0x62 JUMPI DUP1 PUSH4 0xA30872DB EQ PUSH2 0x85 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4F PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x75 PUSH2 0x70 CALLDATASIZE PUSH1 0x4 PUSH2 0x194 JUMP JUMPDEST PUSH2 0xB0 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x59 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x98 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x59 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0xE053EA31 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH2 0x127 SWAP3 AND SWAP1 PUSH4 0xE053EA31 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xFD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x121 SWAP2 SWAP1 PUSH2 0x1DD JUMP JUMPDEST DUP4 PUSH2 0x135 JUMP JUMPDEST PUSH1 0x1 SLOAD LT ISZERO SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x14A JUMPI PUSH2 0x14A PUSH2 0x1F6 JUMP JUMPDEST EQ ISZERO PUSH2 0x158 JUMPI POP PUSH1 0x0 PUSH2 0x12F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP4 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x16E JUMPI PUSH2 0x16E PUSH2 0x1F6 JUMP JUMPDEST PUSH2 0x178 SWAP2 SWAP1 PUSH2 0x222 JUMP JUMPDEST PUSH2 0x183 SWAP1 PUSH1 0x20 PUSH2 0x239 JUMP JUMPDEST SWAP4 SWAP1 SWAP4 SHR PUSH4 0xFFFFFFFF AND SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH1 0x9 DUP2 LT PUSH2 0x1D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x234 JUMPI PUSH2 0x234 PUSH2 0x20C JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x253 JUMPI PUSH2 0x253 PUSH2 0x20C JUMP JUMPDEST POP MUL SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BLOCKHASH PUSH15 0x674B8078A36DE45259223CF9F63DE9 0xD3 SWAP5 0x1E CHAINID PUSH30 0xDF4C4EAB99688745541E64736F6C634300080A0033000000000000000000 ",
              "sourceMap": "1726:2133:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1791:32;;;;;;;;;160:25:4;;;148:2;133:18;1791:32:3;;;;;;;;2563:256;;;;;;:::i;:::-;;:::i;:::-;;;810:14:4;;803:22;785:41;;773:2;758:18;2563:256:3;645:187:4;1760:25:3;;;;;-1:-1:-1;;;;;1760:25:3;;;;;;-1:-1:-1;;;;;1014:32:4;;;996:51;;984:2;969:18;1760:25:3;837:216:4;2563:256:3;2667:4;2747:12;;:29;;-1:-1:-1;;;2747:29:3;;-1:-1:-1;;;;;1014:32:4;;;2747:29:3;;;996:51:4;2715:97:3;;2747:12;;:19;;969:18:4;;2747:29:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2790:12;2715:18;:97::i;:::-;2694:17;;:118;;2687:125;;2563:256;;;;;:::o;2599:441:0:-;2700:7;;2828:5;:24;;;;;;;;:::i;:::-;;2824:43;;;-1:-1:-1;2863:1:0;2856:8;;2824:43;2877:15;2913:1;2904:5;2896:14;;;;;;;;:::i;:::-;:18;;;;:::i;:::-;2895:25;;2918:2;2895:25;:::i;:::-;2990:18;;;;2937:96;;;2599:441;-1:-1:-1;;;2599:441:0:o;196:444:4:-;272:6;280;333:2;321:9;312:7;308:23;304:32;301:52;;;349:1;346;339:12;301:52;375:23;;-1:-1:-1;;;;;427:31:4;;417:42;;407:70;;473:1;470;463:12;407:70;496:5;-1:-1:-1;553:2:4;538:18;;525:32;588:1;576:14;;566:42;;604:1;601;594:12;566:42;627:7;617:17;;;196:444;;;;;:::o;1266:184::-;1336:6;1389:2;1377:9;1368:7;1364:23;1360:32;1357:52;;;1405:1;1402;1395:12;1357:52;-1:-1:-1;1428:16:4;;1266:184;-1:-1:-1;1266:184:4:o;1455:127::-;1516:10;1511:3;1507:20;1504:1;1497:31;1547:4;1544:1;1537:15;1571:4;1568:1;1561:15;1587:127;1648:10;1643:3;1639:20;1636:1;1629:31;1679:4;1676:1;1669:15;1703:4;1700:1;1693:15;1719:125;1759:4;1787:1;1784;1781:8;1778:34;;;1792:18;;:::i;:::-;-1:-1:-1;1829:9:4;;1719:125::o;1849:168::-;1889:7;1955:1;1951;1947:6;1943:14;1940:1;1937:21;1932:1;1925:9;1918:17;1914:45;1911:71;;;1962:18;;:::i;:::-;-1:-1:-1;2002:9:4;;1849:168::o"
            },
            "methodIdentifiers": {
              "constructionBlock()": "0f0af57f",
              "isTier(address,uint8)": "77544f33",
              "tierContract()": "a30872db"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ITier\",\"name\":\"tierContract_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"constructionBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"},{\"internalType\":\"enum ITier.Tier\",\"name\":\"minimumTier_\",\"type\":\"uint8\"}],\"name\":\"isTier\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tierContract\",\"outputs\":[{\"internalType\":\"contract ITier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Enforces tiers held by contract contruction block. The construction block is compared against the blocks returned by `report`. The `ITier` contract is paramaterised and set during construction.\",\"kind\":\"dev\",\"methods\":{\"isTier(address,uint8)\":{\"params\":{\"account_\":\"Account to check status of.\",\"minimumTier_\":\"Minimum tier for the account.\"},\"returns\":{\"_0\":\"True if the status is currently held.\"}}},\"title\":\"TierByConstruction\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isTier(address,uint8)\":{\"notice\":\"Check if an account has held AT LEAST the given tier according to `tierContract` since construction. The account MUST have held the tier continuously from construction until the \\\"current\\\" state according to `report`. Note that `report` PROBABLY is current as at the block this function is called but MAYBE NOT. The `ITier` contract is free to manage reports however makes sense.\"}},\"notice\":\"`TierByConstruction` is a base contract for other contracts to inherit from. It exposes `isTier` and the corresponding modifier `onlyTier`. This ensures that the address has held at least the given tier since the contract was constructed. We check against the construction time of the contract rather than the current block to avoid various exploits. Users should not be able to gain a tier for a single block, claim benefits then remove the tier within the same block. The construction block provides a simple and generic reference point that is difficult to manipulate/predict. Note that `ReadOnlyTier` contracts must carefully consider use with `TierByConstruction` as they tend to return `0x00000000` for any/all tiers held. There needs to be additional safeguards to mitigate \\\"flash tier\\\" attacks. Note that an account COULD be `TierByConstruction` then lower/ remove a tier, then no longer be eligible when they regain the tier. Only _continuously held_ tiers are valid against the construction block check as this is native behaviour of the `report` function in `ITier`. Technically the `ITier` could re-enter the `TierByConstruction` so the `onlyTier` modifier runs AFTER the modified function.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tier/TierByConstruction.sol\":\"TierByConstruction\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/libraries/TierUtil.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\n\\npragma solidity 0.8.10;\\n\\nimport { ITier } from \\\"../tier/ITier.sol\\\";\\n\\n/// @title TierUtil\\n/// @notice `TierUtil` implements several pure functions that can be\\n/// used to interface with reports.\\n/// - `tierAtBlockFromReport`: Returns the highest status achieved relative to\\n/// a block number and report. Statuses gained after that block are ignored.\\n/// - `tierBlock`: Returns the block that a given tier has been held\\n/// since according to a report.\\n/// - `truncateTiersAbove`: Resets all the tiers above the reference tier.\\n/// - `updateBlocksForTierRange`: Updates a report with a block\\n/// number for every tier in a range.\\n/// - `updateReportWithTierAtBlock`: Updates a report to a new tier.\\n/// @dev Utilities to consistently read, write and manipulate tiers in reports.\\n/// The low-level bit shifting can be difficult to get right so this factors\\n/// that out.\\nlibrary TierUtil {\\n\\n    /// UNINITIALIZED is 0xFF.. as it is infinitely in the future.\\n    uint256 public constant UNINITIALIZED\\n        = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n    /// Returns the highest tier achieved relative to a block number\\n    /// and report.\\n    ///\\n    /// Note that typically the report will be from the _current_ contract\\n    /// state, i.e. `block.number` but not always. Tiers gained after the\\n    /// reference block are ignored.\\n    ///\\n    /// When the `report` comes from a later block than the `blockNumber` this\\n    /// means the user must have held the tier continuously from `blockNumber`\\n    /// _through_ to the report block.\\n    /// I.e. NOT a snapshot.\\n    ///\\n    /// @param report_ A report as per `ITier`.\\n    /// @param blockNumber_ The block number to check the tiers against.\\n    /// @return The highest tier held since `blockNumber` as per `report`.\\n    function tierAtBlockFromReport(\\n        uint256 report_,\\n        uint256 blockNumber_\\n    )\\n        internal pure returns (ITier.Tier)\\n    {\\n        for (uint256 i_ = 0; i_ < 8; i_++) {\\n            if (uint32(uint256(report_ >> (i_*32))) > uint32(blockNumber_)) {\\n                return ITier.Tier(i_);\\n            }\\n        }\\n        return ITier.Tier(8);\\n    }\\n\\n    /// Returns the block that a given tier has been held since from a report.\\n    ///\\n    /// The report MUST encode \\\"never\\\" as 0xFFFFFFFF. This ensures\\n    /// compatibility with `tierAtBlockFromReport`.\\n    ///\\n    /// @param report_ The report to read a block number from.\\n    /// @param tier_ The Tier to read the block number for.\\n    /// @return The block number this has been held since.\\n    function tierBlock(uint256 report_, ITier.Tier tier_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // ZERO is a special case. Everyone has always been at least ZERO,\\n        // since block 0.\\n        if (tier_ == ITier.Tier.ZERO) { return 0; }\\n\\n        uint256 offset_ = (uint256(tier_) - 1) * 32;\\n        return uint256(uint32(\\n            uint256(\\n                report_ >> offset_\\n            )\\n        ));\\n    }\\n\\n    /// Resets all the tiers above the reference tier to 0xFFFFFFFF.\\n    ///\\n    /// @param report_ Report to truncate with high bit 1s.\\n    /// @param tier_ Tier to truncate above (exclusive).\\n    /// @return Truncated report.\\n    function truncateTiersAbove(uint256 report_, ITier.Tier tier_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 offset_ = uint256(tier_) * 32;\\n        uint256 mask_ = (UNINITIALIZED >> offset_) << offset_;\\n        return report_ | mask_;\\n    }\\n\\n    /// Updates a report with a block number for every status integer in a\\n    /// range.\\n    ///\\n    /// Does nothing if the end status is equal or less than the start status.\\n    /// @param report_ The report to update.\\n    /// @param startTier_ The `Tier` at the start of the range (exclusive).\\n    /// @param endTier_ The `Tier` at the end of the range (inclusive).\\n    /// @param blockNumber_ The block number to set for every status\\n    /// in the range.\\n    /// @return The updated report.\\n    function updateBlocksForTierRange(\\n        uint256 report_,\\n        ITier.Tier startTier_,\\n        ITier.Tier endTier_,\\n        uint256 blockNumber_\\n    )\\n        internal pure returns (uint256)\\n    {\\n        uint256 offset_;\\n        for (uint256 i_ = uint256(startTier_); i_ < uint256(endTier_); i_++) {\\n            offset_ = i_ * 32;\\n            report_ =\\n                (report_ & ~uint256(uint256(uint32(UNINITIALIZED)) << offset_))\\n                | uint256(blockNumber_ << offset_);\\n        }\\n        return report_;\\n    }\\n\\n    /// Updates a report to a new status.\\n    ///\\n    /// Internally dispatches to `truncateTiersAbove` and\\n    /// `updateBlocksForTierRange`.\\n    /// The dispatch is based on whether the new tier is above or below the\\n    /// current tier.\\n    /// The `startTier_` MUST match the result of `tierAtBlockFromReport`.\\n    /// It is expected the caller will know the current tier when\\n    /// calling this function and need to do other things in the calling scope\\n    /// with it.\\n    ///\\n    /// @param report_ The report to update.\\n    /// @param startTier_ The tier to start updating relative to. Data above\\n    /// this tier WILL BE LOST so probably should be the current tier.\\n    /// @param endTier_ The new highest tier held, at the given block number.\\n    /// @param blockNumber_ The block number to update the highest tier to, and\\n    /// intermediate tiers from `startTier_`.\\n    /// @return The updated report.\\n    function updateReportWithTierAtBlock(\\n        uint256 report_,\\n        ITier.Tier startTier_,\\n        ITier.Tier endTier_,\\n        uint256 blockNumber_\\n    )\\n        internal pure returns (uint256)\\n    {\\n        return endTier_ < startTier_\\n            ? truncateTiersAbove(report_, endTier_)\\n            : updateBlocksForTierRange(\\n                report_,\\n                startTier_,\\n                endTier_,\\n                blockNumber_\\n            );\\n    }\\n\\n}\",\"keccak256\":\"0xc4bde1f366857f2fda9fc9f7d36676f39d9a263f85bfd3b5f51e8d02d769dd5a\",\"license\":\"CAL\"},\"contracts/tier/ITier.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\n\\npragma solidity 0.8.10;\\n\\n/// @title ITier\\n/// @notice `ITier` is a simple interface that contracts can\\n/// implement to provide membership lists for other contracts.\\n///\\n/// There are many use-cases for a time-preserving,\\n/// conditional membership list.\\n///\\n/// Some examples include:\\n///\\n/// - Self-serve whitelist to participate in fundraising\\n/// - Lists of users who can claim airdrops and perks\\n/// - Pooling resources with implied governance/reward tiers\\n/// - POAP style attendance proofs allowing access to future exclusive events\\n///\\n/// @dev Standard interface to a tiered membership.\\n///\\n/// A \\\"membership\\\" can represent many things:\\n/// - Exclusive access.\\n/// - Participation in some event or process.\\n/// - KYC completion.\\n/// - Combination of sub-memberships.\\n/// - Etc.\\n///\\n/// The high level requirements for a contract implementing `ITier`:\\n/// - MUST represent held tiers with the `Tier` enum.\\n/// - MUST implement `report`.\\n///   - The report is a `uint256` that SHOULD represent the block each tier has\\n///     been continuously held since encoded as `uint32`.\\n///   - The encoded tiers start at ONE; ZERO is implied if no tier has ever\\n///     been held.\\n///   - `Tier.ZERO` is NOT encoded in the report, it is simply the fallback\\n///     value.\\n///   - If a tier is lost the block data is erased for that tier and will be\\n///     set if/when the tier is regained to the new block.\\n///   - If the historical block information is not available the report MAY\\n///     return `0x00000000` for all held tiers.\\n///   - Tiers that are lost or have never been held MUST return `0xFFFFFFFF`.\\n/// - SHOULD implement `setTier`.\\n///   - Contracts SHOULD revert with `SET_TIER` error if they cannot\\n///     meaningfully set a tier directly.\\n///     For example a contract that can only derive a membership tier by\\n///     reading the state of an external contract cannot set tiers.\\n///   - Contracts implementing `setTier` SHOULD error with `SET_ZERO_TIER`\\n///     if `Tier.ZERO` is being set.\\n/// - MUST emit `TierChange` when `setTier` successfully writes a new tier.\\n///   - Contracts that cannot meaningfully set a tier are exempt.\\ninterface ITier {\\n\\n    /// 9 Possible tiers.\\n    /// Fits nicely as uint32 in uint256 which is helpful for internal storage\\n    /// concerns.\\n    /// 8 tiers can be achieved, ZERO is the tier when no tier has been\\n    /// achieved.\\n    enum Tier {\\n        ZERO,\\n        ONE,\\n        TWO,\\n        THREE,\\n        FOUR,\\n        FIVE,\\n        SIX,\\n        SEVEN,\\n        EIGHT\\n    }\\n\\n    /// Every time a Tier changes we log start and end Tier against the\\n    /// account.\\n    /// This MAY NOT be emitted if reports are being read from the state of an\\n    /// external contract.\\n    event TierChange(\\n        address indexed account,\\n        Tier indexed startTier,\\n        Tier indexed endTier\\n    );\\n\\n    /// @notice Users can set their own tier by calling `setTier`.\\n    ///\\n    /// The contract that implements `ITier` is responsible for checking\\n    /// eligibility and/or taking actions required to set the tier.\\n    ///\\n    /// For example, the contract must take/refund any tokens relevant to\\n    /// changing the tier.\\n    ///\\n    /// Obviously the user is responsible for any approvals for this action\\n    /// prior to calling `setTier`.\\n    ///\\n    /// When the tier is changed a `TierChange` event will be emmited as:\\n    /// ```\\n    /// event TierChange(address account, Tier startTier, Tier endTier);\\n    /// ```\\n    ///\\n    /// The `setTier` function includes arbitrary data as the third\\n    /// parameter. This can be used to disambiguate in the case that\\n    /// there may be many possible options for a user to achieve some tier.\\n    ///\\n    /// For example, consider the case where `Tier.THREE` can be achieved\\n    /// by EITHER locking 1x rare NFT or 3x uncommon NFTs. A user with both\\n    /// could use `data` to explicitly state their intent.\\n    ///\\n    /// NOTE however that _any_ address can call `setTier` for any other\\n    /// address.\\n    ///\\n    /// If you implement `data` or anything that changes state then be very\\n    /// careful to avoid griefing attacks.\\n    ///\\n    /// The `data` parameter can also be ignored by the contract implementing\\n    /// `ITier`. For example, ERC20 tokens are fungible so only the balance\\n    /// approved by the user is relevant to a tier change.\\n    ///\\n    /// The `setTier` function SHOULD prevent users from reassigning\\n    /// `Tier.ZERO` to themselves.\\n    ///\\n    /// The `Tier.ZERO` status represents never having any status.\\n    /// @dev Updates the tier of an account.\\n    ///\\n    /// The implementing contract is responsible for all checks and state\\n    /// changes required to set the tier. For example, taking/refunding\\n    /// funds/NFTs etc.\\n    ///\\n    /// Contracts may disallow directly setting tiers, preferring to derive\\n    /// reports from other onchain data.\\n    /// In this case they should `revert(\\\"SET_TIER\\\");`.\\n    ///\\n    /// @param account Account to change the tier for.\\n    /// @param endTier Tier after the change.\\n    /// @param data Arbitrary input to disambiguate ownership\\n    /// (e.g. NFTs to lock).\\n    function setTier(\\n        address account,\\n        Tier endTier,\\n        bytes memory data\\n    )\\n        external;\\n\\n    /// @notice A tier report is a `uint256` that contains each of the block\\n    /// numbers each tier has been held continously since as a `uint32`.\\n    /// There are 9 possible tier, starting with `Tier.ZERO` for `0` offset or\\n    /// \\\"never held any tier\\\" then working up through 8x 4 byte offsets to the\\n    /// full 256 bits.\\n    ///\\n    /// Low bits = Lower tier.\\n    ///\\n    /// In hexadecimal every 8 characters = one tier, starting at `Tier.EIGHT`\\n    /// from high bits and working down to `Tier.ONE`.\\n    ///\\n    /// `uint32` should be plenty for any blockchain that measures block times\\n    /// in seconds, but reconsider if deploying to an environment with\\n    /// significantly sub-second block times.\\n    ///\\n    /// ~135 years of 1 second blocks fit into `uint32`.\\n    ///\\n    /// `2^8 / (365 * 24 * 60 * 60)`\\n    ///\\n    /// When a user INCREASES their tier they keep all the block numbers they\\n    /// already had, and get new block times for each increased tiers they have\\n    /// earned.\\n    ///\\n    /// When a user DECREASES their tier they return to `0xFFFFFFFF` (never)\\n    /// for every tier level they remove, but keep their block numbers for the\\n    /// remaining tiers.\\n    ///\\n    /// GUIs are encouraged to make this dynamic very clear for users as\\n    /// round-tripping to a lower status and back is a DESTRUCTIVE operation\\n    /// for block times.\\n    ///\\n    /// The intent is that downstream code can provide additional benefits for\\n    /// members who have maintained a certain tier for/since a long time.\\n    /// These benefits can be provided by inspecting the report, and by\\n    /// on-chain contracts directly,\\n    /// rather than needing to work with snapshots etc.\\n    /// @dev Returns the earliest block the account has held each tier for\\n    /// continuously.\\n    /// This is encoded as a uint256 with blocks represented as 8x\\n    /// concatenated uint32.\\n    /// I.e. Each 4 bytes of the uint256 represents a u32 tier start time.\\n    /// The low bits represent low tiers and high bits the high tiers.\\n    /// Implementing contracts should return 0xFFFFFFFF for lost &\\n    /// never-held tiers.\\n    ///\\n    /// @param account Account to get the report for.\\n    /// @return The report blocks encoded as a uint256.\\n    function report(address account) external view returns (uint256);\\n}\",\"keccak256\":\"0x9df1a0a477801f332f9b95fb6d400d2edb4fce18c089c0df0a5affc02ebd4121\",\"license\":\"CAL\"},\"contracts/tier/TierByConstruction.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\n\\npragma solidity 0.8.10;\\n\\nimport { TierUtil } from \\\"../libraries/TierUtil.sol\\\";\\nimport { ITier } from \\\"./ITier.sol\\\";\\n\\n/// @title TierByConstruction\\n/// @notice `TierByConstruction` is a base contract for other\\n/// contracts to inherit from.\\n///\\n/// It exposes `isTier` and the corresponding modifier `onlyTier`.\\n///\\n/// This ensures that the address has held at least the given tier\\n/// since the contract was constructed.\\n///\\n/// We check against the construction time of the contract rather\\n/// than the current block to avoid various exploits.\\n///\\n/// Users should not be able to gain a tier for a single block, claim\\n/// benefits then remove the tier within the same block.\\n///\\n/// The construction block provides a simple and generic reference\\n/// point that is difficult to manipulate/predict.\\n///\\n/// Note that `ReadOnlyTier` contracts must carefully consider use\\n/// with `TierByConstruction` as they tend to return `0x00000000` for\\n/// any/all tiers held. There needs to be additional safeguards to\\n/// mitigate \\\"flash tier\\\" attacks.\\n///\\n/// Note that an account COULD be `TierByConstruction` then lower/\\n/// remove a tier, then no longer be eligible when they regain the\\n/// tier. Only _continuously held_ tiers are valid against the\\n/// construction block check as this is native behaviour of the\\n/// `report` function in `ITier`.\\n///\\n/// Technically the `ITier` could re-enter the `TierByConstruction`\\n/// so the `onlyTier` modifier runs AFTER the modified function.\\n///\\n/// @dev Enforces tiers held by contract contruction block.\\n/// The construction block is compared against the blocks returned by `report`.\\n/// The `ITier` contract is paramaterised and set during construction.\\ncontract TierByConstruction {\\n    ITier public tierContract;\\n    uint256 public constructionBlock;\\n\\n    constructor(ITier tierContract_) {\\n        tierContract = tierContract_;\\n        constructionBlock = block.number;\\n    }\\n\\n    /// Check if an account has held AT LEAST the given tier according to\\n    /// `tierContract` since construction.\\n    /// The account MUST have held the tier continuously from construction\\n    /// until the \\\"current\\\" state according to `report`.\\n    /// Note that `report` PROBABLY is current as at the block this function is\\n    /// called but MAYBE NOT.\\n    /// The `ITier` contract is free to manage reports however makes sense.\\n    ///\\n    /// @param account_ Account to check status of.\\n    /// @param minimumTier_ Minimum tier for the account.\\n    /// @return True if the status is currently held.\\n    function isTier(address account_, ITier.Tier minimumTier_)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return constructionBlock >= TierUtil.tierBlock(\\n            tierContract.report(account_),\\n            minimumTier_\\n        );\\n    }\\n\\n    /// Modifier that restricts access to functions depending on the tier\\n    /// required by the function.\\n    ///\\n    /// `isTier` involves an external call to tierContract.report.\\n    /// `require` happens AFTER the modified function to avoid rentrant\\n    /// `ITier` code.\\n    /// Also `report` from `ITier` is `view` so the compiler will error on\\n    /// attempted state modification.\\n    // solhint-disable-next-line max-line-length\\n    /// https://consensys.github.io/smart-contract-best-practices/recommendations/#use-modifiers-only-for-checks\\n    ///\\n    /// Do NOT use this to guard setting the tier on an `ITier` contract.\\n    /// The initial tier would be checked AFTER it has already been\\n    /// modified which is unsafe.\\n    ///\\n    /// @param account_ Account to enforce tier of.\\n    /// @param minimumTier_ Minimum tier for the account.\\n    modifier onlyTier(address account_, ITier.Tier minimumTier_) {\\n        _;\\n        require(\\n            isTier(account_, minimumTier_),\\n            \\\"MINIMUM_TIER\\\"\\n        );\\n    }\\n}\",\"keccak256\":\"0xe8d7c4db4628aade6b94c09b108829e89185ffddd890833a2685dda1a4928bf0\",\"license\":\"CAL\"}},\"version\":1}"
        }
      }
    },
    "sources": {
      "contracts/libraries/TierUtil.sol": {
        "ast": {
          "absolutePath": "contracts/libraries/TierUtil.sol",
          "exportedSymbols": {
            "ITier": [
              424
            ],
            "TierUtil": [
              246
            ]
          },
          "id": 247,
          "license": "CAL",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1,
              "literals": [
                "solidity",
                "0.8",
                ".10"
              ],
              "nodeType": "PragmaDirective",
              "src": "33:23:0"
            },
            {
              "absolutePath": "contracts/tier/ITier.sol",
              "file": "../tier/ITier.sol",
              "id": 3,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 247,
              "sourceUnit": 425,
              "src": "58:42:0",
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 2,
                    "name": "ITier",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "src": "67:5:0",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "TierUtil",
              "contractDependencies": [],
              "contractKind": "library",
              "documentation": {
                "id": 4,
                "nodeType": "StructuredDocumentation",
                "src": "102:800:0",
                "text": "@title TierUtil\n @notice `TierUtil` implements several pure functions that can be\n used to interface with reports.\n - `tierAtBlockFromReport`: Returns the highest status achieved relative to\n a block number and report. Statuses gained after that block are ignored.\n - `tierBlock`: Returns the block that a given tier has been held\n since according to a report.\n - `truncateTiersAbove`: Resets all the tiers above the reference tier.\n - `updateBlocksForTierRange`: Updates a report with a block\n number for every tier in a range.\n - `updateReportWithTierAtBlock`: Updates a report to a new tier.\n @dev Utilities to consistently read, write and manipulate tiers in reports.\n The low-level bit shifting can be difficult to get right so this factors\n that out."
              },
              "fullyImplemented": true,
              "id": 246,
              "linearizedBaseContracts": [
                246
              ],
              "name": "TierUtil",
              "nameLocation": "910:8:0",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": true,
                  "documentation": {
                    "id": 5,
                    "nodeType": "StructuredDocumentation",
                    "src": "926:62:0",
                    "text": "UNINITIALIZED is 0xFF.. as it is infinitely in the future."
                  },
                  "functionSelector": "81e45d9a",
                  "id": 8,
                  "mutability": "constant",
                  "name": "UNINITIALIZED",
                  "nameLocation": "1017:13:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 246,
                  "src": "993:114:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 6,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "993:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": {
                    "hexValue": "307846464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646",
                    "id": 7,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1041:66:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_115792089237316195423570985008687907853269984665640564039457584007913129639935_by_1",
                      "typeString": "int_const 1157...(70 digits omitted)...9935"
                    },
                    "value": "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                  },
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 60,
                    "nodeType": "Block",
                    "src": "1974:223:0",
                    "statements": [
                      {
                        "body": {
                          "id": 53,
                          "nodeType": "Block",
                          "src": "2019:142:0",
                          "statements": [
                            {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_uint32",
                                  "typeString": "uint32"
                                },
                                "id": 45,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "commonType": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          },
                                          "id": 38,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "leftExpression": {
                                            "id": 33,
                                            "name": "report_",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 11,
                                            "src": "2052:7:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "nodeType": "BinaryOperation",
                                          "operator": ">>",
                                          "rightExpression": {
                                            "components": [
                                              {
                                                "commonType": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                },
                                                "id": 36,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "leftExpression": {
                                                  "id": 34,
                                                  "name": "i_",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 20,
                                                  "src": "2064:2:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_uint256",
                                                    "typeString": "uint256"
                                                  }
                                                },
                                                "nodeType": "BinaryOperation",
                                                "operator": "*",
                                                "rightExpression": {
                                                  "hexValue": "3332",
                                                  "id": 35,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": true,
                                                  "kind": "number",
                                                  "lValueRequested": false,
                                                  "nodeType": "Literal",
                                                  "src": "2067:2:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_rational_32_by_1",
                                                    "typeString": "int_const 32"
                                                  },
                                                  "value": "32"
                                                },
                                                "src": "2064:5:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                }
                                              }
                                            ],
                                            "id": 37,
                                            "isConstant": false,
                                            "isInlineArray": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "nodeType": "TupleExpression",
                                            "src": "2063:7:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "src": "2052:18:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        ],
                                        "id": 32,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "lValueRequested": false,
                                        "nodeType": "ElementaryTypeNameExpression",
                                        "src": "2044:7:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_uint256_$",
                                          "typeString": "type(uint256)"
                                        },
                                        "typeName": {
                                          "id": 31,
                                          "name": "uint256",
                                          "nodeType": "ElementaryTypeName",
                                          "src": "2044:7:0",
                                          "typeDescriptions": {}
                                        }
                                      },
                                      "id": 39,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "typeConversion",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "2044:27:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "id": 30,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "2037:6:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_uint32_$",
                                      "typeString": "type(uint32)"
                                    },
                                    "typeName": {
                                      "id": 29,
                                      "name": "uint32",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "2037:6:0",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 40,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "2037:35:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint32",
                                    "typeString": "uint32"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": ">",
                                "rightExpression": {
                                  "arguments": [
                                    {
                                      "id": 43,
                                      "name": "blockNumber_",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 13,
                                      "src": "2082:12:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "id": 42,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "2075:6:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_uint32_$",
                                      "typeString": "type(uint32)"
                                    },
                                    "typeName": {
                                      "id": 41,
                                      "name": "uint32",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "2075:6:0",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 44,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "2075:20:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint32",
                                    "typeString": "uint32"
                                  }
                                },
                                "src": "2037:58:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 52,
                              "nodeType": "IfStatement",
                              "src": "2033:118:0",
                              "trueBody": {
                                "id": 51,
                                "nodeType": "Block",
                                "src": "2097:54:0",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "id": 48,
                                          "name": "i_",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 20,
                                          "src": "2133:2:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        ],
                                        "expression": {
                                          "id": 46,
                                          "name": "ITier",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 424,
                                          "src": "2122:5:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_type$_t_contract$_ITier_$424_$",
                                            "typeString": "type(contract ITier)"
                                          }
                                        },
                                        "id": 47,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "Tier",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 393,
                                        "src": "2122:10:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_enum$_Tier_$393_$",
                                          "typeString": "type(enum ITier.Tier)"
                                        }
                                      },
                                      "id": 49,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "typeConversion",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "2122:14:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_enum$_Tier_$393",
                                        "typeString": "enum ITier.Tier"
                                      }
                                    },
                                    "functionReturnParameters": 18,
                                    "id": 50,
                                    "nodeType": "Return",
                                    "src": "2115:21:0"
                                  }
                                ]
                              }
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 25,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 23,
                            "name": "i_",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 20,
                            "src": "2005:2:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "hexValue": "38",
                            "id": 24,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2010:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_8_by_1",
                              "typeString": "int_const 8"
                            },
                            "value": "8"
                          },
                          "src": "2005:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 54,
                        "initializationExpression": {
                          "assignments": [
                            20
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 20,
                              "mutability": "mutable",
                              "name": "i_",
                              "nameLocation": "1997:2:0",
                              "nodeType": "VariableDeclaration",
                              "scope": 54,
                              "src": "1989:10:0",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "typeName": {
                                "id": 19,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "1989:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "visibility": "internal"
                            }
                          ],
                          "id": 22,
                          "initialValue": {
                            "hexValue": "30",
                            "id": 21,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2002:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "1989:14:0"
                        },
                        "loopExpression": {
                          "expression": {
                            "id": 27,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "++",
                            "prefix": false,
                            "src": "2013:4:0",
                            "subExpression": {
                              "id": 26,
                              "name": "i_",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 20,
                              "src": "2013:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 28,
                          "nodeType": "ExpressionStatement",
                          "src": "2013:4:0"
                        },
                        "nodeType": "ForStatement",
                        "src": "1984:177:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "hexValue": "38",
                              "id": 57,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2188:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_8_by_1",
                                "typeString": "int_const 8"
                              },
                              "value": "8"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_8_by_1",
                                "typeString": "int_const 8"
                              }
                            ],
                            "expression": {
                              "id": 55,
                              "name": "ITier",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 424,
                              "src": "2177:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_ITier_$424_$",
                                "typeString": "type(contract ITier)"
                              }
                            },
                            "id": 56,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "Tier",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 393,
                            "src": "2177:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_Tier_$393_$",
                              "typeString": "type(enum ITier.Tier)"
                            }
                          },
                          "id": 58,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2177:13:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$393",
                            "typeString": "enum ITier.Tier"
                          }
                        },
                        "functionReturnParameters": 18,
                        "id": 59,
                        "nodeType": "Return",
                        "src": "2170:20:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 9,
                    "nodeType": "StructuredDocumentation",
                    "src": "1114:716:0",
                    "text": "Returns the highest tier achieved relative to a block number\n and report.\n Note that typically the report will be from the _current_ contract\n state, i.e. `block.number` but not always. Tiers gained after the\n reference block are ignored.\n When the `report` comes from a later block than the `blockNumber` this\n means the user must have held the tier continuously from `blockNumber`\n _through_ to the report block.\n I.e. NOT a snapshot.\n @param report_ A report as per `ITier`.\n @param blockNumber_ The block number to check the tiers against.\n @return The highest tier held since `blockNumber` as per `report`."
                  },
                  "id": 61,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "tierAtBlockFromReport",
                  "nameLocation": "1844:21:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 14,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 11,
                        "mutability": "mutable",
                        "name": "report_",
                        "nameLocation": "1883:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 61,
                        "src": "1875:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 10,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1875:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 13,
                        "mutability": "mutable",
                        "name": "blockNumber_",
                        "nameLocation": "1908:12:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 61,
                        "src": "1900:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 12,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1900:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1865:61:0"
                  },
                  "returnParameters": {
                    "id": 18,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 17,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 61,
                        "src": "1958:10:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Tier_$393",
                          "typeString": "enum ITier.Tier"
                        },
                        "typeName": {
                          "id": 16,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 15,
                            "name": "ITier.Tier",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 393,
                            "src": "1958:10:0"
                          },
                          "referencedDeclaration": 393,
                          "src": "1958:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$393",
                            "typeString": "enum ITier.Tier"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1957:12:0"
                  },
                  "scope": 246,
                  "src": "1835:362:0",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 106,
                    "nodeType": "Block",
                    "src": "2713:327:0",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_enum$_Tier_$393",
                            "typeString": "enum ITier.Tier"
                          },
                          "id": 76,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 72,
                            "name": "tier_",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 67,
                            "src": "2828:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_Tier_$393",
                              "typeString": "enum ITier.Tier"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "expression": {
                              "expression": {
                                "id": 73,
                                "name": "ITier",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 424,
                                "src": "2837:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_ITier_$424_$",
                                  "typeString": "type(contract ITier)"
                                }
                              },
                              "id": 74,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "Tier",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 393,
                              "src": "2837:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_enum$_Tier_$393_$",
                                "typeString": "type(enum ITier.Tier)"
                              }
                            },
                            "id": 75,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberName": "ZERO",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 384,
                            "src": "2837:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_Tier_$393",
                              "typeString": "enum ITier.Tier"
                            }
                          },
                          "src": "2828:24:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 80,
                        "nodeType": "IfStatement",
                        "src": "2824:43:0",
                        "trueBody": {
                          "id": 79,
                          "nodeType": "Block",
                          "src": "2854:13:0",
                          "statements": [
                            {
                              "expression": {
                                "hexValue": "30",
                                "id": 77,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "2863:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "functionReturnParameters": 71,
                              "id": 78,
                              "nodeType": "Return",
                              "src": "2856:8:0"
                            }
                          ]
                        }
                      },
                      {
                        "assignments": [
                          82
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 82,
                            "mutability": "mutable",
                            "name": "offset_",
                            "nameLocation": "2885:7:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 106,
                            "src": "2877:15:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 81,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "2877:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 92,
                        "initialValue": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 91,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "components": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 88,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "arguments": [
                                    {
                                      "id": 85,
                                      "name": "tier_",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 67,
                                      "src": "2904:5:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_enum$_Tier_$393",
                                        "typeString": "enum ITier.Tier"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_enum$_Tier_$393",
                                        "typeString": "enum ITier.Tier"
                                      }
                                    ],
                                    "id": 84,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "2896:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_uint256_$",
                                      "typeString": "type(uint256)"
                                    },
                                    "typeName": {
                                      "id": 83,
                                      "name": "uint256",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "2896:7:0",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 86,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "2896:14:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "-",
                                "rightExpression": {
                                  "hexValue": "31",
                                  "id": 87,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "2913:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_1_by_1",
                                    "typeString": "int_const 1"
                                  },
                                  "value": "1"
                                },
                                "src": "2896:18:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "id": 89,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "2895:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "*",
                          "rightExpression": {
                            "hexValue": "3332",
                            "id": 90,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2918:2:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_32_by_1",
                              "typeString": "int_const 32"
                            },
                            "value": "32"
                          },
                          "src": "2895:25:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2877:43:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 101,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "id": 99,
                                        "name": "report_",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 64,
                                        "src": "2990:7:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": ">>",
                                      "rightExpression": {
                                        "id": 100,
                                        "name": "offset_",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 82,
                                        "src": "3001:7:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "2990:18:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "id": 98,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "2965:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_uint256_$",
                                      "typeString": "type(uint256)"
                                    },
                                    "typeName": {
                                      "id": 97,
                                      "name": "uint256",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "2965:7:0",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 102,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "2965:57:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "id": 96,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "2945:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_uint32_$",
                                  "typeString": "type(uint32)"
                                },
                                "typeName": {
                                  "id": 95,
                                  "name": "uint32",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "2945:6:0",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 103,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2945:87:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            ],
                            "id": 94,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "2937:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_uint256_$",
                              "typeString": "type(uint256)"
                            },
                            "typeName": {
                              "id": 93,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "2937:7:0",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 104,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2937:96:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 71,
                        "id": 105,
                        "nodeType": "Return",
                        "src": "2930:103:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 62,
                    "nodeType": "StructuredDocumentation",
                    "src": "2203:391:0",
                    "text": "Returns the block that a given tier has been held since from a report.\n The report MUST encode \"never\" as 0xFFFFFFFF. This ensures\n compatibility with `tierAtBlockFromReport`.\n @param report_ The report to read a block number from.\n @param tier_ The Tier to read the block number for.\n @return The block number this has been held since."
                  },
                  "id": 107,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "tierBlock",
                  "nameLocation": "2608:9:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 68,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 64,
                        "mutability": "mutable",
                        "name": "report_",
                        "nameLocation": "2626:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 107,
                        "src": "2618:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 63,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2618:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 67,
                        "mutability": "mutable",
                        "name": "tier_",
                        "nameLocation": "2646:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 107,
                        "src": "2635:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Tier_$393",
                          "typeString": "enum ITier.Tier"
                        },
                        "typeName": {
                          "id": 66,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 65,
                            "name": "ITier.Tier",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 393,
                            "src": "2635:10:0"
                          },
                          "referencedDeclaration": 393,
                          "src": "2635:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$393",
                            "typeString": "enum ITier.Tier"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2617:35:0"
                  },
                  "returnParameters": {
                    "id": 71,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 70,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 107,
                        "src": "2700:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 69,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2700:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2699:9:0"
                  },
                  "scope": 246,
                  "src": "2599:441:0",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 140,
                    "nodeType": "Block",
                    "src": "3397:149:0",
                    "statements": [
                      {
                        "assignments": [
                          119
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 119,
                            "mutability": "mutable",
                            "name": "offset_",
                            "nameLocation": "3415:7:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 140,
                            "src": "3407:15:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 118,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "3407:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 126,
                        "initialValue": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 125,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "arguments": [
                              {
                                "id": 122,
                                "name": "tier_",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 113,
                                "src": "3433:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_Tier_$393",
                                  "typeString": "enum ITier.Tier"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_enum$_Tier_$393",
                                  "typeString": "enum ITier.Tier"
                                }
                              ],
                              "id": 121,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "3425:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_uint256_$",
                                "typeString": "type(uint256)"
                              },
                              "typeName": {
                                "id": 120,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "3425:7:0",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 123,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3425:14:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "*",
                          "rightExpression": {
                            "hexValue": "3332",
                            "id": 124,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3442:2:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_32_by_1",
                              "typeString": "int_const 32"
                            },
                            "value": "32"
                          },
                          "src": "3425:19:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "3407:37:0"
                      },
                      {
                        "assignments": [
                          128
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 128,
                            "mutability": "mutable",
                            "name": "mask_",
                            "nameLocation": "3462:5:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 140,
                            "src": "3454:13:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 127,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "3454:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 135,
                        "initialValue": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 134,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "components": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 131,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 129,
                                  "name": "UNINITIALIZED",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 8,
                                  "src": "3471:13:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": ">>",
                                "rightExpression": {
                                  "id": 130,
                                  "name": "offset_",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 119,
                                  "src": "3488:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "3471:24:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "id": 132,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "3470:26:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<<",
                          "rightExpression": {
                            "id": 133,
                            "name": "offset_",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 119,
                            "src": "3500:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "3470:37:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "3454:53:0"
                      },
                      {
                        "expression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 138,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 136,
                            "name": "report_",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 110,
                            "src": "3524:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "|",
                          "rightExpression": {
                            "id": 137,
                            "name": "mask_",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 128,
                            "src": "3534:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "3524:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 117,
                        "id": 139,
                        "nodeType": "Return",
                        "src": "3517:22:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 108,
                    "nodeType": "StructuredDocumentation",
                    "src": "3046:223:0",
                    "text": "Resets all the tiers above the reference tier to 0xFFFFFFFF.\n @param report_ Report to truncate with high bit 1s.\n @param tier_ Tier to truncate above (exclusive).\n @return Truncated report."
                  },
                  "id": 141,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "truncateTiersAbove",
                  "nameLocation": "3283:18:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 114,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 110,
                        "mutability": "mutable",
                        "name": "report_",
                        "nameLocation": "3310:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 141,
                        "src": "3302:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 109,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3302:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 113,
                        "mutability": "mutable",
                        "name": "tier_",
                        "nameLocation": "3330:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 141,
                        "src": "3319:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Tier_$393",
                          "typeString": "enum ITier.Tier"
                        },
                        "typeName": {
                          "id": 112,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 111,
                            "name": "ITier.Tier",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 393,
                            "src": "3319:10:0"
                          },
                          "referencedDeclaration": 393,
                          "src": "3319:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$393",
                            "typeString": "enum ITier.Tier"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3301:35:0"
                  },
                  "returnParameters": {
                    "id": 117,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 116,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 141,
                        "src": "3384:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 115,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3384:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3383:9:0"
                  },
                  "scope": 246,
                  "src": "3274:272:0",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 212,
                    "nodeType": "Block",
                    "src": "4248:330:0",
                    "statements": [
                      {
                        "assignments": [
                          158
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 158,
                            "mutability": "mutable",
                            "name": "offset_",
                            "nameLocation": "4266:7:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 212,
                            "src": "4258:15:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 157,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "4258:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 159,
                        "nodeType": "VariableDeclarationStatement",
                        "src": "4258:15:0"
                      },
                      {
                        "body": {
                          "id": 208,
                          "nodeType": "Block",
                          "src": "4352:196:0",
                          "statements": [
                            {
                              "expression": {
                                "id": 180,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 176,
                                  "name": "offset_",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 158,
                                  "src": "4366:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 179,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "id": 177,
                                    "name": "i_",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 161,
                                    "src": "4376:2:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "*",
                                  "rightExpression": {
                                    "hexValue": "3332",
                                    "id": 178,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "4381:2:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_32_by_1",
                                      "typeString": "int_const 32"
                                    },
                                    "value": "32"
                                  },
                                  "src": "4376:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "4366:17:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 181,
                              "nodeType": "ExpressionStatement",
                              "src": "4366:17:0"
                            },
                            {
                              "expression": {
                                "id": 206,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 182,
                                  "name": "report_",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 144,
                                  "src": "4397:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 205,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "components": [
                                      {
                                        "commonType": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "id": 197,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "id": 183,
                                          "name": "report_",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 144,
                                          "src": "4424:7:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "&",
                                        "rightExpression": {
                                          "id": 196,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "nodeType": "UnaryOperation",
                                          "operator": "~",
                                          "prefix": true,
                                          "src": "4434:51:0",
                                          "subExpression": {
                                            "arguments": [
                                              {
                                                "commonType": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                },
                                                "id": 194,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "leftExpression": {
                                                  "arguments": [
                                                    {
                                                      "arguments": [
                                                        {
                                                          "id": 190,
                                                          "name": "UNINITIALIZED",
                                                          "nodeType": "Identifier",
                                                          "overloadedDeclarations": [],
                                                          "referencedDeclaration": 8,
                                                          "src": "4458:13:0",
                                                          "typeDescriptions": {
                                                            "typeIdentifier": "t_uint256",
                                                            "typeString": "uint256"
                                                          }
                                                        }
                                                      ],
                                                      "expression": {
                                                        "argumentTypes": [
                                                          {
                                                            "typeIdentifier": "t_uint256",
                                                            "typeString": "uint256"
                                                          }
                                                        ],
                                                        "id": 189,
                                                        "isConstant": false,
                                                        "isLValue": false,
                                                        "isPure": true,
                                                        "lValueRequested": false,
                                                        "nodeType": "ElementaryTypeNameExpression",
                                                        "src": "4451:6:0",
                                                        "typeDescriptions": {
                                                          "typeIdentifier": "t_type$_t_uint32_$",
                                                          "typeString": "type(uint32)"
                                                        },
                                                        "typeName": {
                                                          "id": 188,
                                                          "name": "uint32",
                                                          "nodeType": "ElementaryTypeName",
                                                          "src": "4451:6:0",
                                                          "typeDescriptions": {}
                                                        }
                                                      },
                                                      "id": 191,
                                                      "isConstant": false,
                                                      "isLValue": false,
                                                      "isPure": true,
                                                      "kind": "typeConversion",
                                                      "lValueRequested": false,
                                                      "names": [],
                                                      "nodeType": "FunctionCall",
                                                      "src": "4451:21:0",
                                                      "tryCall": false,
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_uint32",
                                                        "typeString": "uint32"
                                                      }
                                                    }
                                                  ],
                                                  "expression": {
                                                    "argumentTypes": [
                                                      {
                                                        "typeIdentifier": "t_uint32",
                                                        "typeString": "uint32"
                                                      }
                                                    ],
                                                    "id": 187,
                                                    "isConstant": false,
                                                    "isLValue": false,
                                                    "isPure": true,
                                                    "lValueRequested": false,
                                                    "nodeType": "ElementaryTypeNameExpression",
                                                    "src": "4443:7:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_type$_t_uint256_$",
                                                      "typeString": "type(uint256)"
                                                    },
                                                    "typeName": {
                                                      "id": 186,
                                                      "name": "uint256",
                                                      "nodeType": "ElementaryTypeName",
                                                      "src": "4443:7:0",
                                                      "typeDescriptions": {}
                                                    }
                                                  },
                                                  "id": 192,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": true,
                                                  "kind": "typeConversion",
                                                  "lValueRequested": false,
                                                  "names": [],
                                                  "nodeType": "FunctionCall",
                                                  "src": "4443:30:0",
                                                  "tryCall": false,
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_uint256",
                                                    "typeString": "uint256"
                                                  }
                                                },
                                                "nodeType": "BinaryOperation",
                                                "operator": "<<",
                                                "rightExpression": {
                                                  "id": 193,
                                                  "name": "offset_",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 158,
                                                  "src": "4477:7:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_uint256",
                                                    "typeString": "uint256"
                                                  }
                                                },
                                                "src": "4443:41:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                }
                                              }
                                            ],
                                            "expression": {
                                              "argumentTypes": [
                                                {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                }
                                              ],
                                              "id": 185,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "lValueRequested": false,
                                              "nodeType": "ElementaryTypeNameExpression",
                                              "src": "4435:7:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_type$_t_uint256_$",
                                                "typeString": "type(uint256)"
                                              },
                                              "typeName": {
                                                "id": 184,
                                                "name": "uint256",
                                                "nodeType": "ElementaryTypeName",
                                                "src": "4435:7:0",
                                                "typeDescriptions": {}
                                              }
                                            },
                                            "id": 195,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "kind": "typeConversion",
                                            "lValueRequested": false,
                                            "names": [],
                                            "nodeType": "FunctionCall",
                                            "src": "4435:50:0",
                                            "tryCall": false,
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "src": "4424:61:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      }
                                    ],
                                    "id": 198,
                                    "isConstant": false,
                                    "isInlineArray": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "TupleExpression",
                                    "src": "4423:63:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "|",
                                  "rightExpression": {
                                    "arguments": [
                                      {
                                        "commonType": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "id": 203,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "id": 201,
                                          "name": "blockNumber_",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 152,
                                          "src": "4513:12:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "<<",
                                        "rightExpression": {
                                          "id": 202,
                                          "name": "offset_",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 158,
                                          "src": "4529:7:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "src": "4513:23:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      ],
                                      "id": 200,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "nodeType": "ElementaryTypeNameExpression",
                                      "src": "4505:7:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_uint256_$",
                                        "typeString": "type(uint256)"
                                      },
                                      "typeName": {
                                        "id": 199,
                                        "name": "uint256",
                                        "nodeType": "ElementaryTypeName",
                                        "src": "4505:7:0",
                                        "typeDescriptions": {}
                                      }
                                    },
                                    "id": 204,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "typeConversion",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "4505:32:0",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "4423:114:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "4397:140:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 207,
                              "nodeType": "ExpressionStatement",
                              "src": "4397:140:0"
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 172,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 167,
                            "name": "i_",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 161,
                            "src": "4322:2:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "arguments": [
                              {
                                "id": 170,
                                "name": "endTier_",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 150,
                                "src": "4335:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_Tier_$393",
                                  "typeString": "enum ITier.Tier"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_enum$_Tier_$393",
                                  "typeString": "enum ITier.Tier"
                                }
                              ],
                              "id": 169,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "4327:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_uint256_$",
                                "typeString": "type(uint256)"
                              },
                              "typeName": {
                                "id": 168,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "4327:7:0",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 171,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4327:17:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "4322:22:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 209,
                        "initializationExpression": {
                          "assignments": [
                            161
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 161,
                              "mutability": "mutable",
                              "name": "i_",
                              "nameLocation": "4296:2:0",
                              "nodeType": "VariableDeclaration",
                              "scope": 209,
                              "src": "4288:10:0",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "typeName": {
                                "id": 160,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "4288:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "visibility": "internal"
                            }
                          ],
                          "id": 166,
                          "initialValue": {
                            "arguments": [
                              {
                                "id": 164,
                                "name": "startTier_",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 147,
                                "src": "4309:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_Tier_$393",
                                  "typeString": "enum ITier.Tier"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_enum$_Tier_$393",
                                  "typeString": "enum ITier.Tier"
                                }
                              ],
                              "id": 163,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "4301:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_uint256_$",
                                "typeString": "type(uint256)"
                              },
                              "typeName": {
                                "id": 162,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "4301:7:0",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 165,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4301:19:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "4288:32:0"
                        },
                        "loopExpression": {
                          "expression": {
                            "id": 174,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "++",
                            "prefix": false,
                            "src": "4346:4:0",
                            "subExpression": {
                              "id": 173,
                              "name": "i_",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 161,
                              "src": "4346:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 175,
                          "nodeType": "ExpressionStatement",
                          "src": "4346:4:0"
                        },
                        "nodeType": "ForStatement",
                        "src": "4283:265:0"
                      },
                      {
                        "expression": {
                          "id": 210,
                          "name": "report_",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 144,
                          "src": "4564:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 156,
                        "id": 211,
                        "nodeType": "Return",
                        "src": "4557:14:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 142,
                    "nodeType": "StructuredDocumentation",
                    "src": "3552:492:0",
                    "text": "Updates a report with a block number for every status integer in a\n range.\n Does nothing if the end status is equal or less than the start status.\n @param report_ The report to update.\n @param startTier_ The `Tier` at the start of the range (exclusive).\n @param endTier_ The `Tier` at the end of the range (inclusive).\n @param blockNumber_ The block number to set for every status\n in the range.\n @return The updated report."
                  },
                  "id": 213,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "updateBlocksForTierRange",
                  "nameLocation": "4058:24:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 153,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 144,
                        "mutability": "mutable",
                        "name": "report_",
                        "nameLocation": "4100:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 213,
                        "src": "4092:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 143,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4092:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 147,
                        "mutability": "mutable",
                        "name": "startTier_",
                        "nameLocation": "4128:10:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 213,
                        "src": "4117:21:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Tier_$393",
                          "typeString": "enum ITier.Tier"
                        },
                        "typeName": {
                          "id": 146,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 145,
                            "name": "ITier.Tier",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 393,
                            "src": "4117:10:0"
                          },
                          "referencedDeclaration": 393,
                          "src": "4117:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$393",
                            "typeString": "enum ITier.Tier"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 150,
                        "mutability": "mutable",
                        "name": "endTier_",
                        "nameLocation": "4159:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 213,
                        "src": "4148:19:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Tier_$393",
                          "typeString": "enum ITier.Tier"
                        },
                        "typeName": {
                          "id": 149,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 148,
                            "name": "ITier.Tier",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 393,
                            "src": "4148:10:0"
                          },
                          "referencedDeclaration": 393,
                          "src": "4148:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$393",
                            "typeString": "enum ITier.Tier"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 152,
                        "mutability": "mutable",
                        "name": "blockNumber_",
                        "nameLocation": "4185:12:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 213,
                        "src": "4177:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 151,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4177:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4082:121:0"
                  },
                  "returnParameters": {
                    "id": 156,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 155,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 213,
                        "src": "4235:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 154,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4235:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4234:9:0"
                  },
                  "scope": 246,
                  "src": "4049:529:0",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 244,
                    "nodeType": "Block",
                    "src": "5706:259:0",
                    "statements": [
                      {
                        "expression": {
                          "condition": {
                            "commonType": {
                              "typeIdentifier": "t_enum$_Tier_$393",
                              "typeString": "enum ITier.Tier"
                            },
                            "id": 231,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 229,
                              "name": "endTier_",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 222,
                              "src": "5723:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_Tier_$393",
                                "typeString": "enum ITier.Tier"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "<",
                            "rightExpression": {
                              "id": 230,
                              "name": "startTier_",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 219,
                              "src": "5734:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_Tier_$393",
                                "typeString": "enum ITier.Tier"
                              }
                            },
                            "src": "5723:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "falseExpression": {
                            "arguments": [
                              {
                                "id": 237,
                                "name": "report_",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 216,
                                "src": "5853:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "id": 238,
                                "name": "startTier_",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 219,
                                "src": "5878:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_Tier_$393",
                                  "typeString": "enum ITier.Tier"
                                }
                              },
                              {
                                "id": 239,
                                "name": "endTier_",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 222,
                                "src": "5906:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_Tier_$393",
                                  "typeString": "enum ITier.Tier"
                                }
                              },
                              {
                                "id": 240,
                                "name": "blockNumber_",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 224,
                                "src": "5932:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_enum$_Tier_$393",
                                  "typeString": "enum ITier.Tier"
                                },
                                {
                                  "typeIdentifier": "t_enum$_Tier_$393",
                                  "typeString": "enum ITier.Tier"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 236,
                              "name": "updateBlocksForTierRange",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 213,
                              "src": "5811:24:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_enum$_Tier_$393_$_t_enum$_Tier_$393_$_t_uint256_$returns$_t_uint256_$",
                                "typeString": "function (uint256,enum ITier.Tier,enum ITier.Tier,uint256) pure returns (uint256)"
                              }
                            },
                            "id": 241,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "5811:147:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 242,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "Conditional",
                          "src": "5723:235:0",
                          "trueExpression": {
                            "arguments": [
                              {
                                "id": 233,
                                "name": "report_",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 216,
                                "src": "5778:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "id": 234,
                                "name": "endTier_",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 222,
                                "src": "5787:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_Tier_$393",
                                  "typeString": "enum ITier.Tier"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_enum$_Tier_$393",
                                  "typeString": "enum ITier.Tier"
                                }
                              ],
                              "id": 232,
                              "name": "truncateTiersAbove",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 141,
                              "src": "5759:18:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_enum$_Tier_$393_$returns$_t_uint256_$",
                                "typeString": "function (uint256,enum ITier.Tier) pure returns (uint256)"
                              }
                            },
                            "id": 235,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "5759:37:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 228,
                        "id": 243,
                        "nodeType": "Return",
                        "src": "5716:242:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 214,
                    "nodeType": "StructuredDocumentation",
                    "src": "4584:915:0",
                    "text": "Updates a report to a new status.\n Internally dispatches to `truncateTiersAbove` and\n `updateBlocksForTierRange`.\n The dispatch is based on whether the new tier is above or below the\n current tier.\n The `startTier_` MUST match the result of `tierAtBlockFromReport`.\n It is expected the caller will know the current tier when\n calling this function and need to do other things in the calling scope\n with it.\n @param report_ The report to update.\n @param startTier_ The tier to start updating relative to. Data above\n this tier WILL BE LOST so probably should be the current tier.\n @param endTier_ The new highest tier held, at the given block number.\n @param blockNumber_ The block number to update the highest tier to, and\n intermediate tiers from `startTier_`.\n @return The updated report."
                  },
                  "id": 245,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "updateReportWithTierAtBlock",
                  "nameLocation": "5513:27:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 225,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 216,
                        "mutability": "mutable",
                        "name": "report_",
                        "nameLocation": "5558:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 245,
                        "src": "5550:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 215,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "5550:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 219,
                        "mutability": "mutable",
                        "name": "startTier_",
                        "nameLocation": "5586:10:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 245,
                        "src": "5575:21:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Tier_$393",
                          "typeString": "enum ITier.Tier"
                        },
                        "typeName": {
                          "id": 218,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 217,
                            "name": "ITier.Tier",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 393,
                            "src": "5575:10:0"
                          },
                          "referencedDeclaration": 393,
                          "src": "5575:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$393",
                            "typeString": "enum ITier.Tier"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 222,
                        "mutability": "mutable",
                        "name": "endTier_",
                        "nameLocation": "5617:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 245,
                        "src": "5606:19:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Tier_$393",
                          "typeString": "enum ITier.Tier"
                        },
                        "typeName": {
                          "id": 221,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 220,
                            "name": "ITier.Tier",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 393,
                            "src": "5606:10:0"
                          },
                          "referencedDeclaration": 393,
                          "src": "5606:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$393",
                            "typeString": "enum ITier.Tier"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 224,
                        "mutability": "mutable",
                        "name": "blockNumber_",
                        "nameLocation": "5643:12:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 245,
                        "src": "5635:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 223,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "5635:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5540:121:0"
                  },
                  "returnParameters": {
                    "id": 228,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 227,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 245,
                        "src": "5693:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 226,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "5693:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5692:9:0"
                  },
                  "scope": 246,
                  "src": "5504:461:0",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                }
              ],
              "scope": 247,
              "src": "902:5066:0",
              "usedErrors": []
            }
          ],
          "src": "33:5935:0"
        },
        "id": 0
      },
      "contracts/test/TierByConstructionTest.sol": {
        "ast": {
          "absolutePath": "contracts/test/TierByConstructionTest.sol",
          "exportedSymbols": {
            "ITier": [
              424
            ],
            "TierByConstruction": [
              494
            ],
            "TierByConstructionTest": [
              380
            ]
          },
          "id": 381,
          "license": "CAL",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 248,
              "literals": [
                "solidity",
                "0.8",
                ".10"
              ],
              "nodeType": "PragmaDirective",
              "src": "33:23:1"
            },
            {
              "absolutePath": "contracts/tier/ITier.sol",
              "file": "../tier/ITier.sol",
              "id": 250,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 381,
              "sourceUnit": 425,
              "src": "58:42:1",
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 249,
                    "name": "ITier",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "src": "67:5:1",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "absolutePath": "contracts/tier/TierByConstruction.sol",
              "file": "../tier/TierByConstruction.sol",
              "id": 252,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 381,
              "sourceUnit": 495,
              "src": "101:68:1",
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 251,
                    "name": "TierByConstruction",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "src": "110:18:1",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "abstract": false,
              "baseContracts": [
                {
                  "baseName": {
                    "id": 254,
                    "name": "TierByConstruction",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 494,
                    "src": "342:18:1"
                  },
                  "id": 255,
                  "nodeType": "InheritanceSpecifier",
                  "src": "342:18:1"
                }
              ],
              "canonicalName": "TierByConstructionTest",
              "contractDependencies": [],
              "contractKind": "contract",
              "documentation": {
                "id": 253,
                "nodeType": "StructuredDocumentation",
                "src": "171:136:1",
                "text": "@title TierByConstructionTest\n An empty contract that facilitates tests enumerating behaviour of the\n modifiers at each tier."
              },
              "fullyImplemented": true,
              "id": 380,
              "linearizedBaseContracts": [
                380,
                494
              ],
              "name": "TierByConstructionTest",
              "nameLocation": "316:22:1",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "body": {
                    "id": 265,
                    "nodeType": "Block",
                    "src": "492:3:1",
                    "statements": []
                  },
                  "documentation": {
                    "id": 256,
                    "nodeType": "StructuredDocumentation",
                    "src": "368:60:1",
                    "text": "@param tier_ The tier contract for `TierByConstruction`."
                  },
                  "id": 266,
                  "implemented": true,
                  "kind": "constructor",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "id": 262,
                          "name": "tier_",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 259,
                          "src": "485:5:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_ITier_$424",
                            "typeString": "contract ITier"
                          }
                        }
                      ],
                      "id": 263,
                      "kind": "baseConstructorSpecifier",
                      "modifierName": {
                        "id": 261,
                        "name": "TierByConstruction",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 494,
                        "src": "466:18:1"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "466:25:1"
                    }
                  ],
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 260,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 259,
                        "mutability": "mutable",
                        "name": "tier_",
                        "nameLocation": "451:5:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 266,
                        "src": "445:11:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_ITier_$424",
                          "typeString": "contract ITier"
                        },
                        "typeName": {
                          "id": 258,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 257,
                            "name": "ITier",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 424,
                            "src": "445:5:1"
                          },
                          "referencedDeclaration": 424,
                          "src": "445:5:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_ITier_$424",
                            "typeString": "contract ITier"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "444:13:1"
                  },
                  "returnParameters": {
                    "id": 264,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "492:0:1"
                  },
                  "scope": 380,
                  "src": "433:62:1",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 270,
                    "nodeType": "Block",
                    "src": "672:3:1",
                    "statements": []
                  },
                  "documentation": {
                    "id": 267,
                    "nodeType": "StructuredDocumentation",
                    "src": "541:71:1",
                    "text": "External function with no modifier to use as a control for testing."
                  },
                  "functionSelector": "cb457d47",
                  "id": 271,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "unlimited",
                  "nameLocation": "626:9:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 268,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "635:2:1"
                  },
                  "returnParameters": {
                    "id": 269,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "672:0:1"
                  },
                  "scope": 380,
                  "src": "617:58:1",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 282,
                    "nodeType": "Block",
                    "src": "857:3:1",
                    "statements": []
                  },
                  "documentation": {
                    "id": 272,
                    "nodeType": "StructuredDocumentation",
                    "src": "721:33:1",
                    "text": "Requires `Tier.ZERO` to call."
                  },
                  "functionSelector": "7bcd3dc5",
                  "id": 283,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "expression": {
                            "id": 275,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "824:3:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 276,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "824:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        {
                          "expression": {
                            "expression": {
                              "id": 277,
                              "name": "ITier",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 424,
                              "src": "836:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_ITier_$424_$",
                                "typeString": "type(contract ITier)"
                              }
                            },
                            "id": 278,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "Tier",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 393,
                            "src": "836:10:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_Tier_$393_$",
                              "typeString": "type(enum ITier.Tier)"
                            }
                          },
                          "id": 279,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "ZERO",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 384,
                          "src": "836:15:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$393",
                            "typeString": "enum ITier.Tier"
                          }
                        }
                      ],
                      "id": 280,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 274,
                        "name": "onlyTier",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 493,
                        "src": "815:8:1"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "815:37:1"
                    }
                  ],
                  "name": "ifZero",
                  "nameLocation": "768:6:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 273,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "774:2:1"
                  },
                  "returnParameters": {
                    "id": 281,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "857:0:1"
                  },
                  "scope": 380,
                  "src": "759:101:1",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 294,
                    "nodeType": "Block",
                    "src": "1039:3:1",
                    "statements": []
                  },
                  "documentation": {
                    "id": 284,
                    "nodeType": "StructuredDocumentation",
                    "src": "906:32:1",
                    "text": "Requires `Tier.ONE` to call."
                  },
                  "functionSelector": "d1abd2de",
                  "id": 295,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "expression": {
                            "id": 287,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1007:3:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 288,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "1007:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        {
                          "expression": {
                            "expression": {
                              "id": 289,
                              "name": "ITier",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 424,
                              "src": "1019:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_ITier_$424_$",
                                "typeString": "type(contract ITier)"
                              }
                            },
                            "id": 290,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "Tier",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 393,
                            "src": "1019:10:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_Tier_$393_$",
                              "typeString": "type(enum ITier.Tier)"
                            }
                          },
                          "id": 291,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "ONE",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 385,
                          "src": "1019:14:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$393",
                            "typeString": "enum ITier.Tier"
                          }
                        }
                      ],
                      "id": 292,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 286,
                        "name": "onlyTier",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 493,
                        "src": "998:8:1"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "998:36:1"
                    }
                  ],
                  "name": "ifOne",
                  "nameLocation": "952:5:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 285,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "957:2:1"
                  },
                  "returnParameters": {
                    "id": 293,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1039:0:1"
                  },
                  "scope": 380,
                  "src": "943:99:1",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 306,
                    "nodeType": "Block",
                    "src": "1221:3:1",
                    "statements": []
                  },
                  "documentation": {
                    "id": 296,
                    "nodeType": "StructuredDocumentation",
                    "src": "1088:32:1",
                    "text": "Requires `Tier.TWO` to call."
                  },
                  "functionSelector": "e149ceb5",
                  "id": 307,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "expression": {
                            "id": 299,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1189:3:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 300,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "1189:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        {
                          "expression": {
                            "expression": {
                              "id": 301,
                              "name": "ITier",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 424,
                              "src": "1201:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_ITier_$424_$",
                                "typeString": "type(contract ITier)"
                              }
                            },
                            "id": 302,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "Tier",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 393,
                            "src": "1201:10:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_Tier_$393_$",
                              "typeString": "type(enum ITier.Tier)"
                            }
                          },
                          "id": 303,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "TWO",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 386,
                          "src": "1201:14:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$393",
                            "typeString": "enum ITier.Tier"
                          }
                        }
                      ],
                      "id": 304,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 298,
                        "name": "onlyTier",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 493,
                        "src": "1180:8:1"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "1180:36:1"
                    }
                  ],
                  "name": "ifTwo",
                  "nameLocation": "1134:5:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 297,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1139:2:1"
                  },
                  "returnParameters": {
                    "id": 305,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1221:0:1"
                  },
                  "scope": 380,
                  "src": "1125:99:1",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 318,
                    "nodeType": "Block",
                    "src": "1409:3:1",
                    "statements": []
                  },
                  "documentation": {
                    "id": 308,
                    "nodeType": "StructuredDocumentation",
                    "src": "1270:34:1",
                    "text": "Requires `Tier.THREE` to call."
                  },
                  "functionSelector": "75bf2787",
                  "id": 319,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "expression": {
                            "id": 311,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1375:3:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 312,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "1375:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        {
                          "expression": {
                            "expression": {
                              "id": 313,
                              "name": "ITier",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 424,
                              "src": "1387:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_ITier_$424_$",
                                "typeString": "type(contract ITier)"
                              }
                            },
                            "id": 314,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "Tier",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 393,
                            "src": "1387:10:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_Tier_$393_$",
                              "typeString": "type(enum ITier.Tier)"
                            }
                          },
                          "id": 315,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "THREE",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 387,
                          "src": "1387:16:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$393",
                            "typeString": "enum ITier.Tier"
                          }
                        }
                      ],
                      "id": 316,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 310,
                        "name": "onlyTier",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 493,
                        "src": "1366:8:1"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "1366:38:1"
                    }
                  ],
                  "name": "ifThree",
                  "nameLocation": "1318:7:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 309,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1325:2:1"
                  },
                  "returnParameters": {
                    "id": 317,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1409:0:1"
                  },
                  "scope": 380,
                  "src": "1309:103:1",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 330,
                    "nodeType": "Block",
                    "src": "1594:3:1",
                    "statements": []
                  },
                  "documentation": {
                    "id": 320,
                    "nodeType": "StructuredDocumentation",
                    "src": "1458:33:1",
                    "text": "Requires `Tier.FOUR` to call."
                  },
                  "functionSelector": "3f152251",
                  "id": 331,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "expression": {
                            "id": 323,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1561:3:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 324,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "1561:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        {
                          "expression": {
                            "expression": {
                              "id": 325,
                              "name": "ITier",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 424,
                              "src": "1573:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_ITier_$424_$",
                                "typeString": "type(contract ITier)"
                              }
                            },
                            "id": 326,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "Tier",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 393,
                            "src": "1573:10:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_Tier_$393_$",
                              "typeString": "type(enum ITier.Tier)"
                            }
                          },
                          "id": 327,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "FOUR",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 388,
                          "src": "1573:15:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$393",
                            "typeString": "enum ITier.Tier"
                          }
                        }
                      ],
                      "id": 328,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 322,
                        "name": "onlyTier",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 493,
                        "src": "1552:8:1"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "1552:37:1"
                    }
                  ],
                  "name": "ifFour",
                  "nameLocation": "1505:6:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 321,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1511:2:1"
                  },
                  "returnParameters": {
                    "id": 329,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1594:0:1"
                  },
                  "scope": 380,
                  "src": "1496:101:1",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 342,
                    "nodeType": "Block",
                    "src": "1779:3:1",
                    "statements": []
                  },
                  "documentation": {
                    "id": 332,
                    "nodeType": "StructuredDocumentation",
                    "src": "1643:33:1",
                    "text": "Requires `Tier.FIVE` to call."
                  },
                  "functionSelector": "d78aafde",
                  "id": 343,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "expression": {
                            "id": 335,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1746:3:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 336,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "1746:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        {
                          "expression": {
                            "expression": {
                              "id": 337,
                              "name": "ITier",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 424,
                              "src": "1758:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_ITier_$424_$",
                                "typeString": "type(contract ITier)"
                              }
                            },
                            "id": 338,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "Tier",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 393,
                            "src": "1758:10:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_Tier_$393_$",
                              "typeString": "type(enum ITier.Tier)"
                            }
                          },
                          "id": 339,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "FIVE",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 389,
                          "src": "1758:15:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$393",
                            "typeString": "enum ITier.Tier"
                          }
                        }
                      ],
                      "id": 340,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 334,
                        "name": "onlyTier",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 493,
                        "src": "1737:8:1"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "1737:37:1"
                    }
                  ],
                  "name": "ifFive",
                  "nameLocation": "1690:6:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 333,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1696:2:1"
                  },
                  "returnParameters": {
                    "id": 341,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1779:0:1"
                  },
                  "scope": 380,
                  "src": "1681:101:1",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 354,
                    "nodeType": "Block",
                    "src": "1961:3:1",
                    "statements": []
                  },
                  "documentation": {
                    "id": 344,
                    "nodeType": "StructuredDocumentation",
                    "src": "1828:32:1",
                    "text": "Requires `Tier.SIX` to call."
                  },
                  "functionSelector": "6bdfcec6",
                  "id": 355,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "expression": {
                            "id": 347,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1929:3:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 348,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "1929:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        {
                          "expression": {
                            "expression": {
                              "id": 349,
                              "name": "ITier",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 424,
                              "src": "1941:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_ITier_$424_$",
                                "typeString": "type(contract ITier)"
                              }
                            },
                            "id": 350,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "Tier",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 393,
                            "src": "1941:10:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_Tier_$393_$",
                              "typeString": "type(enum ITier.Tier)"
                            }
                          },
                          "id": 351,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "SIX",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 390,
                          "src": "1941:14:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$393",
                            "typeString": "enum ITier.Tier"
                          }
                        }
                      ],
                      "id": 352,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 346,
                        "name": "onlyTier",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 493,
                        "src": "1920:8:1"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "1920:36:1"
                    }
                  ],
                  "name": "ifSix",
                  "nameLocation": "1874:5:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 345,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1879:2:1"
                  },
                  "returnParameters": {
                    "id": 353,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1961:0:1"
                  },
                  "scope": 380,
                  "src": "1865:99:1",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 366,
                    "nodeType": "Block",
                    "src": "2149:3:1",
                    "statements": []
                  },
                  "documentation": {
                    "id": 356,
                    "nodeType": "StructuredDocumentation",
                    "src": "2010:34:1",
                    "text": "Requires `Tier.SEVEN` to call."
                  },
                  "functionSelector": "7922deb5",
                  "id": 367,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "expression": {
                            "id": 359,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "2115:3:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 360,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "2115:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        {
                          "expression": {
                            "expression": {
                              "id": 361,
                              "name": "ITier",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 424,
                              "src": "2127:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_ITier_$424_$",
                                "typeString": "type(contract ITier)"
                              }
                            },
                            "id": 362,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "Tier",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 393,
                            "src": "2127:10:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_Tier_$393_$",
                              "typeString": "type(enum ITier.Tier)"
                            }
                          },
                          "id": 363,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "SEVEN",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 391,
                          "src": "2127:16:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$393",
                            "typeString": "enum ITier.Tier"
                          }
                        }
                      ],
                      "id": 364,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 358,
                        "name": "onlyTier",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 493,
                        "src": "2106:8:1"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "2106:38:1"
                    }
                  ],
                  "name": "ifSeven",
                  "nameLocation": "2058:7:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 357,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2065:2:1"
                  },
                  "returnParameters": {
                    "id": 365,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2149:0:1"
                  },
                  "scope": 380,
                  "src": "2049:103:1",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 378,
                    "nodeType": "Block",
                    "src": "2337:3:1",
                    "statements": []
                  },
                  "documentation": {
                    "id": 368,
                    "nodeType": "StructuredDocumentation",
                    "src": "2198:34:1",
                    "text": "Requires `Tier.EIGHT` to call."
                  },
                  "functionSelector": "1fb3d151",
                  "id": 379,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "expression": {
                            "id": 371,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "2303:3:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 372,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "2303:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        {
                          "expression": {
                            "expression": {
                              "id": 373,
                              "name": "ITier",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 424,
                              "src": "2315:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_ITier_$424_$",
                                "typeString": "type(contract ITier)"
                              }
                            },
                            "id": 374,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "Tier",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 393,
                            "src": "2315:10:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_Tier_$393_$",
                              "typeString": "type(enum ITier.Tier)"
                            }
                          },
                          "id": 375,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "EIGHT",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 392,
                          "src": "2315:16:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$393",
                            "typeString": "enum ITier.Tier"
                          }
                        }
                      ],
                      "id": 376,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 370,
                        "name": "onlyTier",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 493,
                        "src": "2294:8:1"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "2294:38:1"
                    }
                  ],
                  "name": "ifEight",
                  "nameLocation": "2246:7:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 369,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2253:2:1"
                  },
                  "returnParameters": {
                    "id": 377,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2337:0:1"
                  },
                  "scope": 380,
                  "src": "2237:103:1",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 381,
              "src": "307:2075:1",
              "usedErrors": []
            }
          ],
          "src": "33:2349:1"
        },
        "id": 1
      },
      "contracts/tier/ITier.sol": {
        "ast": {
          "absolutePath": "contracts/tier/ITier.sol",
          "exportedSymbols": {
            "ITier": [
              424
            ]
          },
          "id": 425,
          "license": "CAL",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 382,
              "literals": [
                "solidity",
                "0.8",
                ".10"
              ],
              "nodeType": "PragmaDirective",
              "src": "33:23:2"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "ITier",
              "contractDependencies": [],
              "contractKind": "interface",
              "documentation": {
                "id": 383,
                "nodeType": "StructuredDocumentation",
                "src": "58:2122:2",
                "text": "@title ITier\n @notice `ITier` is a simple interface that contracts can\n implement to provide membership lists for other contracts.\n There are many use-cases for a time-preserving,\n conditional membership list.\n Some examples include:\n - Self-serve whitelist to participate in fundraising\n - Lists of users who can claim airdrops and perks\n - Pooling resources with implied governance/reward tiers\n - POAP style attendance proofs allowing access to future exclusive events\n @dev Standard interface to a tiered membership.\n A \"membership\" can represent many things:\n - Exclusive access.\n - Participation in some event or process.\n - KYC completion.\n - Combination of sub-memberships.\n - Etc.\n The high level requirements for a contract implementing `ITier`:\n - MUST represent held tiers with the `Tier` enum.\n - MUST implement `report`.\n   - The report is a `uint256` that SHOULD represent the block each tier has\n     been continuously held since encoded as `uint32`.\n   - The encoded tiers start at ONE; ZERO is implied if no tier has ever\n     been held.\n   - `Tier.ZERO` is NOT encoded in the report, it is simply the fallback\n     value.\n   - If a tier is lost the block data is erased for that tier and will be\n     set if/when the tier is regained to the new block.\n   - If the historical block information is not available the report MAY\n     return `0x00000000` for all held tiers.\n   - Tiers that are lost or have never been held MUST return `0xFFFFFFFF`.\n - SHOULD implement `setTier`.\n   - Contracts SHOULD revert with `SET_TIER` error if they cannot\n     meaningfully set a tier directly.\n     For example a contract that can only derive a membership tier by\n     reading the state of an external contract cannot set tiers.\n   - Contracts implementing `setTier` SHOULD error with `SET_ZERO_TIER`\n     if `Tier.ZERO` is being set.\n - MUST emit `TierChange` when `setTier` successfully writes a new tier.\n   - Contracts that cannot meaningfully set a tier are exempt."
              },
              "fullyImplemented": false,
              "id": 424,
              "linearizedBaseContracts": [
                424
              ],
              "name": "ITier",
              "nameLocation": "2190:5:2",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "canonicalName": "ITier.Tier",
                  "id": 393,
                  "members": [
                    {
                      "id": 384,
                      "name": "ZERO",
                      "nameLocation": "2436:4:2",
                      "nodeType": "EnumValue",
                      "src": "2436:4:2"
                    },
                    {
                      "id": 385,
                      "name": "ONE",
                      "nameLocation": "2450:3:2",
                      "nodeType": "EnumValue",
                      "src": "2450:3:2"
                    },
                    {
                      "id": 386,
                      "name": "TWO",
                      "nameLocation": "2463:3:2",
                      "nodeType": "EnumValue",
                      "src": "2463:3:2"
                    },
                    {
                      "id": 387,
                      "name": "THREE",
                      "nameLocation": "2476:5:2",
                      "nodeType": "EnumValue",
                      "src": "2476:5:2"
                    },
                    {
                      "id": 388,
                      "name": "FOUR",
                      "nameLocation": "2491:4:2",
                      "nodeType": "EnumValue",
                      "src": "2491:4:2"
                    },
                    {
                      "id": 389,
                      "name": "FIVE",
                      "nameLocation": "2505:4:2",
                      "nodeType": "EnumValue",
                      "src": "2505:4:2"
                    },
                    {
                      "id": 390,
                      "name": "SIX",
                      "nameLocation": "2519:3:2",
                      "nodeType": "EnumValue",
                      "src": "2519:3:2"
                    },
                    {
                      "id": 391,
                      "name": "SEVEN",
                      "nameLocation": "2532:5:2",
                      "nodeType": "EnumValue",
                      "src": "2532:5:2"
                    },
                    {
                      "id": 392,
                      "name": "EIGHT",
                      "nameLocation": "2547:5:2",
                      "nodeType": "EnumValue",
                      "src": "2547:5:2"
                    }
                  ],
                  "name": "Tier",
                  "nameLocation": "2421:4:2",
                  "nodeType": "EnumDefinition",
                  "src": "2416:142:2"
                },
                {
                  "anonymous": false,
                  "documentation": {
                    "id": 394,
                    "nodeType": "StructuredDocumentation",
                    "src": "2564:190:2",
                    "text": "Every time a Tier changes we log start and end Tier against the\n account.\n This MAY NOT be emitted if reports are being read from the state of an\n external contract."
                  },
                  "id": 404,
                  "name": "TierChange",
                  "nameLocation": "2765:10:2",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 403,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 396,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "account",
                        "nameLocation": "2801:7:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 404,
                        "src": "2785:23:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 395,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2785:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 399,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "startTier",
                        "nameLocation": "2831:9:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 404,
                        "src": "2818:22:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Tier_$393",
                          "typeString": "enum ITier.Tier"
                        },
                        "typeName": {
                          "id": 398,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 397,
                            "name": "Tier",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 393,
                            "src": "2818:4:2"
                          },
                          "referencedDeclaration": 393,
                          "src": "2818:4:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$393",
                            "typeString": "enum ITier.Tier"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 402,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "endTier",
                        "nameLocation": "2863:7:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 404,
                        "src": "2850:20:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Tier_$393",
                          "typeString": "enum ITier.Tier"
                        },
                        "typeName": {
                          "id": 401,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 400,
                            "name": "Tier",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 393,
                            "src": "2850:4:2"
                          },
                          "referencedDeclaration": 393,
                          "src": "2850:4:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$393",
                            "typeString": "enum ITier.Tier"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2775:101:2"
                  },
                  "src": "2759:118:2"
                },
                {
                  "documentation": {
                    "id": 405,
                    "nodeType": "StructuredDocumentation",
                    "src": "2883:2294:2",
                    "text": "@notice Users can set their own tier by calling `setTier`.\n The contract that implements `ITier` is responsible for checking\n eligibility and/or taking actions required to set the tier.\n For example, the contract must take/refund any tokens relevant to\n changing the tier.\n Obviously the user is responsible for any approvals for this action\n prior to calling `setTier`.\n When the tier is changed a `TierChange` event will be emmited as:\n ```\n event TierChange(address account, Tier startTier, Tier endTier);\n ```\n The `setTier` function includes arbitrary data as the third\n parameter. This can be used to disambiguate in the case that\n there may be many possible options for a user to achieve some tier.\n For example, consider the case where `Tier.THREE` can be achieved\n by EITHER locking 1x rare NFT or 3x uncommon NFTs. A user with both\n could use `data` to explicitly state their intent.\n NOTE however that _any_ address can call `setTier` for any other\n address.\n If you implement `data` or anything that changes state then be very\n careful to avoid griefing attacks.\n The `data` parameter can also be ignored by the contract implementing\n `ITier`. For example, ERC20 tokens are fungible so only the balance\n approved by the user is relevant to a tier change.\n The `setTier` function SHOULD prevent users from reassigning\n `Tier.ZERO` to themselves.\n The `Tier.ZERO` status represents never having any status.\n @dev Updates the tier of an account.\n The implementing contract is responsible for all checks and state\n changes required to set the tier. For example, taking/refunding\n funds/NFTs etc.\n Contracts may disallow directly setting tiers, preferring to derive\n reports from other onchain data.\n In this case they should `revert(\"SET_TIER\");`.\n @param account Account to change the tier for.\n @param endTier Tier after the change.\n @param data Arbitrary input to disambiguate ownership\n (e.g. NFTs to lock)."
                  },
                  "functionSelector": "52dab69d",
                  "id": 415,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "setTier",
                  "nameLocation": "5191:7:2",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 413,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 407,
                        "mutability": "mutable",
                        "name": "account",
                        "nameLocation": "5216:7:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 415,
                        "src": "5208:15:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 406,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5208:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 410,
                        "mutability": "mutable",
                        "name": "endTier",
                        "nameLocation": "5238:7:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 415,
                        "src": "5233:12:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Tier_$393",
                          "typeString": "enum ITier.Tier"
                        },
                        "typeName": {
                          "id": 409,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 408,
                            "name": "Tier",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 393,
                            "src": "5233:4:2"
                          },
                          "referencedDeclaration": 393,
                          "src": "5233:4:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$393",
                            "typeString": "enum ITier.Tier"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 412,
                        "mutability": "mutable",
                        "name": "data",
                        "nameLocation": "5268:4:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 415,
                        "src": "5255:17:2",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 411,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "5255:5:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5198:80:2"
                  },
                  "returnParameters": {
                    "id": 414,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "5295:0:2"
                  },
                  "scope": 424,
                  "src": "5182:114:2",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 416,
                    "nodeType": "StructuredDocumentation",
                    "src": "5302:2251:2",
                    "text": "@notice A tier report is a `uint256` that contains each of the block\n numbers each tier has been held continously since as a `uint32`.\n There are 9 possible tier, starting with `Tier.ZERO` for `0` offset or\n \"never held any tier\" then working up through 8x 4 byte offsets to the\n full 256 bits.\n Low bits = Lower tier.\n In hexadecimal every 8 characters = one tier, starting at `Tier.EIGHT`\n from high bits and working down to `Tier.ONE`.\n `uint32` should be plenty for any blockchain that measures block times\n in seconds, but reconsider if deploying to an environment with\n significantly sub-second block times.\n ~135 years of 1 second blocks fit into `uint32`.\n `2^8 / (365 * 24 * 60 * 60)`\n When a user INCREASES their tier they keep all the block numbers they\n already had, and get new block times for each increased tiers they have\n earned.\n When a user DECREASES their tier they return to `0xFFFFFFFF` (never)\n for every tier level they remove, but keep their block numbers for the\n remaining tiers.\n GUIs are encouraged to make this dynamic very clear for users as\n round-tripping to a lower status and back is a DESTRUCTIVE operation\n for block times.\n The intent is that downstream code can provide additional benefits for\n members who have maintained a certain tier for/since a long time.\n These benefits can be provided by inspecting the report, and by\n on-chain contracts directly,\n rather than needing to work with snapshots etc.\n @dev Returns the earliest block the account has held each tier for\n continuously.\n This is encoded as a uint256 with blocks represented as 8x\n concatenated uint32.\n I.e. Each 4 bytes of the uint256 represents a u32 tier start time.\n The low bits represent low tiers and high bits the high tiers.\n Implementing contracts should return 0xFFFFFFFF for lost &\n never-held tiers.\n @param account Account to get the report for.\n @return The report blocks encoded as a uint256."
                  },
                  "functionSelector": "e053ea31",
                  "id": 423,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "report",
                  "nameLocation": "7567:6:2",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 419,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 418,
                        "mutability": "mutable",
                        "name": "account",
                        "nameLocation": "7582:7:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 423,
                        "src": "7574:15:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 417,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "7574:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "7573:17:2"
                  },
                  "returnParameters": {
                    "id": 422,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 421,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 423,
                        "src": "7614:7:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 420,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "7614:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "7613:9:2"
                  },
                  "scope": 424,
                  "src": "7558:65:2",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 425,
              "src": "2180:5445:2",
              "usedErrors": []
            }
          ],
          "src": "33:7592:2"
        },
        "id": 2
      },
      "contracts/tier/TierByConstruction.sol": {
        "ast": {
          "absolutePath": "contracts/tier/TierByConstruction.sol",
          "exportedSymbols": {
            "ITier": [
              424
            ],
            "TierByConstruction": [
              494
            ],
            "TierUtil": [
              246
            ]
          },
          "id": 495,
          "license": "CAL",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 426,
              "literals": [
                "solidity",
                "0.8",
                ".10"
              ],
              "nodeType": "PragmaDirective",
              "src": "33:23:3"
            },
            {
              "absolutePath": "contracts/libraries/TierUtil.sol",
              "file": "../libraries/TierUtil.sol",
              "id": 428,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 495,
              "sourceUnit": 247,
              "src": "58:53:3",
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 427,
                    "name": "TierUtil",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "src": "67:8:3",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "absolutePath": "contracts/tier/ITier.sol",
              "file": "./ITier.sol",
              "id": 430,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 495,
              "sourceUnit": 425,
              "src": "112:36:3",
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 429,
                    "name": "ITier",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "src": "121:5:3",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "TierByConstruction",
              "contractDependencies": [],
              "contractKind": "contract",
              "documentation": {
                "id": 431,
                "nodeType": "StructuredDocumentation",
                "src": "150:1576:3",
                "text": "@title TierByConstruction\n @notice `TierByConstruction` is a base contract for other\n contracts to inherit from.\n It exposes `isTier` and the corresponding modifier `onlyTier`.\n This ensures that the address has held at least the given tier\n since the contract was constructed.\n We check against the construction time of the contract rather\n than the current block to avoid various exploits.\n Users should not be able to gain a tier for a single block, claim\n benefits then remove the tier within the same block.\n The construction block provides a simple and generic reference\n point that is difficult to manipulate/predict.\n Note that `ReadOnlyTier` contracts must carefully consider use\n with `TierByConstruction` as they tend to return `0x00000000` for\n any/all tiers held. There needs to be additional safeguards to\n mitigate \"flash tier\" attacks.\n Note that an account COULD be `TierByConstruction` then lower/\n remove a tier, then no longer be eligible when they regain the\n tier. Only _continuously held_ tiers are valid against the\n construction block check as this is native behaviour of the\n `report` function in `ITier`.\n Technically the `ITier` could re-enter the `TierByConstruction`\n so the `onlyTier` modifier runs AFTER the modified function.\n @dev Enforces tiers held by contract contruction block.\n The construction block is compared against the blocks returned by `report`.\n The `ITier` contract is paramaterised and set during construction."
              },
              "fullyImplemented": true,
              "id": 494,
              "linearizedBaseContracts": [
                494
              ],
              "name": "TierByConstruction",
              "nameLocation": "1735:18:3",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": false,
                  "functionSelector": "a30872db",
                  "id": 434,
                  "mutability": "mutable",
                  "name": "tierContract",
                  "nameLocation": "1773:12:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 494,
                  "src": "1760:25:3",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ITier_$424",
                    "typeString": "contract ITier"
                  },
                  "typeName": {
                    "id": 433,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 432,
                      "name": "ITier",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 424,
                      "src": "1760:5:3"
                    },
                    "referencedDeclaration": 424,
                    "src": "1760:5:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ITier_$424",
                      "typeString": "contract ITier"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "0f0af57f",
                  "id": 436,
                  "mutability": "mutable",
                  "name": "constructionBlock",
                  "nameLocation": "1806:17:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 494,
                  "src": "1791:32:3",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 435,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1791:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 451,
                    "nodeType": "Block",
                    "src": "1863:87:3",
                    "statements": [
                      {
                        "expression": {
                          "id": 444,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 442,
                            "name": "tierContract",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 434,
                            "src": "1873:12:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_ITier_$424",
                              "typeString": "contract ITier"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 443,
                            "name": "tierContract_",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 439,
                            "src": "1888:13:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_ITier_$424",
                              "typeString": "contract ITier"
                            }
                          },
                          "src": "1873:28:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_ITier_$424",
                            "typeString": "contract ITier"
                          }
                        },
                        "id": 445,
                        "nodeType": "ExpressionStatement",
                        "src": "1873:28:3"
                      },
                      {
                        "expression": {
                          "id": 449,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 446,
                            "name": "constructionBlock",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 436,
                            "src": "1911:17:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "expression": {
                              "id": 447,
                              "name": "block",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -4,
                              "src": "1931:5:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_block",
                                "typeString": "block"
                              }
                            },
                            "id": 448,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "number",
                            "nodeType": "MemberAccess",
                            "src": "1931:12:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1911:32:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 450,
                        "nodeType": "ExpressionStatement",
                        "src": "1911:32:3"
                      }
                    ]
                  },
                  "id": 452,
                  "implemented": true,
                  "kind": "constructor",
                  "modifiers": [],
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 440,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 439,
                        "mutability": "mutable",
                        "name": "tierContract_",
                        "nameLocation": "1848:13:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 452,
                        "src": "1842:19:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_ITier_$424",
                          "typeString": "contract ITier"
                        },
                        "typeName": {
                          "id": 438,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 437,
                            "name": "ITier",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 424,
                            "src": "1842:5:3"
                          },
                          "referencedDeclaration": 424,
                          "src": "1842:5:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_ITier_$424",
                            "typeString": "contract ITier"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1841:21:3"
                  },
                  "returnParameters": {
                    "id": 441,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1863:0:3"
                  },
                  "scope": 494,
                  "src": "1830:120:3",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 474,
                    "nodeType": "Block",
                    "src": "2677:142:3",
                    "statements": [
                      {
                        "expression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 472,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 463,
                            "name": "constructionBlock",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 436,
                            "src": "2694:17:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">=",
                          "rightExpression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "id": 468,
                                    "name": "account_",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 455,
                                    "src": "2767:8:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  ],
                                  "expression": {
                                    "id": 466,
                                    "name": "tierContract",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 434,
                                    "src": "2747:12:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_ITier_$424",
                                      "typeString": "contract ITier"
                                    }
                                  },
                                  "id": 467,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "report",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 423,
                                  "src": "2747:19:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                                    "typeString": "function (address) view external returns (uint256)"
                                  }
                                },
                                "id": 469,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "2747:29:3",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "id": 470,
                                "name": "minimumTier_",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 458,
                                "src": "2790:12:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_Tier_$393",
                                  "typeString": "enum ITier.Tier"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_enum$_Tier_$393",
                                  "typeString": "enum ITier.Tier"
                                }
                              ],
                              "expression": {
                                "id": 464,
                                "name": "TierUtil",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 246,
                                "src": "2715:8:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_TierUtil_$246_$",
                                  "typeString": "type(library TierUtil)"
                                }
                              },
                              "id": 465,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "tierBlock",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 107,
                              "src": "2715:18:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_enum$_Tier_$393_$returns$_t_uint256_$",
                                "typeString": "function (uint256,enum ITier.Tier) pure returns (uint256)"
                              }
                            },
                            "id": 471,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2715:97:3",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "2694:118:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 462,
                        "id": 473,
                        "nodeType": "Return",
                        "src": "2687:125:3"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 453,
                    "nodeType": "StructuredDocumentation",
                    "src": "1956:602:3",
                    "text": "Check if an account has held AT LEAST the given tier according to\n `tierContract` since construction.\n The account MUST have held the tier continuously from construction\n until the \"current\" state according to `report`.\n Note that `report` PROBABLY is current as at the block this function is\n called but MAYBE NOT.\n The `ITier` contract is free to manage reports however makes sense.\n @param account_ Account to check status of.\n @param minimumTier_ Minimum tier for the account.\n @return True if the status is currently held."
                  },
                  "functionSelector": "77544f33",
                  "id": 475,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "isTier",
                  "nameLocation": "2572:6:3",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 459,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 455,
                        "mutability": "mutable",
                        "name": "account_",
                        "nameLocation": "2587:8:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 475,
                        "src": "2579:16:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 454,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2579:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 458,
                        "mutability": "mutable",
                        "name": "minimumTier_",
                        "nameLocation": "2608:12:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 475,
                        "src": "2597:23:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Tier_$393",
                          "typeString": "enum ITier.Tier"
                        },
                        "typeName": {
                          "id": 457,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 456,
                            "name": "ITier.Tier",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 393,
                            "src": "2597:10:3"
                          },
                          "referencedDeclaration": 393,
                          "src": "2597:10:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$393",
                            "typeString": "enum ITier.Tier"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2578:43:3"
                  },
                  "returnParameters": {
                    "id": 462,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 461,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 475,
                        "src": "2667:4:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 460,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "2667:4:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2666:6:3"
                  },
                  "scope": 494,
                  "src": "2563:256:3",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 492,
                    "nodeType": "Block",
                    "src": "3740:117:3",
                    "statements": [
                      {
                        "id": 483,
                        "nodeType": "PlaceholderStatement",
                        "src": "3750:1:3"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 486,
                                  "name": "account_",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 478,
                                  "src": "3789:8:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "id": 487,
                                  "name": "minimumTier_",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 481,
                                  "src": "3799:12:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_enum$_Tier_$393",
                                    "typeString": "enum ITier.Tier"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_enum$_Tier_$393",
                                    "typeString": "enum ITier.Tier"
                                  }
                                ],
                                "id": 485,
                                "name": "isTier",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 475,
                                "src": "3782:6:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$_t_address_$_t_enum$_Tier_$393_$returns$_t_bool_$",
                                  "typeString": "function (address,enum ITier.Tier) view returns (bool)"
                                }
                              },
                              "id": 488,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "3782:30:3",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4d494e494d554d5f54494552",
                              "id": 489,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3826:14:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_0e7b139056d213f6cf6aafa2ba85187741039eeb8f0d68e3be041110713a1740",
                                "typeString": "literal_string \"MINIMUM_TIER\""
                              },
                              "value": "MINIMUM_TIER"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_0e7b139056d213f6cf6aafa2ba85187741039eeb8f0d68e3be041110713a1740",
                                "typeString": "literal_string \"MINIMUM_TIER\""
                              }
                            ],
                            "id": 484,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "3761:7:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 490,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3761:89:3",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 491,
                        "nodeType": "ExpressionStatement",
                        "src": "3761:89:3"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 476,
                    "nodeType": "StructuredDocumentation",
                    "src": "3264:410:3",
                    "text": "https://consensys.github.io/smart-contract-best-practices/recommendations/#use-modifiers-only-for-checks\n Do NOT use this to guard setting the tier on an `ITier` contract.\n The initial tier would be checked AFTER it has already been\n modified which is unsafe.\n @param account_ Account to enforce tier of.\n @param minimumTier_ Minimum tier for the account."
                  },
                  "id": 493,
                  "name": "onlyTier",
                  "nameLocation": "3688:8:3",
                  "nodeType": "ModifierDefinition",
                  "parameters": {
                    "id": 482,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 478,
                        "mutability": "mutable",
                        "name": "account_",
                        "nameLocation": "3705:8:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 493,
                        "src": "3697:16:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 477,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3697:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 481,
                        "mutability": "mutable",
                        "name": "minimumTier_",
                        "nameLocation": "3726:12:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 493,
                        "src": "3715:23:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Tier_$393",
                          "typeString": "enum ITier.Tier"
                        },
                        "typeName": {
                          "id": 480,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 479,
                            "name": "ITier.Tier",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 393,
                            "src": "3715:10:3"
                          },
                          "referencedDeclaration": 393,
                          "src": "3715:10:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$393",
                            "typeString": "enum ITier.Tier"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3696:43:3"
                  },
                  "src": "3679:178:3",
                  "virtual": false,
                  "visibility": "internal"
                }
              ],
              "scope": 495,
              "src": "1726:2133:3",
              "usedErrors": []
            }
          ],
          "src": "33:3826:3"
        },
        "id": 3
      }
    }
  }
}
