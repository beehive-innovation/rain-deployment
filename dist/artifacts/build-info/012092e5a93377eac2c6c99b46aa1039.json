{
  "id": "012092e5a93377eac2c6c99b46aa1039",
  "_format": "hh-sol-build-info-1",
  "solcVersion": "0.8.10",
  "solcLongVersion": "0.8.10+commit.fc410830",
  "input": {
    "language": "Solidity",
    "sources": {
      "contracts/test/ValueTierTest.sol": {
        "content": "// SPDX-License-Identifier: CAL\n\npragma solidity 0.8.10;\n\nimport { ValueTier } from \"../tier/ValueTier.sol\";\nimport { ITier } from \"../tier/ITier.sol\";\n\n/// @title ValueTierTest\n///\n/// Thin wrapper around the `ValueTier` contract to facilitate hardhat unit\n/// testing of `internal` functions.\ncontract ValueTierTest is ValueTier {\n    /// Set the `tierValues` on construction to be referenced immutably.\n    constructor(uint256[8] memory tierValues_)\n        ValueTier(tierValues_)\n    { } // solhint-disable-line no-empty-blocks\n\n    /// Wraps `tierToValue`.\n    function wrappedTierToValue(ITier.Tier tier_)\n        external\n        view\n        returns(uint256)\n    {\n        return ValueTier.tierToValue(tier_);\n    }\n\n    /// Wraps `valueToTier`.\n    function wrappedValueToTier(uint256 value_)\n        external\n        view\n        returns(ITier.Tier)\n    {\n        return ValueTier.valueToTier(value_);\n    }\n}"
      },
      "contracts/tier/ValueTier.sol": {
        "content": "// SPDX-License-Identifier: CAL\n\npragma solidity 0.8.10;\n\nimport { ITier } from \"./ITier.sol\";\n\n/// @title ValueTier\n///\n/// @dev A contract that is `ValueTier` expects to derive tiers from explicit\n/// values. For example an address must send or hold an amount of something to\n/// reach a given tier.\n/// Anything with predefined values that map to tiers can be a `ValueTier`.\n///\n/// Note that `ValueTier` does NOT implement `ITier`.\n/// `ValueTier` does include state however, to track the `tierValues` so is not\n/// a library.\ncontract ValueTier {\n    uint256 private immutable tierOne;\n    uint256 private immutable tierTwo;\n    uint256 private immutable tierThree;\n    uint256 private immutable tierFour;\n    uint256 private immutable tierFive;\n    uint256 private immutable tierSix;\n    uint256 private immutable tierSeven;\n    uint256 private immutable tierEight;\n\n    /// Set the `tierValues` on construction to be referenced immutably.\n    constructor(uint256[8] memory tierValues_) {\n        tierOne = tierValues_[0];\n        tierTwo = tierValues_[1];\n        tierThree = tierValues_[2];\n        tierFour = tierValues_[3];\n        tierFive = tierValues_[4];\n        tierSix = tierValues_[5];\n        tierSeven = tierValues_[6];\n        tierEight = tierValues_[7];\n    }\n\n    /// Complements the default solidity accessor for `tierValues`.\n    /// Returns all the values in a list rather than requiring an index be\n    /// specified.\n    /// @return tierValues_ The immutable `tierValues`.\n    function tierValues() public view returns(uint256[8] memory tierValues_) {\n        tierValues_[0] = tierOne;\n        tierValues_[1] = tierTwo;\n        tierValues_[2] = tierThree;\n        tierValues_[3] = tierFour;\n        tierValues_[4] = tierFive;\n        tierValues_[5] = tierSix;\n        tierValues_[6] = tierSeven;\n        tierValues_[7] = tierEight;\n        return tierValues_;\n    }\n\n    /// Converts a Tier to the minimum value it requires.\n    /// `Tier.ZERO` is always value 0 as it is the fallback.\n    function tierToValue(ITier.Tier tier_) internal view returns(uint256) {\n        return tier_ > ITier.Tier.ZERO ? tierValues()[uint256(tier_) - 1] : 0;\n    }\n\n    /// Converts a value to the maximum Tier it qualifies for.\n    function valueToTier(uint256 value_) internal view returns(ITier.Tier) {\n        for (uint256 i = 0; i < 8; i++) {\n            if (value_ < tierValues()[i]) {\n                return ITier.Tier(i);\n            }\n        }\n        return ITier.Tier.EIGHT;\n    }\n}"
      },
      "contracts/tier/ITier.sol": {
        "content": "// SPDX-License-Identifier: CAL\n\npragma solidity 0.8.10;\n\n/// @title ITier\n/// @notice `ITier` is a simple interface that contracts can\n/// implement to provide membership lists for other contracts.\n///\n/// There are many use-cases for a time-preserving,\n/// conditional membership list.\n///\n/// Some examples include:\n///\n/// - Self-serve whitelist to participate in fundraising\n/// - Lists of users who can claim airdrops and perks\n/// - Pooling resources with implied governance/reward tiers\n/// - POAP style attendance proofs allowing access to future exclusive events\n///\n/// @dev Standard interface to a tiered membership.\n///\n/// A \"membership\" can represent many things:\n/// - Exclusive access.\n/// - Participation in some event or process.\n/// - KYC completion.\n/// - Combination of sub-memberships.\n/// - Etc.\n///\n/// The high level requirements for a contract implementing `ITier`:\n/// - MUST represent held tiers with the `Tier` enum.\n/// - MUST implement `report`.\n///   - The report is a `uint256` that SHOULD represent the block each tier has\n///     been continuously held since encoded as `uint32`.\n///   - The encoded tiers start at ONE; ZERO is implied if no tier has ever\n///     been held.\n///   - `Tier.ZERO` is NOT encoded in the report, it is simply the fallback\n///     value.\n///   - If a tier is lost the block data is erased for that tier and will be\n///     set if/when the tier is regained to the new block.\n///   - If the historical block information is not available the report MAY\n///     return `0x00000000` for all held tiers.\n///   - Tiers that are lost or have never been held MUST return `0xFFFFFFFF`.\n/// - SHOULD implement `setTier`.\n///   - Contracts SHOULD revert with `SET_TIER` error if they cannot\n///     meaningfully set a tier directly.\n///     For example a contract that can only derive a membership tier by\n///     reading the state of an external contract cannot set tiers.\n///   - Contracts implementing `setTier` SHOULD error with `SET_ZERO_TIER`\n///     if `Tier.ZERO` is being set.\n/// - MUST emit `TierChange` when `setTier` successfully writes a new tier.\n///   - Contracts that cannot meaningfully set a tier are exempt.\ninterface ITier {\n\n    /// 9 Possible tiers.\n    /// Fits nicely as uint32 in uint256 which is helpful for internal storage\n    /// concerns.\n    /// 8 tiers can be achieved, ZERO is the tier when no tier has been\n    /// achieved.\n    enum Tier {\n        ZERO,\n        ONE,\n        TWO,\n        THREE,\n        FOUR,\n        FIVE,\n        SIX,\n        SEVEN,\n        EIGHT\n    }\n\n    /// Every time a Tier changes we log start and end Tier against the\n    /// account.\n    /// This MAY NOT be emitted if reports are being read from the state of an\n    /// external contract.\n    event TierChange(\n        address indexed account,\n        Tier indexed startTier,\n        Tier indexed endTier\n    );\n\n    /// @notice Users can set their own tier by calling `setTier`.\n    ///\n    /// The contract that implements `ITier` is responsible for checking\n    /// eligibility and/or taking actions required to set the tier.\n    ///\n    /// For example, the contract must take/refund any tokens relevant to\n    /// changing the tier.\n    ///\n    /// Obviously the user is responsible for any approvals for this action\n    /// prior to calling `setTier`.\n    ///\n    /// When the tier is changed a `TierChange` event will be emmited as:\n    /// ```\n    /// event TierChange(address account, Tier startTier, Tier endTier);\n    /// ```\n    ///\n    /// The `setTier` function includes arbitrary data as the third\n    /// parameter. This can be used to disambiguate in the case that\n    /// there may be many possible options for a user to achieve some tier.\n    ///\n    /// For example, consider the case where `Tier.THREE` can be achieved\n    /// by EITHER locking 1x rare NFT or 3x uncommon NFTs. A user with both\n    /// could use `data` to explicitly state their intent.\n    ///\n    /// NOTE however that _any_ address can call `setTier` for any other\n    /// address.\n    ///\n    /// If you implement `data` or anything that changes state then be very\n    /// careful to avoid griefing attacks.\n    ///\n    /// The `data` parameter can also be ignored by the contract implementing\n    /// `ITier`. For example, ERC20 tokens are fungible so only the balance\n    /// approved by the user is relevant to a tier change.\n    ///\n    /// The `setTier` function SHOULD prevent users from reassigning\n    /// `Tier.ZERO` to themselves.\n    ///\n    /// The `Tier.ZERO` status represents never having any status.\n    /// @dev Updates the tier of an account.\n    ///\n    /// The implementing contract is responsible for all checks and state\n    /// changes required to set the tier. For example, taking/refunding\n    /// funds/NFTs etc.\n    ///\n    /// Contracts may disallow directly setting tiers, preferring to derive\n    /// reports from other onchain data.\n    /// In this case they should `revert(\"SET_TIER\");`.\n    ///\n    /// @param account Account to change the tier for.\n    /// @param endTier Tier after the change.\n    /// @param data Arbitrary input to disambiguate ownership\n    /// (e.g. NFTs to lock).\n    function setTier(\n        address account,\n        Tier endTier,\n        bytes memory data\n    )\n        external;\n\n    /// @notice A tier report is a `uint256` that contains each of the block\n    /// numbers each tier has been held continously since as a `uint32`.\n    /// There are 9 possible tier, starting with `Tier.ZERO` for `0` offset or\n    /// \"never held any tier\" then working up through 8x 4 byte offsets to the\n    /// full 256 bits.\n    ///\n    /// Low bits = Lower tier.\n    ///\n    /// In hexadecimal every 8 characters = one tier, starting at `Tier.EIGHT`\n    /// from high bits and working down to `Tier.ONE`.\n    ///\n    /// `uint32` should be plenty for any blockchain that measures block times\n    /// in seconds, but reconsider if deploying to an environment with\n    /// significantly sub-second block times.\n    ///\n    /// ~135 years of 1 second blocks fit into `uint32`.\n    ///\n    /// `2^8 / (365 * 24 * 60 * 60)`\n    ///\n    /// When a user INCREASES their tier they keep all the block numbers they\n    /// already had, and get new block times for each increased tiers they have\n    /// earned.\n    ///\n    /// When a user DECREASES their tier they return to `0xFFFFFFFF` (never)\n    /// for every tier level they remove, but keep their block numbers for the\n    /// remaining tiers.\n    ///\n    /// GUIs are encouraged to make this dynamic very clear for users as\n    /// round-tripping to a lower status and back is a DESTRUCTIVE operation\n    /// for block times.\n    ///\n    /// The intent is that downstream code can provide additional benefits for\n    /// members who have maintained a certain tier for/since a long time.\n    /// These benefits can be provided by inspecting the report, and by\n    /// on-chain contracts directly,\n    /// rather than needing to work with snapshots etc.\n    /// @dev Returns the earliest block the account has held each tier for\n    /// continuously.\n    /// This is encoded as a uint256 with blocks represented as 8x\n    /// concatenated uint32.\n    /// I.e. Each 4 bytes of the uint256 represents a u32 tier start time.\n    /// The low bits represent low tiers and high bits the high tiers.\n    /// Implementing contracts should return 0xFFFFFFFF for lost &\n    /// never-held tiers.\n    ///\n    /// @param account Account to get the report for.\n    /// @return The report blocks encoded as a uint256.\n    function report(address account) external view returns (uint256);\n}"
      }
    },
    "settings": {
      "metadata": {
        "useLiteralContent": true
      },
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ],
          "": [
            "ast"
          ]
        }
      }
    }
  },
  "output": {
    "contracts": {
      "contracts/test/ValueTierTest.sol": {
        "ValueTierTest": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "uint256[8]",
                  "name": "tierValues_",
                  "type": "uint256[8]"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "inputs": [],
              "name": "tierValues",
              "outputs": [
                {
                  "internalType": "uint256[8]",
                  "name": "tierValues_",
                  "type": "uint256[8]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "enum ITier.Tier",
                  "name": "tier_",
                  "type": "uint8"
                }
              ],
              "name": "wrappedTierToValue",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "value_",
                  "type": "uint256"
                }
              ],
              "name": "wrappedValueToTier",
              "outputs": [
                {
                  "internalType": "enum ITier.Tier",
                  "name": "",
                  "type": "uint8"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "@_173": {
                  "entryPoint": null,
                  "id": 173,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "@_20": {
                  "entryPoint": null,
                  "id": 20,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "abi_decode_tuple_t_array$_t_uint256_$8_memory_ptr_fromMemory": {
                  "entryPoint": 119,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "panic_error_0x32": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [
                {
                  "ast": {
                    "nodeType": "YulBlock",
                    "src": "0:1029:3",
                    "statements": [
                      {
                        "nodeType": "YulBlock",
                        "src": "6:3:3",
                        "statements": []
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "118:777:3",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "128:13:3",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "138:3:3",
                                "type": "",
                                "value": "256"
                              },
                              "variables": [
                                {
                                  "name": "_1",
                                  "nodeType": "YulTypedName",
                                  "src": "132:2:3",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "186:16:3",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "195:1:3",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "198:1:3",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "188:6:3"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "188:12:3"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "188:12:3"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "161:7:3"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "170:9:3"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "157:3:3"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "157:23:3"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "182:2:3"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "153:3:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "153:32:3"
                              },
                              "nodeType": "YulIf",
                              "src": "150:52:3"
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "257:16:3",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "266:1:3",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "269:1:3",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "259:6:3"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "259:12:3"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "259:12:3"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "headStart",
                                            "nodeType": "YulIdentifier",
                                            "src": "229:9:3"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "240:4:3",
                                            "type": "",
                                            "value": "0x1f"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "225:3:3"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "225:20:3"
                                      },
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "247:7:3"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "slt",
                                      "nodeType": "YulIdentifier",
                                      "src": "221:3:3"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "221:34:3"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "214:6:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "214:42:3"
                              },
                              "nodeType": "YulIf",
                              "src": "211:62:3"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "282:23:3",
                              "value": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "302:2:3",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "296:5:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "296:9:3"
                              },
                              "variables": [
                                {
                                  "name": "memPtr",
                                  "nodeType": "YulTypedName",
                                  "src": "286:6:3",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "314:33:3",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "336:6:3"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "344:2:3"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "332:3:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "332:15:3"
                              },
                              "variables": [
                                {
                                  "name": "newFreePtr",
                                  "nodeType": "YulTypedName",
                                  "src": "318:10:3",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "430:111:3",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "451:1:3",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "458:3:3",
                                              "type": "",
                                              "value": "224"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "463:10:3",
                                              "type": "",
                                              "value": "0x4e487b71"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "shl",
                                            "nodeType": "YulIdentifier",
                                            "src": "454:3:3"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "454:20:3"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "444:6:3"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "444:31:3"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "444:31:3"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "495:1:3",
                                          "type": "",
                                          "value": "4"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "498:4:3",
                                          "type": "",
                                          "value": "0x41"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "488:6:3"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "488:15:3"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "488:15:3"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "523:1:3",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "526:4:3",
                                          "type": "",
                                          "value": "0x24"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "516:6:3"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "516:15:3"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "516:15:3"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "newFreePtr",
                                        "nodeType": "YulIdentifier",
                                        "src": "365:10:3"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "385:2:3",
                                                "type": "",
                                                "value": "64"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "389:1:3",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "381:3:3"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "381:10:3"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "393:1:3",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nodeType": "YulIdentifier",
                                          "src": "377:3:3"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "377:18:3"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "gt",
                                      "nodeType": "YulIdentifier",
                                      "src": "362:2:3"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "362:34:3"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "newFreePtr",
                                        "nodeType": "YulIdentifier",
                                        "src": "401:10:3"
                                      },
                                      {
                                        "name": "memPtr",
                                        "nodeType": "YulIdentifier",
                                        "src": "413:6:3"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "lt",
                                      "nodeType": "YulIdentifier",
                                      "src": "398:2:3"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "398:22:3"
                                  }
                                ],
                                "functionName": {
                                  "name": "or",
                                  "nodeType": "YulIdentifier",
                                  "src": "359:2:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "359:62:3"
                              },
                              "nodeType": "YulIf",
                              "src": "356:185:3"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "557:2:3",
                                    "type": "",
                                    "value": "64"
                                  },
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "561:10:3"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "550:6:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "550:22:3"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "550:22:3"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "581:17:3",
                              "value": {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "592:6:3"
                              },
                              "variables": [
                                {
                                  "name": "dst",
                                  "nodeType": "YulTypedName",
                                  "src": "585:3:3",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "607:32:3",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "625:9:3"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "636:2:3"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "621:3:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "621:18:3"
                              },
                              "variables": [
                                {
                                  "name": "srcEnd",
                                  "nodeType": "YulTypedName",
                                  "src": "611:6:3",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "671:16:3",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "680:1:3",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "683:1:3",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "673:6:3"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "673:12:3"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "673:12:3"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "srcEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "654:6:3"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "662:7:3"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "651:2:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "651:19:3"
                              },
                              "nodeType": "YulIf",
                              "src": "648:39:3"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "696:20:3",
                              "value": {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "707:9:3"
                              },
                              "variables": [
                                {
                                  "name": "src",
                                  "nodeType": "YulTypedName",
                                  "src": "700:3:3",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "783:81:3",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nodeType": "YulIdentifier",
                                          "src": "804:3:3"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "src",
                                              "nodeType": "YulIdentifier",
                                              "src": "815:3:3"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "mload",
                                            "nodeType": "YulIdentifier",
                                            "src": "809:5:3"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "809:10:3"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "797:6:3"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "797:23:3"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "797:23:3"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "833:21:3",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nodeType": "YulIdentifier",
                                          "src": "844:3:3"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "849:4:3",
                                          "type": "",
                                          "value": "0x20"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "840:3:3"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "840:14:3"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "dst",
                                        "nodeType": "YulIdentifier",
                                        "src": "833:3:3"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "src",
                                    "nodeType": "YulIdentifier",
                                    "src": "736:3:3"
                                  },
                                  {
                                    "name": "srcEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "741:6:3"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "733:2:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "733:15:3"
                              },
                              "nodeType": "YulForLoop",
                              "post": {
                                "nodeType": "YulBlock",
                                "src": "749:25:3",
                                "statements": [
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "751:21:3",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "src",
                                          "nodeType": "YulIdentifier",
                                          "src": "762:3:3"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "767:4:3",
                                          "type": "",
                                          "value": "0x20"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "758:3:3"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "758:14:3"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "src",
                                        "nodeType": "YulIdentifier",
                                        "src": "751:3:3"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "pre": {
                                "nodeType": "YulBlock",
                                "src": "729:3:3",
                                "statements": []
                              },
                              "src": "725:139:3"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "873:16:3",
                              "value": {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "883:6:3"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "873:6:3"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_array$_t_uint256_$8_memory_ptr_fromMemory",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "84:9:3",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "95:7:3",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "107:6:3",
                            "type": ""
                          }
                        ],
                        "src": "14:881:3"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "932:95:3",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "949:1:3",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "956:3:3",
                                        "type": "",
                                        "value": "224"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "961:10:3",
                                        "type": "",
                                        "value": "0x4e487b71"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "952:3:3"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "952:20:3"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "942:6:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "942:31:3"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "942:31:3"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "989:1:3",
                                    "type": "",
                                    "value": "4"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "992:4:3",
                                    "type": "",
                                    "value": "0x32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "982:6:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "982:15:3"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "982:15:3"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1013:1:3",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1016:4:3",
                                    "type": "",
                                    "value": "0x24"
                                  }
                                ],
                                "functionName": {
                                  "name": "revert",
                                  "nodeType": "YulIdentifier",
                                  "src": "1006:6:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1006:15:3"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1006:15:3"
                            }
                          ]
                        },
                        "name": "panic_error_0x32",
                        "nodeType": "YulFunctionDefinition",
                        "src": "900:127:3"
                      }
                    ]
                  },
                  "contents": "{\n    { }\n    function abi_decode_tuple_t_array$_t_uint256_$8_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        let _1 := 256\n        if slt(sub(dataEnd, headStart), _1) { revert(0, 0) }\n        if iszero(slt(add(headStart, 0x1f), dataEnd)) { revert(0, 0) }\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, _1)\n        if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x41)\n            revert(0, 0x24)\n        }\n        mstore(64, newFreePtr)\n        let dst := memPtr\n        let srcEnd := add(headStart, _1)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := headStart\n        for { } lt(src, srcEnd) { src := add(src, 0x20) }\n        {\n            mstore(dst, mload(src))\n            dst := add(dst, 0x20)\n        }\n        value0 := memPtr\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n}",
                  "id": 3,
                  "language": "Yul",
                  "name": "#utility.yul"
                }
              ],
              "linkReferences": {},
              "object": "61018060405234801561001157600080fd5b5060405161058438038061058483398101604081905261003091610077565b80516080908152602082015160a0908152604083015160c0908152606084015160e09081529284015161010052908301516101205282015161014052015161016052610103565b600061010080838503121561008b57600080fd5b83601f84011261009a57600080fd5b6040518181016001600160401b03811182821017156100c957634e487b7160e01b600052604160045260246000fd5b6040529083019080858311156100de57600080fd5b845b838110156100f85780518252602091820191016100e0565b509095945050505050565b60805160a05160c05160e0516101005161012051610140516101605161041e61016660003960006101d2015260006101ac01526000610186015260006101600152600061013a015260006101140152600060ee0152600060cb015261041e6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80634bc1010e146100465780635d2c11171461006f57806370230b3914610090575b600080fd5b6100596100543660046102e0565b6100a5565b604051610066919061030f565b60405180910390f35b61008261007d366004610337565b6100b6565b604051908152602001610066565b6100986100c1565b6040516100669190610358565b60006100b0826101f9565b92915050565b60006100b08261025f565b6100c96102c1565b7f000000000000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000000060208201527f000000000000000000000000000000000000000000000000000000000000000060408201527f000000000000000000000000000000000000000000000000000000000000000060608201527f000000000000000000000000000000000000000000000000000000000000000060808201527f000000000000000000000000000000000000000000000000000000000000000060a08201527f000000000000000000000000000000000000000000000000000000000000000060c08201527f000000000000000000000000000000000000000000000000000000000000000060e082015290565b6000805b60088110156102565761020e6100c1565b816008811061021f5761021f61038a565b60200201518310156102445780600881111561023d5761023d6102f9565b9392505050565b8061024e816103b6565b9150506101fd565b50600892915050565b600080826008811115610274576102746102f9565b116102805760006100b0565b6102886100c1565b600183600881111561029c5761029c6102f9565b6102a691906103d1565b600881106102b6576102b661038a565b602002015192915050565b6040518061010001604052806008906020820280368337509192915050565b6000602082840312156102f257600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b602081016009831061033157634e487b7160e01b600052602160045260246000fd5b91905290565b60006020828403121561034957600080fd5b81356009811061023d57600080fd5b6101008101818360005b6008811015610381578151835260209283019290910190600101610362565b50505092915050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156103ca576103ca6103a0565b5060010190565b6000828210156103e3576103e36103a0565b50039056fea2646970667358221220afac5e022a3cfac31be2db5c7b95c9ea5ccf81f280fed3c16371e3154fd17aa964736f6c634300080a0033",
              "opcodes": "PUSH2 0x180 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x584 CODESIZE SUB DUP1 PUSH2 0x584 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x30 SWAP2 PUSH2 0x77 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x80 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0xA0 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0xC0 SWAP1 DUP2 MSTORE PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0xE0 SWAP1 DUP2 MSTORE SWAP3 DUP5 ADD MLOAD PUSH2 0x100 MSTORE SWAP1 DUP4 ADD MLOAD PUSH2 0x120 MSTORE DUP3 ADD MLOAD PUSH2 0x140 MSTORE ADD MLOAD PUSH2 0x160 MSTORE PUSH2 0x103 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x8B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x9A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xC9 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP1 DUP4 ADD SWAP1 DUP1 DUP6 DUP4 GT ISZERO PUSH2 0xDE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xF8 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0xE0 JUMP JUMPDEST POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD PUSH2 0x120 MLOAD PUSH2 0x140 MLOAD PUSH2 0x160 MLOAD PUSH2 0x41E PUSH2 0x166 PUSH1 0x0 CODECOPY PUSH1 0x0 PUSH2 0x1D2 ADD MSTORE PUSH1 0x0 PUSH2 0x1AC ADD MSTORE PUSH1 0x0 PUSH2 0x186 ADD MSTORE PUSH1 0x0 PUSH2 0x160 ADD MSTORE PUSH1 0x0 PUSH2 0x13A ADD MSTORE PUSH1 0x0 PUSH2 0x114 ADD MSTORE PUSH1 0x0 PUSH1 0xEE ADD MSTORE PUSH1 0x0 PUSH1 0xCB ADD MSTORE PUSH2 0x41E PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x4BC1010E EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x5D2C1117 EQ PUSH2 0x6F JUMPI DUP1 PUSH4 0x70230B39 EQ PUSH2 0x90 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x59 PUSH2 0x54 CALLDATASIZE PUSH1 0x4 PUSH2 0x2E0 JUMP JUMPDEST PUSH2 0xA5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x66 SWAP2 SWAP1 PUSH2 0x30F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x82 PUSH2 0x7D CALLDATASIZE PUSH1 0x4 PUSH2 0x337 JUMP JUMPDEST PUSH2 0xB6 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x66 JUMP JUMPDEST PUSH2 0x98 PUSH2 0xC1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x66 SWAP2 SWAP1 PUSH2 0x358 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB0 DUP3 PUSH2 0x1F9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB0 DUP3 PUSH2 0x25F JUMP JUMPDEST PUSH2 0xC9 PUSH2 0x2C1 JUMP JUMPDEST PUSH32 0x0 DUP2 MSTORE PUSH32 0x0 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x0 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x0 PUSH1 0x60 DUP3 ADD MSTORE PUSH32 0x0 PUSH1 0x80 DUP3 ADD MSTORE PUSH32 0x0 PUSH1 0xA0 DUP3 ADD MSTORE PUSH32 0x0 PUSH1 0xC0 DUP3 ADD MSTORE PUSH32 0x0 PUSH1 0xE0 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST PUSH1 0x8 DUP2 LT ISZERO PUSH2 0x256 JUMPI PUSH2 0x20E PUSH2 0xC1 JUMP JUMPDEST DUP2 PUSH1 0x8 DUP2 LT PUSH2 0x21F JUMPI PUSH2 0x21F PUSH2 0x38A JUMP JUMPDEST PUSH1 0x20 MUL ADD MLOAD DUP4 LT ISZERO PUSH2 0x244 JUMPI DUP1 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x23D JUMPI PUSH2 0x23D PUSH2 0x2F9 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 PUSH2 0x24E DUP2 PUSH2 0x3B6 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1FD JUMP JUMPDEST POP PUSH1 0x8 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x274 JUMPI PUSH2 0x274 PUSH2 0x2F9 JUMP JUMPDEST GT PUSH2 0x280 JUMPI PUSH1 0x0 PUSH2 0xB0 JUMP JUMPDEST PUSH2 0x288 PUSH2 0xC1 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x29C JUMPI PUSH2 0x29C PUSH2 0x2F9 JUMP JUMPDEST PUSH2 0x2A6 SWAP2 SWAP1 PUSH2 0x3D1 JUMP JUMPDEST PUSH1 0x8 DUP2 LT PUSH2 0x2B6 JUMPI PUSH2 0x2B6 PUSH2 0x38A JUMP JUMPDEST PUSH1 0x20 MUL ADD MLOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x100 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x8 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 DUP2 ADD PUSH1 0x9 DUP4 LT PUSH2 0x331 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x349 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x9 DUP2 LT PUSH2 0x23D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x100 DUP2 ADD DUP2 DUP4 PUSH1 0x0 JUMPDEST PUSH1 0x8 DUP2 LT ISZERO PUSH2 0x381 JUMPI DUP2 MLOAD DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x362 JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x3CA JUMPI PUSH2 0x3CA PUSH2 0x3A0 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x3E3 JUMPI PUSH2 0x3E3 PUSH2 0x3A0 JUMP JUMPDEST POP SUB SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAF 0xAC 0x5E MUL 0x2A EXTCODECOPY STATICCALL 0xC3 SHL 0xE2 0xDB 0x5C PUSH28 0x95C9EA5CCF81F280FED3C16371E3154FD17AA964736F6C634300080A STOP CALLER ",
              "sourceMap": "295:624:0:-:0;;;410:81;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1013:14:2;;1003:24;;;;1013:14;1047;;;1037:24;;;;1083:14;;;;1071:26;;;;1118:14;;;;1107:25;;;;1153:14;;;;1142:25;;1187:14;;;;1177:24;;1223:14;;;1211:26;;1259:14;;1247:26;;295:624:0;;14:881:3;107:6;138:3;182:2;170:9;161:7;157:23;153:32;150:52;;;198:1;195;188:12;150:52;247:7;240:4;229:9;225:20;221:34;211:62;;269:1;266;259:12;211:62;302:2;296:9;332:15;;;-1:-1:-1;;;;;362:34:3;;398:22;;;359:62;356:185;;;463:10;458:3;454:20;451:1;444:31;498:4;495:1;488:15;526:4;523:1;516:15;356:185;557:2;550:22;621:18;;;;592:6;651:19;;;648:39;;;683:1;680;673:12;648:39;707:9;725:139;741:6;736:3;733:15;725:139;;;809:10;;797:23;;849:4;840:14;;;;758;725:139;;;-1:-1:-1;883:6:3;;14:881;-1:-1:-1;;;;;14:881:3:o;900:127::-;295:624:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "@tierToValue_259": {
                  "entryPoint": 607,
                  "id": 259,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "@tierValues_232": {
                  "entryPoint": 193,
                  "id": 232,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "@valueToTier_298": {
                  "entryPoint": 505,
                  "id": 298,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "@wrappedTierToValue_35": {
                  "entryPoint": 182,
                  "id": 35,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "@wrappedValueToTier_50": {
                  "entryPoint": 165,
                  "id": 50,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_decode_tuple_t_enum$_Tier_$64": {
                  "entryPoint": 823,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_t_uint256": {
                  "entryPoint": 736,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_array$_t_uint256_$8_memory_ptr__to_t_array$_t_uint256_$8_memory_ptr__fromStack_reversed": {
                  "entryPoint": 856,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_enum$_Tier_$64__to_t_uint8__fromStack_reversed": {
                  "entryPoint": 783,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "checked_sub_t_uint256": {
                  "entryPoint": 977,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "increment_t_uint256": {
                  "entryPoint": 950,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "panic_error_0x11": {
                  "entryPoint": 928,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "panic_error_0x21": {
                  "entryPoint": 761,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "panic_error_0x32": {
                  "entryPoint": 906,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [
                {
                  "ast": {
                    "nodeType": "YulBlock",
                    "src": "0:2152:3",
                    "statements": [
                      {
                        "nodeType": "YulBlock",
                        "src": "6:3:3",
                        "statements": []
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "84:110:3",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "130:16:3",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "139:1:3",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "142:1:3",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "132:6:3"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "132:12:3"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "132:12:3"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "105:7:3"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "114:9:3"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "101:3:3"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "101:23:3"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "126:2:3",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "97:3:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "97:32:3"
                              },
                              "nodeType": "YulIf",
                              "src": "94:52:3"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "155:33:3",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "178:9:3"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "165:12:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "165:23:3"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "155:6:3"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "50:9:3",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "61:7:3",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "73:6:3",
                            "type": ""
                          }
                        ],
                        "src": "14:180:3"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "231:95:3",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "248:1:3",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "255:3:3",
                                        "type": "",
                                        "value": "224"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "260:10:3",
                                        "type": "",
                                        "value": "0x4e487b71"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "251:3:3"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "251:20:3"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "241:6:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "241:31:3"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "241:31:3"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "288:1:3",
                                    "type": "",
                                    "value": "4"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "291:4:3",
                                    "type": "",
                                    "value": "0x21"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "281:6:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "281:15:3"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "281:15:3"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "312:1:3",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "315:4:3",
                                    "type": "",
                                    "value": "0x24"
                                  }
                                ],
                                "functionName": {
                                  "name": "revert",
                                  "nodeType": "YulIdentifier",
                                  "src": "305:6:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "305:15:3"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "305:15:3"
                            }
                          ]
                        },
                        "name": "panic_error_0x21",
                        "nodeType": "YulFunctionDefinition",
                        "src": "199:127:3"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "437:229:3",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "447:26:3",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "459:9:3"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "470:2:3",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "455:3:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "455:18:3"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "447:4:3"
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "515:111:3",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "536:1:3",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "543:3:3",
                                              "type": "",
                                              "value": "224"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "548:10:3",
                                              "type": "",
                                              "value": "0x4e487b71"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "shl",
                                            "nodeType": "YulIdentifier",
                                            "src": "539:3:3"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "539:20:3"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "529:6:3"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "529:31:3"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "529:31:3"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "580:1:3",
                                          "type": "",
                                          "value": "4"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "583:4:3",
                                          "type": "",
                                          "value": "0x21"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "573:6:3"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "573:15:3"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "573:15:3"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "608:1:3",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "611:4:3",
                                          "type": "",
                                          "value": "0x24"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "601:6:3"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "601:15:3"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "601:15:3"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "495:6:3"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "503:1:3",
                                        "type": "",
                                        "value": "9"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "lt",
                                      "nodeType": "YulIdentifier",
                                      "src": "492:2:3"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "492:13:3"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "485:6:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "485:21:3"
                              },
                              "nodeType": "YulIf",
                              "src": "482:144:3"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "642:9:3"
                                  },
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "653:6:3"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "635:6:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "635:25:3"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "635:25:3"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_enum$_Tier_$64__to_t_uint8__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "406:9:3",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "417:6:3",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "428:4:3",
                            "type": ""
                          }
                        ],
                        "src": "331:335:3"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "748:186:3",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "794:16:3",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "803:1:3",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "806:1:3",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "796:6:3"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "796:12:3"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "796:12:3"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "769:7:3"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "778:9:3"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "765:3:3"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "765:23:3"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "790:2:3",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "761:3:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "761:32:3"
                              },
                              "nodeType": "YulIf",
                              "src": "758:52:3"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "819:36:3",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "845:9:3"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "832:12:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "832:23:3"
                              },
                              "variables": [
                                {
                                  "name": "value",
                                  "nodeType": "YulTypedName",
                                  "src": "823:5:3",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "888:16:3",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "897:1:3",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "900:1:3",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "890:6:3"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "890:12:3"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "890:12:3"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "877:5:3"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "884:1:3",
                                        "type": "",
                                        "value": "9"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "lt",
                                      "nodeType": "YulIdentifier",
                                      "src": "874:2:3"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "874:12:3"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "867:6:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "867:20:3"
                              },
                              "nodeType": "YulIf",
                              "src": "864:40:3"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "913:15:3",
                              "value": {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "923:5:3"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "913:6:3"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_enum$_Tier_$64",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "714:9:3",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "725:7:3",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "737:6:3",
                            "type": ""
                          }
                        ],
                        "src": "671:263:3"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "1040:76:3",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "1050:26:3",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1062:9:3"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1073:2:3",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1058:3:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1058:18:3"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "1050:4:3"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1092:9:3"
                                  },
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "1103:6:3"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "1085:6:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1085:25:3"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1085:25:3"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "1009:9:3",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "1020:6:3",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "1031:4:3",
                            "type": ""
                          }
                        ],
                        "src": "939:177:3"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "1268:348:3",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "1278:27:3",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1290:9:3"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1301:3:3",
                                    "type": "",
                                    "value": "256"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1286:3:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1286:19:3"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "1278:4:3"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1314:20:3",
                              "value": {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1325:9:3"
                              },
                              "variables": [
                                {
                                  "name": "pos",
                                  "nodeType": "YulTypedName",
                                  "src": "1318:3:3",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "1343:16:3",
                              "value": {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1350:9:3"
                              },
                              "variableNames": [
                                {
                                  "name": "pos",
                                  "nodeType": "YulIdentifier",
                                  "src": "1343:3:3"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1368:20:3",
                              "value": {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "1382:6:3"
                              },
                              "variables": [
                                {
                                  "name": "srcPtr",
                                  "nodeType": "YulTypedName",
                                  "src": "1372:6:3",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1397:10:3",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1406:1:3",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "i",
                                  "nodeType": "YulTypedName",
                                  "src": "1401:1:3",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "1463:147:3",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "1484:3:3"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "srcPtr",
                                              "nodeType": "YulIdentifier",
                                              "src": "1495:6:3"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "mload",
                                            "nodeType": "YulIdentifier",
                                            "src": "1489:5:3"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "1489:13:3"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "1477:6:3"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1477:26:3"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1477:26:3"
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "1516:14:3",
                                    "value": {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1526:4:3",
                                      "type": "",
                                      "value": "0x20"
                                    },
                                    "variables": [
                                      {
                                        "name": "_1",
                                        "nodeType": "YulTypedName",
                                        "src": "1520:2:3",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "1543:19:3",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "1554:3:3"
                                        },
                                        {
                                          "name": "_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "1559:2:3"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "1550:3:3"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1550:12:3"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "pos",
                                        "nodeType": "YulIdentifier",
                                        "src": "1543:3:3"
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "1575:25:3",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "srcPtr",
                                          "nodeType": "YulIdentifier",
                                          "src": "1589:6:3"
                                        },
                                        {
                                          "name": "_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "1597:2:3"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "1585:3:3"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1585:15:3"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "srcPtr",
                                        "nodeType": "YulIdentifier",
                                        "src": "1575:6:3"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "1427:1:3"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1430:4:3",
                                    "type": "",
                                    "value": "0x08"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1424:2:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1424:11:3"
                              },
                              "nodeType": "YulForLoop",
                              "post": {
                                "nodeType": "YulBlock",
                                "src": "1436:18:3",
                                "statements": [
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "1438:14:3",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "1447:1:3"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1450:1:3",
                                          "type": "",
                                          "value": "1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "1443:3:3"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1443:9:3"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "i",
                                        "nodeType": "YulIdentifier",
                                        "src": "1438:1:3"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "pre": {
                                "nodeType": "YulBlock",
                                "src": "1420:3:3",
                                "statements": []
                              },
                              "src": "1416:194:3"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_array$_t_uint256_$8_memory_ptr__to_t_array$_t_uint256_$8_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "1237:9:3",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "1248:6:3",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "1259:4:3",
                            "type": ""
                          }
                        ],
                        "src": "1121:495:3"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "1653:95:3",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1670:1:3",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1677:3:3",
                                        "type": "",
                                        "value": "224"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1682:10:3",
                                        "type": "",
                                        "value": "0x4e487b71"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "1673:3:3"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1673:20:3"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "1663:6:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1663:31:3"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1663:31:3"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1710:1:3",
                                    "type": "",
                                    "value": "4"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1713:4:3",
                                    "type": "",
                                    "value": "0x32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "1703:6:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1703:15:3"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1703:15:3"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1734:1:3",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1737:4:3",
                                    "type": "",
                                    "value": "0x24"
                                  }
                                ],
                                "functionName": {
                                  "name": "revert",
                                  "nodeType": "YulIdentifier",
                                  "src": "1727:6:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1727:15:3"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1727:15:3"
                            }
                          ]
                        },
                        "name": "panic_error_0x32",
                        "nodeType": "YulFunctionDefinition",
                        "src": "1621:127:3"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "1785:95:3",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1802:1:3",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1809:3:3",
                                        "type": "",
                                        "value": "224"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1814:10:3",
                                        "type": "",
                                        "value": "0x4e487b71"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "1805:3:3"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1805:20:3"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "1795:6:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1795:31:3"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1795:31:3"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1842:1:3",
                                    "type": "",
                                    "value": "4"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1845:4:3",
                                    "type": "",
                                    "value": "0x11"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "1835:6:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1835:15:3"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1835:15:3"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1866:1:3",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1869:4:3",
                                    "type": "",
                                    "value": "0x24"
                                  }
                                ],
                                "functionName": {
                                  "name": "revert",
                                  "nodeType": "YulIdentifier",
                                  "src": "1859:6:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1859:15:3"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1859:15:3"
                            }
                          ]
                        },
                        "name": "panic_error_0x11",
                        "nodeType": "YulFunctionDefinition",
                        "src": "1753:127:3"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "1932:88:3",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "1963:22:3",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x11",
                                        "nodeType": "YulIdentifier",
                                        "src": "1965:16:3"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1965:18:3"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1965:18:3"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "1948:5:3"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1959:1:3",
                                        "type": "",
                                        "value": "0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "1955:3:3"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1955:6:3"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "1945:2:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1945:17:3"
                              },
                              "nodeType": "YulIf",
                              "src": "1942:43:3"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "1994:20:3",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "2005:5:3"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2012:1:3",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2001:3:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2001:13:3"
                              },
                              "variableNames": [
                                {
                                  "name": "ret",
                                  "nodeType": "YulIdentifier",
                                  "src": "1994:3:3"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "increment_t_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "1914:5:3",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "ret",
                            "nodeType": "YulTypedName",
                            "src": "1924:3:3",
                            "type": ""
                          }
                        ],
                        "src": "1885:135:3"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "2074:76:3",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "2096:22:3",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x11",
                                        "nodeType": "YulIdentifier",
                                        "src": "2098:16:3"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2098:18:3"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "2098:18:3"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "2090:1:3"
                                  },
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "2093:1:3"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "2087:2:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2087:8:3"
                              },
                              "nodeType": "YulIf",
                              "src": "2084:34:3"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "2127:17:3",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "2139:1:3"
                                  },
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "2142:1:3"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "2135:3:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2135:9:3"
                              },
                              "variableNames": [
                                {
                                  "name": "diff",
                                  "nodeType": "YulIdentifier",
                                  "src": "2127:4:3"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "checked_sub_t_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "x",
                            "nodeType": "YulTypedName",
                            "src": "2056:1:3",
                            "type": ""
                          },
                          {
                            "name": "y",
                            "nodeType": "YulTypedName",
                            "src": "2059:1:3",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "diff",
                            "nodeType": "YulTypedName",
                            "src": "2065:4:3",
                            "type": ""
                          }
                        ],
                        "src": "2025:125:3"
                      }
                    ]
                  },
                  "contents": "{\n    { }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function panic_error_0x21()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_enum$_Tier_$64__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        if iszero(lt(value0, 9))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x21)\n            revert(0, 0x24)\n        }\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_enum$_Tier_$64(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(lt(value, 9)) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_array$_t_uint256_$8_memory_ptr__to_t_array$_t_uint256_$8_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 256)\n        let pos := headStart\n        pos := headStart\n        let srcPtr := value0\n        let i := 0\n        for { } lt(i, 0x08) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            let _1 := 0x20\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n}",
                  "id": 3,
                  "language": "Yul",
                  "name": "#utility.yul"
                }
              ],
              "immutableReferences": {
                "102": [
                  {
                    "length": 32,
                    "start": 203
                  }
                ],
                "104": [
                  {
                    "length": 32,
                    "start": 238
                  }
                ],
                "106": [
                  {
                    "length": 32,
                    "start": 276
                  }
                ],
                "108": [
                  {
                    "length": 32,
                    "start": 314
                  }
                ],
                "110": [
                  {
                    "length": 32,
                    "start": 352
                  }
                ],
                "112": [
                  {
                    "length": 32,
                    "start": 390
                  }
                ],
                "114": [
                  {
                    "length": 32,
                    "start": 428
                  }
                ],
                "116": [
                  {
                    "length": 32,
                    "start": 466
                  }
                ]
              },
              "linkReferences": {},
              "object": "608060405234801561001057600080fd5b50600436106100415760003560e01c80634bc1010e146100465780635d2c11171461006f57806370230b3914610090575b600080fd5b6100596100543660046102e0565b6100a5565b604051610066919061030f565b60405180910390f35b61008261007d366004610337565b6100b6565b604051908152602001610066565b6100986100c1565b6040516100669190610358565b60006100b0826101f9565b92915050565b60006100b08261025f565b6100c96102c1565b7f000000000000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000000060208201527f000000000000000000000000000000000000000000000000000000000000000060408201527f000000000000000000000000000000000000000000000000000000000000000060608201527f000000000000000000000000000000000000000000000000000000000000000060808201527f000000000000000000000000000000000000000000000000000000000000000060a08201527f000000000000000000000000000000000000000000000000000000000000000060c08201527f000000000000000000000000000000000000000000000000000000000000000060e082015290565b6000805b60088110156102565761020e6100c1565b816008811061021f5761021f61038a565b60200201518310156102445780600881111561023d5761023d6102f9565b9392505050565b8061024e816103b6565b9150506101fd565b50600892915050565b600080826008811115610274576102746102f9565b116102805760006100b0565b6102886100c1565b600183600881111561029c5761029c6102f9565b6102a691906103d1565b600881106102b6576102b661038a565b602002015192915050565b6040518061010001604052806008906020820280368337509192915050565b6000602082840312156102f257600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b602081016009831061033157634e487b7160e01b600052602160045260246000fd5b91905290565b60006020828403121561034957600080fd5b81356009811061023d57600080fd5b6101008101818360005b6008811015610381578151835260209283019290910190600101610362565b50505092915050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156103ca576103ca6103a0565b5060010190565b6000828210156103e3576103e36103a0565b50039056fea2646970667358221220afac5e022a3cfac31be2db5c7b95c9ea5ccf81f280fed3c16371e3154fd17aa964736f6c634300080a0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x4BC1010E EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x5D2C1117 EQ PUSH2 0x6F JUMPI DUP1 PUSH4 0x70230B39 EQ PUSH2 0x90 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x59 PUSH2 0x54 CALLDATASIZE PUSH1 0x4 PUSH2 0x2E0 JUMP JUMPDEST PUSH2 0xA5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x66 SWAP2 SWAP1 PUSH2 0x30F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x82 PUSH2 0x7D CALLDATASIZE PUSH1 0x4 PUSH2 0x337 JUMP JUMPDEST PUSH2 0xB6 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x66 JUMP JUMPDEST PUSH2 0x98 PUSH2 0xC1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x66 SWAP2 SWAP1 PUSH2 0x358 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB0 DUP3 PUSH2 0x1F9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB0 DUP3 PUSH2 0x25F JUMP JUMPDEST PUSH2 0xC9 PUSH2 0x2C1 JUMP JUMPDEST PUSH32 0x0 DUP2 MSTORE PUSH32 0x0 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x0 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x0 PUSH1 0x60 DUP3 ADD MSTORE PUSH32 0x0 PUSH1 0x80 DUP3 ADD MSTORE PUSH32 0x0 PUSH1 0xA0 DUP3 ADD MSTORE PUSH32 0x0 PUSH1 0xC0 DUP3 ADD MSTORE PUSH32 0x0 PUSH1 0xE0 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST PUSH1 0x8 DUP2 LT ISZERO PUSH2 0x256 JUMPI PUSH2 0x20E PUSH2 0xC1 JUMP JUMPDEST DUP2 PUSH1 0x8 DUP2 LT PUSH2 0x21F JUMPI PUSH2 0x21F PUSH2 0x38A JUMP JUMPDEST PUSH1 0x20 MUL ADD MLOAD DUP4 LT ISZERO PUSH2 0x244 JUMPI DUP1 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x23D JUMPI PUSH2 0x23D PUSH2 0x2F9 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 PUSH2 0x24E DUP2 PUSH2 0x3B6 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1FD JUMP JUMPDEST POP PUSH1 0x8 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x274 JUMPI PUSH2 0x274 PUSH2 0x2F9 JUMP JUMPDEST GT PUSH2 0x280 JUMPI PUSH1 0x0 PUSH2 0xB0 JUMP JUMPDEST PUSH2 0x288 PUSH2 0xC1 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x29C JUMPI PUSH2 0x29C PUSH2 0x2F9 JUMP JUMPDEST PUSH2 0x2A6 SWAP2 SWAP1 PUSH2 0x3D1 JUMP JUMPDEST PUSH1 0x8 DUP2 LT PUSH2 0x2B6 JUMPI PUSH2 0x2B6 PUSH2 0x38A JUMP JUMPDEST PUSH1 0x20 MUL ADD MLOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x100 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x8 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 DUP2 ADD PUSH1 0x9 DUP4 LT PUSH2 0x331 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x349 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x9 DUP2 LT PUSH2 0x23D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x100 DUP2 ADD DUP2 DUP4 PUSH1 0x0 JUMPDEST PUSH1 0x8 DUP2 LT ISZERO PUSH2 0x381 JUMPI DUP2 MLOAD DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x362 JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x3CA JUMPI PUSH2 0x3CA PUSH2 0x3A0 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x3E3 JUMPI PUSH2 0x3E3 PUSH2 0x3A0 JUMP JUMPDEST POP SUB SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAF 0xAC 0x5E MUL 0x2A EXTCODECOPY STATICCALL 0xC3 SHL 0xE2 0xDB 0x5C PUSH28 0x95C9EA5CCF81F280FED3C16371E3154FD17AA964736F6C634300080A STOP CALLER ",
              "sourceMap": "295:624:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;758:159;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;566:157;;;;;;:::i;:::-;;:::i;:::-;;;1085:25:3;;;1073:2;1058:18;566:157:0;939:177:3;1504:388:2;;;:::i;:::-;;;;;;;:::i;758:159:0:-;848:10;881:29;903:6;881:21;:29::i;:::-;874:36;758:159;-1:-1:-1;;758:159:0:o;566:157::-;658:7;688:28;710:5;688:21;:28::i;1504:388:2:-;1546:29;;:::i;:::-;1604:7;1587:24;;1638:7;1587:14;1621;;:24;1672:9;1655:14;;;:26;1708:8;1691:14;;;:25;1743:8;1726:14;;;:25;1778:7;1761:14;;;:24;1812:9;1795:14;;;:26;1848:9;1831:14;;;:26;1587:11;1504:388::o;2242:259::-;2301:10;;2323:139;2347:1;2343;:5;2323:139;;;2382:12;:10;:12::i;:::-;2395:1;2382:15;;;;;;;:::i;:::-;;;;;2373:6;:24;2369:83;;;2435:1;2424:13;;;;;;;;:::i;:::-;2417:20;2242:259;-1:-1:-1;;;2242:259:2:o;2369:83::-;2350:3;;;;:::i;:::-;;;;2323:139;;;-1:-1:-1;2478:16:2;;2242:259;-1:-1:-1;;2242:259:2:o;2017:156::-;2078:7;;2104:5;:23;;;;;;;;:::i;:::-;;:62;;2165:1;2104:62;;;2130:12;:10;:12::i;:::-;2160:1;2151:5;2143:14;;;;;;;;:::i;:::-;:18;;;;:::i;:::-;2130:32;;;;;;;:::i;:::-;;;;;2097:69;2017:156;-1:-1:-1;;2017:156:2:o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;:::o;14:180:3:-;73:6;126:2;114:9;105:7;101:23;97:32;94:52;;;142:1;139;132:12;94:52;-1:-1:-1;165:23:3;;14:180;-1:-1:-1;14:180:3:o;199:127::-;260:10;255:3;251:20;248:1;241:31;291:4;288:1;281:15;315:4;312:1;305:15;331:335;470:2;455:18;;503:1;492:13;;482:144;;548:10;543:3;539:20;536:1;529:31;583:4;580:1;573:15;611:4;608:1;601:15;482:144;635:25;;;331:335;:::o;671:263::-;737:6;790:2;778:9;769:7;765:23;761:32;758:52;;;806:1;803;796:12;758:52;845:9;832:23;884:1;877:5;874:12;864:40;;900:1;897;890:12;1121:495;1301:3;1286:19;;1290:9;1382:6;1259:4;1416:194;1430:4;1427:1;1424:11;1416:194;;;1489:13;;1477:26;;1526:4;1550:12;;;;1585:15;;;;1450:1;1443:9;1416:194;;;1420:3;;;1121:495;;;;:::o;1621:127::-;1682:10;1677:3;1673:20;1670:1;1663:31;1713:4;1710:1;1703:15;1737:4;1734:1;1727:15;1753:127;1814:10;1809:3;1805:20;1802:1;1795:31;1845:4;1842:1;1835:15;1869:4;1866:1;1859:15;1885:135;1924:3;-1:-1:-1;;1945:17:3;;1942:43;;;1965:18;;:::i;:::-;-1:-1:-1;2012:1:3;2001:13;;1885:135::o;2025:125::-;2065:4;2093:1;2090;2087:8;2084:34;;;2098:18;;:::i;:::-;-1:-1:-1;2135:9:3;;2025:125::o"
            },
            "methodIdentifiers": {
              "tierValues()": "70230b39",
              "wrappedTierToValue(uint8)": "5d2c1117",
              "wrappedValueToTier(uint256)": "4bc1010e"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256[8]\",\"name\":\"tierValues_\",\"type\":\"uint256[8]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"tierValues\",\"outputs\":[{\"internalType\":\"uint256[8]\",\"name\":\"tierValues_\",\"type\":\"uint256[8]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ITier.Tier\",\"name\":\"tier_\",\"type\":\"uint8\"}],\"name\":\"wrappedTierToValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"wrappedValueToTier\",\"outputs\":[{\"internalType\":\"enum ITier.Tier\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"tierValues()\":{\"returns\":{\"tierValues_\":\"The immutable `tierValues`.\"}}},\"title\":\"ValueTierTest Thin wrapper around the `ValueTier` contract to facilitate hardhat unit testing of `internal` functions.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Set the `tierValues` on construction to be referenced immutably.\"},\"tierValues()\":{\"notice\":\"Complements the default solidity accessor for `tierValues`. Returns all the values in a list rather than requiring an index be specified.\"},\"wrappedTierToValue(uint8)\":{\"notice\":\"Wraps `tierToValue`.\"},\"wrappedValueToTier(uint256)\":{\"notice\":\"Wraps `valueToTier`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/ValueTierTest.sol\":\"ValueTierTest\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/test/ValueTierTest.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\n\\npragma solidity 0.8.10;\\n\\nimport { ValueTier } from \\\"../tier/ValueTier.sol\\\";\\nimport { ITier } from \\\"../tier/ITier.sol\\\";\\n\\n/// @title ValueTierTest\\n///\\n/// Thin wrapper around the `ValueTier` contract to facilitate hardhat unit\\n/// testing of `internal` functions.\\ncontract ValueTierTest is ValueTier {\\n    /// Set the `tierValues` on construction to be referenced immutably.\\n    constructor(uint256[8] memory tierValues_)\\n        ValueTier(tierValues_)\\n    { } // solhint-disable-line no-empty-blocks\\n\\n    /// Wraps `tierToValue`.\\n    function wrappedTierToValue(ITier.Tier tier_)\\n        external\\n        view\\n        returns(uint256)\\n    {\\n        return ValueTier.tierToValue(tier_);\\n    }\\n\\n    /// Wraps `valueToTier`.\\n    function wrappedValueToTier(uint256 value_)\\n        external\\n        view\\n        returns(ITier.Tier)\\n    {\\n        return ValueTier.valueToTier(value_);\\n    }\\n}\",\"keccak256\":\"0xc47fda7449c571a203d3ffce0187910b78e266c573432c523ef3d0e9809f7beb\",\"license\":\"CAL\"},\"contracts/tier/ITier.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\n\\npragma solidity 0.8.10;\\n\\n/// @title ITier\\n/// @notice `ITier` is a simple interface that contracts can\\n/// implement to provide membership lists for other contracts.\\n///\\n/// There are many use-cases for a time-preserving,\\n/// conditional membership list.\\n///\\n/// Some examples include:\\n///\\n/// - Self-serve whitelist to participate in fundraising\\n/// - Lists of users who can claim airdrops and perks\\n/// - Pooling resources with implied governance/reward tiers\\n/// - POAP style attendance proofs allowing access to future exclusive events\\n///\\n/// @dev Standard interface to a tiered membership.\\n///\\n/// A \\\"membership\\\" can represent many things:\\n/// - Exclusive access.\\n/// - Participation in some event or process.\\n/// - KYC completion.\\n/// - Combination of sub-memberships.\\n/// - Etc.\\n///\\n/// The high level requirements for a contract implementing `ITier`:\\n/// - MUST represent held tiers with the `Tier` enum.\\n/// - MUST implement `report`.\\n///   - The report is a `uint256` that SHOULD represent the block each tier has\\n///     been continuously held since encoded as `uint32`.\\n///   - The encoded tiers start at ONE; ZERO is implied if no tier has ever\\n///     been held.\\n///   - `Tier.ZERO` is NOT encoded in the report, it is simply the fallback\\n///     value.\\n///   - If a tier is lost the block data is erased for that tier and will be\\n///     set if/when the tier is regained to the new block.\\n///   - If the historical block information is not available the report MAY\\n///     return `0x00000000` for all held tiers.\\n///   - Tiers that are lost or have never been held MUST return `0xFFFFFFFF`.\\n/// - SHOULD implement `setTier`.\\n///   - Contracts SHOULD revert with `SET_TIER` error if they cannot\\n///     meaningfully set a tier directly.\\n///     For example a contract that can only derive a membership tier by\\n///     reading the state of an external contract cannot set tiers.\\n///   - Contracts implementing `setTier` SHOULD error with `SET_ZERO_TIER`\\n///     if `Tier.ZERO` is being set.\\n/// - MUST emit `TierChange` when `setTier` successfully writes a new tier.\\n///   - Contracts that cannot meaningfully set a tier are exempt.\\ninterface ITier {\\n\\n    /// 9 Possible tiers.\\n    /// Fits nicely as uint32 in uint256 which is helpful for internal storage\\n    /// concerns.\\n    /// 8 tiers can be achieved, ZERO is the tier when no tier has been\\n    /// achieved.\\n    enum Tier {\\n        ZERO,\\n        ONE,\\n        TWO,\\n        THREE,\\n        FOUR,\\n        FIVE,\\n        SIX,\\n        SEVEN,\\n        EIGHT\\n    }\\n\\n    /// Every time a Tier changes we log start and end Tier against the\\n    /// account.\\n    /// This MAY NOT be emitted if reports are being read from the state of an\\n    /// external contract.\\n    event TierChange(\\n        address indexed account,\\n        Tier indexed startTier,\\n        Tier indexed endTier\\n    );\\n\\n    /// @notice Users can set their own tier by calling `setTier`.\\n    ///\\n    /// The contract that implements `ITier` is responsible for checking\\n    /// eligibility and/or taking actions required to set the tier.\\n    ///\\n    /// For example, the contract must take/refund any tokens relevant to\\n    /// changing the tier.\\n    ///\\n    /// Obviously the user is responsible for any approvals for this action\\n    /// prior to calling `setTier`.\\n    ///\\n    /// When the tier is changed a `TierChange` event will be emmited as:\\n    /// ```\\n    /// event TierChange(address account, Tier startTier, Tier endTier);\\n    /// ```\\n    ///\\n    /// The `setTier` function includes arbitrary data as the third\\n    /// parameter. This can be used to disambiguate in the case that\\n    /// there may be many possible options for a user to achieve some tier.\\n    ///\\n    /// For example, consider the case where `Tier.THREE` can be achieved\\n    /// by EITHER locking 1x rare NFT or 3x uncommon NFTs. A user with both\\n    /// could use `data` to explicitly state their intent.\\n    ///\\n    /// NOTE however that _any_ address can call `setTier` for any other\\n    /// address.\\n    ///\\n    /// If you implement `data` or anything that changes state then be very\\n    /// careful to avoid griefing attacks.\\n    ///\\n    /// The `data` parameter can also be ignored by the contract implementing\\n    /// `ITier`. For example, ERC20 tokens are fungible so only the balance\\n    /// approved by the user is relevant to a tier change.\\n    ///\\n    /// The `setTier` function SHOULD prevent users from reassigning\\n    /// `Tier.ZERO` to themselves.\\n    ///\\n    /// The `Tier.ZERO` status represents never having any status.\\n    /// @dev Updates the tier of an account.\\n    ///\\n    /// The implementing contract is responsible for all checks and state\\n    /// changes required to set the tier. For example, taking/refunding\\n    /// funds/NFTs etc.\\n    ///\\n    /// Contracts may disallow directly setting tiers, preferring to derive\\n    /// reports from other onchain data.\\n    /// In this case they should `revert(\\\"SET_TIER\\\");`.\\n    ///\\n    /// @param account Account to change the tier for.\\n    /// @param endTier Tier after the change.\\n    /// @param data Arbitrary input to disambiguate ownership\\n    /// (e.g. NFTs to lock).\\n    function setTier(\\n        address account,\\n        Tier endTier,\\n        bytes memory data\\n    )\\n        external;\\n\\n    /// @notice A tier report is a `uint256` that contains each of the block\\n    /// numbers each tier has been held continously since as a `uint32`.\\n    /// There are 9 possible tier, starting with `Tier.ZERO` for `0` offset or\\n    /// \\\"never held any tier\\\" then working up through 8x 4 byte offsets to the\\n    /// full 256 bits.\\n    ///\\n    /// Low bits = Lower tier.\\n    ///\\n    /// In hexadecimal every 8 characters = one tier, starting at `Tier.EIGHT`\\n    /// from high bits and working down to `Tier.ONE`.\\n    ///\\n    /// `uint32` should be plenty for any blockchain that measures block times\\n    /// in seconds, but reconsider if deploying to an environment with\\n    /// significantly sub-second block times.\\n    ///\\n    /// ~135 years of 1 second blocks fit into `uint32`.\\n    ///\\n    /// `2^8 / (365 * 24 * 60 * 60)`\\n    ///\\n    /// When a user INCREASES their tier they keep all the block numbers they\\n    /// already had, and get new block times for each increased tiers they have\\n    /// earned.\\n    ///\\n    /// When a user DECREASES their tier they return to `0xFFFFFFFF` (never)\\n    /// for every tier level they remove, but keep their block numbers for the\\n    /// remaining tiers.\\n    ///\\n    /// GUIs are encouraged to make this dynamic very clear for users as\\n    /// round-tripping to a lower status and back is a DESTRUCTIVE operation\\n    /// for block times.\\n    ///\\n    /// The intent is that downstream code can provide additional benefits for\\n    /// members who have maintained a certain tier for/since a long time.\\n    /// These benefits can be provided by inspecting the report, and by\\n    /// on-chain contracts directly,\\n    /// rather than needing to work with snapshots etc.\\n    /// @dev Returns the earliest block the account has held each tier for\\n    /// continuously.\\n    /// This is encoded as a uint256 with blocks represented as 8x\\n    /// concatenated uint32.\\n    /// I.e. Each 4 bytes of the uint256 represents a u32 tier start time.\\n    /// The low bits represent low tiers and high bits the high tiers.\\n    /// Implementing contracts should return 0xFFFFFFFF for lost &\\n    /// never-held tiers.\\n    ///\\n    /// @param account Account to get the report for.\\n    /// @return The report blocks encoded as a uint256.\\n    function report(address account) external view returns (uint256);\\n}\",\"keccak256\":\"0x9df1a0a477801f332f9b95fb6d400d2edb4fce18c089c0df0a5affc02ebd4121\",\"license\":\"CAL\"},\"contracts/tier/ValueTier.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\n\\npragma solidity 0.8.10;\\n\\nimport { ITier } from \\\"./ITier.sol\\\";\\n\\n/// @title ValueTier\\n///\\n/// @dev A contract that is `ValueTier` expects to derive tiers from explicit\\n/// values. For example an address must send or hold an amount of something to\\n/// reach a given tier.\\n/// Anything with predefined values that map to tiers can be a `ValueTier`.\\n///\\n/// Note that `ValueTier` does NOT implement `ITier`.\\n/// `ValueTier` does include state however, to track the `tierValues` so is not\\n/// a library.\\ncontract ValueTier {\\n    uint256 private immutable tierOne;\\n    uint256 private immutable tierTwo;\\n    uint256 private immutable tierThree;\\n    uint256 private immutable tierFour;\\n    uint256 private immutable tierFive;\\n    uint256 private immutable tierSix;\\n    uint256 private immutable tierSeven;\\n    uint256 private immutable tierEight;\\n\\n    /// Set the `tierValues` on construction to be referenced immutably.\\n    constructor(uint256[8] memory tierValues_) {\\n        tierOne = tierValues_[0];\\n        tierTwo = tierValues_[1];\\n        tierThree = tierValues_[2];\\n        tierFour = tierValues_[3];\\n        tierFive = tierValues_[4];\\n        tierSix = tierValues_[5];\\n        tierSeven = tierValues_[6];\\n        tierEight = tierValues_[7];\\n    }\\n\\n    /// Complements the default solidity accessor for `tierValues`.\\n    /// Returns all the values in a list rather than requiring an index be\\n    /// specified.\\n    /// @return tierValues_ The immutable `tierValues`.\\n    function tierValues() public view returns(uint256[8] memory tierValues_) {\\n        tierValues_[0] = tierOne;\\n        tierValues_[1] = tierTwo;\\n        tierValues_[2] = tierThree;\\n        tierValues_[3] = tierFour;\\n        tierValues_[4] = tierFive;\\n        tierValues_[5] = tierSix;\\n        tierValues_[6] = tierSeven;\\n        tierValues_[7] = tierEight;\\n        return tierValues_;\\n    }\\n\\n    /// Converts a Tier to the minimum value it requires.\\n    /// `Tier.ZERO` is always value 0 as it is the fallback.\\n    function tierToValue(ITier.Tier tier_) internal view returns(uint256) {\\n        return tier_ > ITier.Tier.ZERO ? tierValues()[uint256(tier_) - 1] : 0;\\n    }\\n\\n    /// Converts a value to the maximum Tier it qualifies for.\\n    function valueToTier(uint256 value_) internal view returns(ITier.Tier) {\\n        for (uint256 i = 0; i < 8; i++) {\\n            if (value_ < tierValues()[i]) {\\n                return ITier.Tier(i);\\n            }\\n        }\\n        return ITier.Tier.EIGHT;\\n    }\\n}\",\"keccak256\":\"0xd137ae58da1d801f596aa57ffe5826b5fb6ef92f3f1de676d54126ae7682ce7e\",\"license\":\"CAL\"}},\"version\":1}"
        }
      },
      "contracts/tier/ITier.sol": {
        "ITier": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "enum ITier.Tier",
                  "name": "startTier",
                  "type": "uint8"
                },
                {
                  "indexed": true,
                  "internalType": "enum ITier.Tier",
                  "name": "endTier",
                  "type": "uint8"
                }
              ],
              "name": "TierChange",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "report",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "internalType": "enum ITier.Tier",
                  "name": "endTier",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "name": "setTier",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "report(address)": "e053ea31",
              "setTier(address,uint8,bytes)": "52dab69d"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum ITier.Tier\",\"name\":\"startTier\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"enum ITier.Tier\",\"name\":\"endTier\",\"type\":\"uint8\"}],\"name\":\"TierChange\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"report\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"enum ITier.Tier\",\"name\":\"endTier\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"setTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Standard interface to a tiered membership. A \\\"membership\\\" can represent many things: - Exclusive access. - Participation in some event or process. - KYC completion. - Combination of sub-memberships. - Etc. The high level requirements for a contract implementing `ITier`: - MUST represent held tiers with the `Tier` enum. - MUST implement `report`.   - The report is a `uint256` that SHOULD represent the block each tier has     been continuously held since encoded as `uint32`.   - The encoded tiers start at ONE; ZERO is implied if no tier has ever     been held.   - `Tier.ZERO` is NOT encoded in the report, it is simply the fallback     value.   - If a tier is lost the block data is erased for that tier and will be     set if/when the tier is regained to the new block.   - If the historical block information is not available the report MAY     return `0x00000000` for all held tiers.   - Tiers that are lost or have never been held MUST return `0xFFFFFFFF`. - SHOULD implement `setTier`.   - Contracts SHOULD revert with `SET_TIER` error if they cannot     meaningfully set a tier directly.     For example a contract that can only derive a membership tier by     reading the state of an external contract cannot set tiers.   - Contracts implementing `setTier` SHOULD error with `SET_ZERO_TIER`     if `Tier.ZERO` is being set. - MUST emit `TierChange` when `setTier` successfully writes a new tier.   - Contracts that cannot meaningfully set a tier are exempt.\",\"kind\":\"dev\",\"methods\":{\"report(address)\":{\"details\":\"Returns the earliest block the account has held each tier for continuously. This is encoded as a uint256 with blocks represented as 8x concatenated uint32. I.e. Each 4 bytes of the uint256 represents a u32 tier start time. The low bits represent low tiers and high bits the high tiers. Implementing contracts should return 0xFFFFFFFF for lost & never-held tiers.\",\"params\":{\"account\":\"Account to get the report for.\"},\"returns\":{\"_0\":\"The report blocks encoded as a uint256.\"}},\"setTier(address,uint8,bytes)\":{\"details\":\"Updates the tier of an account. The implementing contract is responsible for all checks and state changes required to set the tier. For example, taking/refunding funds/NFTs etc. Contracts may disallow directly setting tiers, preferring to derive reports from other onchain data. In this case they should `revert(\\\"SET_TIER\\\");`.\",\"params\":{\"account\":\"Account to change the tier for.\",\"data\":\"Arbitrary input to disambiguate ownership (e.g. NFTs to lock).\",\"endTier\":\"Tier after the change.\"}}},\"title\":\"ITier\",\"version\":1},\"userdoc\":{\"events\":{\"TierChange(address,uint8,uint8)\":{\"notice\":\"Every time a Tier changes we log start and end Tier against the account. This MAY NOT be emitted if reports are being read from the state of an external contract.\"}},\"kind\":\"user\",\"methods\":{\"report(address)\":{\"notice\":\"A tier report is a `uint256` that contains each of the block numbers each tier has been held continously since as a `uint32`. There are 9 possible tier, starting with `Tier.ZERO` for `0` offset or \\\"never held any tier\\\" then working up through 8x 4 byte offsets to the full 256 bits. Low bits = Lower tier. In hexadecimal every 8 characters = one tier, starting at `Tier.EIGHT` from high bits and working down to `Tier.ONE`. `uint32` should be plenty for any blockchain that measures block times in seconds, but reconsider if deploying to an environment with significantly sub-second block times. ~135 years of 1 second blocks fit into `uint32`. `2^8 / (365 * 24 * 60 * 60)` When a user INCREASES their tier they keep all the block numbers they already had, and get new block times for each increased tiers they have earned. When a user DECREASES their tier they return to `0xFFFFFFFF` (never) for every tier level they remove, but keep their block numbers for the remaining tiers. GUIs are encouraged to make this dynamic very clear for users as round-tripping to a lower status and back is a DESTRUCTIVE operation for block times. The intent is that downstream code can provide additional benefits for members who have maintained a certain tier for/since a long time. These benefits can be provided by inspecting the report, and by on-chain contracts directly, rather than needing to work with snapshots etc.\"},\"setTier(address,uint8,bytes)\":{\"notice\":\"Users can set their own tier by calling `setTier`. The contract that implements `ITier` is responsible for checking eligibility and/or taking actions required to set the tier. For example, the contract must take/refund any tokens relevant to changing the tier. Obviously the user is responsible for any approvals for this action prior to calling `setTier`. When the tier is changed a `TierChange` event will be emmited as: ``` event TierChange(address account, Tier startTier, Tier endTier); ``` The `setTier` function includes arbitrary data as the third parameter. This can be used to disambiguate in the case that there may be many possible options for a user to achieve some tier. For example, consider the case where `Tier.THREE` can be achieved by EITHER locking 1x rare NFT or 3x uncommon NFTs. A user with both could use `data` to explicitly state their intent. NOTE however that _any_ address can call `setTier` for any other address. If you implement `data` or anything that changes state then be very careful to avoid griefing attacks. The `data` parameter can also be ignored by the contract implementing `ITier`. For example, ERC20 tokens are fungible so only the balance approved by the user is relevant to a tier change. The `setTier` function SHOULD prevent users from reassigning `Tier.ZERO` to themselves. The `Tier.ZERO` status represents never having any status.\"}},\"notice\":\"`ITier` is a simple interface that contracts can implement to provide membership lists for other contracts. There are many use-cases for a time-preserving, conditional membership list. Some examples include: - Self-serve whitelist to participate in fundraising - Lists of users who can claim airdrops and perks - Pooling resources with implied governance/reward tiers - POAP style attendance proofs allowing access to future exclusive events\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tier/ITier.sol\":\"ITier\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/tier/ITier.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\n\\npragma solidity 0.8.10;\\n\\n/// @title ITier\\n/// @notice `ITier` is a simple interface that contracts can\\n/// implement to provide membership lists for other contracts.\\n///\\n/// There are many use-cases for a time-preserving,\\n/// conditional membership list.\\n///\\n/// Some examples include:\\n///\\n/// - Self-serve whitelist to participate in fundraising\\n/// - Lists of users who can claim airdrops and perks\\n/// - Pooling resources with implied governance/reward tiers\\n/// - POAP style attendance proofs allowing access to future exclusive events\\n///\\n/// @dev Standard interface to a tiered membership.\\n///\\n/// A \\\"membership\\\" can represent many things:\\n/// - Exclusive access.\\n/// - Participation in some event or process.\\n/// - KYC completion.\\n/// - Combination of sub-memberships.\\n/// - Etc.\\n///\\n/// The high level requirements for a contract implementing `ITier`:\\n/// - MUST represent held tiers with the `Tier` enum.\\n/// - MUST implement `report`.\\n///   - The report is a `uint256` that SHOULD represent the block each tier has\\n///     been continuously held since encoded as `uint32`.\\n///   - The encoded tiers start at ONE; ZERO is implied if no tier has ever\\n///     been held.\\n///   - `Tier.ZERO` is NOT encoded in the report, it is simply the fallback\\n///     value.\\n///   - If a tier is lost the block data is erased for that tier and will be\\n///     set if/when the tier is regained to the new block.\\n///   - If the historical block information is not available the report MAY\\n///     return `0x00000000` for all held tiers.\\n///   - Tiers that are lost or have never been held MUST return `0xFFFFFFFF`.\\n/// - SHOULD implement `setTier`.\\n///   - Contracts SHOULD revert with `SET_TIER` error if they cannot\\n///     meaningfully set a tier directly.\\n///     For example a contract that can only derive a membership tier by\\n///     reading the state of an external contract cannot set tiers.\\n///   - Contracts implementing `setTier` SHOULD error with `SET_ZERO_TIER`\\n///     if `Tier.ZERO` is being set.\\n/// - MUST emit `TierChange` when `setTier` successfully writes a new tier.\\n///   - Contracts that cannot meaningfully set a tier are exempt.\\ninterface ITier {\\n\\n    /// 9 Possible tiers.\\n    /// Fits nicely as uint32 in uint256 which is helpful for internal storage\\n    /// concerns.\\n    /// 8 tiers can be achieved, ZERO is the tier when no tier has been\\n    /// achieved.\\n    enum Tier {\\n        ZERO,\\n        ONE,\\n        TWO,\\n        THREE,\\n        FOUR,\\n        FIVE,\\n        SIX,\\n        SEVEN,\\n        EIGHT\\n    }\\n\\n    /// Every time a Tier changes we log start and end Tier against the\\n    /// account.\\n    /// This MAY NOT be emitted if reports are being read from the state of an\\n    /// external contract.\\n    event TierChange(\\n        address indexed account,\\n        Tier indexed startTier,\\n        Tier indexed endTier\\n    );\\n\\n    /// @notice Users can set their own tier by calling `setTier`.\\n    ///\\n    /// The contract that implements `ITier` is responsible for checking\\n    /// eligibility and/or taking actions required to set the tier.\\n    ///\\n    /// For example, the contract must take/refund any tokens relevant to\\n    /// changing the tier.\\n    ///\\n    /// Obviously the user is responsible for any approvals for this action\\n    /// prior to calling `setTier`.\\n    ///\\n    /// When the tier is changed a `TierChange` event will be emmited as:\\n    /// ```\\n    /// event TierChange(address account, Tier startTier, Tier endTier);\\n    /// ```\\n    ///\\n    /// The `setTier` function includes arbitrary data as the third\\n    /// parameter. This can be used to disambiguate in the case that\\n    /// there may be many possible options for a user to achieve some tier.\\n    ///\\n    /// For example, consider the case where `Tier.THREE` can be achieved\\n    /// by EITHER locking 1x rare NFT or 3x uncommon NFTs. A user with both\\n    /// could use `data` to explicitly state their intent.\\n    ///\\n    /// NOTE however that _any_ address can call `setTier` for any other\\n    /// address.\\n    ///\\n    /// If you implement `data` or anything that changes state then be very\\n    /// careful to avoid griefing attacks.\\n    ///\\n    /// The `data` parameter can also be ignored by the contract implementing\\n    /// `ITier`. For example, ERC20 tokens are fungible so only the balance\\n    /// approved by the user is relevant to a tier change.\\n    ///\\n    /// The `setTier` function SHOULD prevent users from reassigning\\n    /// `Tier.ZERO` to themselves.\\n    ///\\n    /// The `Tier.ZERO` status represents never having any status.\\n    /// @dev Updates the tier of an account.\\n    ///\\n    /// The implementing contract is responsible for all checks and state\\n    /// changes required to set the tier. For example, taking/refunding\\n    /// funds/NFTs etc.\\n    ///\\n    /// Contracts may disallow directly setting tiers, preferring to derive\\n    /// reports from other onchain data.\\n    /// In this case they should `revert(\\\"SET_TIER\\\");`.\\n    ///\\n    /// @param account Account to change the tier for.\\n    /// @param endTier Tier after the change.\\n    /// @param data Arbitrary input to disambiguate ownership\\n    /// (e.g. NFTs to lock).\\n    function setTier(\\n        address account,\\n        Tier endTier,\\n        bytes memory data\\n    )\\n        external;\\n\\n    /// @notice A tier report is a `uint256` that contains each of the block\\n    /// numbers each tier has been held continously since as a `uint32`.\\n    /// There are 9 possible tier, starting with `Tier.ZERO` for `0` offset or\\n    /// \\\"never held any tier\\\" then working up through 8x 4 byte offsets to the\\n    /// full 256 bits.\\n    ///\\n    /// Low bits = Lower tier.\\n    ///\\n    /// In hexadecimal every 8 characters = one tier, starting at `Tier.EIGHT`\\n    /// from high bits and working down to `Tier.ONE`.\\n    ///\\n    /// `uint32` should be plenty for any blockchain that measures block times\\n    /// in seconds, but reconsider if deploying to an environment with\\n    /// significantly sub-second block times.\\n    ///\\n    /// ~135 years of 1 second blocks fit into `uint32`.\\n    ///\\n    /// `2^8 / (365 * 24 * 60 * 60)`\\n    ///\\n    /// When a user INCREASES their tier they keep all the block numbers they\\n    /// already had, and get new block times for each increased tiers they have\\n    /// earned.\\n    ///\\n    /// When a user DECREASES their tier they return to `0xFFFFFFFF` (never)\\n    /// for every tier level they remove, but keep their block numbers for the\\n    /// remaining tiers.\\n    ///\\n    /// GUIs are encouraged to make this dynamic very clear for users as\\n    /// round-tripping to a lower status and back is a DESTRUCTIVE operation\\n    /// for block times.\\n    ///\\n    /// The intent is that downstream code can provide additional benefits for\\n    /// members who have maintained a certain tier for/since a long time.\\n    /// These benefits can be provided by inspecting the report, and by\\n    /// on-chain contracts directly,\\n    /// rather than needing to work with snapshots etc.\\n    /// @dev Returns the earliest block the account has held each tier for\\n    /// continuously.\\n    /// This is encoded as a uint256 with blocks represented as 8x\\n    /// concatenated uint32.\\n    /// I.e. Each 4 bytes of the uint256 represents a u32 tier start time.\\n    /// The low bits represent low tiers and high bits the high tiers.\\n    /// Implementing contracts should return 0xFFFFFFFF for lost &\\n    /// never-held tiers.\\n    ///\\n    /// @param account Account to get the report for.\\n    /// @return The report blocks encoded as a uint256.\\n    function report(address account) external view returns (uint256);\\n}\",\"keccak256\":\"0x9df1a0a477801f332f9b95fb6d400d2edb4fce18c089c0df0a5affc02ebd4121\",\"license\":\"CAL\"}},\"version\":1}"
        }
      },
      "contracts/tier/ValueTier.sol": {
        "ValueTier": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "uint256[8]",
                  "name": "tierValues_",
                  "type": "uint256[8]"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "inputs": [],
              "name": "tierValues",
              "outputs": [
                {
                  "internalType": "uint256[8]",
                  "name": "tierValues_",
                  "type": "uint256[8]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "@_173": {
                  "entryPoint": null,
                  "id": 173,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "abi_decode_tuple_t_array$_t_uint256_$8_memory_ptr_fromMemory": {
                  "entryPoint": 119,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "panic_error_0x32": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [
                {
                  "ast": {
                    "nodeType": "YulBlock",
                    "src": "0:1029:3",
                    "statements": [
                      {
                        "nodeType": "YulBlock",
                        "src": "6:3:3",
                        "statements": []
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "118:777:3",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "128:13:3",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "138:3:3",
                                "type": "",
                                "value": "256"
                              },
                              "variables": [
                                {
                                  "name": "_1",
                                  "nodeType": "YulTypedName",
                                  "src": "132:2:3",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "186:16:3",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "195:1:3",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "198:1:3",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "188:6:3"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "188:12:3"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "188:12:3"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "161:7:3"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "170:9:3"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "157:3:3"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "157:23:3"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "182:2:3"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "153:3:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "153:32:3"
                              },
                              "nodeType": "YulIf",
                              "src": "150:52:3"
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "257:16:3",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "266:1:3",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "269:1:3",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "259:6:3"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "259:12:3"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "259:12:3"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "headStart",
                                            "nodeType": "YulIdentifier",
                                            "src": "229:9:3"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "240:4:3",
                                            "type": "",
                                            "value": "0x1f"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "225:3:3"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "225:20:3"
                                      },
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "247:7:3"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "slt",
                                      "nodeType": "YulIdentifier",
                                      "src": "221:3:3"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "221:34:3"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "214:6:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "214:42:3"
                              },
                              "nodeType": "YulIf",
                              "src": "211:62:3"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "282:23:3",
                              "value": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "302:2:3",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "296:5:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "296:9:3"
                              },
                              "variables": [
                                {
                                  "name": "memPtr",
                                  "nodeType": "YulTypedName",
                                  "src": "286:6:3",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "314:33:3",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "336:6:3"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "344:2:3"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "332:3:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "332:15:3"
                              },
                              "variables": [
                                {
                                  "name": "newFreePtr",
                                  "nodeType": "YulTypedName",
                                  "src": "318:10:3",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "430:111:3",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "451:1:3",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "458:3:3",
                                              "type": "",
                                              "value": "224"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "463:10:3",
                                              "type": "",
                                              "value": "0x4e487b71"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "shl",
                                            "nodeType": "YulIdentifier",
                                            "src": "454:3:3"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "454:20:3"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "444:6:3"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "444:31:3"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "444:31:3"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "495:1:3",
                                          "type": "",
                                          "value": "4"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "498:4:3",
                                          "type": "",
                                          "value": "0x41"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "488:6:3"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "488:15:3"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "488:15:3"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "523:1:3",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "526:4:3",
                                          "type": "",
                                          "value": "0x24"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "516:6:3"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "516:15:3"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "516:15:3"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "newFreePtr",
                                        "nodeType": "YulIdentifier",
                                        "src": "365:10:3"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "385:2:3",
                                                "type": "",
                                                "value": "64"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "389:1:3",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "381:3:3"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "381:10:3"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "393:1:3",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nodeType": "YulIdentifier",
                                          "src": "377:3:3"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "377:18:3"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "gt",
                                      "nodeType": "YulIdentifier",
                                      "src": "362:2:3"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "362:34:3"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "newFreePtr",
                                        "nodeType": "YulIdentifier",
                                        "src": "401:10:3"
                                      },
                                      {
                                        "name": "memPtr",
                                        "nodeType": "YulIdentifier",
                                        "src": "413:6:3"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "lt",
                                      "nodeType": "YulIdentifier",
                                      "src": "398:2:3"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "398:22:3"
                                  }
                                ],
                                "functionName": {
                                  "name": "or",
                                  "nodeType": "YulIdentifier",
                                  "src": "359:2:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "359:62:3"
                              },
                              "nodeType": "YulIf",
                              "src": "356:185:3"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "557:2:3",
                                    "type": "",
                                    "value": "64"
                                  },
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "561:10:3"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "550:6:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "550:22:3"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "550:22:3"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "581:17:3",
                              "value": {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "592:6:3"
                              },
                              "variables": [
                                {
                                  "name": "dst",
                                  "nodeType": "YulTypedName",
                                  "src": "585:3:3",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "607:32:3",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "625:9:3"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "636:2:3"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "621:3:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "621:18:3"
                              },
                              "variables": [
                                {
                                  "name": "srcEnd",
                                  "nodeType": "YulTypedName",
                                  "src": "611:6:3",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "671:16:3",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "680:1:3",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "683:1:3",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "673:6:3"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "673:12:3"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "673:12:3"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "srcEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "654:6:3"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "662:7:3"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "651:2:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "651:19:3"
                              },
                              "nodeType": "YulIf",
                              "src": "648:39:3"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "696:20:3",
                              "value": {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "707:9:3"
                              },
                              "variables": [
                                {
                                  "name": "src",
                                  "nodeType": "YulTypedName",
                                  "src": "700:3:3",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "783:81:3",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nodeType": "YulIdentifier",
                                          "src": "804:3:3"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "src",
                                              "nodeType": "YulIdentifier",
                                              "src": "815:3:3"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "mload",
                                            "nodeType": "YulIdentifier",
                                            "src": "809:5:3"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "809:10:3"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "797:6:3"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "797:23:3"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "797:23:3"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "833:21:3",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nodeType": "YulIdentifier",
                                          "src": "844:3:3"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "849:4:3",
                                          "type": "",
                                          "value": "0x20"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "840:3:3"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "840:14:3"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "dst",
                                        "nodeType": "YulIdentifier",
                                        "src": "833:3:3"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "src",
                                    "nodeType": "YulIdentifier",
                                    "src": "736:3:3"
                                  },
                                  {
                                    "name": "srcEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "741:6:3"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "733:2:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "733:15:3"
                              },
                              "nodeType": "YulForLoop",
                              "post": {
                                "nodeType": "YulBlock",
                                "src": "749:25:3",
                                "statements": [
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "751:21:3",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "src",
                                          "nodeType": "YulIdentifier",
                                          "src": "762:3:3"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "767:4:3",
                                          "type": "",
                                          "value": "0x20"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "758:3:3"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "758:14:3"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "src",
                                        "nodeType": "YulIdentifier",
                                        "src": "751:3:3"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "pre": {
                                "nodeType": "YulBlock",
                                "src": "729:3:3",
                                "statements": []
                              },
                              "src": "725:139:3"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "873:16:3",
                              "value": {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "883:6:3"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "873:6:3"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_array$_t_uint256_$8_memory_ptr_fromMemory",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "84:9:3",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "95:7:3",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "107:6:3",
                            "type": ""
                          }
                        ],
                        "src": "14:881:3"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "932:95:3",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "949:1:3",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "956:3:3",
                                        "type": "",
                                        "value": "224"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "961:10:3",
                                        "type": "",
                                        "value": "0x4e487b71"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "952:3:3"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "952:20:3"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "942:6:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "942:31:3"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "942:31:3"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "989:1:3",
                                    "type": "",
                                    "value": "4"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "992:4:3",
                                    "type": "",
                                    "value": "0x32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "982:6:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "982:15:3"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "982:15:3"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1013:1:3",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1016:4:3",
                                    "type": "",
                                    "value": "0x24"
                                  }
                                ],
                                "functionName": {
                                  "name": "revert",
                                  "nodeType": "YulIdentifier",
                                  "src": "1006:6:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1006:15:3"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1006:15:3"
                            }
                          ]
                        },
                        "name": "panic_error_0x32",
                        "nodeType": "YulFunctionDefinition",
                        "src": "900:127:3"
                      }
                    ]
                  },
                  "contents": "{\n    { }\n    function abi_decode_tuple_t_array$_t_uint256_$8_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        let _1 := 256\n        if slt(sub(dataEnd, headStart), _1) { revert(0, 0) }\n        if iszero(slt(add(headStart, 0x1f), dataEnd)) { revert(0, 0) }\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, _1)\n        if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x41)\n            revert(0, 0x24)\n        }\n        mstore(64, newFreePtr)\n        let dst := memPtr\n        let srcEnd := add(headStart, _1)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := headStart\n        for { } lt(src, srcEnd) { src := add(src, 0x20) }\n        {\n            mstore(dst, mload(src))\n            dst := add(dst, 0x20)\n        }\n        value0 := memPtr\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n}",
                  "id": 3,
                  "language": "Yul",
                  "name": "#utility.yul"
                }
              ],
              "linkReferences": {},
              "object": "61018060405234801561001157600080fd5b5060405161037038038061037083398101604081905261003091610077565b80516080908152602082015160a0908152604083015160c0908152606084015160e09081529284015161010052908301516101205282015161014052015161016052610103565b600061010080838503121561008b57600080fd5b83601f84011261009a57600080fd5b6040518181016001600160401b03811182821017156100c957634e487b7160e01b600052604160045260246000fd5b6040529083019080858311156100de57600080fd5b845b838110156100f85780518252602091820191016100e0565b509095945050505050565b60805160a05160c05160e0516101005161012051610140516101605161020d610163600039600061015f01526000610139015260006101130152600060ed0152600060c70152600060a101526000607b015260006058015261020d6000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806370230b3914610030575b600080fd5b61003861004e565b60405161004591906101a5565b60405180910390f35b610056610186565b7f000000000000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000000060208201527f000000000000000000000000000000000000000000000000000000000000000060408201527f000000000000000000000000000000000000000000000000000000000000000060608201527f000000000000000000000000000000000000000000000000000000000000000060808201527f000000000000000000000000000000000000000000000000000000000000000060a08201527f000000000000000000000000000000000000000000000000000000000000000060c08201527f000000000000000000000000000000000000000000000000000000000000000060e082015290565b6040518061010001604052806008906020820280368337509192915050565b6101008101818360005b60088110156101ce5781518352602092830192909101906001016101af565b5050509291505056fea26469706673582212204fe6d18cf1ee3d2b58039308091949fcf27c01d21eb50232584d738fae3e956a64736f6c634300080a0033",
              "opcodes": "PUSH2 0x180 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x370 CODESIZE SUB DUP1 PUSH2 0x370 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x30 SWAP2 PUSH2 0x77 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x80 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0xA0 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0xC0 SWAP1 DUP2 MSTORE PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0xE0 SWAP1 DUP2 MSTORE SWAP3 DUP5 ADD MLOAD PUSH2 0x100 MSTORE SWAP1 DUP4 ADD MLOAD PUSH2 0x120 MSTORE DUP3 ADD MLOAD PUSH2 0x140 MSTORE ADD MLOAD PUSH2 0x160 MSTORE PUSH2 0x103 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x8B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x9A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xC9 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP1 DUP4 ADD SWAP1 DUP1 DUP6 DUP4 GT ISZERO PUSH2 0xDE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xF8 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0xE0 JUMP JUMPDEST POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD PUSH2 0x120 MLOAD PUSH2 0x140 MLOAD PUSH2 0x160 MLOAD PUSH2 0x20D PUSH2 0x163 PUSH1 0x0 CODECOPY PUSH1 0x0 PUSH2 0x15F ADD MSTORE PUSH1 0x0 PUSH2 0x139 ADD MSTORE PUSH1 0x0 PUSH2 0x113 ADD MSTORE PUSH1 0x0 PUSH1 0xED ADD MSTORE PUSH1 0x0 PUSH1 0xC7 ADD MSTORE PUSH1 0x0 PUSH1 0xA1 ADD MSTORE PUSH1 0x0 PUSH1 0x7B ADD MSTORE PUSH1 0x0 PUSH1 0x58 ADD MSTORE PUSH2 0x20D PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70230B39 EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x38 PUSH2 0x4E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x45 SWAP2 SWAP1 PUSH2 0x1A5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x56 PUSH2 0x186 JUMP JUMPDEST PUSH32 0x0 DUP2 MSTORE PUSH32 0x0 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x0 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x0 PUSH1 0x60 DUP3 ADD MSTORE PUSH32 0x0 PUSH1 0x80 DUP3 ADD MSTORE PUSH32 0x0 PUSH1 0xA0 DUP3 ADD MSTORE PUSH32 0x0 PUSH1 0xC0 DUP3 ADD MSTORE PUSH32 0x0 PUSH1 0xE0 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x100 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x8 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x100 DUP2 ADD DUP2 DUP4 PUSH1 0x0 JUMPDEST PUSH1 0x8 DUP2 LT ISZERO PUSH2 0x1CE JUMPI DUP2 MLOAD DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1AF JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4F 0xE6 0xD1 DUP13 CALL 0xEE RETURNDATASIZE 0x2B PC SUB SWAP4 ADDMOD MULMOD NOT 0x49 0xFC CALLCODE PUSH29 0x1D21EB50232584D738FAE3E956A64736F6C634300080A003300000000 ",
              "sourceMap": "531:1972:2:-:0;;;950:330;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1013:14;;1003:24;;;;1013:14;1047;;;1037:24;;;;1083:14;;;;1071:26;;;;1118:14;;;;1107:25;;;;1153:14;;;;1142:25;;1187:14;;;;1177:24;;1223:14;;;1211:26;;1259:14;;1247:26;;531:1972;;14:881:3;107:6;138:3;182:2;170:9;161:7;157:23;153:32;150:52;;;198:1;195;188:12;150:52;247:7;240:4;229:9;225:20;221:34;211:62;;269:1;266;259:12;211:62;302:2;296:9;332:15;;;-1:-1:-1;;;;;362:34:3;;398:22;;;359:62;356:185;;;463:10;458:3;454:20;451:1;444:31;498:4;495:1;488:15;526:4;523:1;516:15;356:185;557:2;550:22;621:18;;;;592:6;651:19;;;648:39;;;683:1;680;673:12;648:39;707:9;725:139;741:6;736:3;733:15;725:139;;;809:10;;797:23;;849:4;840:14;;;;758;725:139;;;-1:-1:-1;883:6:3;;14:881;-1:-1:-1;;;;;14:881:3:o;900:127::-;531:1972:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "@tierValues_232": {
                  "entryPoint": 78,
                  "id": 232,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_array$_t_uint256_$8_memory_ptr__to_t_array$_t_uint256_$8_memory_ptr__fromStack_reversed": {
                  "entryPoint": 421,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "panic_error_0x32": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [
                {
                  "ast": {
                    "nodeType": "YulBlock",
                    "src": "0:643:3",
                    "statements": [
                      {
                        "nodeType": "YulBlock",
                        "src": "6:3:3",
                        "statements": []
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "161:348:3",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "171:27:3",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "183:9:3"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "194:3:3",
                                    "type": "",
                                    "value": "256"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "179:3:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "179:19:3"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "171:4:3"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "207:20:3",
                              "value": {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "218:9:3"
                              },
                              "variables": [
                                {
                                  "name": "pos",
                                  "nodeType": "YulTypedName",
                                  "src": "211:3:3",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "236:16:3",
                              "value": {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "243:9:3"
                              },
                              "variableNames": [
                                {
                                  "name": "pos",
                                  "nodeType": "YulIdentifier",
                                  "src": "236:3:3"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "261:20:3",
                              "value": {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "275:6:3"
                              },
                              "variables": [
                                {
                                  "name": "srcPtr",
                                  "nodeType": "YulTypedName",
                                  "src": "265:6:3",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "290:10:3",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "299:1:3",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "i",
                                  "nodeType": "YulTypedName",
                                  "src": "294:1:3",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "356:147:3",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "377:3:3"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "srcPtr",
                                              "nodeType": "YulIdentifier",
                                              "src": "388:6:3"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "mload",
                                            "nodeType": "YulIdentifier",
                                            "src": "382:5:3"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "382:13:3"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "370:6:3"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "370:26:3"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "370:26:3"
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "409:14:3",
                                    "value": {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "419:4:3",
                                      "type": "",
                                      "value": "0x20"
                                    },
                                    "variables": [
                                      {
                                        "name": "_1",
                                        "nodeType": "YulTypedName",
                                        "src": "413:2:3",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "436:19:3",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "447:3:3"
                                        },
                                        {
                                          "name": "_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "452:2:3"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "443:3:3"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "443:12:3"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "pos",
                                        "nodeType": "YulIdentifier",
                                        "src": "436:3:3"
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "468:25:3",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "srcPtr",
                                          "nodeType": "YulIdentifier",
                                          "src": "482:6:3"
                                        },
                                        {
                                          "name": "_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "490:2:3"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "478:3:3"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "478:15:3"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "srcPtr",
                                        "nodeType": "YulIdentifier",
                                        "src": "468:6:3"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "320:1:3"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "323:4:3",
                                    "type": "",
                                    "value": "0x08"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "317:2:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "317:11:3"
                              },
                              "nodeType": "YulForLoop",
                              "post": {
                                "nodeType": "YulBlock",
                                "src": "329:18:3",
                                "statements": [
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "331:14:3",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "340:1:3"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "343:1:3",
                                          "type": "",
                                          "value": "1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "336:3:3"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "336:9:3"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "i",
                                        "nodeType": "YulIdentifier",
                                        "src": "331:1:3"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "pre": {
                                "nodeType": "YulBlock",
                                "src": "313:3:3",
                                "statements": []
                              },
                              "src": "309:194:3"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_array$_t_uint256_$8_memory_ptr__to_t_array$_t_uint256_$8_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "130:9:3",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "141:6:3",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "152:4:3",
                            "type": ""
                          }
                        ],
                        "src": "14:495:3"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "546:95:3",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "563:1:3",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "570:3:3",
                                        "type": "",
                                        "value": "224"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "575:10:3",
                                        "type": "",
                                        "value": "0x4e487b71"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "566:3:3"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "566:20:3"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "556:6:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "556:31:3"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "556:31:3"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "603:1:3",
                                    "type": "",
                                    "value": "4"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "606:4:3",
                                    "type": "",
                                    "value": "0x32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "596:6:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "596:15:3"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "596:15:3"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "627:1:3",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "630:4:3",
                                    "type": "",
                                    "value": "0x24"
                                  }
                                ],
                                "functionName": {
                                  "name": "revert",
                                  "nodeType": "YulIdentifier",
                                  "src": "620:6:3"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "620:15:3"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "620:15:3"
                            }
                          ]
                        },
                        "name": "panic_error_0x32",
                        "nodeType": "YulFunctionDefinition",
                        "src": "514:127:3"
                      }
                    ]
                  },
                  "contents": "{\n    { }\n    function abi_encode_tuple_t_array$_t_uint256_$8_memory_ptr__to_t_array$_t_uint256_$8_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 256)\n        let pos := headStart\n        pos := headStart\n        let srcPtr := value0\n        let i := 0\n        for { } lt(i, 0x08) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            let _1 := 0x20\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n}",
                  "id": 3,
                  "language": "Yul",
                  "name": "#utility.yul"
                }
              ],
              "immutableReferences": {
                "102": [
                  {
                    "length": 32,
                    "start": 88
                  }
                ],
                "104": [
                  {
                    "length": 32,
                    "start": 123
                  }
                ],
                "106": [
                  {
                    "length": 32,
                    "start": 161
                  }
                ],
                "108": [
                  {
                    "length": 32,
                    "start": 199
                  }
                ],
                "110": [
                  {
                    "length": 32,
                    "start": 237
                  }
                ],
                "112": [
                  {
                    "length": 32,
                    "start": 275
                  }
                ],
                "114": [
                  {
                    "length": 32,
                    "start": 313
                  }
                ],
                "116": [
                  {
                    "length": 32,
                    "start": 351
                  }
                ]
              },
              "linkReferences": {},
              "object": "608060405234801561001057600080fd5b506004361061002b5760003560e01c806370230b3914610030575b600080fd5b61003861004e565b60405161004591906101a5565b60405180910390f35b610056610186565b7f000000000000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000000060208201527f000000000000000000000000000000000000000000000000000000000000000060408201527f000000000000000000000000000000000000000000000000000000000000000060608201527f000000000000000000000000000000000000000000000000000000000000000060808201527f000000000000000000000000000000000000000000000000000000000000000060a08201527f000000000000000000000000000000000000000000000000000000000000000060c08201527f000000000000000000000000000000000000000000000000000000000000000060e082015290565b6040518061010001604052806008906020820280368337509192915050565b6101008101818360005b60088110156101ce5781518352602092830192909101906001016101af565b5050509291505056fea26469706673582212204fe6d18cf1ee3d2b58039308091949fcf27c01d21eb50232584d738fae3e956a64736f6c634300080a0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70230B39 EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x38 PUSH2 0x4E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x45 SWAP2 SWAP1 PUSH2 0x1A5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x56 PUSH2 0x186 JUMP JUMPDEST PUSH32 0x0 DUP2 MSTORE PUSH32 0x0 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x0 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x0 PUSH1 0x60 DUP3 ADD MSTORE PUSH32 0x0 PUSH1 0x80 DUP3 ADD MSTORE PUSH32 0x0 PUSH1 0xA0 DUP3 ADD MSTORE PUSH32 0x0 PUSH1 0xC0 DUP3 ADD MSTORE PUSH32 0x0 PUSH1 0xE0 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x100 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x8 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x100 DUP2 ADD DUP2 DUP4 PUSH1 0x0 JUMPDEST PUSH1 0x8 DUP2 LT ISZERO PUSH2 0x1CE JUMPI DUP2 MLOAD DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1AF JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4F 0xE6 0xD1 DUP13 CALL 0xEE RETURNDATASIZE 0x2B PC SUB SWAP4 ADDMOD MULMOD NOT 0x49 0xFC CALLCODE PUSH29 0x1D21EB50232584D738FAE3E956A64736F6C634300080A003300000000 ",
              "sourceMap": "531:1972:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1504:388;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;1546:29;;:::i;:::-;1604:7;1587:24;;1638:7;1587:14;1621;;:24;1672:9;1655:14;;;:26;1708:8;1691:14;;;:25;1743:8;1726:14;;;:25;1778:7;1761:14;;;:24;1812:9;1795:14;;;:26;1848:9;1831:14;;;:26;1587:11;1504:388::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;:::o;14:495:3:-;194:3;179:19;;183:9;275:6;152:4;309:194;323:4;320:1;317:11;309:194;;;382:13;;370:26;;419:4;443:12;;;;478:15;;;;343:1;336:9;309:194;;;313:3;;;14:495;;;;:::o"
            },
            "methodIdentifiers": {
              "tierValues()": "70230b39"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256[8]\",\"name\":\"tierValues_\",\"type\":\"uint256[8]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"tierValues\",\"outputs\":[{\"internalType\":\"uint256[8]\",\"name\":\"tierValues_\",\"type\":\"uint256[8]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"A contract that is `ValueTier` expects to derive tiers from explicit values. For example an address must send or hold an amount of something to reach a given tier. Anything with predefined values that map to tiers can be a `ValueTier`. Note that `ValueTier` does NOT implement `ITier`. `ValueTier` does include state however, to track the `tierValues` so is not a library.\",\"kind\":\"dev\",\"methods\":{\"tierValues()\":{\"returns\":{\"tierValues_\":\"The immutable `tierValues`.\"}}},\"title\":\"ValueTier\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Set the `tierValues` on construction to be referenced immutably.\"},\"tierValues()\":{\"notice\":\"Complements the default solidity accessor for `tierValues`. Returns all the values in a list rather than requiring an index be specified.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tier/ValueTier.sol\":\"ValueTier\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/tier/ITier.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\n\\npragma solidity 0.8.10;\\n\\n/// @title ITier\\n/// @notice `ITier` is a simple interface that contracts can\\n/// implement to provide membership lists for other contracts.\\n///\\n/// There are many use-cases for a time-preserving,\\n/// conditional membership list.\\n///\\n/// Some examples include:\\n///\\n/// - Self-serve whitelist to participate in fundraising\\n/// - Lists of users who can claim airdrops and perks\\n/// - Pooling resources with implied governance/reward tiers\\n/// - POAP style attendance proofs allowing access to future exclusive events\\n///\\n/// @dev Standard interface to a tiered membership.\\n///\\n/// A \\\"membership\\\" can represent many things:\\n/// - Exclusive access.\\n/// - Participation in some event or process.\\n/// - KYC completion.\\n/// - Combination of sub-memberships.\\n/// - Etc.\\n///\\n/// The high level requirements for a contract implementing `ITier`:\\n/// - MUST represent held tiers with the `Tier` enum.\\n/// - MUST implement `report`.\\n///   - The report is a `uint256` that SHOULD represent the block each tier has\\n///     been continuously held since encoded as `uint32`.\\n///   - The encoded tiers start at ONE; ZERO is implied if no tier has ever\\n///     been held.\\n///   - `Tier.ZERO` is NOT encoded in the report, it is simply the fallback\\n///     value.\\n///   - If a tier is lost the block data is erased for that tier and will be\\n///     set if/when the tier is regained to the new block.\\n///   - If the historical block information is not available the report MAY\\n///     return `0x00000000` for all held tiers.\\n///   - Tiers that are lost or have never been held MUST return `0xFFFFFFFF`.\\n/// - SHOULD implement `setTier`.\\n///   - Contracts SHOULD revert with `SET_TIER` error if they cannot\\n///     meaningfully set a tier directly.\\n///     For example a contract that can only derive a membership tier by\\n///     reading the state of an external contract cannot set tiers.\\n///   - Contracts implementing `setTier` SHOULD error with `SET_ZERO_TIER`\\n///     if `Tier.ZERO` is being set.\\n/// - MUST emit `TierChange` when `setTier` successfully writes a new tier.\\n///   - Contracts that cannot meaningfully set a tier are exempt.\\ninterface ITier {\\n\\n    /// 9 Possible tiers.\\n    /// Fits nicely as uint32 in uint256 which is helpful for internal storage\\n    /// concerns.\\n    /// 8 tiers can be achieved, ZERO is the tier when no tier has been\\n    /// achieved.\\n    enum Tier {\\n        ZERO,\\n        ONE,\\n        TWO,\\n        THREE,\\n        FOUR,\\n        FIVE,\\n        SIX,\\n        SEVEN,\\n        EIGHT\\n    }\\n\\n    /// Every time a Tier changes we log start and end Tier against the\\n    /// account.\\n    /// This MAY NOT be emitted if reports are being read from the state of an\\n    /// external contract.\\n    event TierChange(\\n        address indexed account,\\n        Tier indexed startTier,\\n        Tier indexed endTier\\n    );\\n\\n    /// @notice Users can set their own tier by calling `setTier`.\\n    ///\\n    /// The contract that implements `ITier` is responsible for checking\\n    /// eligibility and/or taking actions required to set the tier.\\n    ///\\n    /// For example, the contract must take/refund any tokens relevant to\\n    /// changing the tier.\\n    ///\\n    /// Obviously the user is responsible for any approvals for this action\\n    /// prior to calling `setTier`.\\n    ///\\n    /// When the tier is changed a `TierChange` event will be emmited as:\\n    /// ```\\n    /// event TierChange(address account, Tier startTier, Tier endTier);\\n    /// ```\\n    ///\\n    /// The `setTier` function includes arbitrary data as the third\\n    /// parameter. This can be used to disambiguate in the case that\\n    /// there may be many possible options for a user to achieve some tier.\\n    ///\\n    /// For example, consider the case where `Tier.THREE` can be achieved\\n    /// by EITHER locking 1x rare NFT or 3x uncommon NFTs. A user with both\\n    /// could use `data` to explicitly state their intent.\\n    ///\\n    /// NOTE however that _any_ address can call `setTier` for any other\\n    /// address.\\n    ///\\n    /// If you implement `data` or anything that changes state then be very\\n    /// careful to avoid griefing attacks.\\n    ///\\n    /// The `data` parameter can also be ignored by the contract implementing\\n    /// `ITier`. For example, ERC20 tokens are fungible so only the balance\\n    /// approved by the user is relevant to a tier change.\\n    ///\\n    /// The `setTier` function SHOULD prevent users from reassigning\\n    /// `Tier.ZERO` to themselves.\\n    ///\\n    /// The `Tier.ZERO` status represents never having any status.\\n    /// @dev Updates the tier of an account.\\n    ///\\n    /// The implementing contract is responsible for all checks and state\\n    /// changes required to set the tier. For example, taking/refunding\\n    /// funds/NFTs etc.\\n    ///\\n    /// Contracts may disallow directly setting tiers, preferring to derive\\n    /// reports from other onchain data.\\n    /// In this case they should `revert(\\\"SET_TIER\\\");`.\\n    ///\\n    /// @param account Account to change the tier for.\\n    /// @param endTier Tier after the change.\\n    /// @param data Arbitrary input to disambiguate ownership\\n    /// (e.g. NFTs to lock).\\n    function setTier(\\n        address account,\\n        Tier endTier,\\n        bytes memory data\\n    )\\n        external;\\n\\n    /// @notice A tier report is a `uint256` that contains each of the block\\n    /// numbers each tier has been held continously since as a `uint32`.\\n    /// There are 9 possible tier, starting with `Tier.ZERO` for `0` offset or\\n    /// \\\"never held any tier\\\" then working up through 8x 4 byte offsets to the\\n    /// full 256 bits.\\n    ///\\n    /// Low bits = Lower tier.\\n    ///\\n    /// In hexadecimal every 8 characters = one tier, starting at `Tier.EIGHT`\\n    /// from high bits and working down to `Tier.ONE`.\\n    ///\\n    /// `uint32` should be plenty for any blockchain that measures block times\\n    /// in seconds, but reconsider if deploying to an environment with\\n    /// significantly sub-second block times.\\n    ///\\n    /// ~135 years of 1 second blocks fit into `uint32`.\\n    ///\\n    /// `2^8 / (365 * 24 * 60 * 60)`\\n    ///\\n    /// When a user INCREASES their tier they keep all the block numbers they\\n    /// already had, and get new block times for each increased tiers they have\\n    /// earned.\\n    ///\\n    /// When a user DECREASES their tier they return to `0xFFFFFFFF` (never)\\n    /// for every tier level they remove, but keep their block numbers for the\\n    /// remaining tiers.\\n    ///\\n    /// GUIs are encouraged to make this dynamic very clear for users as\\n    /// round-tripping to a lower status and back is a DESTRUCTIVE operation\\n    /// for block times.\\n    ///\\n    /// The intent is that downstream code can provide additional benefits for\\n    /// members who have maintained a certain tier for/since a long time.\\n    /// These benefits can be provided by inspecting the report, and by\\n    /// on-chain contracts directly,\\n    /// rather than needing to work with snapshots etc.\\n    /// @dev Returns the earliest block the account has held each tier for\\n    /// continuously.\\n    /// This is encoded as a uint256 with blocks represented as 8x\\n    /// concatenated uint32.\\n    /// I.e. Each 4 bytes of the uint256 represents a u32 tier start time.\\n    /// The low bits represent low tiers and high bits the high tiers.\\n    /// Implementing contracts should return 0xFFFFFFFF for lost &\\n    /// never-held tiers.\\n    ///\\n    /// @param account Account to get the report for.\\n    /// @return The report blocks encoded as a uint256.\\n    function report(address account) external view returns (uint256);\\n}\",\"keccak256\":\"0x9df1a0a477801f332f9b95fb6d400d2edb4fce18c089c0df0a5affc02ebd4121\",\"license\":\"CAL\"},\"contracts/tier/ValueTier.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\n\\npragma solidity 0.8.10;\\n\\nimport { ITier } from \\\"./ITier.sol\\\";\\n\\n/// @title ValueTier\\n///\\n/// @dev A contract that is `ValueTier` expects to derive tiers from explicit\\n/// values. For example an address must send or hold an amount of something to\\n/// reach a given tier.\\n/// Anything with predefined values that map to tiers can be a `ValueTier`.\\n///\\n/// Note that `ValueTier` does NOT implement `ITier`.\\n/// `ValueTier` does include state however, to track the `tierValues` so is not\\n/// a library.\\ncontract ValueTier {\\n    uint256 private immutable tierOne;\\n    uint256 private immutable tierTwo;\\n    uint256 private immutable tierThree;\\n    uint256 private immutable tierFour;\\n    uint256 private immutable tierFive;\\n    uint256 private immutable tierSix;\\n    uint256 private immutable tierSeven;\\n    uint256 private immutable tierEight;\\n\\n    /// Set the `tierValues` on construction to be referenced immutably.\\n    constructor(uint256[8] memory tierValues_) {\\n        tierOne = tierValues_[0];\\n        tierTwo = tierValues_[1];\\n        tierThree = tierValues_[2];\\n        tierFour = tierValues_[3];\\n        tierFive = tierValues_[4];\\n        tierSix = tierValues_[5];\\n        tierSeven = tierValues_[6];\\n        tierEight = tierValues_[7];\\n    }\\n\\n    /// Complements the default solidity accessor for `tierValues`.\\n    /// Returns all the values in a list rather than requiring an index be\\n    /// specified.\\n    /// @return tierValues_ The immutable `tierValues`.\\n    function tierValues() public view returns(uint256[8] memory tierValues_) {\\n        tierValues_[0] = tierOne;\\n        tierValues_[1] = tierTwo;\\n        tierValues_[2] = tierThree;\\n        tierValues_[3] = tierFour;\\n        tierValues_[4] = tierFive;\\n        tierValues_[5] = tierSix;\\n        tierValues_[6] = tierSeven;\\n        tierValues_[7] = tierEight;\\n        return tierValues_;\\n    }\\n\\n    /// Converts a Tier to the minimum value it requires.\\n    /// `Tier.ZERO` is always value 0 as it is the fallback.\\n    function tierToValue(ITier.Tier tier_) internal view returns(uint256) {\\n        return tier_ > ITier.Tier.ZERO ? tierValues()[uint256(tier_) - 1] : 0;\\n    }\\n\\n    /// Converts a value to the maximum Tier it qualifies for.\\n    function valueToTier(uint256 value_) internal view returns(ITier.Tier) {\\n        for (uint256 i = 0; i < 8; i++) {\\n            if (value_ < tierValues()[i]) {\\n                return ITier.Tier(i);\\n            }\\n        }\\n        return ITier.Tier.EIGHT;\\n    }\\n}\",\"keccak256\":\"0xd137ae58da1d801f596aa57ffe5826b5fb6ef92f3f1de676d54126ae7682ce7e\",\"license\":\"CAL\"}},\"version\":1}"
        }
      }
    },
    "sources": {
      "contracts/test/ValueTierTest.sol": {
        "ast": {
          "absolutePath": "contracts/test/ValueTierTest.sol",
          "exportedSymbols": {
            "ITier": [
              95
            ],
            "ValueTier": [
              299
            ],
            "ValueTierTest": [
              51
            ]
          },
          "id": 52,
          "license": "CAL",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1,
              "literals": [
                "solidity",
                "0.8",
                ".10"
              ],
              "nodeType": "PragmaDirective",
              "src": "33:23:0"
            },
            {
              "absolutePath": "contracts/tier/ValueTier.sol",
              "file": "../tier/ValueTier.sol",
              "id": 3,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 52,
              "sourceUnit": 300,
              "src": "58:50:0",
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 2,
                    "name": "ValueTier",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "src": "67:9:0",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "absolutePath": "contracts/tier/ITier.sol",
              "file": "../tier/ITier.sol",
              "id": 5,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 52,
              "sourceUnit": 96,
              "src": "109:42:0",
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 4,
                    "name": "ITier",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "src": "118:5:0",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "abstract": false,
              "baseContracts": [
                {
                  "baseName": {
                    "id": 7,
                    "name": "ValueTier",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 299,
                    "src": "321:9:0"
                  },
                  "id": 8,
                  "nodeType": "InheritanceSpecifier",
                  "src": "321:9:0"
                }
              ],
              "canonicalName": "ValueTierTest",
              "contractDependencies": [],
              "contractKind": "contract",
              "documentation": {
                "id": 6,
                "nodeType": "StructuredDocumentation",
                "src": "153:142:0",
                "text": "@title ValueTierTest\n Thin wrapper around the `ValueTier` contract to facilitate hardhat unit\n testing of `internal` functions."
              },
              "fullyImplemented": true,
              "id": 51,
              "linearizedBaseContracts": [
                51,
                299
              ],
              "name": "ValueTierTest",
              "nameLocation": "304:13:0",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "body": {
                    "id": 19,
                    "nodeType": "Block",
                    "src": "488:3:0",
                    "statements": []
                  },
                  "documentation": {
                    "id": 9,
                    "nodeType": "StructuredDocumentation",
                    "src": "337:68:0",
                    "text": "Set the `tierValues` on construction to be referenced immutably."
                  },
                  "id": 20,
                  "implemented": true,
                  "kind": "constructor",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "id": 16,
                          "name": "tierValues_",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 13,
                          "src": "471:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$8_memory_ptr",
                            "typeString": "uint256[8] memory"
                          }
                        }
                      ],
                      "id": 17,
                      "kind": "baseConstructorSpecifier",
                      "modifierName": {
                        "id": 15,
                        "name": "ValueTier",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 299,
                        "src": "461:9:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "461:22:0"
                    }
                  ],
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 14,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 13,
                        "mutability": "mutable",
                        "name": "tierValues_",
                        "nameLocation": "440:11:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 20,
                        "src": "422:29:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$8_memory_ptr",
                          "typeString": "uint256[8]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 10,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "422:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 12,
                          "length": {
                            "hexValue": "38",
                            "id": 11,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "430:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_8_by_1",
                              "typeString": "int_const 8"
                            },
                            "value": "8"
                          },
                          "nodeType": "ArrayTypeName",
                          "src": "422:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$8_storage_ptr",
                            "typeString": "uint256[8]"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "421:31:0"
                  },
                  "returnParameters": {
                    "id": 18,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "488:0:0"
                  },
                  "scope": 51,
                  "src": "410:81:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 34,
                    "nodeType": "Block",
                    "src": "671:52:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 31,
                              "name": "tier_",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 24,
                              "src": "710:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_Tier_$64",
                                "typeString": "enum ITier.Tier"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_enum$_Tier_$64",
                                "typeString": "enum ITier.Tier"
                              }
                            ],
                            "expression": {
                              "id": 29,
                              "name": "ValueTier",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 299,
                              "src": "688:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_ValueTier_$299_$",
                                "typeString": "type(contract ValueTier)"
                              }
                            },
                            "id": 30,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "tierToValue",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 259,
                            "src": "688:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_enum$_Tier_$64_$returns$_t_uint256_$",
                              "typeString": "function (enum ITier.Tier) view returns (uint256)"
                            }
                          },
                          "id": 32,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "688:28:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 28,
                        "id": 33,
                        "nodeType": "Return",
                        "src": "681:35:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 21,
                    "nodeType": "StructuredDocumentation",
                    "src": "537:24:0",
                    "text": "Wraps `tierToValue`."
                  },
                  "functionSelector": "5d2c1117",
                  "id": 35,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "wrappedTierToValue",
                  "nameLocation": "575:18:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 25,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 24,
                        "mutability": "mutable",
                        "name": "tier_",
                        "nameLocation": "605:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 35,
                        "src": "594:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Tier_$64",
                          "typeString": "enum ITier.Tier"
                        },
                        "typeName": {
                          "id": 23,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 22,
                            "name": "ITier.Tier",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 64,
                            "src": "594:10:0"
                          },
                          "referencedDeclaration": 64,
                          "src": "594:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$64",
                            "typeString": "enum ITier.Tier"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "593:18:0"
                  },
                  "returnParameters": {
                    "id": 28,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 27,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 35,
                        "src": "658:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 26,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "658:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "657:9:0"
                  },
                  "scope": 51,
                  "src": "566:157:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 49,
                    "nodeType": "Block",
                    "src": "864:53:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 46,
                              "name": "value_",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 38,
                              "src": "903:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 44,
                              "name": "ValueTier",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 299,
                              "src": "881:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_ValueTier_$299_$",
                                "typeString": "type(contract ValueTier)"
                              }
                            },
                            "id": 45,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "valueToTier",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 298,
                            "src": "881:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_enum$_Tier_$64_$",
                              "typeString": "function (uint256) view returns (enum ITier.Tier)"
                            }
                          },
                          "id": 47,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "881:29:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$64",
                            "typeString": "enum ITier.Tier"
                          }
                        },
                        "functionReturnParameters": 43,
                        "id": 48,
                        "nodeType": "Return",
                        "src": "874:36:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 36,
                    "nodeType": "StructuredDocumentation",
                    "src": "729:24:0",
                    "text": "Wraps `valueToTier`."
                  },
                  "functionSelector": "4bc1010e",
                  "id": 50,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "wrappedValueToTier",
                  "nameLocation": "767:18:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 39,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 38,
                        "mutability": "mutable",
                        "name": "value_",
                        "nameLocation": "794:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 50,
                        "src": "786:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 37,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "786:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "785:16:0"
                  },
                  "returnParameters": {
                    "id": 43,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 42,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 50,
                        "src": "848:10:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Tier_$64",
                          "typeString": "enum ITier.Tier"
                        },
                        "typeName": {
                          "id": 41,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 40,
                            "name": "ITier.Tier",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 64,
                            "src": "848:10:0"
                          },
                          "referencedDeclaration": 64,
                          "src": "848:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$64",
                            "typeString": "enum ITier.Tier"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "847:12:0"
                  },
                  "scope": 51,
                  "src": "758:159:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 52,
              "src": "295:624:0",
              "usedErrors": []
            }
          ],
          "src": "33:886:0"
        },
        "id": 0
      },
      "contracts/tier/ITier.sol": {
        "ast": {
          "absolutePath": "contracts/tier/ITier.sol",
          "exportedSymbols": {
            "ITier": [
              95
            ]
          },
          "id": 96,
          "license": "CAL",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 53,
              "literals": [
                "solidity",
                "0.8",
                ".10"
              ],
              "nodeType": "PragmaDirective",
              "src": "33:23:1"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "ITier",
              "contractDependencies": [],
              "contractKind": "interface",
              "documentation": {
                "id": 54,
                "nodeType": "StructuredDocumentation",
                "src": "58:2122:1",
                "text": "@title ITier\n @notice `ITier` is a simple interface that contracts can\n implement to provide membership lists for other contracts.\n There are many use-cases for a time-preserving,\n conditional membership list.\n Some examples include:\n - Self-serve whitelist to participate in fundraising\n - Lists of users who can claim airdrops and perks\n - Pooling resources with implied governance/reward tiers\n - POAP style attendance proofs allowing access to future exclusive events\n @dev Standard interface to a tiered membership.\n A \"membership\" can represent many things:\n - Exclusive access.\n - Participation in some event or process.\n - KYC completion.\n - Combination of sub-memberships.\n - Etc.\n The high level requirements for a contract implementing `ITier`:\n - MUST represent held tiers with the `Tier` enum.\n - MUST implement `report`.\n   - The report is a `uint256` that SHOULD represent the block each tier has\n     been continuously held since encoded as `uint32`.\n   - The encoded tiers start at ONE; ZERO is implied if no tier has ever\n     been held.\n   - `Tier.ZERO` is NOT encoded in the report, it is simply the fallback\n     value.\n   - If a tier is lost the block data is erased for that tier and will be\n     set if/when the tier is regained to the new block.\n   - If the historical block information is not available the report MAY\n     return `0x00000000` for all held tiers.\n   - Tiers that are lost or have never been held MUST return `0xFFFFFFFF`.\n - SHOULD implement `setTier`.\n   - Contracts SHOULD revert with `SET_TIER` error if they cannot\n     meaningfully set a tier directly.\n     For example a contract that can only derive a membership tier by\n     reading the state of an external contract cannot set tiers.\n   - Contracts implementing `setTier` SHOULD error with `SET_ZERO_TIER`\n     if `Tier.ZERO` is being set.\n - MUST emit `TierChange` when `setTier` successfully writes a new tier.\n   - Contracts that cannot meaningfully set a tier are exempt."
              },
              "fullyImplemented": false,
              "id": 95,
              "linearizedBaseContracts": [
                95
              ],
              "name": "ITier",
              "nameLocation": "2190:5:1",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "canonicalName": "ITier.Tier",
                  "id": 64,
                  "members": [
                    {
                      "id": 55,
                      "name": "ZERO",
                      "nameLocation": "2436:4:1",
                      "nodeType": "EnumValue",
                      "src": "2436:4:1"
                    },
                    {
                      "id": 56,
                      "name": "ONE",
                      "nameLocation": "2450:3:1",
                      "nodeType": "EnumValue",
                      "src": "2450:3:1"
                    },
                    {
                      "id": 57,
                      "name": "TWO",
                      "nameLocation": "2463:3:1",
                      "nodeType": "EnumValue",
                      "src": "2463:3:1"
                    },
                    {
                      "id": 58,
                      "name": "THREE",
                      "nameLocation": "2476:5:1",
                      "nodeType": "EnumValue",
                      "src": "2476:5:1"
                    },
                    {
                      "id": 59,
                      "name": "FOUR",
                      "nameLocation": "2491:4:1",
                      "nodeType": "EnumValue",
                      "src": "2491:4:1"
                    },
                    {
                      "id": 60,
                      "name": "FIVE",
                      "nameLocation": "2505:4:1",
                      "nodeType": "EnumValue",
                      "src": "2505:4:1"
                    },
                    {
                      "id": 61,
                      "name": "SIX",
                      "nameLocation": "2519:3:1",
                      "nodeType": "EnumValue",
                      "src": "2519:3:1"
                    },
                    {
                      "id": 62,
                      "name": "SEVEN",
                      "nameLocation": "2532:5:1",
                      "nodeType": "EnumValue",
                      "src": "2532:5:1"
                    },
                    {
                      "id": 63,
                      "name": "EIGHT",
                      "nameLocation": "2547:5:1",
                      "nodeType": "EnumValue",
                      "src": "2547:5:1"
                    }
                  ],
                  "name": "Tier",
                  "nameLocation": "2421:4:1",
                  "nodeType": "EnumDefinition",
                  "src": "2416:142:1"
                },
                {
                  "anonymous": false,
                  "documentation": {
                    "id": 65,
                    "nodeType": "StructuredDocumentation",
                    "src": "2564:190:1",
                    "text": "Every time a Tier changes we log start and end Tier against the\n account.\n This MAY NOT be emitted if reports are being read from the state of an\n external contract."
                  },
                  "id": 75,
                  "name": "TierChange",
                  "nameLocation": "2765:10:1",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 74,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 67,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "account",
                        "nameLocation": "2801:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 75,
                        "src": "2785:23:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 66,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2785:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 70,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "startTier",
                        "nameLocation": "2831:9:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 75,
                        "src": "2818:22:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Tier_$64",
                          "typeString": "enum ITier.Tier"
                        },
                        "typeName": {
                          "id": 69,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 68,
                            "name": "Tier",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 64,
                            "src": "2818:4:1"
                          },
                          "referencedDeclaration": 64,
                          "src": "2818:4:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$64",
                            "typeString": "enum ITier.Tier"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 73,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "endTier",
                        "nameLocation": "2863:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 75,
                        "src": "2850:20:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Tier_$64",
                          "typeString": "enum ITier.Tier"
                        },
                        "typeName": {
                          "id": 72,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 71,
                            "name": "Tier",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 64,
                            "src": "2850:4:1"
                          },
                          "referencedDeclaration": 64,
                          "src": "2850:4:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$64",
                            "typeString": "enum ITier.Tier"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2775:101:1"
                  },
                  "src": "2759:118:1"
                },
                {
                  "documentation": {
                    "id": 76,
                    "nodeType": "StructuredDocumentation",
                    "src": "2883:2294:1",
                    "text": "@notice Users can set their own tier by calling `setTier`.\n The contract that implements `ITier` is responsible for checking\n eligibility and/or taking actions required to set the tier.\n For example, the contract must take/refund any tokens relevant to\n changing the tier.\n Obviously the user is responsible for any approvals for this action\n prior to calling `setTier`.\n When the tier is changed a `TierChange` event will be emmited as:\n ```\n event TierChange(address account, Tier startTier, Tier endTier);\n ```\n The `setTier` function includes arbitrary data as the third\n parameter. This can be used to disambiguate in the case that\n there may be many possible options for a user to achieve some tier.\n For example, consider the case where `Tier.THREE` can be achieved\n by EITHER locking 1x rare NFT or 3x uncommon NFTs. A user with both\n could use `data` to explicitly state their intent.\n NOTE however that _any_ address can call `setTier` for any other\n address.\n If you implement `data` or anything that changes state then be very\n careful to avoid griefing attacks.\n The `data` parameter can also be ignored by the contract implementing\n `ITier`. For example, ERC20 tokens are fungible so only the balance\n approved by the user is relevant to a tier change.\n The `setTier` function SHOULD prevent users from reassigning\n `Tier.ZERO` to themselves.\n The `Tier.ZERO` status represents never having any status.\n @dev Updates the tier of an account.\n The implementing contract is responsible for all checks and state\n changes required to set the tier. For example, taking/refunding\n funds/NFTs etc.\n Contracts may disallow directly setting tiers, preferring to derive\n reports from other onchain data.\n In this case they should `revert(\"SET_TIER\");`.\n @param account Account to change the tier for.\n @param endTier Tier after the change.\n @param data Arbitrary input to disambiguate ownership\n (e.g. NFTs to lock)."
                  },
                  "functionSelector": "52dab69d",
                  "id": 86,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "setTier",
                  "nameLocation": "5191:7:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 84,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 78,
                        "mutability": "mutable",
                        "name": "account",
                        "nameLocation": "5216:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 86,
                        "src": "5208:15:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 77,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5208:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 81,
                        "mutability": "mutable",
                        "name": "endTier",
                        "nameLocation": "5238:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 86,
                        "src": "5233:12:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Tier_$64",
                          "typeString": "enum ITier.Tier"
                        },
                        "typeName": {
                          "id": 80,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 79,
                            "name": "Tier",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 64,
                            "src": "5233:4:1"
                          },
                          "referencedDeclaration": 64,
                          "src": "5233:4:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$64",
                            "typeString": "enum ITier.Tier"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 83,
                        "mutability": "mutable",
                        "name": "data",
                        "nameLocation": "5268:4:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 86,
                        "src": "5255:17:1",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 82,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "5255:5:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5198:80:1"
                  },
                  "returnParameters": {
                    "id": 85,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "5295:0:1"
                  },
                  "scope": 95,
                  "src": "5182:114:1",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 87,
                    "nodeType": "StructuredDocumentation",
                    "src": "5302:2251:1",
                    "text": "@notice A tier report is a `uint256` that contains each of the block\n numbers each tier has been held continously since as a `uint32`.\n There are 9 possible tier, starting with `Tier.ZERO` for `0` offset or\n \"never held any tier\" then working up through 8x 4 byte offsets to the\n full 256 bits.\n Low bits = Lower tier.\n In hexadecimal every 8 characters = one tier, starting at `Tier.EIGHT`\n from high bits and working down to `Tier.ONE`.\n `uint32` should be plenty for any blockchain that measures block times\n in seconds, but reconsider if deploying to an environment with\n significantly sub-second block times.\n ~135 years of 1 second blocks fit into `uint32`.\n `2^8 / (365 * 24 * 60 * 60)`\n When a user INCREASES their tier they keep all the block numbers they\n already had, and get new block times for each increased tiers they have\n earned.\n When a user DECREASES their tier they return to `0xFFFFFFFF` (never)\n for every tier level they remove, but keep their block numbers for the\n remaining tiers.\n GUIs are encouraged to make this dynamic very clear for users as\n round-tripping to a lower status and back is a DESTRUCTIVE operation\n for block times.\n The intent is that downstream code can provide additional benefits for\n members who have maintained a certain tier for/since a long time.\n These benefits can be provided by inspecting the report, and by\n on-chain contracts directly,\n rather than needing to work with snapshots etc.\n @dev Returns the earliest block the account has held each tier for\n continuously.\n This is encoded as a uint256 with blocks represented as 8x\n concatenated uint32.\n I.e. Each 4 bytes of the uint256 represents a u32 tier start time.\n The low bits represent low tiers and high bits the high tiers.\n Implementing contracts should return 0xFFFFFFFF for lost &\n never-held tiers.\n @param account Account to get the report for.\n @return The report blocks encoded as a uint256."
                  },
                  "functionSelector": "e053ea31",
                  "id": 94,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "report",
                  "nameLocation": "7567:6:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 90,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 89,
                        "mutability": "mutable",
                        "name": "account",
                        "nameLocation": "7582:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 94,
                        "src": "7574:15:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 88,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "7574:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "7573:17:1"
                  },
                  "returnParameters": {
                    "id": 93,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 92,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 94,
                        "src": "7614:7:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 91,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "7614:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "7613:9:1"
                  },
                  "scope": 95,
                  "src": "7558:65:1",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 96,
              "src": "2180:5445:1",
              "usedErrors": []
            }
          ],
          "src": "33:7592:1"
        },
        "id": 1
      },
      "contracts/tier/ValueTier.sol": {
        "ast": {
          "absolutePath": "contracts/tier/ValueTier.sol",
          "exportedSymbols": {
            "ITier": [
              95
            ],
            "ValueTier": [
              299
            ]
          },
          "id": 300,
          "license": "CAL",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 97,
              "literals": [
                "solidity",
                "0.8",
                ".10"
              ],
              "nodeType": "PragmaDirective",
              "src": "33:23:2"
            },
            {
              "absolutePath": "contracts/tier/ITier.sol",
              "file": "./ITier.sol",
              "id": 99,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 300,
              "sourceUnit": 96,
              "src": "58:36:2",
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 98,
                    "name": "ITier",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "src": "67:5:2",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "ValueTier",
              "contractDependencies": [],
              "contractKind": "contract",
              "documentation": {
                "id": 100,
                "nodeType": "StructuredDocumentation",
                "src": "96:435:2",
                "text": "@title ValueTier\n @dev A contract that is `ValueTier` expects to derive tiers from explicit\n values. For example an address must send or hold an amount of something to\n reach a given tier.\n Anything with predefined values that map to tiers can be a `ValueTier`.\n Note that `ValueTier` does NOT implement `ITier`.\n `ValueTier` does include state however, to track the `tierValues` so is not\n a library."
              },
              "fullyImplemented": true,
              "id": 299,
              "linearizedBaseContracts": [
                299
              ],
              "name": "ValueTier",
              "nameLocation": "540:9:2",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": false,
                  "id": 102,
                  "mutability": "immutable",
                  "name": "tierOne",
                  "nameLocation": "582:7:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 299,
                  "src": "556:33:2",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 101,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "556:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "private"
                },
                {
                  "constant": false,
                  "id": 104,
                  "mutability": "immutable",
                  "name": "tierTwo",
                  "nameLocation": "621:7:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 299,
                  "src": "595:33:2",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 103,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "595:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "private"
                },
                {
                  "constant": false,
                  "id": 106,
                  "mutability": "immutable",
                  "name": "tierThree",
                  "nameLocation": "660:9:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 299,
                  "src": "634:35:2",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 105,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "634:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "private"
                },
                {
                  "constant": false,
                  "id": 108,
                  "mutability": "immutable",
                  "name": "tierFour",
                  "nameLocation": "701:8:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 299,
                  "src": "675:34:2",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 107,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "675:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "private"
                },
                {
                  "constant": false,
                  "id": 110,
                  "mutability": "immutable",
                  "name": "tierFive",
                  "nameLocation": "741:8:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 299,
                  "src": "715:34:2",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 109,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "715:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "private"
                },
                {
                  "constant": false,
                  "id": 112,
                  "mutability": "immutable",
                  "name": "tierSix",
                  "nameLocation": "781:7:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 299,
                  "src": "755:33:2",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 111,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "755:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "private"
                },
                {
                  "constant": false,
                  "id": 114,
                  "mutability": "immutable",
                  "name": "tierSeven",
                  "nameLocation": "820:9:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 299,
                  "src": "794:35:2",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 113,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "794:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "private"
                },
                {
                  "constant": false,
                  "id": 116,
                  "mutability": "immutable",
                  "name": "tierEight",
                  "nameLocation": "861:9:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 299,
                  "src": "835:35:2",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 115,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "835:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "private"
                },
                {
                  "body": {
                    "id": 172,
                    "nodeType": "Block",
                    "src": "993:287:2",
                    "statements": [
                      {
                        "expression": {
                          "id": 128,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 124,
                            "name": "tierOne",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 102,
                            "src": "1003:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "baseExpression": {
                              "id": 125,
                              "name": "tierValues_",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 121,
                              "src": "1013:11:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$8_memory_ptr",
                                "typeString": "uint256[8] memory"
                              }
                            },
                            "id": 127,
                            "indexExpression": {
                              "hexValue": "30",
                              "id": 126,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1025:1:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "1013:14:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1003:24:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 129,
                        "nodeType": "ExpressionStatement",
                        "src": "1003:24:2"
                      },
                      {
                        "expression": {
                          "id": 134,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 130,
                            "name": "tierTwo",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 104,
                            "src": "1037:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "baseExpression": {
                              "id": 131,
                              "name": "tierValues_",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 121,
                              "src": "1047:11:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$8_memory_ptr",
                                "typeString": "uint256[8] memory"
                              }
                            },
                            "id": 133,
                            "indexExpression": {
                              "hexValue": "31",
                              "id": 132,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1059:1:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_1_by_1",
                                "typeString": "int_const 1"
                              },
                              "value": "1"
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "1047:14:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1037:24:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 135,
                        "nodeType": "ExpressionStatement",
                        "src": "1037:24:2"
                      },
                      {
                        "expression": {
                          "id": 140,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 136,
                            "name": "tierThree",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 106,
                            "src": "1071:9:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "baseExpression": {
                              "id": 137,
                              "name": "tierValues_",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 121,
                              "src": "1083:11:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$8_memory_ptr",
                                "typeString": "uint256[8] memory"
                              }
                            },
                            "id": 139,
                            "indexExpression": {
                              "hexValue": "32",
                              "id": 138,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1095:1:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_2_by_1",
                                "typeString": "int_const 2"
                              },
                              "value": "2"
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "1083:14:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1071:26:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 141,
                        "nodeType": "ExpressionStatement",
                        "src": "1071:26:2"
                      },
                      {
                        "expression": {
                          "id": 146,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 142,
                            "name": "tierFour",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 108,
                            "src": "1107:8:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "baseExpression": {
                              "id": 143,
                              "name": "tierValues_",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 121,
                              "src": "1118:11:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$8_memory_ptr",
                                "typeString": "uint256[8] memory"
                              }
                            },
                            "id": 145,
                            "indexExpression": {
                              "hexValue": "33",
                              "id": 144,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1130:1:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_3_by_1",
                                "typeString": "int_const 3"
                              },
                              "value": "3"
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "1118:14:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1107:25:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 147,
                        "nodeType": "ExpressionStatement",
                        "src": "1107:25:2"
                      },
                      {
                        "expression": {
                          "id": 152,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 148,
                            "name": "tierFive",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 110,
                            "src": "1142:8:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "baseExpression": {
                              "id": 149,
                              "name": "tierValues_",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 121,
                              "src": "1153:11:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$8_memory_ptr",
                                "typeString": "uint256[8] memory"
                              }
                            },
                            "id": 151,
                            "indexExpression": {
                              "hexValue": "34",
                              "id": 150,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1165:1:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_4_by_1",
                                "typeString": "int_const 4"
                              },
                              "value": "4"
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "1153:14:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1142:25:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 153,
                        "nodeType": "ExpressionStatement",
                        "src": "1142:25:2"
                      },
                      {
                        "expression": {
                          "id": 158,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 154,
                            "name": "tierSix",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 112,
                            "src": "1177:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "baseExpression": {
                              "id": 155,
                              "name": "tierValues_",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 121,
                              "src": "1187:11:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$8_memory_ptr",
                                "typeString": "uint256[8] memory"
                              }
                            },
                            "id": 157,
                            "indexExpression": {
                              "hexValue": "35",
                              "id": 156,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1199:1:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_5_by_1",
                                "typeString": "int_const 5"
                              },
                              "value": "5"
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "1187:14:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1177:24:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 159,
                        "nodeType": "ExpressionStatement",
                        "src": "1177:24:2"
                      },
                      {
                        "expression": {
                          "id": 164,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 160,
                            "name": "tierSeven",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 114,
                            "src": "1211:9:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "baseExpression": {
                              "id": 161,
                              "name": "tierValues_",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 121,
                              "src": "1223:11:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$8_memory_ptr",
                                "typeString": "uint256[8] memory"
                              }
                            },
                            "id": 163,
                            "indexExpression": {
                              "hexValue": "36",
                              "id": 162,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1235:1:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_6_by_1",
                                "typeString": "int_const 6"
                              },
                              "value": "6"
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "1223:14:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1211:26:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 165,
                        "nodeType": "ExpressionStatement",
                        "src": "1211:26:2"
                      },
                      {
                        "expression": {
                          "id": 170,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 166,
                            "name": "tierEight",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 116,
                            "src": "1247:9:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "baseExpression": {
                              "id": 167,
                              "name": "tierValues_",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 121,
                              "src": "1259:11:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$8_memory_ptr",
                                "typeString": "uint256[8] memory"
                              }
                            },
                            "id": 169,
                            "indexExpression": {
                              "hexValue": "37",
                              "id": 168,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1271:1:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_7_by_1",
                                "typeString": "int_const 7"
                              },
                              "value": "7"
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "1259:14:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1247:26:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 171,
                        "nodeType": "ExpressionStatement",
                        "src": "1247:26:2"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 117,
                    "nodeType": "StructuredDocumentation",
                    "src": "877:68:2",
                    "text": "Set the `tierValues` on construction to be referenced immutably."
                  },
                  "id": 173,
                  "implemented": true,
                  "kind": "constructor",
                  "modifiers": [],
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 122,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 121,
                        "mutability": "mutable",
                        "name": "tierValues_",
                        "nameLocation": "980:11:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 173,
                        "src": "962:29:2",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$8_memory_ptr",
                          "typeString": "uint256[8]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 118,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "962:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 120,
                          "length": {
                            "hexValue": "38",
                            "id": 119,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "970:1:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_8_by_1",
                              "typeString": "int_const 8"
                            },
                            "value": "8"
                          },
                          "nodeType": "ArrayTypeName",
                          "src": "962:10:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$8_storage_ptr",
                            "typeString": "uint256[8]"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "961:31:2"
                  },
                  "returnParameters": {
                    "id": 123,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "993:0:2"
                  },
                  "scope": 299,
                  "src": "950:330:2",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 231,
                    "nodeType": "Block",
                    "src": "1577:315:2",
                    "statements": [
                      {
                        "expression": {
                          "id": 185,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 181,
                              "name": "tierValues_",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 179,
                              "src": "1587:11:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$8_memory_ptr",
                                "typeString": "uint256[8] memory"
                              }
                            },
                            "id": 183,
                            "indexExpression": {
                              "hexValue": "30",
                              "id": 182,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1599:1:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "1587:14:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 184,
                            "name": "tierOne",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 102,
                            "src": "1604:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1587:24:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 186,
                        "nodeType": "ExpressionStatement",
                        "src": "1587:24:2"
                      },
                      {
                        "expression": {
                          "id": 191,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 187,
                              "name": "tierValues_",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 179,
                              "src": "1621:11:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$8_memory_ptr",
                                "typeString": "uint256[8] memory"
                              }
                            },
                            "id": 189,
                            "indexExpression": {
                              "hexValue": "31",
                              "id": 188,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1633:1:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_1_by_1",
                                "typeString": "int_const 1"
                              },
                              "value": "1"
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "1621:14:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 190,
                            "name": "tierTwo",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 104,
                            "src": "1638:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1621:24:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 192,
                        "nodeType": "ExpressionStatement",
                        "src": "1621:24:2"
                      },
                      {
                        "expression": {
                          "id": 197,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 193,
                              "name": "tierValues_",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 179,
                              "src": "1655:11:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$8_memory_ptr",
                                "typeString": "uint256[8] memory"
                              }
                            },
                            "id": 195,
                            "indexExpression": {
                              "hexValue": "32",
                              "id": 194,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1667:1:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_2_by_1",
                                "typeString": "int_const 2"
                              },
                              "value": "2"
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "1655:14:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 196,
                            "name": "tierThree",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 106,
                            "src": "1672:9:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1655:26:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 198,
                        "nodeType": "ExpressionStatement",
                        "src": "1655:26:2"
                      },
                      {
                        "expression": {
                          "id": 203,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 199,
                              "name": "tierValues_",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 179,
                              "src": "1691:11:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$8_memory_ptr",
                                "typeString": "uint256[8] memory"
                              }
                            },
                            "id": 201,
                            "indexExpression": {
                              "hexValue": "33",
                              "id": 200,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1703:1:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_3_by_1",
                                "typeString": "int_const 3"
                              },
                              "value": "3"
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "1691:14:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 202,
                            "name": "tierFour",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 108,
                            "src": "1708:8:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1691:25:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 204,
                        "nodeType": "ExpressionStatement",
                        "src": "1691:25:2"
                      },
                      {
                        "expression": {
                          "id": 209,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 205,
                              "name": "tierValues_",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 179,
                              "src": "1726:11:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$8_memory_ptr",
                                "typeString": "uint256[8] memory"
                              }
                            },
                            "id": 207,
                            "indexExpression": {
                              "hexValue": "34",
                              "id": 206,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1738:1:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_4_by_1",
                                "typeString": "int_const 4"
                              },
                              "value": "4"
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "1726:14:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 208,
                            "name": "tierFive",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 110,
                            "src": "1743:8:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1726:25:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 210,
                        "nodeType": "ExpressionStatement",
                        "src": "1726:25:2"
                      },
                      {
                        "expression": {
                          "id": 215,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 211,
                              "name": "tierValues_",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 179,
                              "src": "1761:11:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$8_memory_ptr",
                                "typeString": "uint256[8] memory"
                              }
                            },
                            "id": 213,
                            "indexExpression": {
                              "hexValue": "35",
                              "id": 212,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1773:1:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_5_by_1",
                                "typeString": "int_const 5"
                              },
                              "value": "5"
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "1761:14:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 214,
                            "name": "tierSix",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 112,
                            "src": "1778:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1761:24:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 216,
                        "nodeType": "ExpressionStatement",
                        "src": "1761:24:2"
                      },
                      {
                        "expression": {
                          "id": 221,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 217,
                              "name": "tierValues_",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 179,
                              "src": "1795:11:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$8_memory_ptr",
                                "typeString": "uint256[8] memory"
                              }
                            },
                            "id": 219,
                            "indexExpression": {
                              "hexValue": "36",
                              "id": 218,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1807:1:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_6_by_1",
                                "typeString": "int_const 6"
                              },
                              "value": "6"
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "1795:14:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 220,
                            "name": "tierSeven",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 114,
                            "src": "1812:9:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1795:26:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 222,
                        "nodeType": "ExpressionStatement",
                        "src": "1795:26:2"
                      },
                      {
                        "expression": {
                          "id": 227,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 223,
                              "name": "tierValues_",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 179,
                              "src": "1831:11:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$8_memory_ptr",
                                "typeString": "uint256[8] memory"
                              }
                            },
                            "id": 225,
                            "indexExpression": {
                              "hexValue": "37",
                              "id": 224,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1843:1:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_7_by_1",
                                "typeString": "int_const 7"
                              },
                              "value": "7"
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "1831:14:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 226,
                            "name": "tierEight",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 116,
                            "src": "1848:9:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1831:26:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 228,
                        "nodeType": "ExpressionStatement",
                        "src": "1831:26:2"
                      },
                      {
                        "expression": {
                          "id": 229,
                          "name": "tierValues_",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 179,
                          "src": "1874:11:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$8_memory_ptr",
                            "typeString": "uint256[8] memory"
                          }
                        },
                        "functionReturnParameters": 180,
                        "id": 230,
                        "nodeType": "Return",
                        "src": "1867:18:2"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 174,
                    "nodeType": "StructuredDocumentation",
                    "src": "1286:213:2",
                    "text": "Complements the default solidity accessor for `tierValues`.\n Returns all the values in a list rather than requiring an index be\n specified.\n @return tierValues_ The immutable `tierValues`."
                  },
                  "functionSelector": "70230b39",
                  "id": 232,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "tierValues",
                  "nameLocation": "1513:10:2",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 175,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1523:2:2"
                  },
                  "returnParameters": {
                    "id": 180,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 179,
                        "mutability": "mutable",
                        "name": "tierValues_",
                        "nameLocation": "1564:11:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 232,
                        "src": "1546:29:2",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$8_memory_ptr",
                          "typeString": "uint256[8]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 176,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "1546:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 178,
                          "length": {
                            "hexValue": "38",
                            "id": 177,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1554:1:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_8_by_1",
                              "typeString": "int_const 8"
                            },
                            "value": "8"
                          },
                          "nodeType": "ArrayTypeName",
                          "src": "1546:10:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$8_storage_ptr",
                            "typeString": "uint256[8]"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1545:31:2"
                  },
                  "scope": 299,
                  "src": "1504:388:2",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 258,
                    "nodeType": "Block",
                    "src": "2087:86:2",
                    "statements": [
                      {
                        "expression": {
                          "condition": {
                            "commonType": {
                              "typeIdentifier": "t_enum$_Tier_$64",
                              "typeString": "enum ITier.Tier"
                            },
                            "id": 245,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 241,
                              "name": "tier_",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 236,
                              "src": "2104:5:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_Tier_$64",
                                "typeString": "enum ITier.Tier"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">",
                            "rightExpression": {
                              "expression": {
                                "expression": {
                                  "id": 242,
                                  "name": "ITier",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 95,
                                  "src": "2112:5:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_contract$_ITier_$95_$",
                                    "typeString": "type(contract ITier)"
                                  }
                                },
                                "id": 243,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "Tier",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 64,
                                "src": "2112:10:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_enum$_Tier_$64_$",
                                  "typeString": "type(enum ITier.Tier)"
                                }
                              },
                              "id": 244,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberName": "ZERO",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 55,
                              "src": "2112:15:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_Tier_$64",
                                "typeString": "enum ITier.Tier"
                              }
                            },
                            "src": "2104:23:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "falseExpression": {
                            "hexValue": "30",
                            "id": 255,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2165:1:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "id": 256,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "Conditional",
                          "src": "2104:62:2",
                          "trueExpression": {
                            "baseExpression": {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 246,
                                "name": "tierValues",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 232,
                                "src": "2130:10:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$__$returns$_t_array$_t_uint256_$8_memory_ptr_$",
                                  "typeString": "function () view returns (uint256[8] memory)"
                                }
                              },
                              "id": 247,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2130:12:2",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$8_memory_ptr",
                                "typeString": "uint256[8] memory"
                              }
                            },
                            "id": 254,
                            "indexExpression": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 253,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "arguments": [
                                  {
                                    "id": 250,
                                    "name": "tier_",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 236,
                                    "src": "2151:5:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_enum$_Tier_$64",
                                      "typeString": "enum ITier.Tier"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_enum$_Tier_$64",
                                      "typeString": "enum ITier.Tier"
                                    }
                                  ],
                                  "id": 249,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "2143:7:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_uint256_$",
                                    "typeString": "type(uint256)"
                                  },
                                  "typeName": {
                                    "id": 248,
                                    "name": "uint256",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "2143:7:2",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 251,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "2143:14:2",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "-",
                              "rightExpression": {
                                "hexValue": "31",
                                "id": 252,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "2160:1:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_1_by_1",
                                  "typeString": "int_const 1"
                                },
                                "value": "1"
                              },
                              "src": "2143:18:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "2130:32:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 240,
                        "id": 257,
                        "nodeType": "Return",
                        "src": "2097:69:2"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 233,
                    "nodeType": "StructuredDocumentation",
                    "src": "1898:114:2",
                    "text": "Converts a Tier to the minimum value it requires.\n `Tier.ZERO` is always value 0 as it is the fallback."
                  },
                  "id": 259,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "tierToValue",
                  "nameLocation": "2026:11:2",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 237,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 236,
                        "mutability": "mutable",
                        "name": "tier_",
                        "nameLocation": "2049:5:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 259,
                        "src": "2038:16:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Tier_$64",
                          "typeString": "enum ITier.Tier"
                        },
                        "typeName": {
                          "id": 235,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 234,
                            "name": "ITier.Tier",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 64,
                            "src": "2038:10:2"
                          },
                          "referencedDeclaration": 64,
                          "src": "2038:10:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$64",
                            "typeString": "enum ITier.Tier"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2037:18:2"
                  },
                  "returnParameters": {
                    "id": 240,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 239,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 259,
                        "src": "2078:7:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 238,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2078:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2077:9:2"
                  },
                  "scope": 299,
                  "src": "2017:156:2",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 297,
                    "nodeType": "Block",
                    "src": "2313:188:2",
                    "statements": [
                      {
                        "body": {
                          "id": 291,
                          "nodeType": "Block",
                          "src": "2355:107:2",
                          "statements": [
                            {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 283,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 278,
                                  "name": "value_",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 262,
                                  "src": "2373:6:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "<",
                                "rightExpression": {
                                  "baseExpression": {
                                    "arguments": [],
                                    "expression": {
                                      "argumentTypes": [],
                                      "id": 279,
                                      "name": "tierValues",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 232,
                                      "src": "2382:10:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_internal_view$__$returns$_t_array$_t_uint256_$8_memory_ptr_$",
                                        "typeString": "function () view returns (uint256[8] memory)"
                                      }
                                    },
                                    "id": 280,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "2382:12:2",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_uint256_$8_memory_ptr",
                                      "typeString": "uint256[8] memory"
                                    }
                                  },
                                  "id": 282,
                                  "indexExpression": {
                                    "id": 281,
                                    "name": "i",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 269,
                                    "src": "2395:1:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "2382:15:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "2373:24:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 290,
                              "nodeType": "IfStatement",
                              "src": "2369:83:2",
                              "trueBody": {
                                "id": 289,
                                "nodeType": "Block",
                                "src": "2399:53:2",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "id": 286,
                                          "name": "i",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 269,
                                          "src": "2435:1:2",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        ],
                                        "expression": {
                                          "id": 284,
                                          "name": "ITier",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 95,
                                          "src": "2424:5:2",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_type$_t_contract$_ITier_$95_$",
                                            "typeString": "type(contract ITier)"
                                          }
                                        },
                                        "id": 285,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "Tier",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 64,
                                        "src": "2424:10:2",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_enum$_Tier_$64_$",
                                          "typeString": "type(enum ITier.Tier)"
                                        }
                                      },
                                      "id": 287,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "typeConversion",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "2424:13:2",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_enum$_Tier_$64",
                                        "typeString": "enum ITier.Tier"
                                      }
                                    },
                                    "functionReturnParameters": 267,
                                    "id": 288,
                                    "nodeType": "Return",
                                    "src": "2417:20:2"
                                  }
                                ]
                              }
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 274,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 272,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 269,
                            "src": "2343:1:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "hexValue": "38",
                            "id": 273,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2347:1:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_8_by_1",
                              "typeString": "int_const 8"
                            },
                            "value": "8"
                          },
                          "src": "2343:5:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 292,
                        "initializationExpression": {
                          "assignments": [
                            269
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 269,
                              "mutability": "mutable",
                              "name": "i",
                              "nameLocation": "2336:1:2",
                              "nodeType": "VariableDeclaration",
                              "scope": 292,
                              "src": "2328:9:2",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "typeName": {
                                "id": 268,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "2328:7:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "visibility": "internal"
                            }
                          ],
                          "id": 271,
                          "initialValue": {
                            "hexValue": "30",
                            "id": 270,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2340:1:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "2328:13:2"
                        },
                        "loopExpression": {
                          "expression": {
                            "id": 276,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "++",
                            "prefix": false,
                            "src": "2350:3:2",
                            "subExpression": {
                              "id": 275,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 269,
                              "src": "2350:1:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 277,
                          "nodeType": "ExpressionStatement",
                          "src": "2350:3:2"
                        },
                        "nodeType": "ForStatement",
                        "src": "2323:139:2"
                      },
                      {
                        "expression": {
                          "expression": {
                            "expression": {
                              "id": 293,
                              "name": "ITier",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 95,
                              "src": "2478:5:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_ITier_$95_$",
                                "typeString": "type(contract ITier)"
                              }
                            },
                            "id": 294,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "Tier",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 64,
                            "src": "2478:10:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_Tier_$64_$",
                              "typeString": "type(enum ITier.Tier)"
                            }
                          },
                          "id": 295,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "EIGHT",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 63,
                          "src": "2478:16:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$64",
                            "typeString": "enum ITier.Tier"
                          }
                        },
                        "functionReturnParameters": 267,
                        "id": 296,
                        "nodeType": "Return",
                        "src": "2471:23:2"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 260,
                    "nodeType": "StructuredDocumentation",
                    "src": "2179:58:2",
                    "text": "Converts a value to the maximum Tier it qualifies for."
                  },
                  "id": 298,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "valueToTier",
                  "nameLocation": "2251:11:2",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 263,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 262,
                        "mutability": "mutable",
                        "name": "value_",
                        "nameLocation": "2271:6:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 298,
                        "src": "2263:14:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 261,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2263:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2262:16:2"
                  },
                  "returnParameters": {
                    "id": 267,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 266,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 298,
                        "src": "2301:10:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Tier_$64",
                          "typeString": "enum ITier.Tier"
                        },
                        "typeName": {
                          "id": 265,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 264,
                            "name": "ITier.Tier",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 64,
                            "src": "2301:10:2"
                          },
                          "referencedDeclaration": 64,
                          "src": "2301:10:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$64",
                            "typeString": "enum ITier.Tier"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2300:12:2"
                  },
                  "scope": 299,
                  "src": "2242:259:2",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "internal"
                }
              ],
              "scope": 300,
              "src": "531:1972:2",
              "usedErrors": []
            }
          ],
          "src": "33:2470:2"
        },
        "id": 2
      }
    }
  }
}
